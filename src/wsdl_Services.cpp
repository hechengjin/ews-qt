// This file is generated by KDAB's kdwsdl2cpp from Services.wsdl.
// All changes you do to this file will be lost.

#include "wsdl_Services.h"

#include <QtCore/QRegExp>
#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

#include <QDebug>
T__AvailabilityProxyRequestType::T__AvailabilityProxyRequestType( const Type &type )
{
    mType = type;
}

void T__AvailabilityProxyRequestType::setType( Type type )
{
    mType = type;
}

T__AvailabilityProxyRequestType::Type T__AvailabilityProxyRequestType::type() const
{
    return mType;
}

T__AvailabilityProxyRequestType::operator Type() const
{
    return mType;
}

QVariant T__AvailabilityProxyRequestType::serialize() const
{
    switch ( mType ) {
        case T__AvailabilityProxyRequestType::CrossSite:
            return QString::fromLatin1("CrossSite");
        case T__AvailabilityProxyRequestType::CrossForest:
            return QString::fromLatin1("CrossForest");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__AvailabilityProxyRequestType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "CrossSite", T__AvailabilityProxyRequestType::CrossSite },
    { "CrossForest", T__AvailabilityProxyRequestType::CrossForest }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__AvailabilityProxyRequestType'.", qPrintable(str) );
}

T__AvailabilityProxyRequestType::T__AvailabilityProxyRequestType()
    : mType(Type(0))
{
}

T__AvailabilityProxyRequestType::~T__AvailabilityProxyRequestType()
{
}


T__AffectedTaskOccurrencesType::T__AffectedTaskOccurrencesType( const Type &type )
{
    mType = type;
}

void T__AffectedTaskOccurrencesType::setType( Type type )
{
    mType = type;
}

T__AffectedTaskOccurrencesType::Type T__AffectedTaskOccurrencesType::type() const
{
    return mType;
}

T__AffectedTaskOccurrencesType::operator Type() const
{
    return mType;
}

QVariant T__AffectedTaskOccurrencesType::serialize() const
{
    switch ( mType ) {
        case T__AffectedTaskOccurrencesType::AllOccurrences:
            return QString::fromLatin1("AllOccurrences");
        case T__AffectedTaskOccurrencesType::SpecifiedOccurrenceOnly:
            return QString::fromLatin1("SpecifiedOccurrenceOnly");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__AffectedTaskOccurrencesType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "AllOccurrences", T__AffectedTaskOccurrencesType::AllOccurrences },
    { "SpecifiedOccurrenceOnly", T__AffectedTaskOccurrencesType::SpecifiedOccurrenceOnly }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__AffectedTaskOccurrencesType'.", qPrintable(str) );
}

T__AffectedTaskOccurrencesType::T__AffectedTaskOccurrencesType()
    : mType(Type(0))
{
}

T__AffectedTaskOccurrencesType::~T__AffectedTaskOccurrencesType()
{
}


void T__MaxSyncChangesReturnedType::setValue( int value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value) >= 1);
    rangeOk = rangeOk && ((value) <= 512);

    if (!rangeOk)
        qDebug( "Invalid range in T__MaxSyncChangesReturnedType::setValue()" );

    mValue = value;
}

int T__MaxSyncChangesReturnedType::value() const
{
    return mValue;
}

T__MaxSyncChangesReturnedType::T__MaxSyncChangesReturnedType( int value )
{
    setValue(value);
}

T__MaxSyncChangesReturnedType::operator int() const
{
    return mValue;
}

QVariant T__MaxSyncChangesReturnedType::serialize() const
{
    return QVariant::fromValue(mValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:363
}

void T__MaxSyncChangesReturnedType::deserialize( const QVariant& value )
{
    mValue = value.value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:364
}

T__MaxSyncChangesReturnedType::T__MaxSyncChangesReturnedType()
    : mValue(0)
{
}

T__MaxSyncChangesReturnedType::~T__MaxSyncChangesReturnedType()
{
}


T__ItemQueryTraversalType::T__ItemQueryTraversalType( const Type &type )
{
    mType = type;
}

void T__ItemQueryTraversalType::setType( Type type )
{
    mType = type;
}

T__ItemQueryTraversalType::Type T__ItemQueryTraversalType::type() const
{
    return mType;
}

T__ItemQueryTraversalType::operator Type() const
{
    return mType;
}

QVariant T__ItemQueryTraversalType::serialize() const
{
    switch ( mType ) {
        case T__ItemQueryTraversalType::Shallow:
            return QString::fromLatin1("Shallow");
        case T__ItemQueryTraversalType::SoftDeleted:
            return QString::fromLatin1("SoftDeleted");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ItemQueryTraversalType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Shallow", T__ItemQueryTraversalType::Shallow },
    { "SoftDeleted", T__ItemQueryTraversalType::SoftDeleted }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ItemQueryTraversalType'.", qPrintable(str) );
}

T__ItemQueryTraversalType::T__ItemQueryTraversalType()
    : mType(Type(0))
{
}

T__ItemQueryTraversalType::~T__ItemQueryTraversalType()
{
}


T__DeliverMeetingRequestsType::T__DeliverMeetingRequestsType( const Type &type )
{
    mType = type;
}

void T__DeliverMeetingRequestsType::setType( Type type )
{
    mType = type;
}

T__DeliverMeetingRequestsType::Type T__DeliverMeetingRequestsType::type() const
{
    return mType;
}

T__DeliverMeetingRequestsType::operator Type() const
{
    return mType;
}

QVariant T__DeliverMeetingRequestsType::serialize() const
{
    switch ( mType ) {
        case T__DeliverMeetingRequestsType::DelegatesOnly:
            return QString::fromLatin1("DelegatesOnly");
        case T__DeliverMeetingRequestsType::DelegatesAndMe:
            return QString::fromLatin1("DelegatesAndMe");
        case T__DeliverMeetingRequestsType::DelegatesAndSendInformationToMe:
            return QString::fromLatin1("DelegatesAndSendInformationToMe");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DeliverMeetingRequestsType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "DelegatesOnly", T__DeliverMeetingRequestsType::DelegatesOnly },
    { "DelegatesAndMe", T__DeliverMeetingRequestsType::DelegatesAndMe },
    { "DelegatesAndSendInformationToMe", T__DeliverMeetingRequestsType::DelegatesAndSendInformationToMe }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DeliverMeetingRequestsType'.", qPrintable(str) );
}

T__DeliverMeetingRequestsType::T__DeliverMeetingRequestsType()
    : mType(Type(0))
{
}

T__DeliverMeetingRequestsType::~T__DeliverMeetingRequestsType()
{
}


T__ConflictResolutionType::T__ConflictResolutionType( const Type &type )
{
    mType = type;
}

void T__ConflictResolutionType::setType( Type type )
{
    mType = type;
}

T__ConflictResolutionType::Type T__ConflictResolutionType::type() const
{
    return mType;
}

T__ConflictResolutionType::operator Type() const
{
    return mType;
}

QVariant T__ConflictResolutionType::serialize() const
{
    switch ( mType ) {
        case T__ConflictResolutionType::NeverOverwrite:
            return QString::fromLatin1("NeverOverwrite");
        case T__ConflictResolutionType::AutoResolve:
            return QString::fromLatin1("AutoResolve");
        case T__ConflictResolutionType::AlwaysOverwrite:
            return QString::fromLatin1("AlwaysOverwrite");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ConflictResolutionType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "NeverOverwrite", T__ConflictResolutionType::NeverOverwrite },
    { "AutoResolve", T__ConflictResolutionType::AutoResolve },
    { "AlwaysOverwrite", T__ConflictResolutionType::AlwaysOverwrite }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ConflictResolutionType'.", qPrintable(str) );
}

T__ConflictResolutionType::T__ConflictResolutionType()
    : mType(Type(0))
{
}

T__ConflictResolutionType::~T__ConflictResolutionType()
{
}


T__DisposalType::T__DisposalType( const Type &type )
{
    mType = type;
}

void T__DisposalType::setType( Type type )
{
    mType = type;
}

T__DisposalType::Type T__DisposalType::type() const
{
    return mType;
}

T__DisposalType::operator Type() const
{
    return mType;
}

QVariant T__DisposalType::serialize() const
{
    switch ( mType ) {
        case T__DisposalType::HardDelete:
            return QString::fromLatin1("HardDelete");
        case T__DisposalType::SoftDelete:
            return QString::fromLatin1("SoftDelete");
        case T__DisposalType::MoveToDeletedItems:
            return QString::fromLatin1("MoveToDeletedItems");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DisposalType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "HardDelete", T__DisposalType::HardDelete },
    { "SoftDelete", T__DisposalType::SoftDelete },
    { "MoveToDeletedItems", T__DisposalType::MoveToDeletedItems }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DisposalType'.", qPrintable(str) );
}

T__DisposalType::T__DisposalType()
    : mType(Type(0))
{
}

T__DisposalType::~T__DisposalType()
{
}


T__FolderQueryTraversalType::T__FolderQueryTraversalType( const Type &type )
{
    mType = type;
}

void T__FolderQueryTraversalType::setType( Type type )
{
    mType = type;
}

T__FolderQueryTraversalType::Type T__FolderQueryTraversalType::type() const
{
    return mType;
}

T__FolderQueryTraversalType::operator Type() const
{
    return mType;
}

QVariant T__FolderQueryTraversalType::serialize() const
{
    switch ( mType ) {
        case T__FolderQueryTraversalType::Shallow:
            return QString::fromLatin1("Shallow");
        case T__FolderQueryTraversalType::Deep:
            return QString::fromLatin1("Deep");
        case T__FolderQueryTraversalType::SoftDeleted:
            return QString::fromLatin1("SoftDeleted");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__FolderQueryTraversalType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Shallow", T__FolderQueryTraversalType::Shallow },
    { "Deep", T__FolderQueryTraversalType::Deep },
    { "SoftDeleted", T__FolderQueryTraversalType::SoftDeleted }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__FolderQueryTraversalType'.", qPrintable(str) );
}

T__FolderQueryTraversalType::T__FolderQueryTraversalType()
    : mType(Type(0))
{
}

T__FolderQueryTraversalType::~T__FolderQueryTraversalType()
{
}


T__IdFormatType::T__IdFormatType( const Type &type )
{
    mType = type;
}

void T__IdFormatType::setType( Type type )
{
    mType = type;
}

T__IdFormatType::Type T__IdFormatType::type() const
{
    return mType;
}

T__IdFormatType::operator Type() const
{
    return mType;
}

QVariant T__IdFormatType::serialize() const
{
    switch ( mType ) {
        case T__IdFormatType::EwsLegacyId:
            return QString::fromLatin1("EwsLegacyId");
        case T__IdFormatType::EwsId:
            return QString::fromLatin1("EwsId");
        case T__IdFormatType::EntryId:
            return QString::fromLatin1("EntryId");
        case T__IdFormatType::HexEntryId:
            return QString::fromLatin1("HexEntryId");
        case T__IdFormatType::StoreId:
            return QString::fromLatin1("StoreId");
        case T__IdFormatType::OwaId:
            return QString::fromLatin1("OwaId");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__IdFormatType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[6] = {
    { "EwsLegacyId", T__IdFormatType::EwsLegacyId },
    { "EwsId", T__IdFormatType::EwsId },
    { "EntryId", T__IdFormatType::EntryId },
    { "HexEntryId", T__IdFormatType::HexEntryId },
    { "StoreId", T__IdFormatType::StoreId },
    { "OwaId", T__IdFormatType::OwaId }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 6; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__IdFormatType'.", qPrintable(str) );
}

T__IdFormatType::T__IdFormatType()
    : mType(Type(0))
{
}

T__IdFormatType::~T__IdFormatType()
{
}


T__ExternalAudience::T__ExternalAudience( const Type &type )
{
    mType = type;
}

void T__ExternalAudience::setType( Type type )
{
    mType = type;
}

T__ExternalAudience::Type T__ExternalAudience::type() const
{
    return mType;
}

T__ExternalAudience::operator Type() const
{
    return mType;
}

QVariant T__ExternalAudience::serialize() const
{
    switch ( mType ) {
        case T__ExternalAudience::None:
            return QString::fromLatin1("None");
        case T__ExternalAudience::Known:
            return QString::fromLatin1("Known");
        case T__ExternalAudience::All:
            return QString::fromLatin1("All");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ExternalAudience::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "None", T__ExternalAudience::None },
    { "Known", T__ExternalAudience::Known },
    { "All", T__ExternalAudience::All }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ExternalAudience'.", qPrintable(str) );
}

T__ExternalAudience::T__ExternalAudience()
    : mType(Type(0))
{
}

T__ExternalAudience::~T__ExternalAudience()
{
}


T__CalendarItemUpdateOperationType::T__CalendarItemUpdateOperationType( const Type &type )
{
    mType = type;
}

void T__CalendarItemUpdateOperationType::setType( Type type )
{
    mType = type;
}

T__CalendarItemUpdateOperationType::Type T__CalendarItemUpdateOperationType::type() const
{
    return mType;
}

T__CalendarItemUpdateOperationType::operator Type() const
{
    return mType;
}

QVariant T__CalendarItemUpdateOperationType::serialize() const
{
    switch ( mType ) {
        case T__CalendarItemUpdateOperationType::SendToNone:
            return QString::fromLatin1("SendToNone");
        case T__CalendarItemUpdateOperationType::SendOnlyToAll:
            return QString::fromLatin1("SendOnlyToAll");
        case T__CalendarItemUpdateOperationType::SendOnlyToChanged:
            return QString::fromLatin1("SendOnlyToChanged");
        case T__CalendarItemUpdateOperationType::SendToAllAndSaveCopy:
            return QString::fromLatin1("SendToAllAndSaveCopy");
        case T__CalendarItemUpdateOperationType::SendToChangedAndSaveCopy:
            return QString::fromLatin1("SendToChangedAndSaveCopy");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__CalendarItemUpdateOperationType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "SendToNone", T__CalendarItemUpdateOperationType::SendToNone },
    { "SendOnlyToAll", T__CalendarItemUpdateOperationType::SendOnlyToAll },
    { "SendOnlyToChanged", T__CalendarItemUpdateOperationType::SendOnlyToChanged },
    { "SendToAllAndSaveCopy", T__CalendarItemUpdateOperationType::SendToAllAndSaveCopy },
    { "SendToChangedAndSaveCopy", T__CalendarItemUpdateOperationType::SendToChangedAndSaveCopy }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__CalendarItemUpdateOperationType'.", qPrintable(str) );
}

T__CalendarItemUpdateOperationType::T__CalendarItemUpdateOperationType()
    : mType(Type(0))
{
}

T__CalendarItemUpdateOperationType::~T__CalendarItemUpdateOperationType()
{
}


T__ResolveNamesSearchScopeType::T__ResolveNamesSearchScopeType( const Type &type )
{
    mType = type;
}

void T__ResolveNamesSearchScopeType::setType( Type type )
{
    mType = type;
}

T__ResolveNamesSearchScopeType::Type T__ResolveNamesSearchScopeType::type() const
{
    return mType;
}

T__ResolveNamesSearchScopeType::operator Type() const
{
    return mType;
}

QVariant T__ResolveNamesSearchScopeType::serialize() const
{
    switch ( mType ) {
        case T__ResolveNamesSearchScopeType::ActiveDirectory:
            return QString::fromLatin1("ActiveDirectory");
        case T__ResolveNamesSearchScopeType::ActiveDirectoryContacts:
            return QString::fromLatin1("ActiveDirectoryContacts");
        case T__ResolveNamesSearchScopeType::Contacts:
            return QString::fromLatin1("Contacts");
        case T__ResolveNamesSearchScopeType::ContactsActiveDirectory:
            return QString::fromLatin1("ContactsActiveDirectory");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ResolveNamesSearchScopeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "ActiveDirectory", T__ResolveNamesSearchScopeType::ActiveDirectory },
    { "ActiveDirectoryContacts", T__ResolveNamesSearchScopeType::ActiveDirectoryContacts },
    { "Contacts", T__ResolveNamesSearchScopeType::Contacts },
    { "ContactsActiveDirectory", T__ResolveNamesSearchScopeType::ContactsActiveDirectory }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ResolveNamesSearchScopeType'.", qPrintable(str) );
}

T__ResolveNamesSearchScopeType::T__ResolveNamesSearchScopeType()
    : mType(Type(0))
{
}

T__ResolveNamesSearchScopeType::~T__ResolveNamesSearchScopeType()
{
}


T__ExchangeVersionType::T__ExchangeVersionType( const Type &type )
{
    mType = type;
}

void T__ExchangeVersionType::setType( Type type )
{
    mType = type;
}

T__ExchangeVersionType::Type T__ExchangeVersionType::type() const
{
    return mType;
}

T__ExchangeVersionType::operator Type() const
{
    return mType;
}

QVariant T__ExchangeVersionType::serialize() const
{
    switch ( mType ) {
        case T__ExchangeVersionType::Exchange2007:
            return QString::fromLatin1("Exchange2007");
        case T__ExchangeVersionType::Exchange2007_SP1:
            return QString::fromLatin1("Exchange2007_SP1");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ExchangeVersionType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Exchange2007", T__ExchangeVersionType::Exchange2007 },
    { "Exchange2007_SP1", T__ExchangeVersionType::Exchange2007_SP1 }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ExchangeVersionType'.", qPrintable(str) );
}

T__ExchangeVersionType::T__ExchangeVersionType()
    : mType(Type(0))
{
}

T__ExchangeVersionType::~T__ExchangeVersionType()
{
}


T__MessageDispositionType::T__MessageDispositionType( const Type &type )
{
    mType = type;
}

void T__MessageDispositionType::setType( Type type )
{
    mType = type;
}

T__MessageDispositionType::Type T__MessageDispositionType::type() const
{
    return mType;
}

T__MessageDispositionType::operator Type() const
{
    return mType;
}

QVariant T__MessageDispositionType::serialize() const
{
    switch ( mType ) {
        case T__MessageDispositionType::SaveOnly:
            return QString::fromLatin1("SaveOnly");
        case T__MessageDispositionType::SendOnly:
            return QString::fromLatin1("SendOnly");
        case T__MessageDispositionType::SendAndSaveCopy:
            return QString::fromLatin1("SendAndSaveCopy");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__MessageDispositionType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "SaveOnly", T__MessageDispositionType::SaveOnly },
    { "SendOnly", T__MessageDispositionType::SendOnly },
    { "SendAndSaveCopy", T__MessageDispositionType::SendAndSaveCopy }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__MessageDispositionType'.", qPrintable(str) );
}

T__MessageDispositionType::T__MessageDispositionType()
    : mType(Type(0))
{
}

T__MessageDispositionType::~T__MessageDispositionType()
{
}


T__CalendarItemCreateOrDeleteOperationType::T__CalendarItemCreateOrDeleteOperationType( const Type &type )
{
    mType = type;
}

void T__CalendarItemCreateOrDeleteOperationType::setType( Type type )
{
    mType = type;
}

T__CalendarItemCreateOrDeleteOperationType::Type T__CalendarItemCreateOrDeleteOperationType::type() const
{
    return mType;
}

T__CalendarItemCreateOrDeleteOperationType::operator Type() const
{
    return mType;
}

QVariant T__CalendarItemCreateOrDeleteOperationType::serialize() const
{
    switch ( mType ) {
        case T__CalendarItemCreateOrDeleteOperationType::SendToNone:
            return QString::fromLatin1("SendToNone");
        case T__CalendarItemCreateOrDeleteOperationType::SendOnlyToAll:
            return QString::fromLatin1("SendOnlyToAll");
        case T__CalendarItemCreateOrDeleteOperationType::SendToAllAndSaveCopy:
            return QString::fromLatin1("SendToAllAndSaveCopy");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__CalendarItemCreateOrDeleteOperationType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "SendToNone", T__CalendarItemCreateOrDeleteOperationType::SendToNone },
    { "SendOnlyToAll", T__CalendarItemCreateOrDeleteOperationType::SendOnlyToAll },
    { "SendToAllAndSaveCopy", T__CalendarItemCreateOrDeleteOperationType::SendToAllAndSaveCopy }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__CalendarItemCreateOrDeleteOperationType'.", qPrintable(str) );
}

T__CalendarItemCreateOrDeleteOperationType::T__CalendarItemCreateOrDeleteOperationType()
    : mType(Type(0))
{
}

T__CalendarItemCreateOrDeleteOperationType::~T__CalendarItemCreateOrDeleteOperationType()
{
}


void T__NonEmptyStringType::setValue( const QString& value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value).length() >= 1);

    if (!rangeOk)
        qDebug( "Invalid range in T__NonEmptyStringType::setValue()" );

    mValue = value;
}

QString T__NonEmptyStringType::value() const
{
    return mValue;
}

T__NonEmptyStringType::T__NonEmptyStringType( const QString& value )
{
    setValue(value);
}

T__NonEmptyStringType::operator QString() const
{
    return mValue;
}

QVariant T__NonEmptyStringType::serialize() const
{
    return QVariant::fromValue(mValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:363
}

void T__NonEmptyStringType::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:364
}

T__NonEmptyStringType::T__NonEmptyStringType()
{
}

T__NonEmptyStringType::~T__NonEmptyStringType()
{
}


T__DefaultShapeNamesType::T__DefaultShapeNamesType( const Type &type )
{
    mType = type;
}

void T__DefaultShapeNamesType::setType( Type type )
{
    mType = type;
}

T__DefaultShapeNamesType::Type T__DefaultShapeNamesType::type() const
{
    return mType;
}

T__DefaultShapeNamesType::operator Type() const
{
    return mType;
}

QVariant T__DefaultShapeNamesType::serialize() const
{
    switch ( mType ) {
        case T__DefaultShapeNamesType::IdOnly:
            return QString::fromLatin1("IdOnly");
        case T__DefaultShapeNamesType::Default:
            return QString::fromLatin1("Default");
        case T__DefaultShapeNamesType::AllProperties:
            return QString::fromLatin1("AllProperties");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DefaultShapeNamesType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "IdOnly", T__DefaultShapeNamesType::IdOnly },
    { "Default", T__DefaultShapeNamesType::Default },
    { "AllProperties", T__DefaultShapeNamesType::AllProperties }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DefaultShapeNamesType'.", qPrintable(str) );
}

T__DefaultShapeNamesType::T__DefaultShapeNamesType()
    : mType(Type(0))
{
}

T__DefaultShapeNamesType::~T__DefaultShapeNamesType()
{
}


void T__SubscriptionStatusFrequencyType::setValue( int value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value) >= 1);
    rangeOk = rangeOk && ((value) <= 1440);

    if (!rangeOk)
        qDebug( "Invalid range in T__SubscriptionStatusFrequencyType::setValue()" );

    mValue = value;
}

int T__SubscriptionStatusFrequencyType::value() const
{
    return mValue;
}

T__SubscriptionStatusFrequencyType::T__SubscriptionStatusFrequencyType( int value )
{
    setValue(value);
}

T__SubscriptionStatusFrequencyType::operator int() const
{
    return mValue;
}

QVariant T__SubscriptionStatusFrequencyType::serialize() const
{
    return QVariant::fromValue(mValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:363
}

void T__SubscriptionStatusFrequencyType::deserialize( const QVariant& value )
{
    mValue = value.value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:364
}

T__SubscriptionStatusFrequencyType::T__SubscriptionStatusFrequencyType()
    : mValue(0)
{
}

T__SubscriptionStatusFrequencyType::~T__SubscriptionStatusFrequencyType()
{
}


T__OofState::T__OofState( const Type &type )
{
    mType = type;
}

void T__OofState::setType( Type type )
{
    mType = type;
}

T__OofState::Type T__OofState::type() const
{
    return mType;
}

T__OofState::operator Type() const
{
    return mType;
}

QVariant T__OofState::serialize() const
{
    switch ( mType ) {
        case T__OofState::Disabled:
            return QString::fromLatin1("Disabled");
        case T__OofState::Enabled:
            return QString::fromLatin1("Enabled");
        case T__OofState::Scheduled:
            return QString::fromLatin1("Scheduled");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__OofState::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Disabled", T__OofState::Disabled },
    { "Enabled", T__OofState::Enabled },
    { "Scheduled", T__OofState::Scheduled }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__OofState'.", qPrintable(str) );
}

T__OofState::T__OofState()
    : mType(Type(0))
{
}

T__OofState::~T__OofState()
{
}


void T__FreeBusyViewType::setEntries( const QList<T__FreeBusyViewTypeListItem>& entries )
{
    mEntries = entries;
}

QList<T__FreeBusyViewTypeListItem> T__FreeBusyViewType::entries() const
{
    return mEntries;
}

QVariant T__FreeBusyViewType::serialize() const
{
    QString str;
    for ( int i = 0; i < mEntries.count(); ++i ) {
        if (!str.isEmpty())
            str += QLatin1Char(' ');
        str += mEntries.at(i).serialize().toString();
    }
    return str;
}

void T__FreeBusyViewType::deserialize( const QVariant& value )
{
    const QStringList list = value.toString().split(QLatin1Char(' '));
    for (int i = 0; i < list.count(); ++i) {
        T__FreeBusyViewTypeListItem tmp;
        tmp.deserialize(list.at(i));
        mEntries.append(tmp);
    }
}

T__FreeBusyViewType::T__FreeBusyViewType()
{
}

T__FreeBusyViewType::~T__FreeBusyViewType()
{
}


T__BodyTypeResponseType::T__BodyTypeResponseType( const Type &type )
{
    mType = type;
}

void T__BodyTypeResponseType::setType( Type type )
{
    mType = type;
}

T__BodyTypeResponseType::Type T__BodyTypeResponseType::type() const
{
    return mType;
}

T__BodyTypeResponseType::operator Type() const
{
    return mType;
}

QVariant T__BodyTypeResponseType::serialize() const
{
    switch ( mType ) {
        case T__BodyTypeResponseType::Best:
            return QString::fromLatin1("Best");
        case T__BodyTypeResponseType::HTML:
            return QString::fromLatin1("HTML");
        case T__BodyTypeResponseType::Text:
            return QString::fromLatin1("Text");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__BodyTypeResponseType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Best", T__BodyTypeResponseType::Best },
    { "HTML", T__BodyTypeResponseType::HTML },
    { "Text", T__BodyTypeResponseType::Text }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__BodyTypeResponseType'.", qPrintable(str) );
}

T__BodyTypeResponseType::T__BodyTypeResponseType()
    : mType(Type(0))
{
}

T__BodyTypeResponseType::~T__BodyTypeResponseType()
{
}


T__SuggestionQuality::T__SuggestionQuality( const Type &type )
{
    mType = type;
}

void T__SuggestionQuality::setType( Type type )
{
    mType = type;
}

T__SuggestionQuality::Type T__SuggestionQuality::type() const
{
    return mType;
}

T__SuggestionQuality::operator Type() const
{
    return mType;
}

QVariant T__SuggestionQuality::serialize() const
{
    switch ( mType ) {
        case T__SuggestionQuality::Excellent:
            return QString::fromLatin1("Excellent");
        case T__SuggestionQuality::Good:
            return QString::fromLatin1("Good");
        case T__SuggestionQuality::Fair:
            return QString::fromLatin1("Fair");
        case T__SuggestionQuality::Poor:
            return QString::fromLatin1("Poor");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__SuggestionQuality::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "Excellent", T__SuggestionQuality::Excellent },
    { "Good", T__SuggestionQuality::Good },
    { "Fair", T__SuggestionQuality::Fair },
    { "Poor", T__SuggestionQuality::Poor }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__SuggestionQuality'.", qPrintable(str) );
}

T__SuggestionQuality::T__SuggestionQuality()
    : mType(Type(0))
{
}

T__SuggestionQuality::~T__SuggestionQuality()
{
}


T__ResponseClassType::T__ResponseClassType( const Type &type )
{
    mType = type;
}

void T__ResponseClassType::setType( Type type )
{
    mType = type;
}

T__ResponseClassType::Type T__ResponseClassType::type() const
{
    return mType;
}

T__ResponseClassType::operator Type() const
{
    return mType;
}

QVariant T__ResponseClassType::serialize() const
{
    switch ( mType ) {
        case T__ResponseClassType::Success:
            return QString::fromLatin1("Success");
        case T__ResponseClassType::Warning:
            return QString::fromLatin1("Warning");
        case T__ResponseClassType::Error:
            return QString::fromLatin1("Error");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ResponseClassType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Success", T__ResponseClassType::Success },
    { "Warning", T__ResponseClassType::Warning },
    { "Error", T__ResponseClassType::Error }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ResponseClassType'.", qPrintable(str) );
}

T__ResponseClassType::T__ResponseClassType()
    : mType(Type(0))
{
}

T__ResponseClassType::~T__ResponseClassType()
{
}


TNS__ResponseCodeType::TNS__ResponseCodeType( const Type &type )
{
    mType = type;
}

void TNS__ResponseCodeType::setType( Type type )
{
    mType = type;
}

TNS__ResponseCodeType::Type TNS__ResponseCodeType::type() const
{
    return mType;
}

TNS__ResponseCodeType::operator Type() const
{
    return mType;
}

QVariant TNS__ResponseCodeType::serialize() const
{
    switch ( mType ) {
        case TNS__ResponseCodeType::NoError:
            return QString::fromLatin1("NoError");
        case TNS__ResponseCodeType::ErrorAccessDenied:
            return QString::fromLatin1("ErrorAccessDenied");
        case TNS__ResponseCodeType::ErrorAccountDisabled:
            return QString::fromLatin1("ErrorAccountDisabled");
        case TNS__ResponseCodeType::ErrorAddDelegatesFailed:
            return QString::fromLatin1("ErrorAddDelegatesFailed");
        case TNS__ResponseCodeType::ErrorAddressSpaceNotFound:
            return QString::fromLatin1("ErrorAddressSpaceNotFound");
        case TNS__ResponseCodeType::ErrorADOperation:
            return QString::fromLatin1("ErrorADOperation");
        case TNS__ResponseCodeType::ErrorADSessionFilter:
            return QString::fromLatin1("ErrorADSessionFilter");
        case TNS__ResponseCodeType::ErrorADUnavailable:
            return QString::fromLatin1("ErrorADUnavailable");
        case TNS__ResponseCodeType::ErrorAutoDiscoverFailed:
            return QString::fromLatin1("ErrorAutoDiscoverFailed");
        case TNS__ResponseCodeType::ErrorAffectedTaskOccurrencesRequired:
            return QString::fromLatin1("ErrorAffectedTaskOccurrencesRequired");
        case TNS__ResponseCodeType::ErrorAttachmentSizeLimitExceeded:
            return QString::fromLatin1("ErrorAttachmentSizeLimitExceeded");
        case TNS__ResponseCodeType::ErrorAvailabilityConfigNotFound:
            return QString::fromLatin1("ErrorAvailabilityConfigNotFound");
        case TNS__ResponseCodeType::ErrorBatchProcessingStopped:
            return QString::fromLatin1("ErrorBatchProcessingStopped");
        case TNS__ResponseCodeType::ErrorCalendarCannotMoveOrCopyOccurrence:
            return QString::fromLatin1("ErrorCalendarCannotMoveOrCopyOccurrence");
        case TNS__ResponseCodeType::ErrorCalendarCannotUpdateDeletedItem:
            return QString::fromLatin1("ErrorCalendarCannotUpdateDeletedItem");
        case TNS__ResponseCodeType::ErrorCalendarCannotUseIdForOccurrenceId:
            return QString::fromLatin1("ErrorCalendarCannotUseIdForOccurrenceId");
        case TNS__ResponseCodeType::ErrorCalendarCannotUseIdForRecurringMasterId:
            return QString::fromLatin1("ErrorCalendarCannotUseIdForRecurringMasterId");
        case TNS__ResponseCodeType::ErrorCalendarDurationIsTooLong:
            return QString::fromLatin1("ErrorCalendarDurationIsTooLong");
        case TNS__ResponseCodeType::ErrorCalendarEndDateIsEarlierThanStartDate:
            return QString::fromLatin1("ErrorCalendarEndDateIsEarlierThanStartDate");
        case TNS__ResponseCodeType::ErrorCalendarFolderIsInvalidForCalendarView:
            return QString::fromLatin1("ErrorCalendarFolderIsInvalidForCalendarView");
        case TNS__ResponseCodeType::ErrorCalendarInvalidAttributeValue:
            return QString::fromLatin1("ErrorCalendarInvalidAttributeValue");
        case TNS__ResponseCodeType::ErrorCalendarInvalidDayForTimeChangePattern:
            return QString::fromLatin1("ErrorCalendarInvalidDayForTimeChangePattern");
        case TNS__ResponseCodeType::ErrorCalendarInvalidDayForWeeklyRecurrence:
            return QString::fromLatin1("ErrorCalendarInvalidDayForWeeklyRecurrence");
        case TNS__ResponseCodeType::ErrorCalendarInvalidPropertyState:
            return QString::fromLatin1("ErrorCalendarInvalidPropertyState");
        case TNS__ResponseCodeType::ErrorCalendarInvalidPropertyValue:
            return QString::fromLatin1("ErrorCalendarInvalidPropertyValue");
        case TNS__ResponseCodeType::ErrorCalendarInvalidRecurrence:
            return QString::fromLatin1("ErrorCalendarInvalidRecurrence");
        case TNS__ResponseCodeType::ErrorCalendarInvalidTimeZone:
            return QString::fromLatin1("ErrorCalendarInvalidTimeZone");
        case TNS__ResponseCodeType::ErrorCalendarIsDelegatedForAccept:
            return QString::fromLatin1("ErrorCalendarIsDelegatedForAccept");
        case TNS__ResponseCodeType::ErrorCalendarIsDelegatedForDecline:
            return QString::fromLatin1("ErrorCalendarIsDelegatedForDecline");
        case TNS__ResponseCodeType::ErrorCalendarIsDelegatedForRemove:
            return QString::fromLatin1("ErrorCalendarIsDelegatedForRemove");
        case TNS__ResponseCodeType::ErrorCalendarIsDelegatedForTentative:
            return QString::fromLatin1("ErrorCalendarIsDelegatedForTentative");
        case TNS__ResponseCodeType::ErrorCalendarIsNotOrganizer:
            return QString::fromLatin1("ErrorCalendarIsNotOrganizer");
        case TNS__ResponseCodeType::ErrorCalendarIsOrganizerForAccept:
            return QString::fromLatin1("ErrorCalendarIsOrganizerForAccept");
        case TNS__ResponseCodeType::ErrorCalendarIsOrganizerForDecline:
            return QString::fromLatin1("ErrorCalendarIsOrganizerForDecline");
        case TNS__ResponseCodeType::ErrorCalendarIsOrganizerForRemove:
            return QString::fromLatin1("ErrorCalendarIsOrganizerForRemove");
        case TNS__ResponseCodeType::ErrorCalendarIsOrganizerForTentative:
            return QString::fromLatin1("ErrorCalendarIsOrganizerForTentative");
        case TNS__ResponseCodeType::ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange:
            return QString::fromLatin1("ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange");
        case TNS__ResponseCodeType::ErrorCalendarOccurrenceIsDeletedFromRecurrence:
            return QString::fromLatin1("ErrorCalendarOccurrenceIsDeletedFromRecurrence");
        case TNS__ResponseCodeType::ErrorCalendarOutOfRange:
            return QString::fromLatin1("ErrorCalendarOutOfRange");
        case TNS__ResponseCodeType::ErrorCalendarMeetingRequestIsOutOfDate:
            return QString::fromLatin1("ErrorCalendarMeetingRequestIsOutOfDate");
        case TNS__ResponseCodeType::ErrorCalendarViewRangeTooBig:
            return QString::fromLatin1("ErrorCalendarViewRangeTooBig");
        case TNS__ResponseCodeType::ErrorCannotCreateCalendarItemInNonCalendarFolder:
            return QString::fromLatin1("ErrorCannotCreateCalendarItemInNonCalendarFolder");
        case TNS__ResponseCodeType::ErrorCannotCreateContactInNonContactFolder:
            return QString::fromLatin1("ErrorCannotCreateContactInNonContactFolder");
        case TNS__ResponseCodeType::ErrorCannotCreatePostItemInNonMailFolder:
            return QString::fromLatin1("ErrorCannotCreatePostItemInNonMailFolder");
        case TNS__ResponseCodeType::ErrorCannotCreateTaskInNonTaskFolder:
            return QString::fromLatin1("ErrorCannotCreateTaskInNonTaskFolder");
        case TNS__ResponseCodeType::ErrorCannotDeleteObject:
            return QString::fromLatin1("ErrorCannotDeleteObject");
        case TNS__ResponseCodeType::ErrorCannotOpenFileAttachment:
            return QString::fromLatin1("ErrorCannotOpenFileAttachment");
        case TNS__ResponseCodeType::ErrorCannotDeleteTaskOccurrence:
            return QString::fromLatin1("ErrorCannotDeleteTaskOccurrence");
        case TNS__ResponseCodeType::ErrorCannotSetCalendarPermissionOnNonCalendarFolder:
            return QString::fromLatin1("ErrorCannotSetCalendarPermissionOnNonCalendarFolder");
        case TNS__ResponseCodeType::ErrorCannotSetNonCalendarPermissionOnCalendarFolder:
            return QString::fromLatin1("ErrorCannotSetNonCalendarPermissionOnCalendarFolder");
        case TNS__ResponseCodeType::ErrorCannotSetPermissionUnknownEntries:
            return QString::fromLatin1("ErrorCannotSetPermissionUnknownEntries");
        case TNS__ResponseCodeType::ErrorCannotUseFolderIdForItemId:
            return QString::fromLatin1("ErrorCannotUseFolderIdForItemId");
        case TNS__ResponseCodeType::ErrorCannotUseItemIdForFolderId:
            return QString::fromLatin1("ErrorCannotUseItemIdForFolderId");
        case TNS__ResponseCodeType::ErrorChangeKeyRequired:
            return QString::fromLatin1("ErrorChangeKeyRequired");
        case TNS__ResponseCodeType::ErrorChangeKeyRequiredForWriteOperations:
            return QString::fromLatin1("ErrorChangeKeyRequiredForWriteOperations");
        case TNS__ResponseCodeType::ErrorConnectionFailed:
            return QString::fromLatin1("ErrorConnectionFailed");
        case TNS__ResponseCodeType::ErrorContentConversionFailed:
            return QString::fromLatin1("ErrorContentConversionFailed");
        case TNS__ResponseCodeType::ErrorCorruptData:
            return QString::fromLatin1("ErrorCorruptData");
        case TNS__ResponseCodeType::ErrorCreateItemAccessDenied:
            return QString::fromLatin1("ErrorCreateItemAccessDenied");
        case TNS__ResponseCodeType::ErrorCreateManagedFolderPartialCompletion:
            return QString::fromLatin1("ErrorCreateManagedFolderPartialCompletion");
        case TNS__ResponseCodeType::ErrorCreateSubfolderAccessDenied:
            return QString::fromLatin1("ErrorCreateSubfolderAccessDenied");
        case TNS__ResponseCodeType::ErrorCrossMailboxMoveCopy:
            return QString::fromLatin1("ErrorCrossMailboxMoveCopy");
        case TNS__ResponseCodeType::ErrorDataSizeLimitExceeded:
            return QString::fromLatin1("ErrorDataSizeLimitExceeded");
        case TNS__ResponseCodeType::ErrorDataSourceOperation:
            return QString::fromLatin1("ErrorDataSourceOperation");
        default:
        break;
    }

    switch ( mType ) {
        case TNS__ResponseCodeType::ErrorDelegateAlreadyExists:
            return QString::fromLatin1("ErrorDelegateAlreadyExists");
        case TNS__ResponseCodeType::ErrorDelegateCannotAddOwner:
            return QString::fromLatin1("ErrorDelegateCannotAddOwner");
        case TNS__ResponseCodeType::ErrorDelegateMissingConfiguration:
            return QString::fromLatin1("ErrorDelegateMissingConfiguration");
        case TNS__ResponseCodeType::ErrorDelegateNoUser:
            return QString::fromLatin1("ErrorDelegateNoUser");
        case TNS__ResponseCodeType::ErrorDelegateValidationFailed:
            return QString::fromLatin1("ErrorDelegateValidationFailed");
        case TNS__ResponseCodeType::ErrorDeleteDistinguishedFolder:
            return QString::fromLatin1("ErrorDeleteDistinguishedFolder");
        case TNS__ResponseCodeType::ErrorDeleteItemsFailed:
            return QString::fromLatin1("ErrorDeleteItemsFailed");
        case TNS__ResponseCodeType::ErrorDistinguishedUserNotSupported:
            return QString::fromLatin1("ErrorDistinguishedUserNotSupported");
        case TNS__ResponseCodeType::ErrorDuplicateInputFolderNames:
            return QString::fromLatin1("ErrorDuplicateInputFolderNames");
        case TNS__ResponseCodeType::ErrorDuplicateUserIdsSpecified:
            return QString::fromLatin1("ErrorDuplicateUserIdsSpecified");
        case TNS__ResponseCodeType::ErrorEmailAddressMismatch:
            return QString::fromLatin1("ErrorEmailAddressMismatch");
        case TNS__ResponseCodeType::ErrorEventNotFound:
            return QString::fromLatin1("ErrorEventNotFound");
        case TNS__ResponseCodeType::ErrorExpiredSubscription:
            return QString::fromLatin1("ErrorExpiredSubscription");
        case TNS__ResponseCodeType::ErrorFolderCorrupt:
            return QString::fromLatin1("ErrorFolderCorrupt");
        case TNS__ResponseCodeType::ErrorFolderNotFound:
            return QString::fromLatin1("ErrorFolderNotFound");
        case TNS__ResponseCodeType::ErrorFolderPropertRequestFailed:
            return QString::fromLatin1("ErrorFolderPropertRequestFailed");
        case TNS__ResponseCodeType::ErrorFolderSave:
            return QString::fromLatin1("ErrorFolderSave");
        case TNS__ResponseCodeType::ErrorFolderSaveFailed:
            return QString::fromLatin1("ErrorFolderSaveFailed");
        case TNS__ResponseCodeType::ErrorFolderSavePropertyError:
            return QString::fromLatin1("ErrorFolderSavePropertyError");
        case TNS__ResponseCodeType::ErrorFolderExists:
            return QString::fromLatin1("ErrorFolderExists");
        case TNS__ResponseCodeType::ErrorFreeBusyGenerationFailed:
            return QString::fromLatin1("ErrorFreeBusyGenerationFailed");
        case TNS__ResponseCodeType::ErrorGetServerSecurityDescriptorFailed:
            return QString::fromLatin1("ErrorGetServerSecurityDescriptorFailed");
        case TNS__ResponseCodeType::ErrorImpersonateUserDenied:
            return QString::fromLatin1("ErrorImpersonateUserDenied");
        case TNS__ResponseCodeType::ErrorImpersonationDenied:
            return QString::fromLatin1("ErrorImpersonationDenied");
        case TNS__ResponseCodeType::ErrorImpersonationFailed:
            return QString::fromLatin1("ErrorImpersonationFailed");
        case TNS__ResponseCodeType::ErrorIncorrectSchemaVersion:
            return QString::fromLatin1("ErrorIncorrectSchemaVersion");
        case TNS__ResponseCodeType::ErrorIncorrectUpdatePropertyCount:
            return QString::fromLatin1("ErrorIncorrectUpdatePropertyCount");
        case TNS__ResponseCodeType::ErrorIndividualMailboxLimitReached:
            return QString::fromLatin1("ErrorIndividualMailboxLimitReached");
        case TNS__ResponseCodeType::ErrorInsufficientResources:
            return QString::fromLatin1("ErrorInsufficientResources");
        case TNS__ResponseCodeType::ErrorInternalServerError:
            return QString::fromLatin1("ErrorInternalServerError");
        case TNS__ResponseCodeType::ErrorInternalServerTransientError:
            return QString::fromLatin1("ErrorInternalServerTransientError");
        case TNS__ResponseCodeType::ErrorInvalidAccessLevel:
            return QString::fromLatin1("ErrorInvalidAccessLevel");
        case TNS__ResponseCodeType::ErrorInvalidAttachmentId:
            return QString::fromLatin1("ErrorInvalidAttachmentId");
        case TNS__ResponseCodeType::ErrorInvalidAttachmentSubfilter:
            return QString::fromLatin1("ErrorInvalidAttachmentSubfilter");
        case TNS__ResponseCodeType::ErrorInvalidAttachmentSubfilterTextFilter:
            return QString::fromLatin1("ErrorInvalidAttachmentSubfilterTextFilter");
        case TNS__ResponseCodeType::ErrorInvalidAuthorizationContext:
            return QString::fromLatin1("ErrorInvalidAuthorizationContext");
        case TNS__ResponseCodeType::ErrorInvalidChangeKey:
            return QString::fromLatin1("ErrorInvalidChangeKey");
        case TNS__ResponseCodeType::ErrorInvalidClientSecurityContext:
            return QString::fromLatin1("ErrorInvalidClientSecurityContext");
        case TNS__ResponseCodeType::ErrorInvalidCompleteDate:
            return QString::fromLatin1("ErrorInvalidCompleteDate");
        case TNS__ResponseCodeType::ErrorInvalidCrossForestCredentials:
            return QString::fromLatin1("ErrorInvalidCrossForestCredentials");
        case TNS__ResponseCodeType::ErrorInvalidDelegatePermission:
            return QString::fromLatin1("ErrorInvalidDelegatePermission");
        case TNS__ResponseCodeType::ErrorInvalidDelegateUserId:
            return QString::fromLatin1("ErrorInvalidDelegateUserId");
        case TNS__ResponseCodeType::ErrorInvalidExcludesRestriction:
            return QString::fromLatin1("ErrorInvalidExcludesRestriction");
        case TNS__ResponseCodeType::ErrorInvalidExpressionTypeForSubFilter:
            return QString::fromLatin1("ErrorInvalidExpressionTypeForSubFilter");
        case TNS__ResponseCodeType::ErrorInvalidExtendedProperty:
            return QString::fromLatin1("ErrorInvalidExtendedProperty");
        case TNS__ResponseCodeType::ErrorInvalidExtendedPropertyValue:
            return QString::fromLatin1("ErrorInvalidExtendedPropertyValue");
        case TNS__ResponseCodeType::ErrorInvalidFolderId:
            return QString::fromLatin1("ErrorInvalidFolderId");
        case TNS__ResponseCodeType::ErrorInvalidFolderTypeForOperation:
            return QString::fromLatin1("ErrorInvalidFolderTypeForOperation");
        case TNS__ResponseCodeType::ErrorInvalidFractionalPagingParameters:
            return QString::fromLatin1("ErrorInvalidFractionalPagingParameters");
        case TNS__ResponseCodeType::ErrorInvalidFreeBusyViewType:
            return QString::fromLatin1("ErrorInvalidFreeBusyViewType");
        case TNS__ResponseCodeType::ErrorInvalidId:
            return QString::fromLatin1("ErrorInvalidId");
        case TNS__ResponseCodeType::ErrorInvalidIdEmpty:
            return QString::fromLatin1("ErrorInvalidIdEmpty");
        case TNS__ResponseCodeType::ErrorInvalidIdMalformed:
            return QString::fromLatin1("ErrorInvalidIdMalformed");
        case TNS__ResponseCodeType::ErrorInvalidIdMalformedEwsLegacyIdFormat:
            return QString::fromLatin1("ErrorInvalidIdMalformedEwsLegacyIdFormat");
        case TNS__ResponseCodeType::ErrorInvalidIdMonikerTooLong:
            return QString::fromLatin1("ErrorInvalidIdMonikerTooLong");
        case TNS__ResponseCodeType::ErrorInvalidIdNotAnItemAttachmentId:
            return QString::fromLatin1("ErrorInvalidIdNotAnItemAttachmentId");
        case TNS__ResponseCodeType::ErrorInvalidIdReturnedByResolveNames:
            return QString::fromLatin1("ErrorInvalidIdReturnedByResolveNames");
        case TNS__ResponseCodeType::ErrorInvalidIdStoreObjectIdTooLong:
            return QString::fromLatin1("ErrorInvalidIdStoreObjectIdTooLong");
        case TNS__ResponseCodeType::ErrorInvalidIdTooManyAttachmentLevels:
            return QString::fromLatin1("ErrorInvalidIdTooManyAttachmentLevels");
        case TNS__ResponseCodeType::ErrorInvalidIdXml:
            return QString::fromLatin1("ErrorInvalidIdXml");
        case TNS__ResponseCodeType::ErrorInvalidIndexedPagingParameters:
            return QString::fromLatin1("ErrorInvalidIndexedPagingParameters");
        case TNS__ResponseCodeType::ErrorInvalidInternetHeaderChildNodes:
            return QString::fromLatin1("ErrorInvalidInternetHeaderChildNodes");
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationCreateItemAttachment:
            return QString::fromLatin1("ErrorInvalidItemForOperationCreateItemAttachment");
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationCreateItem:
            return QString::fromLatin1("ErrorInvalidItemForOperationCreateItem");
        default:
        break;
    }

    switch ( mType ) {
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationAcceptItem:
            return QString::fromLatin1("ErrorInvalidItemForOperationAcceptItem");
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationDeclineItem:
            return QString::fromLatin1("ErrorInvalidItemForOperationDeclineItem");
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationCancelItem:
            return QString::fromLatin1("ErrorInvalidItemForOperationCancelItem");
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationExpandDL:
            return QString::fromLatin1("ErrorInvalidItemForOperationExpandDL");
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationRemoveItem:
            return QString::fromLatin1("ErrorInvalidItemForOperationRemoveItem");
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationSendItem:
            return QString::fromLatin1("ErrorInvalidItemForOperationSendItem");
        case TNS__ResponseCodeType::ErrorInvalidItemForOperationTentative:
            return QString::fromLatin1("ErrorInvalidItemForOperationTentative");
        case TNS__ResponseCodeType::ErrorInvalidManagedFolderProperty:
            return QString::fromLatin1("ErrorInvalidManagedFolderProperty");
        case TNS__ResponseCodeType::ErrorInvalidManagedFolderQuota:
            return QString::fromLatin1("ErrorInvalidManagedFolderQuota");
        case TNS__ResponseCodeType::ErrorInvalidManagedFolderSize:
            return QString::fromLatin1("ErrorInvalidManagedFolderSize");
        case TNS__ResponseCodeType::ErrorInvalidMergedFreeBusyInterval:
            return QString::fromLatin1("ErrorInvalidMergedFreeBusyInterval");
        case TNS__ResponseCodeType::ErrorInvalidNameForNameResolution:
            return QString::fromLatin1("ErrorInvalidNameForNameResolution");
        case TNS__ResponseCodeType::ErrorInvalidOperation:
            return QString::fromLatin1("ErrorInvalidOperation");
        case TNS__ResponseCodeType::ErrorInvalidNetworkServiceContext:
            return QString::fromLatin1("ErrorInvalidNetworkServiceContext");
        case TNS__ResponseCodeType::ErrorInvalidOofParameter:
            return QString::fromLatin1("ErrorInvalidOofParameter");
        case TNS__ResponseCodeType::ErrorInvalidPagingMaxRows:
            return QString::fromLatin1("ErrorInvalidPagingMaxRows");
        case TNS__ResponseCodeType::ErrorInvalidParentFolder:
            return QString::fromLatin1("ErrorInvalidParentFolder");
        case TNS__ResponseCodeType::ErrorInvalidPercentCompleteValue:
            return QString::fromLatin1("ErrorInvalidPercentCompleteValue");
        case TNS__ResponseCodeType::ErrorInvalidPermissionSettings:
            return QString::fromLatin1("ErrorInvalidPermissionSettings");
        case TNS__ResponseCodeType::ErrorInvalidUserInfo:
            return QString::fromLatin1("ErrorInvalidUserInfo");
        case TNS__ResponseCodeType::ErrorInvalidPropertyAppend:
            return QString::fromLatin1("ErrorInvalidPropertyAppend");
        case TNS__ResponseCodeType::ErrorInvalidPropertyDelete:
            return QString::fromLatin1("ErrorInvalidPropertyDelete");
        case TNS__ResponseCodeType::ErrorInvalidPropertyForExists:
            return QString::fromLatin1("ErrorInvalidPropertyForExists");
        case TNS__ResponseCodeType::ErrorInvalidPropertyForOperation:
            return QString::fromLatin1("ErrorInvalidPropertyForOperation");
        case TNS__ResponseCodeType::ErrorInvalidPropertyRequest:
            return QString::fromLatin1("ErrorInvalidPropertyRequest");
        case TNS__ResponseCodeType::ErrorInvalidPropertySet:
            return QString::fromLatin1("ErrorInvalidPropertySet");
        case TNS__ResponseCodeType::ErrorInvalidPropertyUpdateSentMessage:
            return QString::fromLatin1("ErrorInvalidPropertyUpdateSentMessage");
        case TNS__ResponseCodeType::ErrorInvalidProxySecurityContext:
            return QString::fromLatin1("ErrorInvalidProxySecurityContext");
        case TNS__ResponseCodeType::ErrorInvalidPullSubscriptionId:
            return QString::fromLatin1("ErrorInvalidPullSubscriptionId");
        case TNS__ResponseCodeType::ErrorInvalidPushSubscriptionUrl:
            return QString::fromLatin1("ErrorInvalidPushSubscriptionUrl");
        case TNS__ResponseCodeType::ErrorInvalidRecipients:
            return QString::fromLatin1("ErrorInvalidRecipients");
        case TNS__ResponseCodeType::ErrorInvalidRecipientSubfilter:
            return QString::fromLatin1("ErrorInvalidRecipientSubfilter");
        case TNS__ResponseCodeType::ErrorInvalidRecipientSubfilterComparison:
            return QString::fromLatin1("ErrorInvalidRecipientSubfilterComparison");
        case TNS__ResponseCodeType::ErrorInvalidRecipientSubfilterOrder:
            return QString::fromLatin1("ErrorInvalidRecipientSubfilterOrder");
        case TNS__ResponseCodeType::ErrorInvalidRecipientSubfilterTextFilter:
            return QString::fromLatin1("ErrorInvalidRecipientSubfilterTextFilter");
        case TNS__ResponseCodeType::ErrorInvalidReferenceItem:
            return QString::fromLatin1("ErrorInvalidReferenceItem");
        case TNS__ResponseCodeType::ErrorInvalidRequest:
            return QString::fromLatin1("ErrorInvalidRequest");
        case TNS__ResponseCodeType::ErrorInvalidRestriction:
            return QString::fromLatin1("ErrorInvalidRestriction");
        case TNS__ResponseCodeType::ErrorInvalidRoutingType:
            return QString::fromLatin1("ErrorInvalidRoutingType");
        case TNS__ResponseCodeType::ErrorInvalidScheduledOofDuration:
            return QString::fromLatin1("ErrorInvalidScheduledOofDuration");
        case TNS__ResponseCodeType::ErrorInvalidSecurityDescriptor:
            return QString::fromLatin1("ErrorInvalidSecurityDescriptor");
        case TNS__ResponseCodeType::ErrorInvalidSendItemSaveSettings:
            return QString::fromLatin1("ErrorInvalidSendItemSaveSettings");
        case TNS__ResponseCodeType::ErrorInvalidSerializedAccessToken:
            return QString::fromLatin1("ErrorInvalidSerializedAccessToken");
        case TNS__ResponseCodeType::ErrorInvalidServerVersion:
            return QString::fromLatin1("ErrorInvalidServerVersion");
        case TNS__ResponseCodeType::ErrorInvalidSid:
            return QString::fromLatin1("ErrorInvalidSid");
        case TNS__ResponseCodeType::ErrorInvalidSmtpAddress:
            return QString::fromLatin1("ErrorInvalidSmtpAddress");
        case TNS__ResponseCodeType::ErrorInvalidSubfilterType:
            return QString::fromLatin1("ErrorInvalidSubfilterType");
        case TNS__ResponseCodeType::ErrorInvalidSubfilterTypeNotAttendeeType:
            return QString::fromLatin1("ErrorInvalidSubfilterTypeNotAttendeeType");
        case TNS__ResponseCodeType::ErrorInvalidSubfilterTypeNotRecipientType:
            return QString::fromLatin1("ErrorInvalidSubfilterTypeNotRecipientType");
        case TNS__ResponseCodeType::ErrorInvalidSubscription:
            return QString::fromLatin1("ErrorInvalidSubscription");
        case TNS__ResponseCodeType::ErrorInvalidSubscriptionRequest:
            return QString::fromLatin1("ErrorInvalidSubscriptionRequest");
        case TNS__ResponseCodeType::ErrorInvalidSyncStateData:
            return QString::fromLatin1("ErrorInvalidSyncStateData");
        case TNS__ResponseCodeType::ErrorInvalidTimeInterval:
            return QString::fromLatin1("ErrorInvalidTimeInterval");
        case TNS__ResponseCodeType::ErrorInvalidUserOofSettings:
            return QString::fromLatin1("ErrorInvalidUserOofSettings");
        case TNS__ResponseCodeType::ErrorInvalidUserPrincipalName:
            return QString::fromLatin1("ErrorInvalidUserPrincipalName");
        case TNS__ResponseCodeType::ErrorInvalidUserSid:
            return QString::fromLatin1("ErrorInvalidUserSid");
        case TNS__ResponseCodeType::ErrorInvalidUserSidMissingUPN:
            return QString::fromLatin1("ErrorInvalidUserSidMissingUPN");
        case TNS__ResponseCodeType::ErrorInvalidValueForProperty:
            return QString::fromLatin1("ErrorInvalidValueForProperty");
        case TNS__ResponseCodeType::ErrorInvalidWatermark:
            return QString::fromLatin1("ErrorInvalidWatermark");
        case TNS__ResponseCodeType::ErrorIrresolvableConflict:
            return QString::fromLatin1("ErrorIrresolvableConflict");
        case TNS__ResponseCodeType::ErrorItemCorrupt:
            return QString::fromLatin1("ErrorItemCorrupt");
        case TNS__ResponseCodeType::ErrorItemNotFound:
            return QString::fromLatin1("ErrorItemNotFound");
        case TNS__ResponseCodeType::ErrorItemPropertyRequestFailed:
            return QString::fromLatin1("ErrorItemPropertyRequestFailed");
        case TNS__ResponseCodeType::ErrorItemSave:
            return QString::fromLatin1("ErrorItemSave");
        default:
        break;
    }

    switch ( mType ) {
        case TNS__ResponseCodeType::ErrorItemSavePropertyError:
            return QString::fromLatin1("ErrorItemSavePropertyError");
        case TNS__ResponseCodeType::ErrorLegacyMailboxFreeBusyViewTypeNotMerged:
            return QString::fromLatin1("ErrorLegacyMailboxFreeBusyViewTypeNotMerged");
        case TNS__ResponseCodeType::ErrorLocalServerObjectNotFound:
            return QString::fromLatin1("ErrorLocalServerObjectNotFound");
        case TNS__ResponseCodeType::ErrorLogonAsNetworkServiceFailed:
            return QString::fromLatin1("ErrorLogonAsNetworkServiceFailed");
        case TNS__ResponseCodeType::ErrorMailboxConfiguration:
            return QString::fromLatin1("ErrorMailboxConfiguration");
        case TNS__ResponseCodeType::ErrorMailboxDataArrayEmpty:
            return QString::fromLatin1("ErrorMailboxDataArrayEmpty");
        case TNS__ResponseCodeType::ErrorMailboxDataArrayTooBig:
            return QString::fromLatin1("ErrorMailboxDataArrayTooBig");
        case TNS__ResponseCodeType::ErrorMailboxLogonFailed:
            return QString::fromLatin1("ErrorMailboxLogonFailed");
        case TNS__ResponseCodeType::ErrorMailboxMoveInProgress:
            return QString::fromLatin1("ErrorMailboxMoveInProgress");
        case TNS__ResponseCodeType::ErrorMailboxStoreUnavailable:
            return QString::fromLatin1("ErrorMailboxStoreUnavailable");
        case TNS__ResponseCodeType::ErrorMailRecipientNotFound:
            return QString::fromLatin1("ErrorMailRecipientNotFound");
        case TNS__ResponseCodeType::ErrorManagedFolderAlreadyExists:
            return QString::fromLatin1("ErrorManagedFolderAlreadyExists");
        case TNS__ResponseCodeType::ErrorManagedFolderNotFound:
            return QString::fromLatin1("ErrorManagedFolderNotFound");
        case TNS__ResponseCodeType::ErrorManagedFoldersRootFailure:
            return QString::fromLatin1("ErrorManagedFoldersRootFailure");
        case TNS__ResponseCodeType::ErrorMeetingSuggestionGenerationFailed:
            return QString::fromLatin1("ErrorMeetingSuggestionGenerationFailed");
        case TNS__ResponseCodeType::ErrorMessageDispositionRequired:
            return QString::fromLatin1("ErrorMessageDispositionRequired");
        case TNS__ResponseCodeType::ErrorMessageSizeExceeded:
            return QString::fromLatin1("ErrorMessageSizeExceeded");
        case TNS__ResponseCodeType::ErrorMimeContentConversionFailed:
            return QString::fromLatin1("ErrorMimeContentConversionFailed");
        case TNS__ResponseCodeType::ErrorMimeContentInvalid:
            return QString::fromLatin1("ErrorMimeContentInvalid");
        case TNS__ResponseCodeType::ErrorMimeContentInvalidBase64String:
            return QString::fromLatin1("ErrorMimeContentInvalidBase64String");
        case TNS__ResponseCodeType::ErrorMissingArgument:
            return QString::fromLatin1("ErrorMissingArgument");
        case TNS__ResponseCodeType::ErrorMissingEmailAddress:
            return QString::fromLatin1("ErrorMissingEmailAddress");
        case TNS__ResponseCodeType::ErrorMissingEmailAddressForManagedFolder:
            return QString::fromLatin1("ErrorMissingEmailAddressForManagedFolder");
        case TNS__ResponseCodeType::ErrorMissingInformationEmailAddress:
            return QString::fromLatin1("ErrorMissingInformationEmailAddress");
        case TNS__ResponseCodeType::ErrorMissingInformationReferenceItemId:
            return QString::fromLatin1("ErrorMissingInformationReferenceItemId");
        case TNS__ResponseCodeType::ErrorMissingItemForCreateItemAttachment:
            return QString::fromLatin1("ErrorMissingItemForCreateItemAttachment");
        case TNS__ResponseCodeType::ErrorMissingManagedFolderId:
            return QString::fromLatin1("ErrorMissingManagedFolderId");
        case TNS__ResponseCodeType::ErrorMissingRecipients:
            return QString::fromLatin1("ErrorMissingRecipients");
        case TNS__ResponseCodeType::ErrorMissingUserIdInformation:
            return QString::fromLatin1("ErrorMissingUserIdInformation");
        case TNS__ResponseCodeType::ErrorMoreThanOneAccessModeSpecified:
            return QString::fromLatin1("ErrorMoreThanOneAccessModeSpecified");
        case TNS__ResponseCodeType::ErrorMoveCopyFailed:
            return QString::fromLatin1("ErrorMoveCopyFailed");
        case TNS__ResponseCodeType::ErrorMoveDistinguishedFolder:
            return QString::fromLatin1("ErrorMoveDistinguishedFolder");
        case TNS__ResponseCodeType::ErrorNameResolutionMultipleResults:
            return QString::fromLatin1("ErrorNameResolutionMultipleResults");
        case TNS__ResponseCodeType::ErrorNameResolutionNoMailbox:
            return QString::fromLatin1("ErrorNameResolutionNoMailbox");
        case TNS__ResponseCodeType::ErrorNameResolutionNoResults:
            return QString::fromLatin1("ErrorNameResolutionNoResults");
        case TNS__ResponseCodeType::ErrorNoApplicableProxyCASServersAvailable:
            return QString::fromLatin1("ErrorNoApplicableProxyCASServersAvailable");
        case TNS__ResponseCodeType::ErrorNoCalendar:
            return QString::fromLatin1("ErrorNoCalendar");
        case TNS__ResponseCodeType::ErrorNoDestinationCASDueToKerberosRequirements:
            return QString::fromLatin1("ErrorNoDestinationCASDueToKerberosRequirements");
        case TNS__ResponseCodeType::ErrorNoDestinationCASDueToSSLRequirements:
            return QString::fromLatin1("ErrorNoDestinationCASDueToSSLRequirements");
        case TNS__ResponseCodeType::ErrorNoDestinationCASDueToVersionMismatch:
            return QString::fromLatin1("ErrorNoDestinationCASDueToVersionMismatch");
        case TNS__ResponseCodeType::ErrorNoFolderClassOverride:
            return QString::fromLatin1("ErrorNoFolderClassOverride");
        case TNS__ResponseCodeType::ErrorNoFreeBusyAccess:
            return QString::fromLatin1("ErrorNoFreeBusyAccess");
        case TNS__ResponseCodeType::ErrorNonExistentMailbox:
            return QString::fromLatin1("ErrorNonExistentMailbox");
        case TNS__ResponseCodeType::ErrorNonPrimarySmtpAddress:
            return QString::fromLatin1("ErrorNonPrimarySmtpAddress");
        case TNS__ResponseCodeType::ErrorNoPropertyTagForCustomProperties:
            return QString::fromLatin1("ErrorNoPropertyTagForCustomProperties");
        case TNS__ResponseCodeType::ErrorNoPublicFolderReplicaAvailable:
            return QString::fromLatin1("ErrorNoPublicFolderReplicaAvailable");
        case TNS__ResponseCodeType::ErrorNoRespondingCASInDestinationSite:
            return QString::fromLatin1("ErrorNoRespondingCASInDestinationSite");
        case TNS__ResponseCodeType::ErrorNotDelegate:
            return QString::fromLatin1("ErrorNotDelegate");
        case TNS__ResponseCodeType::ErrorNotEnoughMemory:
            return QString::fromLatin1("ErrorNotEnoughMemory");
        case TNS__ResponseCodeType::ErrorObjectTypeChanged:
            return QString::fromLatin1("ErrorObjectTypeChanged");
        case TNS__ResponseCodeType::ErrorOccurrenceCrossingBoundary:
            return QString::fromLatin1("ErrorOccurrenceCrossingBoundary");
        case TNS__ResponseCodeType::ErrorOccurrenceTimeSpanTooBig:
            return QString::fromLatin1("ErrorOccurrenceTimeSpanTooBig");
        case TNS__ResponseCodeType::ErrorOperationNotAllowedWithPublicFolderRoot:
            return QString::fromLatin1("ErrorOperationNotAllowedWithPublicFolderRoot");
        case TNS__ResponseCodeType::ErrorParentFolderIdRequired:
            return QString::fromLatin1("ErrorParentFolderIdRequired");
        case TNS__ResponseCodeType::ErrorParentFolderNotFound:
            return QString::fromLatin1("ErrorParentFolderNotFound");
        case TNS__ResponseCodeType::ErrorPasswordChangeRequired:
            return QString::fromLatin1("ErrorPasswordChangeRequired");
        case TNS__ResponseCodeType::ErrorPasswordExpired:
            return QString::fromLatin1("ErrorPasswordExpired");
        case TNS__ResponseCodeType::ErrorPropertyUpdate:
            return QString::fromLatin1("ErrorPropertyUpdate");
        case TNS__ResponseCodeType::ErrorPropertyValidationFailure:
            return QString::fromLatin1("ErrorPropertyValidationFailure");
        case TNS__ResponseCodeType::ErrorProxiedSubscriptionCallFailure:
            return QString::fromLatin1("ErrorProxiedSubscriptionCallFailure");
        case TNS__ResponseCodeType::ErrorProxyCallFailed:
            return QString::fromLatin1("ErrorProxyCallFailed");
        case TNS__ResponseCodeType::ErrorProxyGroupSidLimitExceeded:
            return QString::fromLatin1("ErrorProxyGroupSidLimitExceeded");
        case TNS__ResponseCodeType::ErrorProxyRequestNotAllowed:
            return QString::fromLatin1("ErrorProxyRequestNotAllowed");
        case TNS__ResponseCodeType::ErrorProxyRequestProcessingFailed:
            return QString::fromLatin1("ErrorProxyRequestProcessingFailed");
        default:
        break;
    }

    switch ( mType ) {
        case TNS__ResponseCodeType::ErrorProxyServiceDiscoveryFailed:
            return QString::fromLatin1("ErrorProxyServiceDiscoveryFailed");
        case TNS__ResponseCodeType::ErrorProxyTokenExpired:
            return QString::fromLatin1("ErrorProxyTokenExpired");
        case TNS__ResponseCodeType::ErrorPublicFolderRequestProcessingFailed:
            return QString::fromLatin1("ErrorPublicFolderRequestProcessingFailed");
        case TNS__ResponseCodeType::ErrorPublicFolderServerNotFound:
            return QString::fromLatin1("ErrorPublicFolderServerNotFound");
        case TNS__ResponseCodeType::ErrorQueryFilterTooLong:
            return QString::fromLatin1("ErrorQueryFilterTooLong");
        case TNS__ResponseCodeType::ErrorQuotaExceeded:
            return QString::fromLatin1("ErrorQuotaExceeded");
        case TNS__ResponseCodeType::ErrorReadEventsFailed:
            return QString::fromLatin1("ErrorReadEventsFailed");
        case TNS__ResponseCodeType::ErrorReadReceiptNotPending:
            return QString::fromLatin1("ErrorReadReceiptNotPending");
        case TNS__ResponseCodeType::ErrorRecurrenceEndDateTooBig:
            return QString::fromLatin1("ErrorRecurrenceEndDateTooBig");
        case TNS__ResponseCodeType::ErrorRecurrenceHasNoOccurrence:
            return QString::fromLatin1("ErrorRecurrenceHasNoOccurrence");
        case TNS__ResponseCodeType::ErrorRemoveDelegatesFailed:
            return QString::fromLatin1("ErrorRemoveDelegatesFailed");
        case TNS__ResponseCodeType::ErrorRequestAborted:
            return QString::fromLatin1("ErrorRequestAborted");
        case TNS__ResponseCodeType::ErrorRequestStreamTooBig:
            return QString::fromLatin1("ErrorRequestStreamTooBig");
        case TNS__ResponseCodeType::ErrorRequiredPropertyMissing:
            return QString::fromLatin1("ErrorRequiredPropertyMissing");
        case TNS__ResponseCodeType::ErrorResolveNamesInvalidFolderType:
            return QString::fromLatin1("ErrorResolveNamesInvalidFolderType");
        case TNS__ResponseCodeType::ErrorResolveNamesOnlyOneContactsFolderAllowed:
            return QString::fromLatin1("ErrorResolveNamesOnlyOneContactsFolderAllowed");
        case TNS__ResponseCodeType::ErrorResponseSchemaValidation:
            return QString::fromLatin1("ErrorResponseSchemaValidation");
        case TNS__ResponseCodeType::ErrorRestrictionTooLong:
            return QString::fromLatin1("ErrorRestrictionTooLong");
        case TNS__ResponseCodeType::ErrorRestrictionTooComplex:
            return QString::fromLatin1("ErrorRestrictionTooComplex");
        case TNS__ResponseCodeType::ErrorResultSetTooBig:
            return QString::fromLatin1("ErrorResultSetTooBig");
        case TNS__ResponseCodeType::ErrorInvalidExchangeImpersonationHeaderData:
            return QString::fromLatin1("ErrorInvalidExchangeImpersonationHeaderData");
        case TNS__ResponseCodeType::ErrorSavedItemFolderNotFound:
            return QString::fromLatin1("ErrorSavedItemFolderNotFound");
        case TNS__ResponseCodeType::ErrorSchemaValidation:
            return QString::fromLatin1("ErrorSchemaValidation");
        case TNS__ResponseCodeType::ErrorSearchFolderNotInitialized:
            return QString::fromLatin1("ErrorSearchFolderNotInitialized");
        case TNS__ResponseCodeType::ErrorSendAsDenied:
            return QString::fromLatin1("ErrorSendAsDenied");
        case TNS__ResponseCodeType::ErrorSendMeetingCancellationsRequired:
            return QString::fromLatin1("ErrorSendMeetingCancellationsRequired");
        case TNS__ResponseCodeType::ErrorSendMeetingInvitationsOrCancellationsRequired:
            return QString::fromLatin1("ErrorSendMeetingInvitationsOrCancellationsRequired");
        case TNS__ResponseCodeType::ErrorSendMeetingInvitationsRequired:
            return QString::fromLatin1("ErrorSendMeetingInvitationsRequired");
        case TNS__ResponseCodeType::ErrorSentMeetingRequestUpdate:
            return QString::fromLatin1("ErrorSentMeetingRequestUpdate");
        case TNS__ResponseCodeType::ErrorSentTaskRequestUpdate:
            return QString::fromLatin1("ErrorSentTaskRequestUpdate");
        case TNS__ResponseCodeType::ErrorServerBusy:
            return QString::fromLatin1("ErrorServerBusy");
        case TNS__ResponseCodeType::ErrorServiceDiscoveryFailed:
            return QString::fromLatin1("ErrorServiceDiscoveryFailed");
        case TNS__ResponseCodeType::ErrorStaleObject:
            return QString::fromLatin1("ErrorStaleObject");
        case TNS__ResponseCodeType::ErrorSubscriptionAccessDenied:
            return QString::fromLatin1("ErrorSubscriptionAccessDenied");
        case TNS__ResponseCodeType::ErrorSubscriptionDelegateAccessNotSupported:
            return QString::fromLatin1("ErrorSubscriptionDelegateAccessNotSupported");
        case TNS__ResponseCodeType::ErrorSubscriptionNotFound:
            return QString::fromLatin1("ErrorSubscriptionNotFound");
        case TNS__ResponseCodeType::ErrorSyncFolderNotFound:
            return QString::fromLatin1("ErrorSyncFolderNotFound");
        case TNS__ResponseCodeType::ErrorTimeIntervalTooBig:
            return QString::fromLatin1("ErrorTimeIntervalTooBig");
        case TNS__ResponseCodeType::ErrorTimeoutExpired:
            return QString::fromLatin1("ErrorTimeoutExpired");
        case TNS__ResponseCodeType::ErrorTimeZone:
            return QString::fromLatin1("ErrorTimeZone");
        case TNS__ResponseCodeType::ErrorToFolderNotFound:
            return QString::fromLatin1("ErrorToFolderNotFound");
        case TNS__ResponseCodeType::ErrorTokenSerializationDenied:
            return QString::fromLatin1("ErrorTokenSerializationDenied");
        case TNS__ResponseCodeType::ErrorUpdatePropertyMismatch:
            return QString::fromLatin1("ErrorUpdatePropertyMismatch");
        case TNS__ResponseCodeType::ErrorUnableToGetUserOofSettings:
            return QString::fromLatin1("ErrorUnableToGetUserOofSettings");
        case TNS__ResponseCodeType::ErrorUnsupportedSubFilter:
            return QString::fromLatin1("ErrorUnsupportedSubFilter");
        case TNS__ResponseCodeType::ErrorUnsupportedCulture:
            return QString::fromLatin1("ErrorUnsupportedCulture");
        case TNS__ResponseCodeType::ErrorUnsupportedMapiPropertyType:
            return QString::fromLatin1("ErrorUnsupportedMapiPropertyType");
        case TNS__ResponseCodeType::ErrorUnsupportedMimeConversion:
            return QString::fromLatin1("ErrorUnsupportedMimeConversion");
        case TNS__ResponseCodeType::ErrorUnsupportedPathForQuery:
            return QString::fromLatin1("ErrorUnsupportedPathForQuery");
        case TNS__ResponseCodeType::ErrorUnsupportedPathForSortGroup:
            return QString::fromLatin1("ErrorUnsupportedPathForSortGroup");
        case TNS__ResponseCodeType::ErrorUnsupportedPropertyDefinition:
            return QString::fromLatin1("ErrorUnsupportedPropertyDefinition");
        case TNS__ResponseCodeType::ErrorUnsupportedQueryFilter:
            return QString::fromLatin1("ErrorUnsupportedQueryFilter");
        case TNS__ResponseCodeType::ErrorUnsupportedRecurrence:
            return QString::fromLatin1("ErrorUnsupportedRecurrence");
        case TNS__ResponseCodeType::ErrorUnsupportedTypeForConversion:
            return QString::fromLatin1("ErrorUnsupportedTypeForConversion");
        case TNS__ResponseCodeType::ErrorUpdateDelegatesFailed:
            return QString::fromLatin1("ErrorUpdateDelegatesFailed");
        case TNS__ResponseCodeType::ErrorVoiceMailNotImplemented:
            return QString::fromLatin1("ErrorVoiceMailNotImplemented");
        case TNS__ResponseCodeType::ErrorVirusDetected:
            return QString::fromLatin1("ErrorVirusDetected");
        case TNS__ResponseCodeType::ErrorVirusMessageDeleted:
            return QString::fromLatin1("ErrorVirusMessageDeleted");
        case TNS__ResponseCodeType::ErrorWebRequestInInvalidState:
            return QString::fromLatin1("ErrorWebRequestInInvalidState");
        case TNS__ResponseCodeType::ErrorWin32InteropError:
            return QString::fromLatin1("ErrorWin32InteropError");
        case TNS__ResponseCodeType::ErrorWorkingHoursSaveFailed:
            return QString::fromLatin1("ErrorWorkingHoursSaveFailed");
        case TNS__ResponseCodeType::ErrorWorkingHoursXmlMalformed:
            return QString::fromLatin1("ErrorWorkingHoursXmlMalformed");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void TNS__ResponseCodeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[318] = {
    { "NoError", TNS__ResponseCodeType::NoError },
    { "ErrorAccessDenied", TNS__ResponseCodeType::ErrorAccessDenied },
    { "ErrorAccountDisabled", TNS__ResponseCodeType::ErrorAccountDisabled },
    { "ErrorAddDelegatesFailed", TNS__ResponseCodeType::ErrorAddDelegatesFailed },
    { "ErrorAddressSpaceNotFound", TNS__ResponseCodeType::ErrorAddressSpaceNotFound },
    { "ErrorADOperation", TNS__ResponseCodeType::ErrorADOperation },
    { "ErrorADSessionFilter", TNS__ResponseCodeType::ErrorADSessionFilter },
    { "ErrorADUnavailable", TNS__ResponseCodeType::ErrorADUnavailable },
    { "ErrorAutoDiscoverFailed", TNS__ResponseCodeType::ErrorAutoDiscoverFailed },
    { "ErrorAffectedTaskOccurrencesRequired", TNS__ResponseCodeType::ErrorAffectedTaskOccurrencesRequired },
    { "ErrorAttachmentSizeLimitExceeded", TNS__ResponseCodeType::ErrorAttachmentSizeLimitExceeded },
    { "ErrorAvailabilityConfigNotFound", TNS__ResponseCodeType::ErrorAvailabilityConfigNotFound },
    { "ErrorBatchProcessingStopped", TNS__ResponseCodeType::ErrorBatchProcessingStopped },
    { "ErrorCalendarCannotMoveOrCopyOccurrence", TNS__ResponseCodeType::ErrorCalendarCannotMoveOrCopyOccurrence },
    { "ErrorCalendarCannotUpdateDeletedItem", TNS__ResponseCodeType::ErrorCalendarCannotUpdateDeletedItem },
    { "ErrorCalendarCannotUseIdForOccurrenceId", TNS__ResponseCodeType::ErrorCalendarCannotUseIdForOccurrenceId },
    { "ErrorCalendarCannotUseIdForRecurringMasterId", TNS__ResponseCodeType::ErrorCalendarCannotUseIdForRecurringMasterId },
    { "ErrorCalendarDurationIsTooLong", TNS__ResponseCodeType::ErrorCalendarDurationIsTooLong },
    { "ErrorCalendarEndDateIsEarlierThanStartDate", TNS__ResponseCodeType::ErrorCalendarEndDateIsEarlierThanStartDate },
    { "ErrorCalendarFolderIsInvalidForCalendarView", TNS__ResponseCodeType::ErrorCalendarFolderIsInvalidForCalendarView },
    { "ErrorCalendarInvalidAttributeValue", TNS__ResponseCodeType::ErrorCalendarInvalidAttributeValue },
    { "ErrorCalendarInvalidDayForTimeChangePattern", TNS__ResponseCodeType::ErrorCalendarInvalidDayForTimeChangePattern },
    { "ErrorCalendarInvalidDayForWeeklyRecurrence", TNS__ResponseCodeType::ErrorCalendarInvalidDayForWeeklyRecurrence },
    { "ErrorCalendarInvalidPropertyState", TNS__ResponseCodeType::ErrorCalendarInvalidPropertyState },
    { "ErrorCalendarInvalidPropertyValue", TNS__ResponseCodeType::ErrorCalendarInvalidPropertyValue },
    { "ErrorCalendarInvalidRecurrence", TNS__ResponseCodeType::ErrorCalendarInvalidRecurrence },
    { "ErrorCalendarInvalidTimeZone", TNS__ResponseCodeType::ErrorCalendarInvalidTimeZone },
    { "ErrorCalendarIsDelegatedForAccept", TNS__ResponseCodeType::ErrorCalendarIsDelegatedForAccept },
    { "ErrorCalendarIsDelegatedForDecline", TNS__ResponseCodeType::ErrorCalendarIsDelegatedForDecline },
    { "ErrorCalendarIsDelegatedForRemove", TNS__ResponseCodeType::ErrorCalendarIsDelegatedForRemove },
    { "ErrorCalendarIsDelegatedForTentative", TNS__ResponseCodeType::ErrorCalendarIsDelegatedForTentative },
    { "ErrorCalendarIsNotOrganizer", TNS__ResponseCodeType::ErrorCalendarIsNotOrganizer },
    { "ErrorCalendarIsOrganizerForAccept", TNS__ResponseCodeType::ErrorCalendarIsOrganizerForAccept },
    { "ErrorCalendarIsOrganizerForDecline", TNS__ResponseCodeType::ErrorCalendarIsOrganizerForDecline },
    { "ErrorCalendarIsOrganizerForRemove", TNS__ResponseCodeType::ErrorCalendarIsOrganizerForRemove },
    { "ErrorCalendarIsOrganizerForTentative", TNS__ResponseCodeType::ErrorCalendarIsOrganizerForTentative },
    { "ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange", TNS__ResponseCodeType::ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange },
    { "ErrorCalendarOccurrenceIsDeletedFromRecurrence", TNS__ResponseCodeType::ErrorCalendarOccurrenceIsDeletedFromRecurrence },
    { "ErrorCalendarOutOfRange", TNS__ResponseCodeType::ErrorCalendarOutOfRange },
    { "ErrorCalendarMeetingRequestIsOutOfDate", TNS__ResponseCodeType::ErrorCalendarMeetingRequestIsOutOfDate },
    { "ErrorCalendarViewRangeTooBig", TNS__ResponseCodeType::ErrorCalendarViewRangeTooBig },
    { "ErrorCannotCreateCalendarItemInNonCalendarFolder", TNS__ResponseCodeType::ErrorCannotCreateCalendarItemInNonCalendarFolder },
    { "ErrorCannotCreateContactInNonContactFolder", TNS__ResponseCodeType::ErrorCannotCreateContactInNonContactFolder },
    { "ErrorCannotCreatePostItemInNonMailFolder", TNS__ResponseCodeType::ErrorCannotCreatePostItemInNonMailFolder },
    { "ErrorCannotCreateTaskInNonTaskFolder", TNS__ResponseCodeType::ErrorCannotCreateTaskInNonTaskFolder },
    { "ErrorCannotDeleteObject", TNS__ResponseCodeType::ErrorCannotDeleteObject },
    { "ErrorCannotOpenFileAttachment", TNS__ResponseCodeType::ErrorCannotOpenFileAttachment },
    { "ErrorCannotDeleteTaskOccurrence", TNS__ResponseCodeType::ErrorCannotDeleteTaskOccurrence },
    { "ErrorCannotSetCalendarPermissionOnNonCalendarFolder", TNS__ResponseCodeType::ErrorCannotSetCalendarPermissionOnNonCalendarFolder },
    { "ErrorCannotSetNonCalendarPermissionOnCalendarFolder", TNS__ResponseCodeType::ErrorCannotSetNonCalendarPermissionOnCalendarFolder },
    { "ErrorCannotSetPermissionUnknownEntries", TNS__ResponseCodeType::ErrorCannotSetPermissionUnknownEntries },
    { "ErrorCannotUseFolderIdForItemId", TNS__ResponseCodeType::ErrorCannotUseFolderIdForItemId },
    { "ErrorCannotUseItemIdForFolderId", TNS__ResponseCodeType::ErrorCannotUseItemIdForFolderId },
    { "ErrorChangeKeyRequired", TNS__ResponseCodeType::ErrorChangeKeyRequired },
    { "ErrorChangeKeyRequiredForWriteOperations", TNS__ResponseCodeType::ErrorChangeKeyRequiredForWriteOperations },
    { "ErrorConnectionFailed", TNS__ResponseCodeType::ErrorConnectionFailed },
    { "ErrorContentConversionFailed", TNS__ResponseCodeType::ErrorContentConversionFailed },
    { "ErrorCorruptData", TNS__ResponseCodeType::ErrorCorruptData },
    { "ErrorCreateItemAccessDenied", TNS__ResponseCodeType::ErrorCreateItemAccessDenied },
    { "ErrorCreateManagedFolderPartialCompletion", TNS__ResponseCodeType::ErrorCreateManagedFolderPartialCompletion },
    { "ErrorCreateSubfolderAccessDenied", TNS__ResponseCodeType::ErrorCreateSubfolderAccessDenied },
    { "ErrorCrossMailboxMoveCopy", TNS__ResponseCodeType::ErrorCrossMailboxMoveCopy },
    { "ErrorDataSizeLimitExceeded", TNS__ResponseCodeType::ErrorDataSizeLimitExceeded },
    { "ErrorDataSourceOperation", TNS__ResponseCodeType::ErrorDataSourceOperation },
    { "ErrorDelegateAlreadyExists", TNS__ResponseCodeType::ErrorDelegateAlreadyExists },
    { "ErrorDelegateCannotAddOwner", TNS__ResponseCodeType::ErrorDelegateCannotAddOwner },
    { "ErrorDelegateMissingConfiguration", TNS__ResponseCodeType::ErrorDelegateMissingConfiguration },
    { "ErrorDelegateNoUser", TNS__ResponseCodeType::ErrorDelegateNoUser },
    { "ErrorDelegateValidationFailed", TNS__ResponseCodeType::ErrorDelegateValidationFailed },
    { "ErrorDeleteDistinguishedFolder", TNS__ResponseCodeType::ErrorDeleteDistinguishedFolder },
    { "ErrorDeleteItemsFailed", TNS__ResponseCodeType::ErrorDeleteItemsFailed },
    { "ErrorDistinguishedUserNotSupported", TNS__ResponseCodeType::ErrorDistinguishedUserNotSupported },
    { "ErrorDuplicateInputFolderNames", TNS__ResponseCodeType::ErrorDuplicateInputFolderNames },
    { "ErrorDuplicateUserIdsSpecified", TNS__ResponseCodeType::ErrorDuplicateUserIdsSpecified },
    { "ErrorEmailAddressMismatch", TNS__ResponseCodeType::ErrorEmailAddressMismatch },
    { "ErrorEventNotFound", TNS__ResponseCodeType::ErrorEventNotFound },
    { "ErrorExpiredSubscription", TNS__ResponseCodeType::ErrorExpiredSubscription },
    { "ErrorFolderCorrupt", TNS__ResponseCodeType::ErrorFolderCorrupt },
    { "ErrorFolderNotFound", TNS__ResponseCodeType::ErrorFolderNotFound },
    { "ErrorFolderPropertRequestFailed", TNS__ResponseCodeType::ErrorFolderPropertRequestFailed },
    { "ErrorFolderSave", TNS__ResponseCodeType::ErrorFolderSave },
    { "ErrorFolderSaveFailed", TNS__ResponseCodeType::ErrorFolderSaveFailed },
    { "ErrorFolderSavePropertyError", TNS__ResponseCodeType::ErrorFolderSavePropertyError },
    { "ErrorFolderExists", TNS__ResponseCodeType::ErrorFolderExists },
    { "ErrorFreeBusyGenerationFailed", TNS__ResponseCodeType::ErrorFreeBusyGenerationFailed },
    { "ErrorGetServerSecurityDescriptorFailed", TNS__ResponseCodeType::ErrorGetServerSecurityDescriptorFailed },
    { "ErrorImpersonateUserDenied", TNS__ResponseCodeType::ErrorImpersonateUserDenied },
    { "ErrorImpersonationDenied", TNS__ResponseCodeType::ErrorImpersonationDenied },
    { "ErrorImpersonationFailed", TNS__ResponseCodeType::ErrorImpersonationFailed },
    { "ErrorIncorrectSchemaVersion", TNS__ResponseCodeType::ErrorIncorrectSchemaVersion },
    { "ErrorIncorrectUpdatePropertyCount", TNS__ResponseCodeType::ErrorIncorrectUpdatePropertyCount },
    { "ErrorIndividualMailboxLimitReached", TNS__ResponseCodeType::ErrorIndividualMailboxLimitReached },
    { "ErrorInsufficientResources", TNS__ResponseCodeType::ErrorInsufficientResources },
    { "ErrorInternalServerError", TNS__ResponseCodeType::ErrorInternalServerError },
    { "ErrorInternalServerTransientError", TNS__ResponseCodeType::ErrorInternalServerTransientError },
    { "ErrorInvalidAccessLevel", TNS__ResponseCodeType::ErrorInvalidAccessLevel },
    { "ErrorInvalidAttachmentId", TNS__ResponseCodeType::ErrorInvalidAttachmentId },
    { "ErrorInvalidAttachmentSubfilter", TNS__ResponseCodeType::ErrorInvalidAttachmentSubfilter },
    { "ErrorInvalidAttachmentSubfilterTextFilter", TNS__ResponseCodeType::ErrorInvalidAttachmentSubfilterTextFilter },
    { "ErrorInvalidAuthorizationContext", TNS__ResponseCodeType::ErrorInvalidAuthorizationContext },
    { "ErrorInvalidChangeKey", TNS__ResponseCodeType::ErrorInvalidChangeKey },
    { "ErrorInvalidClientSecurityContext", TNS__ResponseCodeType::ErrorInvalidClientSecurityContext },
    { "ErrorInvalidCompleteDate", TNS__ResponseCodeType::ErrorInvalidCompleteDate },
    { "ErrorInvalidCrossForestCredentials", TNS__ResponseCodeType::ErrorInvalidCrossForestCredentials },
    { "ErrorInvalidDelegatePermission", TNS__ResponseCodeType::ErrorInvalidDelegatePermission },
    { "ErrorInvalidDelegateUserId", TNS__ResponseCodeType::ErrorInvalidDelegateUserId },
    { "ErrorInvalidExcludesRestriction", TNS__ResponseCodeType::ErrorInvalidExcludesRestriction },
    { "ErrorInvalidExpressionTypeForSubFilter", TNS__ResponseCodeType::ErrorInvalidExpressionTypeForSubFilter },
    { "ErrorInvalidExtendedProperty", TNS__ResponseCodeType::ErrorInvalidExtendedProperty },
    { "ErrorInvalidExtendedPropertyValue", TNS__ResponseCodeType::ErrorInvalidExtendedPropertyValue },
    { "ErrorInvalidFolderId", TNS__ResponseCodeType::ErrorInvalidFolderId },
    { "ErrorInvalidFolderTypeForOperation", TNS__ResponseCodeType::ErrorInvalidFolderTypeForOperation },
    { "ErrorInvalidFractionalPagingParameters", TNS__ResponseCodeType::ErrorInvalidFractionalPagingParameters },
    { "ErrorInvalidFreeBusyViewType", TNS__ResponseCodeType::ErrorInvalidFreeBusyViewType },
    { "ErrorInvalidId", TNS__ResponseCodeType::ErrorInvalidId },
    { "ErrorInvalidIdEmpty", TNS__ResponseCodeType::ErrorInvalidIdEmpty },
    { "ErrorInvalidIdMalformed", TNS__ResponseCodeType::ErrorInvalidIdMalformed },
    { "ErrorInvalidIdMalformedEwsLegacyIdFormat", TNS__ResponseCodeType::ErrorInvalidIdMalformedEwsLegacyIdFormat },
    { "ErrorInvalidIdMonikerTooLong", TNS__ResponseCodeType::ErrorInvalidIdMonikerTooLong },
    { "ErrorInvalidIdNotAnItemAttachmentId", TNS__ResponseCodeType::ErrorInvalidIdNotAnItemAttachmentId },
    { "ErrorInvalidIdReturnedByResolveNames", TNS__ResponseCodeType::ErrorInvalidIdReturnedByResolveNames },
    { "ErrorInvalidIdStoreObjectIdTooLong", TNS__ResponseCodeType::ErrorInvalidIdStoreObjectIdTooLong },
    { "ErrorInvalidIdTooManyAttachmentLevels", TNS__ResponseCodeType::ErrorInvalidIdTooManyAttachmentLevels },
    { "ErrorInvalidIdXml", TNS__ResponseCodeType::ErrorInvalidIdXml },
    { "ErrorInvalidIndexedPagingParameters", TNS__ResponseCodeType::ErrorInvalidIndexedPagingParameters },
    { "ErrorInvalidInternetHeaderChildNodes", TNS__ResponseCodeType::ErrorInvalidInternetHeaderChildNodes },
    { "ErrorInvalidItemForOperationCreateItemAttachment", TNS__ResponseCodeType::ErrorInvalidItemForOperationCreateItemAttachment },
    { "ErrorInvalidItemForOperationCreateItem", TNS__ResponseCodeType::ErrorInvalidItemForOperationCreateItem },
    { "ErrorInvalidItemForOperationAcceptItem", TNS__ResponseCodeType::ErrorInvalidItemForOperationAcceptItem },
    { "ErrorInvalidItemForOperationDeclineItem", TNS__ResponseCodeType::ErrorInvalidItemForOperationDeclineItem },
    { "ErrorInvalidItemForOperationCancelItem", TNS__ResponseCodeType::ErrorInvalidItemForOperationCancelItem },
    { "ErrorInvalidItemForOperationExpandDL", TNS__ResponseCodeType::ErrorInvalidItemForOperationExpandDL },
    { "ErrorInvalidItemForOperationRemoveItem", TNS__ResponseCodeType::ErrorInvalidItemForOperationRemoveItem },
    { "ErrorInvalidItemForOperationSendItem", TNS__ResponseCodeType::ErrorInvalidItemForOperationSendItem },
    { "ErrorInvalidItemForOperationTentative", TNS__ResponseCodeType::ErrorInvalidItemForOperationTentative },
    { "ErrorInvalidManagedFolderProperty", TNS__ResponseCodeType::ErrorInvalidManagedFolderProperty },
    { "ErrorInvalidManagedFolderQuota", TNS__ResponseCodeType::ErrorInvalidManagedFolderQuota },
    { "ErrorInvalidManagedFolderSize", TNS__ResponseCodeType::ErrorInvalidManagedFolderSize },
    { "ErrorInvalidMergedFreeBusyInterval", TNS__ResponseCodeType::ErrorInvalidMergedFreeBusyInterval },
    { "ErrorInvalidNameForNameResolution", TNS__ResponseCodeType::ErrorInvalidNameForNameResolution },
    { "ErrorInvalidOperation", TNS__ResponseCodeType::ErrorInvalidOperation },
    { "ErrorInvalidNetworkServiceContext", TNS__ResponseCodeType::ErrorInvalidNetworkServiceContext },
    { "ErrorInvalidOofParameter", TNS__ResponseCodeType::ErrorInvalidOofParameter },
    { "ErrorInvalidPagingMaxRows", TNS__ResponseCodeType::ErrorInvalidPagingMaxRows },
    { "ErrorInvalidParentFolder", TNS__ResponseCodeType::ErrorInvalidParentFolder },
    { "ErrorInvalidPercentCompleteValue", TNS__ResponseCodeType::ErrorInvalidPercentCompleteValue },
    { "ErrorInvalidPermissionSettings", TNS__ResponseCodeType::ErrorInvalidPermissionSettings },
    { "ErrorInvalidUserInfo", TNS__ResponseCodeType::ErrorInvalidUserInfo },
    { "ErrorInvalidPropertyAppend", TNS__ResponseCodeType::ErrorInvalidPropertyAppend },
    { "ErrorInvalidPropertyDelete", TNS__ResponseCodeType::ErrorInvalidPropertyDelete },
    { "ErrorInvalidPropertyForExists", TNS__ResponseCodeType::ErrorInvalidPropertyForExists },
    { "ErrorInvalidPropertyForOperation", TNS__ResponseCodeType::ErrorInvalidPropertyForOperation },
    { "ErrorInvalidPropertyRequest", TNS__ResponseCodeType::ErrorInvalidPropertyRequest },
    { "ErrorInvalidPropertySet", TNS__ResponseCodeType::ErrorInvalidPropertySet },
    { "ErrorInvalidPropertyUpdateSentMessage", TNS__ResponseCodeType::ErrorInvalidPropertyUpdateSentMessage },
    { "ErrorInvalidProxySecurityContext", TNS__ResponseCodeType::ErrorInvalidProxySecurityContext },
    { "ErrorInvalidPullSubscriptionId", TNS__ResponseCodeType::ErrorInvalidPullSubscriptionId },
    { "ErrorInvalidPushSubscriptionUrl", TNS__ResponseCodeType::ErrorInvalidPushSubscriptionUrl },
    { "ErrorInvalidRecipients", TNS__ResponseCodeType::ErrorInvalidRecipients },
    { "ErrorInvalidRecipientSubfilter", TNS__ResponseCodeType::ErrorInvalidRecipientSubfilter },
    { "ErrorInvalidRecipientSubfilterComparison", TNS__ResponseCodeType::ErrorInvalidRecipientSubfilterComparison },
    { "ErrorInvalidRecipientSubfilterOrder", TNS__ResponseCodeType::ErrorInvalidRecipientSubfilterOrder },
    { "ErrorInvalidRecipientSubfilterTextFilter", TNS__ResponseCodeType::ErrorInvalidRecipientSubfilterTextFilter },
    { "ErrorInvalidReferenceItem", TNS__ResponseCodeType::ErrorInvalidReferenceItem },
    { "ErrorInvalidRequest", TNS__ResponseCodeType::ErrorInvalidRequest },
    { "ErrorInvalidRestriction", TNS__ResponseCodeType::ErrorInvalidRestriction },
    { "ErrorInvalidRoutingType", TNS__ResponseCodeType::ErrorInvalidRoutingType },
    { "ErrorInvalidScheduledOofDuration", TNS__ResponseCodeType::ErrorInvalidScheduledOofDuration },
    { "ErrorInvalidSecurityDescriptor", TNS__ResponseCodeType::ErrorInvalidSecurityDescriptor },
    { "ErrorInvalidSendItemSaveSettings", TNS__ResponseCodeType::ErrorInvalidSendItemSaveSettings },
    { "ErrorInvalidSerializedAccessToken", TNS__ResponseCodeType::ErrorInvalidSerializedAccessToken },
    { "ErrorInvalidServerVersion", TNS__ResponseCodeType::ErrorInvalidServerVersion },
    { "ErrorInvalidSid", TNS__ResponseCodeType::ErrorInvalidSid },
    { "ErrorInvalidSmtpAddress", TNS__ResponseCodeType::ErrorInvalidSmtpAddress },
    { "ErrorInvalidSubfilterType", TNS__ResponseCodeType::ErrorInvalidSubfilterType },
    { "ErrorInvalidSubfilterTypeNotAttendeeType", TNS__ResponseCodeType::ErrorInvalidSubfilterTypeNotAttendeeType },
    { "ErrorInvalidSubfilterTypeNotRecipientType", TNS__ResponseCodeType::ErrorInvalidSubfilterTypeNotRecipientType },
    { "ErrorInvalidSubscription", TNS__ResponseCodeType::ErrorInvalidSubscription },
    { "ErrorInvalidSubscriptionRequest", TNS__ResponseCodeType::ErrorInvalidSubscriptionRequest },
    { "ErrorInvalidSyncStateData", TNS__ResponseCodeType::ErrorInvalidSyncStateData },
    { "ErrorInvalidTimeInterval", TNS__ResponseCodeType::ErrorInvalidTimeInterval },
    { "ErrorInvalidUserOofSettings", TNS__ResponseCodeType::ErrorInvalidUserOofSettings },
    { "ErrorInvalidUserPrincipalName", TNS__ResponseCodeType::ErrorInvalidUserPrincipalName },
    { "ErrorInvalidUserSid", TNS__ResponseCodeType::ErrorInvalidUserSid },
    { "ErrorInvalidUserSidMissingUPN", TNS__ResponseCodeType::ErrorInvalidUserSidMissingUPN },
    { "ErrorInvalidValueForProperty", TNS__ResponseCodeType::ErrorInvalidValueForProperty },
    { "ErrorInvalidWatermark", TNS__ResponseCodeType::ErrorInvalidWatermark },
    { "ErrorIrresolvableConflict", TNS__ResponseCodeType::ErrorIrresolvableConflict },
    { "ErrorItemCorrupt", TNS__ResponseCodeType::ErrorItemCorrupt },
    { "ErrorItemNotFound", TNS__ResponseCodeType::ErrorItemNotFound },
    { "ErrorItemPropertyRequestFailed", TNS__ResponseCodeType::ErrorItemPropertyRequestFailed },
    { "ErrorItemSave", TNS__ResponseCodeType::ErrorItemSave },
    { "ErrorItemSavePropertyError", TNS__ResponseCodeType::ErrorItemSavePropertyError },
    { "ErrorLegacyMailboxFreeBusyViewTypeNotMerged", TNS__ResponseCodeType::ErrorLegacyMailboxFreeBusyViewTypeNotMerged },
    { "ErrorLocalServerObjectNotFound", TNS__ResponseCodeType::ErrorLocalServerObjectNotFound },
    { "ErrorLogonAsNetworkServiceFailed", TNS__ResponseCodeType::ErrorLogonAsNetworkServiceFailed },
    { "ErrorMailboxConfiguration", TNS__ResponseCodeType::ErrorMailboxConfiguration },
    { "ErrorMailboxDataArrayEmpty", TNS__ResponseCodeType::ErrorMailboxDataArrayEmpty },
    { "ErrorMailboxDataArrayTooBig", TNS__ResponseCodeType::ErrorMailboxDataArrayTooBig },
    { "ErrorMailboxLogonFailed", TNS__ResponseCodeType::ErrorMailboxLogonFailed },
    { "ErrorMailboxMoveInProgress", TNS__ResponseCodeType::ErrorMailboxMoveInProgress },
    { "ErrorMailboxStoreUnavailable", TNS__ResponseCodeType::ErrorMailboxStoreUnavailable },
    { "ErrorMailRecipientNotFound", TNS__ResponseCodeType::ErrorMailRecipientNotFound },
    { "ErrorManagedFolderAlreadyExists", TNS__ResponseCodeType::ErrorManagedFolderAlreadyExists },
    { "ErrorManagedFolderNotFound", TNS__ResponseCodeType::ErrorManagedFolderNotFound },
    { "ErrorManagedFoldersRootFailure", TNS__ResponseCodeType::ErrorManagedFoldersRootFailure },
    { "ErrorMeetingSuggestionGenerationFailed", TNS__ResponseCodeType::ErrorMeetingSuggestionGenerationFailed },
    { "ErrorMessageDispositionRequired", TNS__ResponseCodeType::ErrorMessageDispositionRequired },
    { "ErrorMessageSizeExceeded", TNS__ResponseCodeType::ErrorMessageSizeExceeded },
    { "ErrorMimeContentConversionFailed", TNS__ResponseCodeType::ErrorMimeContentConversionFailed },
    { "ErrorMimeContentInvalid", TNS__ResponseCodeType::ErrorMimeContentInvalid },
    { "ErrorMimeContentInvalidBase64String", TNS__ResponseCodeType::ErrorMimeContentInvalidBase64String },
    { "ErrorMissingArgument", TNS__ResponseCodeType::ErrorMissingArgument },
    { "ErrorMissingEmailAddress", TNS__ResponseCodeType::ErrorMissingEmailAddress },
    { "ErrorMissingEmailAddressForManagedFolder", TNS__ResponseCodeType::ErrorMissingEmailAddressForManagedFolder },
    { "ErrorMissingInformationEmailAddress", TNS__ResponseCodeType::ErrorMissingInformationEmailAddress },
    { "ErrorMissingInformationReferenceItemId", TNS__ResponseCodeType::ErrorMissingInformationReferenceItemId },
    { "ErrorMissingItemForCreateItemAttachment", TNS__ResponseCodeType::ErrorMissingItemForCreateItemAttachment },
    { "ErrorMissingManagedFolderId", TNS__ResponseCodeType::ErrorMissingManagedFolderId },
    { "ErrorMissingRecipients", TNS__ResponseCodeType::ErrorMissingRecipients },
    { "ErrorMissingUserIdInformation", TNS__ResponseCodeType::ErrorMissingUserIdInformation },
    { "ErrorMoreThanOneAccessModeSpecified", TNS__ResponseCodeType::ErrorMoreThanOneAccessModeSpecified },
    { "ErrorMoveCopyFailed", TNS__ResponseCodeType::ErrorMoveCopyFailed },
    { "ErrorMoveDistinguishedFolder", TNS__ResponseCodeType::ErrorMoveDistinguishedFolder },
    { "ErrorNameResolutionMultipleResults", TNS__ResponseCodeType::ErrorNameResolutionMultipleResults },
    { "ErrorNameResolutionNoMailbox", TNS__ResponseCodeType::ErrorNameResolutionNoMailbox },
    { "ErrorNameResolutionNoResults", TNS__ResponseCodeType::ErrorNameResolutionNoResults },
    { "ErrorNoApplicableProxyCASServersAvailable", TNS__ResponseCodeType::ErrorNoApplicableProxyCASServersAvailable },
    { "ErrorNoCalendar", TNS__ResponseCodeType::ErrorNoCalendar },
    { "ErrorNoDestinationCASDueToKerberosRequirements", TNS__ResponseCodeType::ErrorNoDestinationCASDueToKerberosRequirements },
    { "ErrorNoDestinationCASDueToSSLRequirements", TNS__ResponseCodeType::ErrorNoDestinationCASDueToSSLRequirements },
    { "ErrorNoDestinationCASDueToVersionMismatch", TNS__ResponseCodeType::ErrorNoDestinationCASDueToVersionMismatch },
    { "ErrorNoFolderClassOverride", TNS__ResponseCodeType::ErrorNoFolderClassOverride },
    { "ErrorNoFreeBusyAccess", TNS__ResponseCodeType::ErrorNoFreeBusyAccess },
    { "ErrorNonExistentMailbox", TNS__ResponseCodeType::ErrorNonExistentMailbox },
    { "ErrorNonPrimarySmtpAddress", TNS__ResponseCodeType::ErrorNonPrimarySmtpAddress },
    { "ErrorNoPropertyTagForCustomProperties", TNS__ResponseCodeType::ErrorNoPropertyTagForCustomProperties },
    { "ErrorNoPublicFolderReplicaAvailable", TNS__ResponseCodeType::ErrorNoPublicFolderReplicaAvailable },
    { "ErrorNoRespondingCASInDestinationSite", TNS__ResponseCodeType::ErrorNoRespondingCASInDestinationSite },
    { "ErrorNotDelegate", TNS__ResponseCodeType::ErrorNotDelegate },
    { "ErrorNotEnoughMemory", TNS__ResponseCodeType::ErrorNotEnoughMemory },
    { "ErrorObjectTypeChanged", TNS__ResponseCodeType::ErrorObjectTypeChanged },
    { "ErrorOccurrenceCrossingBoundary", TNS__ResponseCodeType::ErrorOccurrenceCrossingBoundary },
    { "ErrorOccurrenceTimeSpanTooBig", TNS__ResponseCodeType::ErrorOccurrenceTimeSpanTooBig },
    { "ErrorOperationNotAllowedWithPublicFolderRoot", TNS__ResponseCodeType::ErrorOperationNotAllowedWithPublicFolderRoot },
    { "ErrorParentFolderIdRequired", TNS__ResponseCodeType::ErrorParentFolderIdRequired },
    { "ErrorParentFolderNotFound", TNS__ResponseCodeType::ErrorParentFolderNotFound },
    { "ErrorPasswordChangeRequired", TNS__ResponseCodeType::ErrorPasswordChangeRequired },
    { "ErrorPasswordExpired", TNS__ResponseCodeType::ErrorPasswordExpired },
    { "ErrorPropertyUpdate", TNS__ResponseCodeType::ErrorPropertyUpdate },
    { "ErrorPropertyValidationFailure", TNS__ResponseCodeType::ErrorPropertyValidationFailure },
    { "ErrorProxiedSubscriptionCallFailure", TNS__ResponseCodeType::ErrorProxiedSubscriptionCallFailure },
    { "ErrorProxyCallFailed", TNS__ResponseCodeType::ErrorProxyCallFailed },
    { "ErrorProxyGroupSidLimitExceeded", TNS__ResponseCodeType::ErrorProxyGroupSidLimitExceeded },
    { "ErrorProxyRequestNotAllowed", TNS__ResponseCodeType::ErrorProxyRequestNotAllowed },
    { "ErrorProxyRequestProcessingFailed", TNS__ResponseCodeType::ErrorProxyRequestProcessingFailed },
    { "ErrorProxyServiceDiscoveryFailed", TNS__ResponseCodeType::ErrorProxyServiceDiscoveryFailed },
    { "ErrorProxyTokenExpired", TNS__ResponseCodeType::ErrorProxyTokenExpired },
    { "ErrorPublicFolderRequestProcessingFailed", TNS__ResponseCodeType::ErrorPublicFolderRequestProcessingFailed },
    { "ErrorPublicFolderServerNotFound", TNS__ResponseCodeType::ErrorPublicFolderServerNotFound },
    { "ErrorQueryFilterTooLong", TNS__ResponseCodeType::ErrorQueryFilterTooLong },
    { "ErrorQuotaExceeded", TNS__ResponseCodeType::ErrorQuotaExceeded },
    { "ErrorReadEventsFailed", TNS__ResponseCodeType::ErrorReadEventsFailed },
    { "ErrorReadReceiptNotPending", TNS__ResponseCodeType::ErrorReadReceiptNotPending },
    { "ErrorRecurrenceEndDateTooBig", TNS__ResponseCodeType::ErrorRecurrenceEndDateTooBig },
    { "ErrorRecurrenceHasNoOccurrence", TNS__ResponseCodeType::ErrorRecurrenceHasNoOccurrence },
    { "ErrorRemoveDelegatesFailed", TNS__ResponseCodeType::ErrorRemoveDelegatesFailed },
    { "ErrorRequestAborted", TNS__ResponseCodeType::ErrorRequestAborted },
    { "ErrorRequestStreamTooBig", TNS__ResponseCodeType::ErrorRequestStreamTooBig },
    { "ErrorRequiredPropertyMissing", TNS__ResponseCodeType::ErrorRequiredPropertyMissing },
    { "ErrorResolveNamesInvalidFolderType", TNS__ResponseCodeType::ErrorResolveNamesInvalidFolderType },
    { "ErrorResolveNamesOnlyOneContactsFolderAllowed", TNS__ResponseCodeType::ErrorResolveNamesOnlyOneContactsFolderAllowed },
    { "ErrorResponseSchemaValidation", TNS__ResponseCodeType::ErrorResponseSchemaValidation },
    { "ErrorRestrictionTooLong", TNS__ResponseCodeType::ErrorRestrictionTooLong },
    { "ErrorRestrictionTooComplex", TNS__ResponseCodeType::ErrorRestrictionTooComplex },
    { "ErrorResultSetTooBig", TNS__ResponseCodeType::ErrorResultSetTooBig },
    { "ErrorInvalidExchangeImpersonationHeaderData", TNS__ResponseCodeType::ErrorInvalidExchangeImpersonationHeaderData },
    { "ErrorSavedItemFolderNotFound", TNS__ResponseCodeType::ErrorSavedItemFolderNotFound },
    { "ErrorSchemaValidation", TNS__ResponseCodeType::ErrorSchemaValidation },
    { "ErrorSearchFolderNotInitialized", TNS__ResponseCodeType::ErrorSearchFolderNotInitialized },
    { "ErrorSendAsDenied", TNS__ResponseCodeType::ErrorSendAsDenied },
    { "ErrorSendMeetingCancellationsRequired", TNS__ResponseCodeType::ErrorSendMeetingCancellationsRequired },
    { "ErrorSendMeetingInvitationsOrCancellationsRequired", TNS__ResponseCodeType::ErrorSendMeetingInvitationsOrCancellationsRequired },
    { "ErrorSendMeetingInvitationsRequired", TNS__ResponseCodeType::ErrorSendMeetingInvitationsRequired },
    { "ErrorSentMeetingRequestUpdate", TNS__ResponseCodeType::ErrorSentMeetingRequestUpdate },
    { "ErrorSentTaskRequestUpdate", TNS__ResponseCodeType::ErrorSentTaskRequestUpdate },
    { "ErrorServerBusy", TNS__ResponseCodeType::ErrorServerBusy },
    { "ErrorServiceDiscoveryFailed", TNS__ResponseCodeType::ErrorServiceDiscoveryFailed },
    { "ErrorStaleObject", TNS__ResponseCodeType::ErrorStaleObject },
    { "ErrorSubscriptionAccessDenied", TNS__ResponseCodeType::ErrorSubscriptionAccessDenied },
    { "ErrorSubscriptionDelegateAccessNotSupported", TNS__ResponseCodeType::ErrorSubscriptionDelegateAccessNotSupported },
    { "ErrorSubscriptionNotFound", TNS__ResponseCodeType::ErrorSubscriptionNotFound },
    { "ErrorSyncFolderNotFound", TNS__ResponseCodeType::ErrorSyncFolderNotFound },
    { "ErrorTimeIntervalTooBig", TNS__ResponseCodeType::ErrorTimeIntervalTooBig },
    { "ErrorTimeoutExpired", TNS__ResponseCodeType::ErrorTimeoutExpired },
    { "ErrorTimeZone", TNS__ResponseCodeType::ErrorTimeZone },
    { "ErrorToFolderNotFound", TNS__ResponseCodeType::ErrorToFolderNotFound },
    { "ErrorTokenSerializationDenied", TNS__ResponseCodeType::ErrorTokenSerializationDenied },
    { "ErrorUpdatePropertyMismatch", TNS__ResponseCodeType::ErrorUpdatePropertyMismatch },
    { "ErrorUnableToGetUserOofSettings", TNS__ResponseCodeType::ErrorUnableToGetUserOofSettings },
    { "ErrorUnsupportedSubFilter", TNS__ResponseCodeType::ErrorUnsupportedSubFilter },
    { "ErrorUnsupportedCulture", TNS__ResponseCodeType::ErrorUnsupportedCulture },
    { "ErrorUnsupportedMapiPropertyType", TNS__ResponseCodeType::ErrorUnsupportedMapiPropertyType },
    { "ErrorUnsupportedMimeConversion", TNS__ResponseCodeType::ErrorUnsupportedMimeConversion },
    { "ErrorUnsupportedPathForQuery", TNS__ResponseCodeType::ErrorUnsupportedPathForQuery },
    { "ErrorUnsupportedPathForSortGroup", TNS__ResponseCodeType::ErrorUnsupportedPathForSortGroup },
    { "ErrorUnsupportedPropertyDefinition", TNS__ResponseCodeType::ErrorUnsupportedPropertyDefinition },
    { "ErrorUnsupportedQueryFilter", TNS__ResponseCodeType::ErrorUnsupportedQueryFilter },
    { "ErrorUnsupportedRecurrence", TNS__ResponseCodeType::ErrorUnsupportedRecurrence },
    { "ErrorUnsupportedTypeForConversion", TNS__ResponseCodeType::ErrorUnsupportedTypeForConversion },
    { "ErrorUpdateDelegatesFailed", TNS__ResponseCodeType::ErrorUpdateDelegatesFailed },
    { "ErrorVoiceMailNotImplemented", TNS__ResponseCodeType::ErrorVoiceMailNotImplemented },
    { "ErrorVirusDetected", TNS__ResponseCodeType::ErrorVirusDetected },
    { "ErrorVirusMessageDeleted", TNS__ResponseCodeType::ErrorVirusMessageDeleted },
    { "ErrorWebRequestInInvalidState", TNS__ResponseCodeType::ErrorWebRequestInInvalidState },
    { "ErrorWin32InteropError", TNS__ResponseCodeType::ErrorWin32InteropError },
    { "ErrorWorkingHoursSaveFailed", TNS__ResponseCodeType::ErrorWorkingHoursSaveFailed },
    { "ErrorWorkingHoursXmlMalformed", TNS__ResponseCodeType::ErrorWorkingHoursXmlMalformed }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 318; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TNS__ResponseCodeType'.", qPrintable(str) );
}

TNS__ResponseCodeType::TNS__ResponseCodeType()
    : mType(Type(0))
{
}

TNS__ResponseCodeType::~TNS__ResponseCodeType()
{
}


void T__SubscriptionTimeoutType::setValue( int value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value) >= 1);
    rangeOk = rangeOk && ((value) <= 1440);

    if (!rangeOk)
        qDebug( "Invalid range in T__SubscriptionTimeoutType::setValue()" );

    mValue = value;
}

int T__SubscriptionTimeoutType::value() const
{
    return mValue;
}

T__SubscriptionTimeoutType::T__SubscriptionTimeoutType( int value )
{
    setValue(value);
}

T__SubscriptionTimeoutType::operator int() const
{
    return mValue;
}

QVariant T__SubscriptionTimeoutType::serialize() const
{
    return QVariant::fromValue(mValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:363
}

void T__SubscriptionTimeoutType::deserialize( const QVariant& value )
{
    mValue = value.value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:364
}

T__SubscriptionTimeoutType::T__SubscriptionTimeoutType()
    : mValue(0)
{
}

T__SubscriptionTimeoutType::~T__SubscriptionTimeoutType()
{
}


T__StandardGroupByType::T__StandardGroupByType( const Type &type )
{
    mType = type;
}

void T__StandardGroupByType::setType( Type type )
{
    mType = type;
}

T__StandardGroupByType::Type T__StandardGroupByType::type() const
{
    return mType;
}

T__StandardGroupByType::operator Type() const
{
    return mType;
}

QVariant T__StandardGroupByType::serialize() const
{
    switch ( mType ) {
        case T__StandardGroupByType::ConversationTopic:
            return QString::fromLatin1("ConversationTopic");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__StandardGroupByType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[1] = {
    { "ConversationTopic", T__StandardGroupByType::ConversationTopic }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 1; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__StandardGroupByType'.", qPrintable(str) );
}

T__StandardGroupByType::T__StandardGroupByType()
    : mType(Type(0))
{
}

T__StandardGroupByType::~T__StandardGroupByType()
{
}


T__MailboxTypeType::T__MailboxTypeType( const Type &type )
{
    mType = type;
}

void T__MailboxTypeType::setType( Type type )
{
    mType = type;
}

T__MailboxTypeType::Type T__MailboxTypeType::type() const
{
    return mType;
}

T__MailboxTypeType::operator Type() const
{
    return mType;
}

QVariant T__MailboxTypeType::serialize() const
{
    switch ( mType ) {
        case T__MailboxTypeType::Mailbox:
            return QString::fromLatin1("Mailbox");
        case T__MailboxTypeType::PublicDL:
            return QString::fromLatin1("PublicDL");
        case T__MailboxTypeType::PrivateDL:
            return QString::fromLatin1("PrivateDL");
        case T__MailboxTypeType::Contact:
            return QString::fromLatin1("Contact");
        case T__MailboxTypeType::PublicFolder:
            return QString::fromLatin1("PublicFolder");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__MailboxTypeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "Mailbox", T__MailboxTypeType::Mailbox },
    { "PublicDL", T__MailboxTypeType::PublicDL },
    { "PrivateDL", T__MailboxTypeType::PrivateDL },
    { "Contact", T__MailboxTypeType::Contact },
    { "PublicFolder", T__MailboxTypeType::PublicFolder }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__MailboxTypeType'.", qPrintable(str) );
}

T__MailboxTypeType::T__MailboxTypeType()
    : mType(Type(0))
{
}

T__MailboxTypeType::~T__MailboxTypeType()
{
}


T__IndexBasePointType::T__IndexBasePointType( const Type &type )
{
    mType = type;
}

void T__IndexBasePointType::setType( Type type )
{
    mType = type;
}

T__IndexBasePointType::Type T__IndexBasePointType::type() const
{
    return mType;
}

T__IndexBasePointType::operator Type() const
{
    return mType;
}

QVariant T__IndexBasePointType::serialize() const
{
    switch ( mType ) {
        case T__IndexBasePointType::Beginning:
            return QString::fromLatin1("Beginning");
        case T__IndexBasePointType::End:
            return QString::fromLatin1("End");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__IndexBasePointType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Beginning", T__IndexBasePointType::Beginning },
    { "End", T__IndexBasePointType::End }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__IndexBasePointType'.", qPrintable(str) );
}

T__IndexBasePointType::T__IndexBasePointType()
    : mType(Type(0))
{
}

T__IndexBasePointType::~T__IndexBasePointType()
{
}


void T__ReminderMinutesBeforeStartType::setValue( const QVariant& val )
{
    mValue = val;
}

QVariant T__ReminderMinutesBeforeStartType::value() const
{
    return mValue;
}

QVariant T__ReminderMinutesBeforeStartType::serialize() const
{
    return mValue;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:423
}

void T__ReminderMinutesBeforeStartType::deserialize( const QVariant& value )
{
    mValue = value;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:428
}

T__ReminderMinutesBeforeStartType::T__ReminderMinutesBeforeStartType()
{
}

T__ReminderMinutesBeforeStartType::~T__ReminderMinutesBeforeStartType()
{
}


T__ImportanceChoicesType::T__ImportanceChoicesType( const Type &type )
{
    mType = type;
}

void T__ImportanceChoicesType::setType( Type type )
{
    mType = type;
}

T__ImportanceChoicesType::Type T__ImportanceChoicesType::type() const
{
    return mType;
}

T__ImportanceChoicesType::operator Type() const
{
    return mType;
}

QVariant T__ImportanceChoicesType::serialize() const
{
    switch ( mType ) {
        case T__ImportanceChoicesType::Low:
            return QString::fromLatin1("Low");
        case T__ImportanceChoicesType::Normal:
            return QString::fromLatin1("Normal");
        case T__ImportanceChoicesType::High:
            return QString::fromLatin1("High");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ImportanceChoicesType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Low", T__ImportanceChoicesType::Low },
    { "Normal", T__ImportanceChoicesType::Normal },
    { "High", T__ImportanceChoicesType::High }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ImportanceChoicesType'.", qPrintable(str) );
}

T__ImportanceChoicesType::T__ImportanceChoicesType()
    : mType(Type(0))
{
}

T__ImportanceChoicesType::~T__ImportanceChoicesType()
{
}


T__MapiPropertyTypeType::T__MapiPropertyTypeType( const Type &type )
{
    mType = type;
}

void T__MapiPropertyTypeType::setType( Type type )
{
    mType = type;
}

T__MapiPropertyTypeType::Type T__MapiPropertyTypeType::type() const
{
    return mType;
}

T__MapiPropertyTypeType::operator Type() const
{
    return mType;
}

QVariant T__MapiPropertyTypeType::serialize() const
{
    switch ( mType ) {
        case T__MapiPropertyTypeType::ApplicationTime:
            return QString::fromLatin1("ApplicationTime");
        case T__MapiPropertyTypeType::ApplicationTimeArray:
            return QString::fromLatin1("ApplicationTimeArray");
        case T__MapiPropertyTypeType::Binary:
            return QString::fromLatin1("Binary");
        case T__MapiPropertyTypeType::BinaryArray:
            return QString::fromLatin1("BinaryArray");
        case T__MapiPropertyTypeType::Boolean:
            return QString::fromLatin1("Boolean");
        case T__MapiPropertyTypeType::CLSID:
            return QString::fromLatin1("CLSID");
        case T__MapiPropertyTypeType::CLSIDArray:
            return QString::fromLatin1("CLSIDArray");
        case T__MapiPropertyTypeType::Currency:
            return QString::fromLatin1("Currency");
        case T__MapiPropertyTypeType::CurrencyArray:
            return QString::fromLatin1("CurrencyArray");
        case T__MapiPropertyTypeType::Double:
            return QString::fromLatin1("Double");
        case T__MapiPropertyTypeType::DoubleArray:
            return QString::fromLatin1("DoubleArray");
        case T__MapiPropertyTypeType::Error:
            return QString::fromLatin1("Error");
        case T__MapiPropertyTypeType::Float:
            return QString::fromLatin1("Float");
        case T__MapiPropertyTypeType::FloatArray:
            return QString::fromLatin1("FloatArray");
        case T__MapiPropertyTypeType::Integer:
            return QString::fromLatin1("Integer");
        case T__MapiPropertyTypeType::IntegerArray:
            return QString::fromLatin1("IntegerArray");
        case T__MapiPropertyTypeType::Long:
            return QString::fromLatin1("Long");
        case T__MapiPropertyTypeType::LongArray:
            return QString::fromLatin1("LongArray");
        case T__MapiPropertyTypeType::Null:
            return QString::fromLatin1("Null");
        case T__MapiPropertyTypeType::Object:
            return QString::fromLatin1("Object");
        case T__MapiPropertyTypeType::ObjectArray:
            return QString::fromLatin1("ObjectArray");
        case T__MapiPropertyTypeType::Short:
            return QString::fromLatin1("Short");
        case T__MapiPropertyTypeType::ShortArray:
            return QString::fromLatin1("ShortArray");
        case T__MapiPropertyTypeType::SystemTime:
            return QString::fromLatin1("SystemTime");
        case T__MapiPropertyTypeType::SystemTimeArray:
            return QString::fromLatin1("SystemTimeArray");
        case T__MapiPropertyTypeType::String:
            return QString::fromLatin1("String");
        case T__MapiPropertyTypeType::StringArray:
            return QString::fromLatin1("StringArray");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__MapiPropertyTypeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[27] = {
    { "ApplicationTime", T__MapiPropertyTypeType::ApplicationTime },
    { "ApplicationTimeArray", T__MapiPropertyTypeType::ApplicationTimeArray },
    { "Binary", T__MapiPropertyTypeType::Binary },
    { "BinaryArray", T__MapiPropertyTypeType::BinaryArray },
    { "Boolean", T__MapiPropertyTypeType::Boolean },
    { "CLSID", T__MapiPropertyTypeType::CLSID },
    { "CLSIDArray", T__MapiPropertyTypeType::CLSIDArray },
    { "Currency", T__MapiPropertyTypeType::Currency },
    { "CurrencyArray", T__MapiPropertyTypeType::CurrencyArray },
    { "Double", T__MapiPropertyTypeType::Double },
    { "DoubleArray", T__MapiPropertyTypeType::DoubleArray },
    { "Error", T__MapiPropertyTypeType::Error },
    { "Float", T__MapiPropertyTypeType::Float },
    { "FloatArray", T__MapiPropertyTypeType::FloatArray },
    { "Integer", T__MapiPropertyTypeType::Integer },
    { "IntegerArray", T__MapiPropertyTypeType::IntegerArray },
    { "Long", T__MapiPropertyTypeType::Long },
    { "LongArray", T__MapiPropertyTypeType::LongArray },
    { "Null", T__MapiPropertyTypeType::Null },
    { "Object", T__MapiPropertyTypeType::Object },
    { "ObjectArray", T__MapiPropertyTypeType::ObjectArray },
    { "Short", T__MapiPropertyTypeType::Short },
    { "ShortArray", T__MapiPropertyTypeType::ShortArray },
    { "SystemTime", T__MapiPropertyTypeType::SystemTime },
    { "SystemTimeArray", T__MapiPropertyTypeType::SystemTimeArray },
    { "String", T__MapiPropertyTypeType::String },
    { "StringArray", T__MapiPropertyTypeType::StringArray }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 27; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__MapiPropertyTypeType'.", qPrintable(str) );
}

T__MapiPropertyTypeType::T__MapiPropertyTypeType()
    : mType(Type(0))
{
}

T__MapiPropertyTypeType::~T__MapiPropertyTypeType()
{
}


void T__GuidType::setValue( const QString& value )
{
    bool rangeOk = true;

    QRegExp exp( QString::fromLatin1("[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}") );
    rangeOk = rangeOk && exp.exactMatch( (value) );

    if (!rangeOk)
        qDebug( "Invalid range in T__GuidType::setValue()" );

    mValue = value;
}

QString T__GuidType::value() const
{
    return mValue;
}

T__GuidType::T__GuidType( const QString& value )
{
    setValue(value);
}

T__GuidType::operator QString() const
{
    return mValue;
}

QVariant T__GuidType::serialize() const
{
    return QVariant::fromValue(mValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:363
}

void T__GuidType::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:364
}

T__GuidType::T__GuidType()
{
}

T__GuidType::~T__GuidType()
{
}


T__SortDirectionType::T__SortDirectionType( const Type &type )
{
    mType = type;
}

void T__SortDirectionType::setType( Type type )
{
    mType = type;
}

T__SortDirectionType::Type T__SortDirectionType::type() const
{
    return mType;
}

T__SortDirectionType::operator Type() const
{
    return mType;
}

QVariant T__SortDirectionType::serialize() const
{
    switch ( mType ) {
        case T__SortDirectionType::Ascending:
            return QString::fromLatin1("Ascending");
        case T__SortDirectionType::Descending:
            return QString::fromLatin1("Descending");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__SortDirectionType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Ascending", T__SortDirectionType::Ascending },
    { "Descending", T__SortDirectionType::Descending }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__SortDirectionType'.", qPrintable(str) );
}

T__SortDirectionType::T__SortDirectionType()
    : mType(Type(0))
{
}

T__SortDirectionType::~T__SortDirectionType()
{
}


T__MeetingRequestTypeType::T__MeetingRequestTypeType( const Type &type )
{
    mType = type;
}

void T__MeetingRequestTypeType::setType( Type type )
{
    mType = type;
}

T__MeetingRequestTypeType::Type T__MeetingRequestTypeType::type() const
{
    return mType;
}

T__MeetingRequestTypeType::operator Type() const
{
    return mType;
}

QVariant T__MeetingRequestTypeType::serialize() const
{
    switch ( mType ) {
        case T__MeetingRequestTypeType::None:
            return QString::fromLatin1("None");
        case T__MeetingRequestTypeType::FullUpdate:
            return QString::fromLatin1("FullUpdate");
        case T__MeetingRequestTypeType::InformationalUpdate:
            return QString::fromLatin1("InformationalUpdate");
        case T__MeetingRequestTypeType::NewMeetingRequest:
            return QString::fromLatin1("NewMeetingRequest");
        case T__MeetingRequestTypeType::Outdated:
            return QString::fromLatin1("Outdated");
        case T__MeetingRequestTypeType::SilentUpdate:
            return QString::fromLatin1("SilentUpdate");
        case T__MeetingRequestTypeType::PrincipalWantsCopy:
            return QString::fromLatin1("PrincipalWantsCopy");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__MeetingRequestTypeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[7] = {
    { "None", T__MeetingRequestTypeType::None },
    { "FullUpdate", T__MeetingRequestTypeType::FullUpdate },
    { "InformationalUpdate", T__MeetingRequestTypeType::InformationalUpdate },
    { "NewMeetingRequest", T__MeetingRequestTypeType::NewMeetingRequest },
    { "Outdated", T__MeetingRequestTypeType::Outdated },
    { "SilentUpdate", T__MeetingRequestTypeType::SilentUpdate },
    { "PrincipalWantsCopy", T__MeetingRequestTypeType::PrincipalWantsCopy }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 7; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__MeetingRequestTypeType'.", qPrintable(str) );
}

T__MeetingRequestTypeType::T__MeetingRequestTypeType()
    : mType(Type(0))
{
}

T__MeetingRequestTypeType::~T__MeetingRequestTypeType()
{
}


T__CalendarItemTypeType::T__CalendarItemTypeType( const Type &type )
{
    mType = type;
}

void T__CalendarItemTypeType::setType( Type type )
{
    mType = type;
}

T__CalendarItemTypeType::Type T__CalendarItemTypeType::type() const
{
    return mType;
}

T__CalendarItemTypeType::operator Type() const
{
    return mType;
}

QVariant T__CalendarItemTypeType::serialize() const
{
    switch ( mType ) {
        case T__CalendarItemTypeType::Single:
            return QString::fromLatin1("Single");
        case T__CalendarItemTypeType::Occurrence:
            return QString::fromLatin1("Occurrence");
        case T__CalendarItemTypeType::Exception:
            return QString::fromLatin1("Exception");
        case T__CalendarItemTypeType::RecurringMaster:
            return QString::fromLatin1("RecurringMaster");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__CalendarItemTypeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "Single", T__CalendarItemTypeType::Single },
    { "Occurrence", T__CalendarItemTypeType::Occurrence },
    { "Exception", T__CalendarItemTypeType::Exception },
    { "RecurringMaster", T__CalendarItemTypeType::RecurringMaster }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__CalendarItemTypeType'.", qPrintable(str) );
}

T__CalendarItemTypeType::T__CalendarItemTypeType()
    : mType(Type(0))
{
}

T__CalendarItemTypeType::~T__CalendarItemTypeType()
{
}


T__AggregateType::T__AggregateType( const Type &type )
{
    mType = type;
}

void T__AggregateType::setType( Type type )
{
    mType = type;
}

T__AggregateType::Type T__AggregateType::type() const
{
    return mType;
}

T__AggregateType::operator Type() const
{
    return mType;
}

QVariant T__AggregateType::serialize() const
{
    switch ( mType ) {
        case T__AggregateType::Minimum:
            return QString::fromLatin1("Minimum");
        case T__AggregateType::Maximum:
            return QString::fromLatin1("Maximum");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__AggregateType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Minimum", T__AggregateType::Minimum },
    { "Maximum", T__AggregateType::Maximum }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__AggregateType'.", qPrintable(str) );
}

T__AggregateType::T__AggregateType()
    : mType(Type(0))
{
}

T__AggregateType::~T__AggregateType()
{
}


T__SensitivityChoicesType::T__SensitivityChoicesType( const Type &type )
{
    mType = type;
}

void T__SensitivityChoicesType::setType( Type type )
{
    mType = type;
}

T__SensitivityChoicesType::Type T__SensitivityChoicesType::type() const
{
    return mType;
}

T__SensitivityChoicesType::operator Type() const
{
    return mType;
}

QVariant T__SensitivityChoicesType::serialize() const
{
    switch ( mType ) {
        case T__SensitivityChoicesType::Normal:
            return QString::fromLatin1("Normal");
        case T__SensitivityChoicesType::Personal:
            return QString::fromLatin1("Personal");
        case T__SensitivityChoicesType::Private:
            return QString::fromLatin1("Private");
        case T__SensitivityChoicesType::Confidential:
            return QString::fromLatin1("Confidential");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__SensitivityChoicesType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "Normal", T__SensitivityChoicesType::Normal },
    { "Personal", T__SensitivityChoicesType::Personal },
    { "Private", T__SensitivityChoicesType::Private },
    { "Confidential", T__SensitivityChoicesType::Confidential }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__SensitivityChoicesType'.", qPrintable(str) );
}

T__SensitivityChoicesType::T__SensitivityChoicesType()
    : mType(Type(0))
{
}

T__SensitivityChoicesType::~T__SensitivityChoicesType()
{
}


T__FileAsMappingType::T__FileAsMappingType( const Type &type )
{
    mType = type;
}

void T__FileAsMappingType::setType( Type type )
{
    mType = type;
}

T__FileAsMappingType::Type T__FileAsMappingType::type() const
{
    return mType;
}

T__FileAsMappingType::operator Type() const
{
    return mType;
}

QVariant T__FileAsMappingType::serialize() const
{
    switch ( mType ) {
        case T__FileAsMappingType::None:
            return QString::fromLatin1("None");
        case T__FileAsMappingType::LastCommaFirst:
            return QString::fromLatin1("LastCommaFirst");
        case T__FileAsMappingType::FirstSpaceLast:
            return QString::fromLatin1("FirstSpaceLast");
        case T__FileAsMappingType::Company:
            return QString::fromLatin1("Company");
        case T__FileAsMappingType::LastCommaFirstCompany:
            return QString::fromLatin1("LastCommaFirstCompany");
        case T__FileAsMappingType::CompanyLastFirst:
            return QString::fromLatin1("CompanyLastFirst");
        case T__FileAsMappingType::LastFirst:
            return QString::fromLatin1("LastFirst");
        case T__FileAsMappingType::LastFirstCompany:
            return QString::fromLatin1("LastFirstCompany");
        case T__FileAsMappingType::CompanyLastCommaFirst:
            return QString::fromLatin1("CompanyLastCommaFirst");
        case T__FileAsMappingType::LastFirstSuffix:
            return QString::fromLatin1("LastFirstSuffix");
        case T__FileAsMappingType::LastSpaceFirstCompany:
            return QString::fromLatin1("LastSpaceFirstCompany");
        case T__FileAsMappingType::CompanyLastSpaceFirst:
            return QString::fromLatin1("CompanyLastSpaceFirst");
        case T__FileAsMappingType::LastSpaceFirst:
            return QString::fromLatin1("LastSpaceFirst");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__FileAsMappingType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[13] = {
    { "None", T__FileAsMappingType::None },
    { "LastCommaFirst", T__FileAsMappingType::LastCommaFirst },
    { "FirstSpaceLast", T__FileAsMappingType::FirstSpaceLast },
    { "Company", T__FileAsMappingType::Company },
    { "LastCommaFirstCompany", T__FileAsMappingType::LastCommaFirstCompany },
    { "CompanyLastFirst", T__FileAsMappingType::CompanyLastFirst },
    { "LastFirst", T__FileAsMappingType::LastFirst },
    { "LastFirstCompany", T__FileAsMappingType::LastFirstCompany },
    { "CompanyLastCommaFirst", T__FileAsMappingType::CompanyLastCommaFirst },
    { "LastFirstSuffix", T__FileAsMappingType::LastFirstSuffix },
    { "LastSpaceFirstCompany", T__FileAsMappingType::LastSpaceFirstCompany },
    { "CompanyLastSpaceFirst", T__FileAsMappingType::CompanyLastSpaceFirst },
    { "LastSpaceFirst", T__FileAsMappingType::LastSpaceFirst }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 13; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__FileAsMappingType'.", qPrintable(str) );
}

T__FileAsMappingType::T__FileAsMappingType()
    : mType(Type(0))
{
}

T__FileAsMappingType::~T__FileAsMappingType()
{
}


T__MeetingAttendeeType::T__MeetingAttendeeType( const Type &type )
{
    mType = type;
}

void T__MeetingAttendeeType::setType( Type type )
{
    mType = type;
}

T__MeetingAttendeeType::Type T__MeetingAttendeeType::type() const
{
    return mType;
}

T__MeetingAttendeeType::operator Type() const
{
    return mType;
}

QVariant T__MeetingAttendeeType::serialize() const
{
    switch ( mType ) {
        case T__MeetingAttendeeType::Organizer:
            return QString::fromLatin1("Organizer");
        case T__MeetingAttendeeType::Required:
            return QString::fromLatin1("Required");
        case T__MeetingAttendeeType::Optional:
            return QString::fromLatin1("Optional");
        case T__MeetingAttendeeType::Room:
            return QString::fromLatin1("Room");
        case T__MeetingAttendeeType::Resource:
            return QString::fromLatin1("Resource");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__MeetingAttendeeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "Organizer", T__MeetingAttendeeType::Organizer },
    { "Required", T__MeetingAttendeeType::Required },
    { "Optional", T__MeetingAttendeeType::Optional },
    { "Room", T__MeetingAttendeeType::Room },
    { "Resource", T__MeetingAttendeeType::Resource }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__MeetingAttendeeType'.", qPrintable(str) );
}

T__MeetingAttendeeType::T__MeetingAttendeeType()
    : mType(Type(0))
{
}

T__MeetingAttendeeType::~T__MeetingAttendeeType()
{
}


T__FreeBusyViewTypeListItem::T__FreeBusyViewTypeListItem( const Type &type )
{
    mType = type;
}

void T__FreeBusyViewTypeListItem::setType( Type type )
{
    mType = type;
}

T__FreeBusyViewTypeListItem::Type T__FreeBusyViewTypeListItem::type() const
{
    return mType;
}

T__FreeBusyViewTypeListItem::operator Type() const
{
    return mType;
}

QVariant T__FreeBusyViewTypeListItem::serialize() const
{
    switch ( mType ) {
        case T__FreeBusyViewTypeListItem::None:
            return QString::fromLatin1("None");
        case T__FreeBusyViewTypeListItem::MergedOnly:
            return QString::fromLatin1("MergedOnly");
        case T__FreeBusyViewTypeListItem::FreeBusy:
            return QString::fromLatin1("FreeBusy");
        case T__FreeBusyViewTypeListItem::FreeBusyMerged:
            return QString::fromLatin1("FreeBusyMerged");
        case T__FreeBusyViewTypeListItem::Detailed:
            return QString::fromLatin1("Detailed");
        case T__FreeBusyViewTypeListItem::DetailedMerged:
            return QString::fromLatin1("DetailedMerged");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__FreeBusyViewTypeListItem::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[6] = {
    { "None", T__FreeBusyViewTypeListItem::None },
    { "MergedOnly", T__FreeBusyViewTypeListItem::MergedOnly },
    { "FreeBusy", T__FreeBusyViewTypeListItem::FreeBusy },
    { "FreeBusyMerged", T__FreeBusyViewTypeListItem::FreeBusyMerged },
    { "Detailed", T__FreeBusyViewTypeListItem::Detailed },
    { "DetailedMerged", T__FreeBusyViewTypeListItem::DetailedMerged }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 6; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__FreeBusyViewTypeListItem'.", qPrintable(str) );
}

T__FreeBusyViewTypeListItem::T__FreeBusyViewTypeListItem()
    : mType(Type(0))
{
}

T__FreeBusyViewTypeListItem::~T__FreeBusyViewTypeListItem()
{
}


T__DistinguishedPropertySetType::T__DistinguishedPropertySetType( const Type &type )
{
    mType = type;
}

void T__DistinguishedPropertySetType::setType( Type type )
{
    mType = type;
}

T__DistinguishedPropertySetType::Type T__DistinguishedPropertySetType::type() const
{
    return mType;
}

T__DistinguishedPropertySetType::operator Type() const
{
    return mType;
}

QVariant T__DistinguishedPropertySetType::serialize() const
{
    switch ( mType ) {
        case T__DistinguishedPropertySetType::Meeting:
            return QString::fromLatin1("Meeting");
        case T__DistinguishedPropertySetType::Appointment:
            return QString::fromLatin1("Appointment");
        case T__DistinguishedPropertySetType::Common:
            return QString::fromLatin1("Common");
        case T__DistinguishedPropertySetType::PublicStrings:
            return QString::fromLatin1("PublicStrings");
        case T__DistinguishedPropertySetType::Address:
            return QString::fromLatin1("Address");
        case T__DistinguishedPropertySetType::InternetHeaders:
            return QString::fromLatin1("InternetHeaders");
        case T__DistinguishedPropertySetType::CalendarAssistant:
            return QString::fromLatin1("CalendarAssistant");
        case T__DistinguishedPropertySetType::UnifiedMessaging:
            return QString::fromLatin1("UnifiedMessaging");
        case T__DistinguishedPropertySetType::Task:
            return QString::fromLatin1("Task");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DistinguishedPropertySetType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[9] = {
    { "Meeting", T__DistinguishedPropertySetType::Meeting },
    { "Appointment", T__DistinguishedPropertySetType::Appointment },
    { "Common", T__DistinguishedPropertySetType::Common },
    { "PublicStrings", T__DistinguishedPropertySetType::PublicStrings },
    { "Address", T__DistinguishedPropertySetType::Address },
    { "InternetHeaders", T__DistinguishedPropertySetType::InternetHeaders },
    { "CalendarAssistant", T__DistinguishedPropertySetType::CalendarAssistant },
    { "UnifiedMessaging", T__DistinguishedPropertySetType::UnifiedMessaging },
    { "Task", T__DistinguishedPropertySetType::Task }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 9; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DistinguishedPropertySetType'.", qPrintable(str) );
}

T__DistinguishedPropertySetType::T__DistinguishedPropertySetType()
    : mType(Type(0))
{
}

T__DistinguishedPropertySetType::~T__DistinguishedPropertySetType()
{
}


T__DistinguishedUserType::T__DistinguishedUserType( const Type &type )
{
    mType = type;
}

void T__DistinguishedUserType::setType( Type type )
{
    mType = type;
}

T__DistinguishedUserType::Type T__DistinguishedUserType::type() const
{
    return mType;
}

T__DistinguishedUserType::operator Type() const
{
    return mType;
}

QVariant T__DistinguishedUserType::serialize() const
{
    switch ( mType ) {
        case T__DistinguishedUserType::Default:
            return QString::fromLatin1("Default");
        case T__DistinguishedUserType::Anonymous:
            return QString::fromLatin1("Anonymous");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DistinguishedUserType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Default", T__DistinguishedUserType::Default },
    { "Anonymous", T__DistinguishedUserType::Anonymous }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DistinguishedUserType'.", qPrintable(str) );
}

T__DistinguishedUserType::T__DistinguishedUserType()
    : mType(Type(0))
{
}

T__DistinguishedUserType::~T__DistinguishedUserType()
{
}


void T__ItemClassType::setValue( const QString& value )
{
    mValue = value;
}

QString T__ItemClassType::value() const
{
    return mValue;
}

T__ItemClassType::T__ItemClassType( const QString& value )
{
    setValue(value);
}

T__ItemClassType::operator QString() const
{
    return mValue;
}

QVariant T__ItemClassType::serialize() const
{
    return QVariant::fromValue(mValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:363
}

void T__ItemClassType::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:364
}

T__ItemClassType::T__ItemClassType()
{
}

T__ItemClassType::~T__ItemClassType()
{
}


void T__DerivedItemIdType::setValue( const QString& value )
{
    mValue = value;
}

QString T__DerivedItemIdType::value() const
{
    return mValue;
}

T__DerivedItemIdType::T__DerivedItemIdType( const QString& value )
{
    setValue(value);
}

T__DerivedItemIdType::operator QString() const
{
    return mValue;
}

QVariant T__DerivedItemIdType::serialize() const
{
    return QVariant::fromValue(mValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:363
}

void T__DerivedItemIdType::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:364
}

T__DerivedItemIdType::T__DerivedItemIdType()
{
}

T__DerivedItemIdType::~T__DerivedItemIdType()
{
}


T__DictionaryURIType::T__DictionaryURIType( const Type &type )
{
    mType = type;
}

void T__DictionaryURIType::setType( Type type )
{
    mType = type;
}

T__DictionaryURIType::Type T__DictionaryURIType::type() const
{
    return mType;
}

T__DictionaryURIType::operator Type() const
{
    return mType;
}

QVariant T__DictionaryURIType::serialize() const
{
    switch ( mType ) {
        case T__DictionaryURIType::Item_InternetMessageHeader:
            return QString::fromLatin1("item:InternetMessageHeader");
        case T__DictionaryURIType::Contacts_ImAddress:
            return QString::fromLatin1("contacts:ImAddress");
        case T__DictionaryURIType::Contacts_PhysicalAddress_Street:
            return QString::fromLatin1("contacts:PhysicalAddress:Street");
        case T__DictionaryURIType::Contacts_PhysicalAddress_City:
            return QString::fromLatin1("contacts:PhysicalAddress:City");
        case T__DictionaryURIType::Contacts_PhysicalAddress_State:
            return QString::fromLatin1("contacts:PhysicalAddress:State");
        case T__DictionaryURIType::Contacts_PhysicalAddress_CountryOrRegion:
            return QString::fromLatin1("contacts:PhysicalAddress:CountryOrRegion");
        case T__DictionaryURIType::Contacts_PhysicalAddress_PostalCode:
            return QString::fromLatin1("contacts:PhysicalAddress:PostalCode");
        case T__DictionaryURIType::Contacts_PhoneNumber:
            return QString::fromLatin1("contacts:PhoneNumber");
        case T__DictionaryURIType::Contacts_EmailAddress:
            return QString::fromLatin1("contacts:EmailAddress");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DictionaryURIType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[9] = {
    { "item:InternetMessageHeader", T__DictionaryURIType::Item_InternetMessageHeader },
    { "contacts:ImAddress", T__DictionaryURIType::Contacts_ImAddress },
    { "contacts:PhysicalAddress:Street", T__DictionaryURIType::Contacts_PhysicalAddress_Street },
    { "contacts:PhysicalAddress:City", T__DictionaryURIType::Contacts_PhysicalAddress_City },
    { "contacts:PhysicalAddress:State", T__DictionaryURIType::Contacts_PhysicalAddress_State },
    { "contacts:PhysicalAddress:CountryOrRegion", T__DictionaryURIType::Contacts_PhysicalAddress_CountryOrRegion },
    { "contacts:PhysicalAddress:PostalCode", T__DictionaryURIType::Contacts_PhysicalAddress_PostalCode },
    { "contacts:PhoneNumber", T__DictionaryURIType::Contacts_PhoneNumber },
    { "contacts:EmailAddress", T__DictionaryURIType::Contacts_EmailAddress }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 9; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DictionaryURIType'.", qPrintable(str) );
}

T__DictionaryURIType::T__DictionaryURIType()
    : mType(Type(0))
{
}

T__DictionaryURIType::~T__DictionaryURIType()
{
}


T__LegacyFreeBusyType::T__LegacyFreeBusyType( const Type &type )
{
    mType = type;
}

void T__LegacyFreeBusyType::setType( Type type )
{
    mType = type;
}

T__LegacyFreeBusyType::Type T__LegacyFreeBusyType::type() const
{
    return mType;
}

T__LegacyFreeBusyType::operator Type() const
{
    return mType;
}

QVariant T__LegacyFreeBusyType::serialize() const
{
    switch ( mType ) {
        case T__LegacyFreeBusyType::Free:
            return QString::fromLatin1("Free");
        case T__LegacyFreeBusyType::Tentative:
            return QString::fromLatin1("Tentative");
        case T__LegacyFreeBusyType::Busy:
            return QString::fromLatin1("Busy");
        case T__LegacyFreeBusyType::OOF:
            return QString::fromLatin1("OOF");
        case T__LegacyFreeBusyType::NoData:
            return QString::fromLatin1("NoData");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__LegacyFreeBusyType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "Free", T__LegacyFreeBusyType::Free },
    { "Tentative", T__LegacyFreeBusyType::Tentative },
    { "Busy", T__LegacyFreeBusyType::Busy },
    { "OOF", T__LegacyFreeBusyType::OOF },
    { "NoData", T__LegacyFreeBusyType::NoData }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__LegacyFreeBusyType'.", qPrintable(str) );
}

T__LegacyFreeBusyType::T__LegacyFreeBusyType()
    : mType(Type(0))
{
}

T__LegacyFreeBusyType::~T__LegacyFreeBusyType()
{
}


T__DistinguishedFolderIdNameType::T__DistinguishedFolderIdNameType( const Type &type )
{
    mType = type;
}

void T__DistinguishedFolderIdNameType::setType( Type type )
{
    mType = type;
}

T__DistinguishedFolderIdNameType::Type T__DistinguishedFolderIdNameType::type() const
{
    return mType;
}

T__DistinguishedFolderIdNameType::operator Type() const
{
    return mType;
}

QVariant T__DistinguishedFolderIdNameType::serialize() const
{
    switch ( mType ) {
        case T__DistinguishedFolderIdNameType::Calendar:
            return QString::fromLatin1("calendar");
        case T__DistinguishedFolderIdNameType::Contacts:
            return QString::fromLatin1("contacts");
        case T__DistinguishedFolderIdNameType::Deleteditems:
            return QString::fromLatin1("deleteditems");
        case T__DistinguishedFolderIdNameType::Drafts:
            return QString::fromLatin1("drafts");
        case T__DistinguishedFolderIdNameType::Inbox:
            return QString::fromLatin1("inbox");
        case T__DistinguishedFolderIdNameType::Journal:
            return QString::fromLatin1("journal");
        case T__DistinguishedFolderIdNameType::Notes:
            return QString::fromLatin1("notes");
        case T__DistinguishedFolderIdNameType::Outbox:
            return QString::fromLatin1("outbox");
        case T__DistinguishedFolderIdNameType::Sentitems:
            return QString::fromLatin1("sentitems");
        case T__DistinguishedFolderIdNameType::Tasks:
            return QString::fromLatin1("tasks");
        case T__DistinguishedFolderIdNameType::Msgfolderroot:
            return QString::fromLatin1("msgfolderroot");
        case T__DistinguishedFolderIdNameType::Publicfoldersroot:
            return QString::fromLatin1("publicfoldersroot");
        case T__DistinguishedFolderIdNameType::Root:
            return QString::fromLatin1("root");
        case T__DistinguishedFolderIdNameType::Junkemail:
            return QString::fromLatin1("junkemail");
        case T__DistinguishedFolderIdNameType::Searchfolders:
            return QString::fromLatin1("searchfolders");
        case T__DistinguishedFolderIdNameType::Voicemail:
            return QString::fromLatin1("voicemail");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DistinguishedFolderIdNameType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[16] = {
    { "calendar", T__DistinguishedFolderIdNameType::Calendar },
    { "contacts", T__DistinguishedFolderIdNameType::Contacts },
    { "deleteditems", T__DistinguishedFolderIdNameType::Deleteditems },
    { "drafts", T__DistinguishedFolderIdNameType::Drafts },
    { "inbox", T__DistinguishedFolderIdNameType::Inbox },
    { "journal", T__DistinguishedFolderIdNameType::Journal },
    { "notes", T__DistinguishedFolderIdNameType::Notes },
    { "outbox", T__DistinguishedFolderIdNameType::Outbox },
    { "sentitems", T__DistinguishedFolderIdNameType::Sentitems },
    { "tasks", T__DistinguishedFolderIdNameType::Tasks },
    { "msgfolderroot", T__DistinguishedFolderIdNameType::Msgfolderroot },
    { "publicfoldersroot", T__DistinguishedFolderIdNameType::Publicfoldersroot },
    { "root", T__DistinguishedFolderIdNameType::Root },
    { "junkemail", T__DistinguishedFolderIdNameType::Junkemail },
    { "searchfolders", T__DistinguishedFolderIdNameType::Searchfolders },
    { "voicemail", T__DistinguishedFolderIdNameType::Voicemail }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 16; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DistinguishedFolderIdNameType'.", qPrintable(str) );
}

T__DistinguishedFolderIdNameType::T__DistinguishedFolderIdNameType()
    : mType(Type(0))
{
}

T__DistinguishedFolderIdNameType::~T__DistinguishedFolderIdNameType()
{
}


T__TaskDelegateStateType::T__TaskDelegateStateType( const Type &type )
{
    mType = type;
}

void T__TaskDelegateStateType::setType( Type type )
{
    mType = type;
}

T__TaskDelegateStateType::Type T__TaskDelegateStateType::type() const
{
    return mType;
}

T__TaskDelegateStateType::operator Type() const
{
    return mType;
}

QVariant T__TaskDelegateStateType::serialize() const
{
    switch ( mType ) {
        case T__TaskDelegateStateType::NoMatch:
            return QString::fromLatin1("NoMatch");
        case T__TaskDelegateStateType::OwnNew:
            return QString::fromLatin1("OwnNew");
        case T__TaskDelegateStateType::Owned:
            return QString::fromLatin1("Owned");
        case T__TaskDelegateStateType::Accepted:
            return QString::fromLatin1("Accepted");
        case T__TaskDelegateStateType::Declined:
            return QString::fromLatin1("Declined");
        case T__TaskDelegateStateType::Max:
            return QString::fromLatin1("Max");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__TaskDelegateStateType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[6] = {
    { "NoMatch", T__TaskDelegateStateType::NoMatch },
    { "OwnNew", T__TaskDelegateStateType::OwnNew },
    { "Owned", T__TaskDelegateStateType::Owned },
    { "Accepted", T__TaskDelegateStateType::Accepted },
    { "Declined", T__TaskDelegateStateType::Declined },
    { "Max", T__TaskDelegateStateType::Max }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 6; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__TaskDelegateStateType'.", qPrintable(str) );
}

T__TaskDelegateStateType::T__TaskDelegateStateType()
    : mType(Type(0))
{
}

T__TaskDelegateStateType::~T__TaskDelegateStateType()
{
}


T__PhysicalAddressIndexType::T__PhysicalAddressIndexType( const Type &type )
{
    mType = type;
}

void T__PhysicalAddressIndexType::setType( Type type )
{
    mType = type;
}

T__PhysicalAddressIndexType::Type T__PhysicalAddressIndexType::type() const
{
    return mType;
}

T__PhysicalAddressIndexType::operator Type() const
{
    return mType;
}

QVariant T__PhysicalAddressIndexType::serialize() const
{
    switch ( mType ) {
        case T__PhysicalAddressIndexType::None:
            return QString::fromLatin1("None");
        case T__PhysicalAddressIndexType::Business:
            return QString::fromLatin1("Business");
        case T__PhysicalAddressIndexType::Home:
            return QString::fromLatin1("Home");
        case T__PhysicalAddressIndexType::Other:
            return QString::fromLatin1("Other");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__PhysicalAddressIndexType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "None", T__PhysicalAddressIndexType::None },
    { "Business", T__PhysicalAddressIndexType::Business },
    { "Home", T__PhysicalAddressIndexType::Home },
    { "Other", T__PhysicalAddressIndexType::Other }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__PhysicalAddressIndexType'.", qPrintable(str) );
}

T__PhysicalAddressIndexType::T__PhysicalAddressIndexType()
    : mType(Type(0))
{
}

T__PhysicalAddressIndexType::~T__PhysicalAddressIndexType()
{
}


T__ResponseTypeType::T__ResponseTypeType( const Type &type )
{
    mType = type;
}

void T__ResponseTypeType::setType( Type type )
{
    mType = type;
}

T__ResponseTypeType::Type T__ResponseTypeType::type() const
{
    return mType;
}

T__ResponseTypeType::operator Type() const
{
    return mType;
}

QVariant T__ResponseTypeType::serialize() const
{
    switch ( mType ) {
        case T__ResponseTypeType::Unknown:
            return QString::fromLatin1("Unknown");
        case T__ResponseTypeType::Organizer:
            return QString::fromLatin1("Organizer");
        case T__ResponseTypeType::Tentative:
            return QString::fromLatin1("Tentative");
        case T__ResponseTypeType::Accept:
            return QString::fromLatin1("Accept");
        case T__ResponseTypeType::Decline:
            return QString::fromLatin1("Decline");
        case T__ResponseTypeType::NoResponseReceived:
            return QString::fromLatin1("NoResponseReceived");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ResponseTypeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[6] = {
    { "Unknown", T__ResponseTypeType::Unknown },
    { "Organizer", T__ResponseTypeType::Organizer },
    { "Tentative", T__ResponseTypeType::Tentative },
    { "Accept", T__ResponseTypeType::Accept },
    { "Decline", T__ResponseTypeType::Decline },
    { "NoResponseReceived", T__ResponseTypeType::NoResponseReceived }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 6; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ResponseTypeType'.", qPrintable(str) );
}

T__ResponseTypeType::T__ResponseTypeType()
    : mType(Type(0))
{
}

T__ResponseTypeType::~T__ResponseTypeType()
{
}


void T__PropertyTagType::setValue( const QVariant& val )
{
    mValue = val;
}

QVariant T__PropertyTagType::value() const
{
    return mValue;
}

QVariant T__PropertyTagType::serialize() const
{
    return mValue;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:423
}

void T__PropertyTagType::deserialize( const QVariant& value )
{
    mValue = value;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:428
}

T__PropertyTagType::T__PropertyTagType()
{
}

T__PropertyTagType::~T__PropertyTagType()
{
}


T__DayOfWeekType::T__DayOfWeekType( const Type &type )
{
    mType = type;
}

void T__DayOfWeekType::setType( Type type )
{
    mType = type;
}

T__DayOfWeekType::Type T__DayOfWeekType::type() const
{
    return mType;
}

T__DayOfWeekType::operator Type() const
{
    return mType;
}

QVariant T__DayOfWeekType::serialize() const
{
    switch ( mType ) {
        case T__DayOfWeekType::Sunday:
            return QString::fromLatin1("Sunday");
        case T__DayOfWeekType::Monday:
            return QString::fromLatin1("Monday");
        case T__DayOfWeekType::Tuesday:
            return QString::fromLatin1("Tuesday");
        case T__DayOfWeekType::Wednesday:
            return QString::fromLatin1("Wednesday");
        case T__DayOfWeekType::Thursday:
            return QString::fromLatin1("Thursday");
        case T__DayOfWeekType::Friday:
            return QString::fromLatin1("Friday");
        case T__DayOfWeekType::Saturday:
            return QString::fromLatin1("Saturday");
        case T__DayOfWeekType::Day:
            return QString::fromLatin1("Day");
        case T__DayOfWeekType::Weekday:
            return QString::fromLatin1("Weekday");
        case T__DayOfWeekType::WeekendDay:
            return QString::fromLatin1("WeekendDay");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DayOfWeekType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[10] = {
    { "Sunday", T__DayOfWeekType::Sunday },
    { "Monday", T__DayOfWeekType::Monday },
    { "Tuesday", T__DayOfWeekType::Tuesday },
    { "Wednesday", T__DayOfWeekType::Wednesday },
    { "Thursday", T__DayOfWeekType::Thursday },
    { "Friday", T__DayOfWeekType::Friday },
    { "Saturday", T__DayOfWeekType::Saturday },
    { "Day", T__DayOfWeekType::Day },
    { "Weekday", T__DayOfWeekType::Weekday },
    { "WeekendDay", T__DayOfWeekType::WeekendDay }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 10; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DayOfWeekType'.", qPrintable(str) );
}

T__DayOfWeekType::T__DayOfWeekType()
    : mType(Type(0))
{
}

T__DayOfWeekType::~T__DayOfWeekType()
{
}


T__ContactSourceType::T__ContactSourceType( const Type &type )
{
    mType = type;
}

void T__ContactSourceType::setType( Type type )
{
    mType = type;
}

T__ContactSourceType::Type T__ContactSourceType::type() const
{
    return mType;
}

T__ContactSourceType::operator Type() const
{
    return mType;
}

QVariant T__ContactSourceType::serialize() const
{
    switch ( mType ) {
        case T__ContactSourceType::ActiveDirectory:
            return QString::fromLatin1("ActiveDirectory");
        case T__ContactSourceType::Store:
            return QString::fromLatin1("Store");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ContactSourceType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "ActiveDirectory", T__ContactSourceType::ActiveDirectory },
    { "Store", T__ContactSourceType::Store }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ContactSourceType'.", qPrintable(str) );
}

T__ContactSourceType::T__ContactSourceType()
    : mType(Type(0))
{
}

T__ContactSourceType::~T__ContactSourceType()
{
}


T__TaskStatusType::T__TaskStatusType( const Type &type )
{
    mType = type;
}

void T__TaskStatusType::setType( Type type )
{
    mType = type;
}

T__TaskStatusType::Type T__TaskStatusType::type() const
{
    return mType;
}

T__TaskStatusType::operator Type() const
{
    return mType;
}

QVariant T__TaskStatusType::serialize() const
{
    switch ( mType ) {
        case T__TaskStatusType::NotStarted:
            return QString::fromLatin1("NotStarted");
        case T__TaskStatusType::InProgress:
            return QString::fromLatin1("InProgress");
        case T__TaskStatusType::Completed:
            return QString::fromLatin1("Completed");
        case T__TaskStatusType::WaitingOnOthers:
            return QString::fromLatin1("WaitingOnOthers");
        case T__TaskStatusType::Deferred:
            return QString::fromLatin1("Deferred");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__TaskStatusType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "NotStarted", T__TaskStatusType::NotStarted },
    { "InProgress", T__TaskStatusType::InProgress },
    { "Completed", T__TaskStatusType::Completed },
    { "WaitingOnOthers", T__TaskStatusType::WaitingOnOthers },
    { "Deferred", T__TaskStatusType::Deferred }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__TaskStatusType'.", qPrintable(str) );
}

T__TaskStatusType::T__TaskStatusType()
    : mType(Type(0))
{
}

T__TaskStatusType::~T__TaskStatusType()
{
}


T__UnindexedFieldURIType::T__UnindexedFieldURIType( const Type &type )
{
    mType = type;
}

void T__UnindexedFieldURIType::setType( Type type )
{
    mType = type;
}

T__UnindexedFieldURIType::Type T__UnindexedFieldURIType::type() const
{
    return mType;
}

T__UnindexedFieldURIType::operator Type() const
{
    return mType;
}

QVariant T__UnindexedFieldURIType::serialize() const
{
    switch ( mType ) {
        case T__UnindexedFieldURIType::Folder_FolderId:
            return QString::fromLatin1("folder:FolderId");
        case T__UnindexedFieldURIType::Folder_ParentFolderId:
            return QString::fromLatin1("folder:ParentFolderId");
        case T__UnindexedFieldURIType::Folder_DisplayName:
            return QString::fromLatin1("folder:DisplayName");
        case T__UnindexedFieldURIType::Folder_UnreadCount:
            return QString::fromLatin1("folder:UnreadCount");
        case T__UnindexedFieldURIType::Folder_TotalCount:
            return QString::fromLatin1("folder:TotalCount");
        case T__UnindexedFieldURIType::Folder_ChildFolderCount:
            return QString::fromLatin1("folder:ChildFolderCount");
        case T__UnindexedFieldURIType::Folder_FolderClass:
            return QString::fromLatin1("folder:FolderClass");
        case T__UnindexedFieldURIType::Folder_SearchParameters:
            return QString::fromLatin1("folder:SearchParameters");
        case T__UnindexedFieldURIType::Folder_ManagedFolderInformation:
            return QString::fromLatin1("folder:ManagedFolderInformation");
        case T__UnindexedFieldURIType::Folder_PermissionSet:
            return QString::fromLatin1("folder:PermissionSet");
        case T__UnindexedFieldURIType::Folder_EffectiveRights:
            return QString::fromLatin1("folder:EffectiveRights");
        case T__UnindexedFieldURIType::Item_ItemId:
            return QString::fromLatin1("item:ItemId");
        case T__UnindexedFieldURIType::Item_ParentFolderId:
            return QString::fromLatin1("item:ParentFolderId");
        case T__UnindexedFieldURIType::Item_ItemClass:
            return QString::fromLatin1("item:ItemClass");
        case T__UnindexedFieldURIType::Item_MimeContent:
            return QString::fromLatin1("item:MimeContent");
        case T__UnindexedFieldURIType::Item_Attachments:
            return QString::fromLatin1("item:Attachments");
        case T__UnindexedFieldURIType::Item_Subject:
            return QString::fromLatin1("item:Subject");
        case T__UnindexedFieldURIType::Item_DateTimeReceived:
            return QString::fromLatin1("item:DateTimeReceived");
        case T__UnindexedFieldURIType::Item_Size:
            return QString::fromLatin1("item:Size");
        case T__UnindexedFieldURIType::Item_Categories:
            return QString::fromLatin1("item:Categories");
        case T__UnindexedFieldURIType::Item_HasAttachments:
            return QString::fromLatin1("item:HasAttachments");
        case T__UnindexedFieldURIType::Item_Importance:
            return QString::fromLatin1("item:Importance");
        case T__UnindexedFieldURIType::Item_InReplyTo:
            return QString::fromLatin1("item:InReplyTo");
        case T__UnindexedFieldURIType::Item_InternetMessageHeaders:
            return QString::fromLatin1("item:InternetMessageHeaders");
        case T__UnindexedFieldURIType::Item_IsDraft:
            return QString::fromLatin1("item:IsDraft");
        case T__UnindexedFieldURIType::Item_IsFromMe:
            return QString::fromLatin1("item:IsFromMe");
        case T__UnindexedFieldURIType::Item_IsResend:
            return QString::fromLatin1("item:IsResend");
        case T__UnindexedFieldURIType::Item_IsSubmitted:
            return QString::fromLatin1("item:IsSubmitted");
        case T__UnindexedFieldURIType::Item_IsUnmodified:
            return QString::fromLatin1("item:IsUnmodified");
        case T__UnindexedFieldURIType::Item_DateTimeSent:
            return QString::fromLatin1("item:DateTimeSent");
        case T__UnindexedFieldURIType::Item_DateTimeCreated:
            return QString::fromLatin1("item:DateTimeCreated");
        case T__UnindexedFieldURIType::Item_Body:
            return QString::fromLatin1("item:Body");
        case T__UnindexedFieldURIType::Item_ResponseObjects:
            return QString::fromLatin1("item:ResponseObjects");
        case T__UnindexedFieldURIType::Item_Sensitivity:
            return QString::fromLatin1("item:Sensitivity");
        case T__UnindexedFieldURIType::Item_ReminderDueBy:
            return QString::fromLatin1("item:ReminderDueBy");
        case T__UnindexedFieldURIType::Item_ReminderIsSet:
            return QString::fromLatin1("item:ReminderIsSet");
        case T__UnindexedFieldURIType::Item_ReminderMinutesBeforeStart:
            return QString::fromLatin1("item:ReminderMinutesBeforeStart");
        case T__UnindexedFieldURIType::Item_DisplayTo:
            return QString::fromLatin1("item:DisplayTo");
        case T__UnindexedFieldURIType::Item_DisplayCc:
            return QString::fromLatin1("item:DisplayCc");
        case T__UnindexedFieldURIType::Item_Culture:
            return QString::fromLatin1("item:Culture");
        case T__UnindexedFieldURIType::Item_EffectiveRights:
            return QString::fromLatin1("item:EffectiveRights");
        case T__UnindexedFieldURIType::Item_LastModifiedName:
            return QString::fromLatin1("item:LastModifiedName");
        case T__UnindexedFieldURIType::Item_LastModifiedTime:
            return QString::fromLatin1("item:LastModifiedTime");
        case T__UnindexedFieldURIType::Message_ConversationIndex:
            return QString::fromLatin1("message:ConversationIndex");
        case T__UnindexedFieldURIType::Message_ConversationTopic:
            return QString::fromLatin1("message:ConversationTopic");
        case T__UnindexedFieldURIType::Message_InternetMessageId:
            return QString::fromLatin1("message:InternetMessageId");
        case T__UnindexedFieldURIType::Message_IsRead:
            return QString::fromLatin1("message:IsRead");
        case T__UnindexedFieldURIType::Message_IsResponseRequested:
            return QString::fromLatin1("message:IsResponseRequested");
        case T__UnindexedFieldURIType::Message_IsReadReceiptRequested:
            return QString::fromLatin1("message:IsReadReceiptRequested");
        case T__UnindexedFieldURIType::Message_IsDeliveryReceiptRequested:
            return QString::fromLatin1("message:IsDeliveryReceiptRequested");
        case T__UnindexedFieldURIType::Message_ReceivedBy:
            return QString::fromLatin1("message:ReceivedBy");
        case T__UnindexedFieldURIType::Message_ReceivedRepresenting:
            return QString::fromLatin1("message:ReceivedRepresenting");
        case T__UnindexedFieldURIType::Message_References:
            return QString::fromLatin1("message:References");
        case T__UnindexedFieldURIType::Message_ReplyTo:
            return QString::fromLatin1("message:ReplyTo");
        case T__UnindexedFieldURIType::Message_From:
            return QString::fromLatin1("message:From");
        case T__UnindexedFieldURIType::Message_Sender:
            return QString::fromLatin1("message:Sender");
        case T__UnindexedFieldURIType::Message_ToRecipients:
            return QString::fromLatin1("message:ToRecipients");
        case T__UnindexedFieldURIType::Message_CcRecipients:
            return QString::fromLatin1("message:CcRecipients");
        case T__UnindexedFieldURIType::Message_BccRecipients:
            return QString::fromLatin1("message:BccRecipients");
        case T__UnindexedFieldURIType::Meeting_AssociatedCalendarItemId:
            return QString::fromLatin1("meeting:AssociatedCalendarItemId");
        case T__UnindexedFieldURIType::Meeting_IsDelegated:
            return QString::fromLatin1("meeting:IsDelegated");
        case T__UnindexedFieldURIType::Meeting_IsOutOfDate:
            return QString::fromLatin1("meeting:IsOutOfDate");
        case T__UnindexedFieldURIType::Meeting_HasBeenProcessed:
            return QString::fromLatin1("meeting:HasBeenProcessed");
        case T__UnindexedFieldURIType::Meeting_ResponseType:
            return QString::fromLatin1("meeting:ResponseType");
        default:
        break;
    }

    switch ( mType ) {
        case T__UnindexedFieldURIType::MeetingRequest_MeetingRequestType:
            return QString::fromLatin1("meetingRequest:MeetingRequestType");
        case T__UnindexedFieldURIType::MeetingRequest_IntendedFreeBusyStatus:
            return QString::fromLatin1("meetingRequest:IntendedFreeBusyStatus");
        case T__UnindexedFieldURIType::Calendar_Start:
            return QString::fromLatin1("calendar:Start");
        case T__UnindexedFieldURIType::Calendar_End:
            return QString::fromLatin1("calendar:End");
        case T__UnindexedFieldURIType::Calendar_OriginalStart:
            return QString::fromLatin1("calendar:OriginalStart");
        case T__UnindexedFieldURIType::Calendar_IsAllDayEvent:
            return QString::fromLatin1("calendar:IsAllDayEvent");
        case T__UnindexedFieldURIType::Calendar_LegacyFreeBusyStatus:
            return QString::fromLatin1("calendar:LegacyFreeBusyStatus");
        case T__UnindexedFieldURIType::Calendar_Location:
            return QString::fromLatin1("calendar:Location");
        case T__UnindexedFieldURIType::Calendar_When:
            return QString::fromLatin1("calendar:When");
        case T__UnindexedFieldURIType::Calendar_IsMeeting:
            return QString::fromLatin1("calendar:IsMeeting");
        case T__UnindexedFieldURIType::Calendar_IsCancelled:
            return QString::fromLatin1("calendar:IsCancelled");
        case T__UnindexedFieldURIType::Calendar_IsRecurring:
            return QString::fromLatin1("calendar:IsRecurring");
        case T__UnindexedFieldURIType::Calendar_MeetingRequestWasSent:
            return QString::fromLatin1("calendar:MeetingRequestWasSent");
        case T__UnindexedFieldURIType::Calendar_IsResponseRequested:
            return QString::fromLatin1("calendar:IsResponseRequested");
        case T__UnindexedFieldURIType::Calendar_CalendarItemType:
            return QString::fromLatin1("calendar:CalendarItemType");
        case T__UnindexedFieldURIType::Calendar_MyResponseType:
            return QString::fromLatin1("calendar:MyResponseType");
        case T__UnindexedFieldURIType::Calendar_Organizer:
            return QString::fromLatin1("calendar:Organizer");
        case T__UnindexedFieldURIType::Calendar_RequiredAttendees:
            return QString::fromLatin1("calendar:RequiredAttendees");
        case T__UnindexedFieldURIType::Calendar_OptionalAttendees:
            return QString::fromLatin1("calendar:OptionalAttendees");
        case T__UnindexedFieldURIType::Calendar_Resources:
            return QString::fromLatin1("calendar:Resources");
        case T__UnindexedFieldURIType::Calendar_ConflictingMeetingCount:
            return QString::fromLatin1("calendar:ConflictingMeetingCount");
        case T__UnindexedFieldURIType::Calendar_AdjacentMeetingCount:
            return QString::fromLatin1("calendar:AdjacentMeetingCount");
        case T__UnindexedFieldURIType::Calendar_ConflictingMeetings:
            return QString::fromLatin1("calendar:ConflictingMeetings");
        case T__UnindexedFieldURIType::Calendar_AdjacentMeetings:
            return QString::fromLatin1("calendar:AdjacentMeetings");
        case T__UnindexedFieldURIType::Calendar_Duration:
            return QString::fromLatin1("calendar:Duration");
        case T__UnindexedFieldURIType::Calendar_TimeZone:
            return QString::fromLatin1("calendar:TimeZone");
        case T__UnindexedFieldURIType::Calendar_AppointmentReplyTime:
            return QString::fromLatin1("calendar:AppointmentReplyTime");
        case T__UnindexedFieldURIType::Calendar_AppointmentSequenceNumber:
            return QString::fromLatin1("calendar:AppointmentSequenceNumber");
        case T__UnindexedFieldURIType::Calendar_AppointmentState:
            return QString::fromLatin1("calendar:AppointmentState");
        case T__UnindexedFieldURIType::Calendar_Recurrence:
            return QString::fromLatin1("calendar:Recurrence");
        case T__UnindexedFieldURIType::Calendar_FirstOccurrence:
            return QString::fromLatin1("calendar:FirstOccurrence");
        case T__UnindexedFieldURIType::Calendar_LastOccurrence:
            return QString::fromLatin1("calendar:LastOccurrence");
        case T__UnindexedFieldURIType::Calendar_ModifiedOccurrences:
            return QString::fromLatin1("calendar:ModifiedOccurrences");
        case T__UnindexedFieldURIType::Calendar_DeletedOccurrences:
            return QString::fromLatin1("calendar:DeletedOccurrences");
        case T__UnindexedFieldURIType::Calendar_MeetingTimeZone:
            return QString::fromLatin1("calendar:MeetingTimeZone");
        case T__UnindexedFieldURIType::Calendar_ConferenceType:
            return QString::fromLatin1("calendar:ConferenceType");
        case T__UnindexedFieldURIType::Calendar_AllowNewTimeProposal:
            return QString::fromLatin1("calendar:AllowNewTimeProposal");
        case T__UnindexedFieldURIType::Calendar_IsOnlineMeeting:
            return QString::fromLatin1("calendar:IsOnlineMeeting");
        case T__UnindexedFieldURIType::Calendar_MeetingWorkspaceUrl:
            return QString::fromLatin1("calendar:MeetingWorkspaceUrl");
        case T__UnindexedFieldURIType::Calendar_NetShowUrl:
            return QString::fromLatin1("calendar:NetShowUrl");
        case T__UnindexedFieldURIType::Calendar_UID:
            return QString::fromLatin1("calendar:UID");
        case T__UnindexedFieldURIType::Calendar_RecurrenceId:
            return QString::fromLatin1("calendar:RecurrenceId");
        case T__UnindexedFieldURIType::Calendar_DateTimeStamp:
            return QString::fromLatin1("calendar:DateTimeStamp");
        case T__UnindexedFieldURIType::Task_ActualWork:
            return QString::fromLatin1("task:ActualWork");
        case T__UnindexedFieldURIType::Task_AssignedTime:
            return QString::fromLatin1("task:AssignedTime");
        case T__UnindexedFieldURIType::Task_BillingInformation:
            return QString::fromLatin1("task:BillingInformation");
        case T__UnindexedFieldURIType::Task_ChangeCount:
            return QString::fromLatin1("task:ChangeCount");
        case T__UnindexedFieldURIType::Task_Companies:
            return QString::fromLatin1("task:Companies");
        case T__UnindexedFieldURIType::Task_CompleteDate:
            return QString::fromLatin1("task:CompleteDate");
        case T__UnindexedFieldURIType::Task_Contacts:
            return QString::fromLatin1("task:Contacts");
        case T__UnindexedFieldURIType::Task_DelegationState:
            return QString::fromLatin1("task:DelegationState");
        case T__UnindexedFieldURIType::Task_Delegator:
            return QString::fromLatin1("task:Delegator");
        case T__UnindexedFieldURIType::Task_DueDate:
            return QString::fromLatin1("task:DueDate");
        case T__UnindexedFieldURIType::Task_IsAssignmentEditable:
            return QString::fromLatin1("task:IsAssignmentEditable");
        case T__UnindexedFieldURIType::Task_IsComplete:
            return QString::fromLatin1("task:IsComplete");
        case T__UnindexedFieldURIType::Task_IsRecurring:
            return QString::fromLatin1("task:IsRecurring");
        case T__UnindexedFieldURIType::Task_IsTeamTask:
            return QString::fromLatin1("task:IsTeamTask");
        case T__UnindexedFieldURIType::Task_Mileage:
            return QString::fromLatin1("task:Mileage");
        case T__UnindexedFieldURIType::Task_Owner:
            return QString::fromLatin1("task:Owner");
        case T__UnindexedFieldURIType::Task_PercentComplete:
            return QString::fromLatin1("task:PercentComplete");
        case T__UnindexedFieldURIType::Task_Recurrence:
            return QString::fromLatin1("task:Recurrence");
        case T__UnindexedFieldURIType::Task_StartDate:
            return QString::fromLatin1("task:StartDate");
        case T__UnindexedFieldURIType::Task_Status:
            return QString::fromLatin1("task:Status");
        case T__UnindexedFieldURIType::Task_StatusDescription:
            return QString::fromLatin1("task:StatusDescription");
        default:
        break;
    }

    switch ( mType ) {
        case T__UnindexedFieldURIType::Task_TotalWork:
            return QString::fromLatin1("task:TotalWork");
        case T__UnindexedFieldURIType::Contacts_AssistantName:
            return QString::fromLatin1("contacts:AssistantName");
        case T__UnindexedFieldURIType::Contacts_Birthday:
            return QString::fromLatin1("contacts:Birthday");
        case T__UnindexedFieldURIType::Contacts_BusinessHomePage:
            return QString::fromLatin1("contacts:BusinessHomePage");
        case T__UnindexedFieldURIType::Contacts_Children:
            return QString::fromLatin1("contacts:Children");
        case T__UnindexedFieldURIType::Contacts_Companies:
            return QString::fromLatin1("contacts:Companies");
        case T__UnindexedFieldURIType::Contacts_CompanyName:
            return QString::fromLatin1("contacts:CompanyName");
        case T__UnindexedFieldURIType::Contacts_CompleteName:
            return QString::fromLatin1("contacts:CompleteName");
        case T__UnindexedFieldURIType::Contacts_ContactSource:
            return QString::fromLatin1("contacts:ContactSource");
        case T__UnindexedFieldURIType::Contacts_Culture:
            return QString::fromLatin1("contacts:Culture");
        case T__UnindexedFieldURIType::Contacts_Department:
            return QString::fromLatin1("contacts:Department");
        case T__UnindexedFieldURIType::Contacts_DisplayName:
            return QString::fromLatin1("contacts:DisplayName");
        case T__UnindexedFieldURIType::Contacts_EmailAddresses:
            return QString::fromLatin1("contacts:EmailAddresses");
        case T__UnindexedFieldURIType::Contacts_FileAs:
            return QString::fromLatin1("contacts:FileAs");
        case T__UnindexedFieldURIType::Contacts_FileAsMapping:
            return QString::fromLatin1("contacts:FileAsMapping");
        case T__UnindexedFieldURIType::Contacts_Generation:
            return QString::fromLatin1("contacts:Generation");
        case T__UnindexedFieldURIType::Contacts_GivenName:
            return QString::fromLatin1("contacts:GivenName");
        case T__UnindexedFieldURIType::Contacts_ImAddresses:
            return QString::fromLatin1("contacts:ImAddresses");
        case T__UnindexedFieldURIType::Contacts_Initials:
            return QString::fromLatin1("contacts:Initials");
        case T__UnindexedFieldURIType::Contacts_JobTitle:
            return QString::fromLatin1("contacts:JobTitle");
        case T__UnindexedFieldURIType::Contacts_Manager:
            return QString::fromLatin1("contacts:Manager");
        case T__UnindexedFieldURIType::Contacts_MiddleName:
            return QString::fromLatin1("contacts:MiddleName");
        case T__UnindexedFieldURIType::Contacts_Mileage:
            return QString::fromLatin1("contacts:Mileage");
        case T__UnindexedFieldURIType::Contacts_Nickname:
            return QString::fromLatin1("contacts:Nickname");
        case T__UnindexedFieldURIType::Contacts_OfficeLocation:
            return QString::fromLatin1("contacts:OfficeLocation");
        case T__UnindexedFieldURIType::Contacts_PhoneNumbers:
            return QString::fromLatin1("contacts:PhoneNumbers");
        case T__UnindexedFieldURIType::Contacts_PhysicalAddresses:
            return QString::fromLatin1("contacts:PhysicalAddresses");
        case T__UnindexedFieldURIType::Contacts_PostalAddressIndex:
            return QString::fromLatin1("contacts:PostalAddressIndex");
        case T__UnindexedFieldURIType::Contacts_Profession:
            return QString::fromLatin1("contacts:Profession");
        case T__UnindexedFieldURIType::Contacts_SpouseName:
            return QString::fromLatin1("contacts:SpouseName");
        case T__UnindexedFieldURIType::Contacts_Surname:
            return QString::fromLatin1("contacts:Surname");
        case T__UnindexedFieldURIType::Contacts_WeddingAnniversary:
            return QString::fromLatin1("contacts:WeddingAnniversary");
        case T__UnindexedFieldURIType::Postitem_PostedTime:
            return QString::fromLatin1("postitem:PostedTime");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__UnindexedFieldURIType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[161] = {
    { "folder:FolderId", T__UnindexedFieldURIType::Folder_FolderId },
    { "folder:ParentFolderId", T__UnindexedFieldURIType::Folder_ParentFolderId },
    { "folder:DisplayName", T__UnindexedFieldURIType::Folder_DisplayName },
    { "folder:UnreadCount", T__UnindexedFieldURIType::Folder_UnreadCount },
    { "folder:TotalCount", T__UnindexedFieldURIType::Folder_TotalCount },
    { "folder:ChildFolderCount", T__UnindexedFieldURIType::Folder_ChildFolderCount },
    { "folder:FolderClass", T__UnindexedFieldURIType::Folder_FolderClass },
    { "folder:SearchParameters", T__UnindexedFieldURIType::Folder_SearchParameters },
    { "folder:ManagedFolderInformation", T__UnindexedFieldURIType::Folder_ManagedFolderInformation },
    { "folder:PermissionSet", T__UnindexedFieldURIType::Folder_PermissionSet },
    { "folder:EffectiveRights", T__UnindexedFieldURIType::Folder_EffectiveRights },
    { "item:ItemId", T__UnindexedFieldURIType::Item_ItemId },
    { "item:ParentFolderId", T__UnindexedFieldURIType::Item_ParentFolderId },
    { "item:ItemClass", T__UnindexedFieldURIType::Item_ItemClass },
    { "item:MimeContent", T__UnindexedFieldURIType::Item_MimeContent },
    { "item:Attachments", T__UnindexedFieldURIType::Item_Attachments },
    { "item:Subject", T__UnindexedFieldURIType::Item_Subject },
    { "item:DateTimeReceived", T__UnindexedFieldURIType::Item_DateTimeReceived },
    { "item:Size", T__UnindexedFieldURIType::Item_Size },
    { "item:Categories", T__UnindexedFieldURIType::Item_Categories },
    { "item:HasAttachments", T__UnindexedFieldURIType::Item_HasAttachments },
    { "item:Importance", T__UnindexedFieldURIType::Item_Importance },
    { "item:InReplyTo", T__UnindexedFieldURIType::Item_InReplyTo },
    { "item:InternetMessageHeaders", T__UnindexedFieldURIType::Item_InternetMessageHeaders },
    { "item:IsDraft", T__UnindexedFieldURIType::Item_IsDraft },
    { "item:IsFromMe", T__UnindexedFieldURIType::Item_IsFromMe },
    { "item:IsResend", T__UnindexedFieldURIType::Item_IsResend },
    { "item:IsSubmitted", T__UnindexedFieldURIType::Item_IsSubmitted },
    { "item:IsUnmodified", T__UnindexedFieldURIType::Item_IsUnmodified },
    { "item:DateTimeSent", T__UnindexedFieldURIType::Item_DateTimeSent },
    { "item:DateTimeCreated", T__UnindexedFieldURIType::Item_DateTimeCreated },
    { "item:Body", T__UnindexedFieldURIType::Item_Body },
    { "item:ResponseObjects", T__UnindexedFieldURIType::Item_ResponseObjects },
    { "item:Sensitivity", T__UnindexedFieldURIType::Item_Sensitivity },
    { "item:ReminderDueBy", T__UnindexedFieldURIType::Item_ReminderDueBy },
    { "item:ReminderIsSet", T__UnindexedFieldURIType::Item_ReminderIsSet },
    { "item:ReminderMinutesBeforeStart", T__UnindexedFieldURIType::Item_ReminderMinutesBeforeStart },
    { "item:DisplayTo", T__UnindexedFieldURIType::Item_DisplayTo },
    { "item:DisplayCc", T__UnindexedFieldURIType::Item_DisplayCc },
    { "item:Culture", T__UnindexedFieldURIType::Item_Culture },
    { "item:EffectiveRights", T__UnindexedFieldURIType::Item_EffectiveRights },
    { "item:LastModifiedName", T__UnindexedFieldURIType::Item_LastModifiedName },
    { "item:LastModifiedTime", T__UnindexedFieldURIType::Item_LastModifiedTime },
    { "message:ConversationIndex", T__UnindexedFieldURIType::Message_ConversationIndex },
    { "message:ConversationTopic", T__UnindexedFieldURIType::Message_ConversationTopic },
    { "message:InternetMessageId", T__UnindexedFieldURIType::Message_InternetMessageId },
    { "message:IsRead", T__UnindexedFieldURIType::Message_IsRead },
    { "message:IsResponseRequested", T__UnindexedFieldURIType::Message_IsResponseRequested },
    { "message:IsReadReceiptRequested", T__UnindexedFieldURIType::Message_IsReadReceiptRequested },
    { "message:IsDeliveryReceiptRequested", T__UnindexedFieldURIType::Message_IsDeliveryReceiptRequested },
    { "message:ReceivedBy", T__UnindexedFieldURIType::Message_ReceivedBy },
    { "message:ReceivedRepresenting", T__UnindexedFieldURIType::Message_ReceivedRepresenting },
    { "message:References", T__UnindexedFieldURIType::Message_References },
    { "message:ReplyTo", T__UnindexedFieldURIType::Message_ReplyTo },
    { "message:From", T__UnindexedFieldURIType::Message_From },
    { "message:Sender", T__UnindexedFieldURIType::Message_Sender },
    { "message:ToRecipients", T__UnindexedFieldURIType::Message_ToRecipients },
    { "message:CcRecipients", T__UnindexedFieldURIType::Message_CcRecipients },
    { "message:BccRecipients", T__UnindexedFieldURIType::Message_BccRecipients },
    { "meeting:AssociatedCalendarItemId", T__UnindexedFieldURIType::Meeting_AssociatedCalendarItemId },
    { "meeting:IsDelegated", T__UnindexedFieldURIType::Meeting_IsDelegated },
    { "meeting:IsOutOfDate", T__UnindexedFieldURIType::Meeting_IsOutOfDate },
    { "meeting:HasBeenProcessed", T__UnindexedFieldURIType::Meeting_HasBeenProcessed },
    { "meeting:ResponseType", T__UnindexedFieldURIType::Meeting_ResponseType },
    { "meetingRequest:MeetingRequestType", T__UnindexedFieldURIType::MeetingRequest_MeetingRequestType },
    { "meetingRequest:IntendedFreeBusyStatus", T__UnindexedFieldURIType::MeetingRequest_IntendedFreeBusyStatus },
    { "calendar:Start", T__UnindexedFieldURIType::Calendar_Start },
    { "calendar:End", T__UnindexedFieldURIType::Calendar_End },
    { "calendar:OriginalStart", T__UnindexedFieldURIType::Calendar_OriginalStart },
    { "calendar:IsAllDayEvent", T__UnindexedFieldURIType::Calendar_IsAllDayEvent },
    { "calendar:LegacyFreeBusyStatus", T__UnindexedFieldURIType::Calendar_LegacyFreeBusyStatus },
    { "calendar:Location", T__UnindexedFieldURIType::Calendar_Location },
    { "calendar:When", T__UnindexedFieldURIType::Calendar_When },
    { "calendar:IsMeeting", T__UnindexedFieldURIType::Calendar_IsMeeting },
    { "calendar:IsCancelled", T__UnindexedFieldURIType::Calendar_IsCancelled },
    { "calendar:IsRecurring", T__UnindexedFieldURIType::Calendar_IsRecurring },
    { "calendar:MeetingRequestWasSent", T__UnindexedFieldURIType::Calendar_MeetingRequestWasSent },
    { "calendar:IsResponseRequested", T__UnindexedFieldURIType::Calendar_IsResponseRequested },
    { "calendar:CalendarItemType", T__UnindexedFieldURIType::Calendar_CalendarItemType },
    { "calendar:MyResponseType", T__UnindexedFieldURIType::Calendar_MyResponseType },
    { "calendar:Organizer", T__UnindexedFieldURIType::Calendar_Organizer },
    { "calendar:RequiredAttendees", T__UnindexedFieldURIType::Calendar_RequiredAttendees },
    { "calendar:OptionalAttendees", T__UnindexedFieldURIType::Calendar_OptionalAttendees },
    { "calendar:Resources", T__UnindexedFieldURIType::Calendar_Resources },
    { "calendar:ConflictingMeetingCount", T__UnindexedFieldURIType::Calendar_ConflictingMeetingCount },
    { "calendar:AdjacentMeetingCount", T__UnindexedFieldURIType::Calendar_AdjacentMeetingCount },
    { "calendar:ConflictingMeetings", T__UnindexedFieldURIType::Calendar_ConflictingMeetings },
    { "calendar:AdjacentMeetings", T__UnindexedFieldURIType::Calendar_AdjacentMeetings },
    { "calendar:Duration", T__UnindexedFieldURIType::Calendar_Duration },
    { "calendar:TimeZone", T__UnindexedFieldURIType::Calendar_TimeZone },
    { "calendar:AppointmentReplyTime", T__UnindexedFieldURIType::Calendar_AppointmentReplyTime },
    { "calendar:AppointmentSequenceNumber", T__UnindexedFieldURIType::Calendar_AppointmentSequenceNumber },
    { "calendar:AppointmentState", T__UnindexedFieldURIType::Calendar_AppointmentState },
    { "calendar:Recurrence", T__UnindexedFieldURIType::Calendar_Recurrence },
    { "calendar:FirstOccurrence", T__UnindexedFieldURIType::Calendar_FirstOccurrence },
    { "calendar:LastOccurrence", T__UnindexedFieldURIType::Calendar_LastOccurrence },
    { "calendar:ModifiedOccurrences", T__UnindexedFieldURIType::Calendar_ModifiedOccurrences },
    { "calendar:DeletedOccurrences", T__UnindexedFieldURIType::Calendar_DeletedOccurrences },
    { "calendar:MeetingTimeZone", T__UnindexedFieldURIType::Calendar_MeetingTimeZone },
    { "calendar:ConferenceType", T__UnindexedFieldURIType::Calendar_ConferenceType },
    { "calendar:AllowNewTimeProposal", T__UnindexedFieldURIType::Calendar_AllowNewTimeProposal },
    { "calendar:IsOnlineMeeting", T__UnindexedFieldURIType::Calendar_IsOnlineMeeting },
    { "calendar:MeetingWorkspaceUrl", T__UnindexedFieldURIType::Calendar_MeetingWorkspaceUrl },
    { "calendar:NetShowUrl", T__UnindexedFieldURIType::Calendar_NetShowUrl },
    { "calendar:UID", T__UnindexedFieldURIType::Calendar_UID },
    { "calendar:RecurrenceId", T__UnindexedFieldURIType::Calendar_RecurrenceId },
    { "calendar:DateTimeStamp", T__UnindexedFieldURIType::Calendar_DateTimeStamp },
    { "task:ActualWork", T__UnindexedFieldURIType::Task_ActualWork },
    { "task:AssignedTime", T__UnindexedFieldURIType::Task_AssignedTime },
    { "task:BillingInformation", T__UnindexedFieldURIType::Task_BillingInformation },
    { "task:ChangeCount", T__UnindexedFieldURIType::Task_ChangeCount },
    { "task:Companies", T__UnindexedFieldURIType::Task_Companies },
    { "task:CompleteDate", T__UnindexedFieldURIType::Task_CompleteDate },
    { "task:Contacts", T__UnindexedFieldURIType::Task_Contacts },
    { "task:DelegationState", T__UnindexedFieldURIType::Task_DelegationState },
    { "task:Delegator", T__UnindexedFieldURIType::Task_Delegator },
    { "task:DueDate", T__UnindexedFieldURIType::Task_DueDate },
    { "task:IsAssignmentEditable", T__UnindexedFieldURIType::Task_IsAssignmentEditable },
    { "task:IsComplete", T__UnindexedFieldURIType::Task_IsComplete },
    { "task:IsRecurring", T__UnindexedFieldURIType::Task_IsRecurring },
    { "task:IsTeamTask", T__UnindexedFieldURIType::Task_IsTeamTask },
    { "task:Mileage", T__UnindexedFieldURIType::Task_Mileage },
    { "task:Owner", T__UnindexedFieldURIType::Task_Owner },
    { "task:PercentComplete", T__UnindexedFieldURIType::Task_PercentComplete },
    { "task:Recurrence", T__UnindexedFieldURIType::Task_Recurrence },
    { "task:StartDate", T__UnindexedFieldURIType::Task_StartDate },
    { "task:Status", T__UnindexedFieldURIType::Task_Status },
    { "task:StatusDescription", T__UnindexedFieldURIType::Task_StatusDescription },
    { "task:TotalWork", T__UnindexedFieldURIType::Task_TotalWork },
    { "contacts:AssistantName", T__UnindexedFieldURIType::Contacts_AssistantName },
    { "contacts:Birthday", T__UnindexedFieldURIType::Contacts_Birthday },
    { "contacts:BusinessHomePage", T__UnindexedFieldURIType::Contacts_BusinessHomePage },
    { "contacts:Children", T__UnindexedFieldURIType::Contacts_Children },
    { "contacts:Companies", T__UnindexedFieldURIType::Contacts_Companies },
    { "contacts:CompanyName", T__UnindexedFieldURIType::Contacts_CompanyName },
    { "contacts:CompleteName", T__UnindexedFieldURIType::Contacts_CompleteName },
    { "contacts:ContactSource", T__UnindexedFieldURIType::Contacts_ContactSource },
    { "contacts:Culture", T__UnindexedFieldURIType::Contacts_Culture },
    { "contacts:Department", T__UnindexedFieldURIType::Contacts_Department },
    { "contacts:DisplayName", T__UnindexedFieldURIType::Contacts_DisplayName },
    { "contacts:EmailAddresses", T__UnindexedFieldURIType::Contacts_EmailAddresses },
    { "contacts:FileAs", T__UnindexedFieldURIType::Contacts_FileAs },
    { "contacts:FileAsMapping", T__UnindexedFieldURIType::Contacts_FileAsMapping },
    { "contacts:Generation", T__UnindexedFieldURIType::Contacts_Generation },
    { "contacts:GivenName", T__UnindexedFieldURIType::Contacts_GivenName },
    { "contacts:ImAddresses", T__UnindexedFieldURIType::Contacts_ImAddresses },
    { "contacts:Initials", T__UnindexedFieldURIType::Contacts_Initials },
    { "contacts:JobTitle", T__UnindexedFieldURIType::Contacts_JobTitle },
    { "contacts:Manager", T__UnindexedFieldURIType::Contacts_Manager },
    { "contacts:MiddleName", T__UnindexedFieldURIType::Contacts_MiddleName },
    { "contacts:Mileage", T__UnindexedFieldURIType::Contacts_Mileage },
    { "contacts:Nickname", T__UnindexedFieldURIType::Contacts_Nickname },
    { "contacts:OfficeLocation", T__UnindexedFieldURIType::Contacts_OfficeLocation },
    { "contacts:PhoneNumbers", T__UnindexedFieldURIType::Contacts_PhoneNumbers },
    { "contacts:PhysicalAddresses", T__UnindexedFieldURIType::Contacts_PhysicalAddresses },
    { "contacts:PostalAddressIndex", T__UnindexedFieldURIType::Contacts_PostalAddressIndex },
    { "contacts:Profession", T__UnindexedFieldURIType::Contacts_Profession },
    { "contacts:SpouseName", T__UnindexedFieldURIType::Contacts_SpouseName },
    { "contacts:Surname", T__UnindexedFieldURIType::Contacts_Surname },
    { "contacts:WeddingAnniversary", T__UnindexedFieldURIType::Contacts_WeddingAnniversary },
    { "postitem:PostedTime", T__UnindexedFieldURIType::Postitem_PostedTime }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 161; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__UnindexedFieldURIType'.", qPrintable(str) );
}

T__UnindexedFieldURIType::T__UnindexedFieldURIType()
    : mType(Type(0))
{
}

T__UnindexedFieldURIType::~T__UnindexedFieldURIType()
{
}


T__DelegateFolderPermissionLevelType::T__DelegateFolderPermissionLevelType( const Type &type )
{
    mType = type;
}

void T__DelegateFolderPermissionLevelType::setType( Type type )
{
    mType = type;
}

T__DelegateFolderPermissionLevelType::Type T__DelegateFolderPermissionLevelType::type() const
{
    return mType;
}

T__DelegateFolderPermissionLevelType::operator Type() const
{
    return mType;
}

QVariant T__DelegateFolderPermissionLevelType::serialize() const
{
    switch ( mType ) {
        case T__DelegateFolderPermissionLevelType::None:
            return QString::fromLatin1("None");
        case T__DelegateFolderPermissionLevelType::Editor:
            return QString::fromLatin1("Editor");
        case T__DelegateFolderPermissionLevelType::Reviewer:
            return QString::fromLatin1("Reviewer");
        case T__DelegateFolderPermissionLevelType::Author:
            return QString::fromLatin1("Author");
        case T__DelegateFolderPermissionLevelType::Custom:
            return QString::fromLatin1("Custom");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DelegateFolderPermissionLevelType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "None", T__DelegateFolderPermissionLevelType::None },
    { "Editor", T__DelegateFolderPermissionLevelType::Editor },
    { "Reviewer", T__DelegateFolderPermissionLevelType::Reviewer },
    { "Author", T__DelegateFolderPermissionLevelType::Author },
    { "Custom", T__DelegateFolderPermissionLevelType::Custom }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DelegateFolderPermissionLevelType'.", qPrintable(str) );
}

T__DelegateFolderPermissionLevelType::T__DelegateFolderPermissionLevelType()
    : mType(Type(0))
{
}

T__DelegateFolderPermissionLevelType::~T__DelegateFolderPermissionLevelType()
{
}


T__ContainmentComparisonType::T__ContainmentComparisonType( const Type &type )
{
    mType = type;
}

void T__ContainmentComparisonType::setType( Type type )
{
    mType = type;
}

T__ContainmentComparisonType::Type T__ContainmentComparisonType::type() const
{
    return mType;
}

T__ContainmentComparisonType::operator Type() const
{
    return mType;
}

QVariant T__ContainmentComparisonType::serialize() const
{
    switch ( mType ) {
        case T__ContainmentComparisonType::Exact:
            return QString::fromLatin1("Exact");
        case T__ContainmentComparisonType::IgnoreCase:
            return QString::fromLatin1("IgnoreCase");
        case T__ContainmentComparisonType::IgnoreNonSpacingCharacters:
            return QString::fromLatin1("IgnoreNonSpacingCharacters");
        case T__ContainmentComparisonType::Loose:
            return QString::fromLatin1("Loose");
        case T__ContainmentComparisonType::IgnoreCaseAndNonSpacingCharacters:
            return QString::fromLatin1("IgnoreCaseAndNonSpacingCharacters");
        case T__ContainmentComparisonType::LooseAndIgnoreCase:
            return QString::fromLatin1("LooseAndIgnoreCase");
        case T__ContainmentComparisonType::LooseAndIgnoreNonSpace:
            return QString::fromLatin1("LooseAndIgnoreNonSpace");
        case T__ContainmentComparisonType::LooseAndIgnoreCaseAndIgnoreNonSpace:
            return QString::fromLatin1("LooseAndIgnoreCaseAndIgnoreNonSpace");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ContainmentComparisonType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[8] = {
    { "Exact", T__ContainmentComparisonType::Exact },
    { "IgnoreCase", T__ContainmentComparisonType::IgnoreCase },
    { "IgnoreNonSpacingCharacters", T__ContainmentComparisonType::IgnoreNonSpacingCharacters },
    { "Loose", T__ContainmentComparisonType::Loose },
    { "IgnoreCaseAndNonSpacingCharacters", T__ContainmentComparisonType::IgnoreCaseAndNonSpacingCharacters },
    { "LooseAndIgnoreCase", T__ContainmentComparisonType::LooseAndIgnoreCase },
    { "LooseAndIgnoreNonSpace", T__ContainmentComparisonType::LooseAndIgnoreNonSpace },
    { "LooseAndIgnoreCaseAndIgnoreNonSpace", T__ContainmentComparisonType::LooseAndIgnoreCaseAndIgnoreNonSpace }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 8; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ContainmentComparisonType'.", qPrintable(str) );
}

T__ContainmentComparisonType::T__ContainmentComparisonType()
    : mType(Type(0))
{
}

T__ContainmentComparisonType::~T__ContainmentComparisonType()
{
}


T__SearchFolderTraversalType::T__SearchFolderTraversalType( const Type &type )
{
    mType = type;
}

void T__SearchFolderTraversalType::setType( Type type )
{
    mType = type;
}

T__SearchFolderTraversalType::Type T__SearchFolderTraversalType::type() const
{
    return mType;
}

T__SearchFolderTraversalType::operator Type() const
{
    return mType;
}

QVariant T__SearchFolderTraversalType::serialize() const
{
    switch ( mType ) {
        case T__SearchFolderTraversalType::Shallow:
            return QString::fromLatin1("Shallow");
        case T__SearchFolderTraversalType::Deep:
            return QString::fromLatin1("Deep");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__SearchFolderTraversalType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Shallow", T__SearchFolderTraversalType::Shallow },
    { "Deep", T__SearchFolderTraversalType::Deep }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__SearchFolderTraversalType'.", qPrintable(str) );
}

T__SearchFolderTraversalType::T__SearchFolderTraversalType()
    : mType(Type(0))
{
}

T__SearchFolderTraversalType::~T__SearchFolderTraversalType()
{
}


T__BodyTypeType::T__BodyTypeType( const Type &type )
{
    mType = type;
}

void T__BodyTypeType::setType( Type type )
{
    mType = type;
}

T__BodyTypeType::Type T__BodyTypeType::type() const
{
    return mType;
}

T__BodyTypeType::operator Type() const
{
    return mType;
}

QVariant T__BodyTypeType::serialize() const
{
    switch ( mType ) {
        case T__BodyTypeType::HTML:
            return QString::fromLatin1("HTML");
        case T__BodyTypeType::Text:
            return QString::fromLatin1("Text");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__BodyTypeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "HTML", T__BodyTypeType::HTML },
    { "Text", T__BodyTypeType::Text }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__BodyTypeType'.", qPrintable(str) );
}

T__BodyTypeType::T__BodyTypeType()
    : mType(Type(0))
{
}

T__BodyTypeType::~T__BodyTypeType()
{
}


T__NotificationEventTypeType::T__NotificationEventTypeType( const Type &type )
{
    mType = type;
}

void T__NotificationEventTypeType::setType( Type type )
{
    mType = type;
}

T__NotificationEventTypeType::Type T__NotificationEventTypeType::type() const
{
    return mType;
}

T__NotificationEventTypeType::operator Type() const
{
    return mType;
}

QVariant T__NotificationEventTypeType::serialize() const
{
    switch ( mType ) {
        case T__NotificationEventTypeType::CopiedEvent:
            return QString::fromLatin1("CopiedEvent");
        case T__NotificationEventTypeType::CreatedEvent:
            return QString::fromLatin1("CreatedEvent");
        case T__NotificationEventTypeType::DeletedEvent:
            return QString::fromLatin1("DeletedEvent");
        case T__NotificationEventTypeType::ModifiedEvent:
            return QString::fromLatin1("ModifiedEvent");
        case T__NotificationEventTypeType::MovedEvent:
            return QString::fromLatin1("MovedEvent");
        case T__NotificationEventTypeType::NewMailEvent:
            return QString::fromLatin1("NewMailEvent");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__NotificationEventTypeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[6] = {
    { "CopiedEvent", T__NotificationEventTypeType::CopiedEvent },
    { "CreatedEvent", T__NotificationEventTypeType::CreatedEvent },
    { "DeletedEvent", T__NotificationEventTypeType::DeletedEvent },
    { "ModifiedEvent", T__NotificationEventTypeType::ModifiedEvent },
    { "MovedEvent", T__NotificationEventTypeType::MovedEvent },
    { "NewMailEvent", T__NotificationEventTypeType::NewMailEvent }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 6; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__NotificationEventTypeType'.", qPrintable(str) );
}

T__NotificationEventTypeType::T__NotificationEventTypeType()
    : mType(Type(0))
{
}

T__NotificationEventTypeType::~T__NotificationEventTypeType()
{
}


T__ContainmentModeType::T__ContainmentModeType( const Type &type )
{
    mType = type;
}

void T__ContainmentModeType::setType( Type type )
{
    mType = type;
}

T__ContainmentModeType::Type T__ContainmentModeType::type() const
{
    return mType;
}

T__ContainmentModeType::operator Type() const
{
    return mType;
}

QVariant T__ContainmentModeType::serialize() const
{
    switch ( mType ) {
        case T__ContainmentModeType::FullString:
            return QString::fromLatin1("FullString");
        case T__ContainmentModeType::Prefixed:
            return QString::fromLatin1("Prefixed");
        case T__ContainmentModeType::Substring:
            return QString::fromLatin1("Substring");
        case T__ContainmentModeType::PrefixOnWords:
            return QString::fromLatin1("PrefixOnWords");
        case T__ContainmentModeType::ExactPhrase:
            return QString::fromLatin1("ExactPhrase");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ContainmentModeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "FullString", T__ContainmentModeType::FullString },
    { "Prefixed", T__ContainmentModeType::Prefixed },
    { "Substring", T__ContainmentModeType::Substring },
    { "PrefixOnWords", T__ContainmentModeType::PrefixOnWords },
    { "ExactPhrase", T__ContainmentModeType::ExactPhrase }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ContainmentModeType'.", qPrintable(str) );
}

T__ContainmentModeType::T__ContainmentModeType()
    : mType(Type(0))
{
}

T__ContainmentModeType::~T__ContainmentModeType()
{
}


T__ImAddressKeyType::T__ImAddressKeyType( const Type &type )
{
    mType = type;
}

void T__ImAddressKeyType::setType( Type type )
{
    mType = type;
}

T__ImAddressKeyType::Type T__ImAddressKeyType::type() const
{
    return mType;
}

T__ImAddressKeyType::operator Type() const
{
    return mType;
}

QVariant T__ImAddressKeyType::serialize() const
{
    switch ( mType ) {
        case T__ImAddressKeyType::ImAddress1:
            return QString::fromLatin1("ImAddress1");
        case T__ImAddressKeyType::ImAddress2:
            return QString::fromLatin1("ImAddress2");
        case T__ImAddressKeyType::ImAddress3:
            return QString::fromLatin1("ImAddress3");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ImAddressKeyType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "ImAddress1", T__ImAddressKeyType::ImAddress1 },
    { "ImAddress2", T__ImAddressKeyType::ImAddress2 },
    { "ImAddress3", T__ImAddressKeyType::ImAddress3 }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ImAddressKeyType'.", qPrintable(str) );
}

T__ImAddressKeyType::T__ImAddressKeyType()
    : mType(Type(0))
{
}

T__ImAddressKeyType::~T__ImAddressKeyType()
{
}


T__EmailAddressKeyType::T__EmailAddressKeyType( const Type &type )
{
    mType = type;
}

void T__EmailAddressKeyType::setType( Type type )
{
    mType = type;
}

T__EmailAddressKeyType::Type T__EmailAddressKeyType::type() const
{
    return mType;
}

T__EmailAddressKeyType::operator Type() const
{
    return mType;
}

QVariant T__EmailAddressKeyType::serialize() const
{
    switch ( mType ) {
        case T__EmailAddressKeyType::EmailAddress1:
            return QString::fromLatin1("EmailAddress1");
        case T__EmailAddressKeyType::EmailAddress2:
            return QString::fromLatin1("EmailAddress2");
        case T__EmailAddressKeyType::EmailAddress3:
            return QString::fromLatin1("EmailAddress3");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__EmailAddressKeyType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "EmailAddress1", T__EmailAddressKeyType::EmailAddress1 },
    { "EmailAddress2", T__EmailAddressKeyType::EmailAddress2 },
    { "EmailAddress3", T__EmailAddressKeyType::EmailAddress3 }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__EmailAddressKeyType'.", qPrintable(str) );
}

T__EmailAddressKeyType::T__EmailAddressKeyType()
    : mType(Type(0))
{
}

T__EmailAddressKeyType::~T__EmailAddressKeyType()
{
}


T__DayOfWeekIndexType::T__DayOfWeekIndexType( const Type &type )
{
    mType = type;
}

void T__DayOfWeekIndexType::setType( Type type )
{
    mType = type;
}

T__DayOfWeekIndexType::Type T__DayOfWeekIndexType::type() const
{
    return mType;
}

T__DayOfWeekIndexType::operator Type() const
{
    return mType;
}

QVariant T__DayOfWeekIndexType::serialize() const
{
    switch ( mType ) {
        case T__DayOfWeekIndexType::First:
            return QString::fromLatin1("First");
        case T__DayOfWeekIndexType::Second:
            return QString::fromLatin1("Second");
        case T__DayOfWeekIndexType::Third:
            return QString::fromLatin1("Third");
        case T__DayOfWeekIndexType::Fourth:
            return QString::fromLatin1("Fourth");
        case T__DayOfWeekIndexType::Last:
            return QString::fromLatin1("Last");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__DayOfWeekIndexType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "First", T__DayOfWeekIndexType::First },
    { "Second", T__DayOfWeekIndexType::Second },
    { "Third", T__DayOfWeekIndexType::Third },
    { "Fourth", T__DayOfWeekIndexType::Fourth },
    { "Last", T__DayOfWeekIndexType::Last }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__DayOfWeekIndexType'.", qPrintable(str) );
}

T__DayOfWeekIndexType::T__DayOfWeekIndexType()
    : mType(Type(0))
{
}

T__DayOfWeekIndexType::~T__DayOfWeekIndexType()
{
}


T__PhysicalAddressKeyType::T__PhysicalAddressKeyType( const Type &type )
{
    mType = type;
}

void T__PhysicalAddressKeyType::setType( Type type )
{
    mType = type;
}

T__PhysicalAddressKeyType::Type T__PhysicalAddressKeyType::type() const
{
    return mType;
}

T__PhysicalAddressKeyType::operator Type() const
{
    return mType;
}

QVariant T__PhysicalAddressKeyType::serialize() const
{
    switch ( mType ) {
        case T__PhysicalAddressKeyType::Business:
            return QString::fromLatin1("Business");
        case T__PhysicalAddressKeyType::Home:
            return QString::fromLatin1("Home");
        case T__PhysicalAddressKeyType::Other:
            return QString::fromLatin1("Other");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__PhysicalAddressKeyType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Business", T__PhysicalAddressKeyType::Business },
    { "Home", T__PhysicalAddressKeyType::Home },
    { "Other", T__PhysicalAddressKeyType::Other }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__PhysicalAddressKeyType'.", qPrintable(str) );
}

T__PhysicalAddressKeyType::T__PhysicalAddressKeyType()
    : mType(Type(0))
{
}

T__PhysicalAddressKeyType::~T__PhysicalAddressKeyType()
{
}


T__PhoneNumberKeyType::T__PhoneNumberKeyType( const Type &type )
{
    mType = type;
}

void T__PhoneNumberKeyType::setType( Type type )
{
    mType = type;
}

T__PhoneNumberKeyType::Type T__PhoneNumberKeyType::type() const
{
    return mType;
}

T__PhoneNumberKeyType::operator Type() const
{
    return mType;
}

QVariant T__PhoneNumberKeyType::serialize() const
{
    switch ( mType ) {
        case T__PhoneNumberKeyType::AssistantPhone:
            return QString::fromLatin1("AssistantPhone");
        case T__PhoneNumberKeyType::BusinessFax:
            return QString::fromLatin1("BusinessFax");
        case T__PhoneNumberKeyType::BusinessPhone:
            return QString::fromLatin1("BusinessPhone");
        case T__PhoneNumberKeyType::BusinessPhone2:
            return QString::fromLatin1("BusinessPhone2");
        case T__PhoneNumberKeyType::Callback:
            return QString::fromLatin1("Callback");
        case T__PhoneNumberKeyType::CarPhone:
            return QString::fromLatin1("CarPhone");
        case T__PhoneNumberKeyType::CompanyMainPhone:
            return QString::fromLatin1("CompanyMainPhone");
        case T__PhoneNumberKeyType::HomeFax:
            return QString::fromLatin1("HomeFax");
        case T__PhoneNumberKeyType::HomePhone:
            return QString::fromLatin1("HomePhone");
        case T__PhoneNumberKeyType::HomePhone2:
            return QString::fromLatin1("HomePhone2");
        case T__PhoneNumberKeyType::Isdn:
            return QString::fromLatin1("Isdn");
        case T__PhoneNumberKeyType::MobilePhone:
            return QString::fromLatin1("MobilePhone");
        case T__PhoneNumberKeyType::OtherFax:
            return QString::fromLatin1("OtherFax");
        case T__PhoneNumberKeyType::OtherTelephone:
            return QString::fromLatin1("OtherTelephone");
        case T__PhoneNumberKeyType::Pager:
            return QString::fromLatin1("Pager");
        case T__PhoneNumberKeyType::PrimaryPhone:
            return QString::fromLatin1("PrimaryPhone");
        case T__PhoneNumberKeyType::RadioPhone:
            return QString::fromLatin1("RadioPhone");
        case T__PhoneNumberKeyType::Telex:
            return QString::fromLatin1("Telex");
        case T__PhoneNumberKeyType::TtyTddPhone:
            return QString::fromLatin1("TtyTddPhone");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__PhoneNumberKeyType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[19] = {
    { "AssistantPhone", T__PhoneNumberKeyType::AssistantPhone },
    { "BusinessFax", T__PhoneNumberKeyType::BusinessFax },
    { "BusinessPhone", T__PhoneNumberKeyType::BusinessPhone },
    { "BusinessPhone2", T__PhoneNumberKeyType::BusinessPhone2 },
    { "Callback", T__PhoneNumberKeyType::Callback },
    { "CarPhone", T__PhoneNumberKeyType::CarPhone },
    { "CompanyMainPhone", T__PhoneNumberKeyType::CompanyMainPhone },
    { "HomeFax", T__PhoneNumberKeyType::HomeFax },
    { "HomePhone", T__PhoneNumberKeyType::HomePhone },
    { "HomePhone2", T__PhoneNumberKeyType::HomePhone2 },
    { "Isdn", T__PhoneNumberKeyType::Isdn },
    { "MobilePhone", T__PhoneNumberKeyType::MobilePhone },
    { "OtherFax", T__PhoneNumberKeyType::OtherFax },
    { "OtherTelephone", T__PhoneNumberKeyType::OtherTelephone },
    { "Pager", T__PhoneNumberKeyType::Pager },
    { "PrimaryPhone", T__PhoneNumberKeyType::PrimaryPhone },
    { "RadioPhone", T__PhoneNumberKeyType::RadioPhone },
    { "Telex", T__PhoneNumberKeyType::Telex },
    { "TtyTddPhone", T__PhoneNumberKeyType::TtyTddPhone }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 19; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__PhoneNumberKeyType'.", qPrintable(str) );
}

T__PhoneNumberKeyType::T__PhoneNumberKeyType()
    : mType(Type(0))
{
}

T__PhoneNumberKeyType::~T__PhoneNumberKeyType()
{
}


void T__DaysOfWeekType::setEntries( const QList<T__DayOfWeekType>& entries )
{
    mEntries = entries;
}

QList<T__DayOfWeekType> T__DaysOfWeekType::entries() const
{
    return mEntries;
}

QVariant T__DaysOfWeekType::serialize() const
{
    QString str;
    for ( int i = 0; i < mEntries.count(); ++i ) {
        if (!str.isEmpty())
            str += QLatin1Char(' ');
        str += mEntries.at(i).serialize().toString();
    }
    return str;
}

void T__DaysOfWeekType::deserialize( const QVariant& value )
{
    const QStringList list = value.toString().split(QLatin1Char(' '));
    for (int i = 0; i < list.count(); ++i) {
        T__DayOfWeekType tmp;
        tmp.deserialize(list.at(i));
        mEntries.append(tmp);
    }
}

T__DaysOfWeekType::T__DaysOfWeekType()
{
}

T__DaysOfWeekType::~T__DaysOfWeekType()
{
}


T__ExceptionPropertyURIType::T__ExceptionPropertyURIType( const Type &type )
{
    mType = type;
}

void T__ExceptionPropertyURIType::setType( Type type )
{
    mType = type;
}

T__ExceptionPropertyURIType::Type T__ExceptionPropertyURIType::type() const
{
    return mType;
}

T__ExceptionPropertyURIType::operator Type() const
{
    return mType;
}

QVariant T__ExceptionPropertyURIType::serialize() const
{
    switch ( mType ) {
        case T__ExceptionPropertyURIType::Attachment_Name:
            return QString::fromLatin1("attachment:Name");
        case T__ExceptionPropertyURIType::Attachment_ContentType:
            return QString::fromLatin1("attachment:ContentType");
        case T__ExceptionPropertyURIType::Attachment_Content:
            return QString::fromLatin1("attachment:Content");
        case T__ExceptionPropertyURIType::Recurrence_Month:
            return QString::fromLatin1("recurrence:Month");
        case T__ExceptionPropertyURIType::Recurrence_DayOfWeekIndex:
            return QString::fromLatin1("recurrence:DayOfWeekIndex");
        case T__ExceptionPropertyURIType::Recurrence_DaysOfWeek:
            return QString::fromLatin1("recurrence:DaysOfWeek");
        case T__ExceptionPropertyURIType::Recurrence_DayOfMonth:
            return QString::fromLatin1("recurrence:DayOfMonth");
        case T__ExceptionPropertyURIType::Recurrence_Interval:
            return QString::fromLatin1("recurrence:Interval");
        case T__ExceptionPropertyURIType::Recurrence_NumberOfOccurrences:
            return QString::fromLatin1("recurrence:NumberOfOccurrences");
        case T__ExceptionPropertyURIType::Timezone_Offset:
            return QString::fromLatin1("timezone:Offset");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__ExceptionPropertyURIType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[10] = {
    { "attachment:Name", T__ExceptionPropertyURIType::Attachment_Name },
    { "attachment:ContentType", T__ExceptionPropertyURIType::Attachment_ContentType },
    { "attachment:Content", T__ExceptionPropertyURIType::Attachment_Content },
    { "recurrence:Month", T__ExceptionPropertyURIType::Recurrence_Month },
    { "recurrence:DayOfWeekIndex", T__ExceptionPropertyURIType::Recurrence_DayOfWeekIndex },
    { "recurrence:DaysOfWeek", T__ExceptionPropertyURIType::Recurrence_DaysOfWeek },
    { "recurrence:DayOfMonth", T__ExceptionPropertyURIType::Recurrence_DayOfMonth },
    { "recurrence:Interval", T__ExceptionPropertyURIType::Recurrence_Interval },
    { "recurrence:NumberOfOccurrences", T__ExceptionPropertyURIType::Recurrence_NumberOfOccurrences },
    { "timezone:Offset", T__ExceptionPropertyURIType::Timezone_Offset }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 10; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__ExceptionPropertyURIType'.", qPrintable(str) );
}

T__ExceptionPropertyURIType::T__ExceptionPropertyURIType()
    : mType(Type(0))
{
}

T__ExceptionPropertyURIType::~T__ExceptionPropertyURIType()
{
}


void T__ExcludesAttributeType::setValue( const QString& value )
{
    bool rangeOk = true;

    QRegExp exp( QString::fromLatin1("((0x|0X)[0-9A-Fa-f]*)|([0-9]*)") );
    rangeOk = rangeOk && exp.exactMatch( (value) );

    if (!rangeOk)
        qDebug( "Invalid range in T__ExcludesAttributeType::setValue()" );

    mValue = value;
}

QString T__ExcludesAttributeType::value() const
{
    return mValue;
}

T__ExcludesAttributeType::T__ExcludesAttributeType( const QString& value )
{
    setValue(value);
}

T__ExcludesAttributeType::operator QString() const
{
    return mValue;
}

QVariant T__ExcludesAttributeType::serialize() const
{
    return QVariant::fromValue(mValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:363
}

void T__ExcludesAttributeType::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:364
}

T__ExcludesAttributeType::T__ExcludesAttributeType()
{
}

T__ExcludesAttributeType::~T__ExcludesAttributeType()
{
}


T__MonthNamesType::T__MonthNamesType( const Type &type )
{
    mType = type;
}

void T__MonthNamesType::setType( Type type )
{
    mType = type;
}

T__MonthNamesType::Type T__MonthNamesType::type() const
{
    return mType;
}

T__MonthNamesType::operator Type() const
{
    return mType;
}

QVariant T__MonthNamesType::serialize() const
{
    switch ( mType ) {
        case T__MonthNamesType::January:
            return QString::fromLatin1("January");
        case T__MonthNamesType::February:
            return QString::fromLatin1("February");
        case T__MonthNamesType::March:
            return QString::fromLatin1("March");
        case T__MonthNamesType::April:
            return QString::fromLatin1("April");
        case T__MonthNamesType::May:
            return QString::fromLatin1("May");
        case T__MonthNamesType::June:
            return QString::fromLatin1("June");
        case T__MonthNamesType::July:
            return QString::fromLatin1("July");
        case T__MonthNamesType::August:
            return QString::fromLatin1("August");
        case T__MonthNamesType::September:
            return QString::fromLatin1("September");
        case T__MonthNamesType::October:
            return QString::fromLatin1("October");
        case T__MonthNamesType::November:
            return QString::fromLatin1("November");
        case T__MonthNamesType::December:
            return QString::fromLatin1("December");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__MonthNamesType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[12] = {
    { "January", T__MonthNamesType::January },
    { "February", T__MonthNamesType::February },
    { "March", T__MonthNamesType::March },
    { "April", T__MonthNamesType::April },
    { "May", T__MonthNamesType::May },
    { "June", T__MonthNamesType::June },
    { "July", T__MonthNamesType::July },
    { "August", T__MonthNamesType::August },
    { "September", T__MonthNamesType::September },
    { "October", T__MonthNamesType::October },
    { "November", T__MonthNamesType::November },
    { "December", T__MonthNamesType::December }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 12; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__MonthNamesType'.", qPrintable(str) );
}

T__MonthNamesType::T__MonthNamesType()
    : mType(Type(0))
{
}

T__MonthNamesType::~T__MonthNamesType()
{
}


T__PermissionReadAccessType::T__PermissionReadAccessType( const Type &type )
{
    mType = type;
}

void T__PermissionReadAccessType::setType( Type type )
{
    mType = type;
}

T__PermissionReadAccessType::Type T__PermissionReadAccessType::type() const
{
    return mType;
}

T__PermissionReadAccessType::operator Type() const
{
    return mType;
}

QVariant T__PermissionReadAccessType::serialize() const
{
    switch ( mType ) {
        case T__PermissionReadAccessType::None:
            return QString::fromLatin1("None");
        case T__PermissionReadAccessType::FullDetails:
            return QString::fromLatin1("FullDetails");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__PermissionReadAccessType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "None", T__PermissionReadAccessType::None },
    { "FullDetails", T__PermissionReadAccessType::FullDetails }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__PermissionReadAccessType'.", qPrintable(str) );
}

T__PermissionReadAccessType::T__PermissionReadAccessType()
    : mType(Type(0))
{
}

T__PermissionReadAccessType::~T__PermissionReadAccessType()
{
}


T__PermissionLevelType::T__PermissionLevelType( const Type &type )
{
    mType = type;
}

void T__PermissionLevelType::setType( Type type )
{
    mType = type;
}

T__PermissionLevelType::Type T__PermissionLevelType::type() const
{
    return mType;
}

T__PermissionLevelType::operator Type() const
{
    return mType;
}

QVariant T__PermissionLevelType::serialize() const
{
    switch ( mType ) {
        case T__PermissionLevelType::None:
            return QString::fromLatin1("None");
        case T__PermissionLevelType::Owner:
            return QString::fromLatin1("Owner");
        case T__PermissionLevelType::PublishingEditor:
            return QString::fromLatin1("PublishingEditor");
        case T__PermissionLevelType::Editor:
            return QString::fromLatin1("Editor");
        case T__PermissionLevelType::PublishingAuthor:
            return QString::fromLatin1("PublishingAuthor");
        case T__PermissionLevelType::Author:
            return QString::fromLatin1("Author");
        case T__PermissionLevelType::NoneditingAuthor:
            return QString::fromLatin1("NoneditingAuthor");
        case T__PermissionLevelType::Reviewer:
            return QString::fromLatin1("Reviewer");
        case T__PermissionLevelType::Contributor:
            return QString::fromLatin1("Contributor");
        case T__PermissionLevelType::Custom:
            return QString::fromLatin1("Custom");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__PermissionLevelType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[10] = {
    { "None", T__PermissionLevelType::None },
    { "Owner", T__PermissionLevelType::Owner },
    { "PublishingEditor", T__PermissionLevelType::PublishingEditor },
    { "Editor", T__PermissionLevelType::Editor },
    { "PublishingAuthor", T__PermissionLevelType::PublishingAuthor },
    { "Author", T__PermissionLevelType::Author },
    { "NoneditingAuthor", T__PermissionLevelType::NoneditingAuthor },
    { "Reviewer", T__PermissionLevelType::Reviewer },
    { "Contributor", T__PermissionLevelType::Contributor },
    { "Custom", T__PermissionLevelType::Custom }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 10; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__PermissionLevelType'.", qPrintable(str) );
}

T__PermissionLevelType::T__PermissionLevelType()
    : mType(Type(0))
{
}

T__PermissionLevelType::~T__PermissionLevelType()
{
}


T__CalendarPermissionLevelType::T__CalendarPermissionLevelType( const Type &type )
{
    mType = type;
}

void T__CalendarPermissionLevelType::setType( Type type )
{
    mType = type;
}

T__CalendarPermissionLevelType::Type T__CalendarPermissionLevelType::type() const
{
    return mType;
}

T__CalendarPermissionLevelType::operator Type() const
{
    return mType;
}

QVariant T__CalendarPermissionLevelType::serialize() const
{
    switch ( mType ) {
        case T__CalendarPermissionLevelType::None:
            return QString::fromLatin1("None");
        case T__CalendarPermissionLevelType::Owner:
            return QString::fromLatin1("Owner");
        case T__CalendarPermissionLevelType::PublishingEditor:
            return QString::fromLatin1("PublishingEditor");
        case T__CalendarPermissionLevelType::Editor:
            return QString::fromLatin1("Editor");
        case T__CalendarPermissionLevelType::PublishingAuthor:
            return QString::fromLatin1("PublishingAuthor");
        case T__CalendarPermissionLevelType::Author:
            return QString::fromLatin1("Author");
        case T__CalendarPermissionLevelType::NoneditingAuthor:
            return QString::fromLatin1("NoneditingAuthor");
        case T__CalendarPermissionLevelType::Reviewer:
            return QString::fromLatin1("Reviewer");
        case T__CalendarPermissionLevelType::Contributor:
            return QString::fromLatin1("Contributor");
        case T__CalendarPermissionLevelType::FreeBusyTimeOnly:
            return QString::fromLatin1("FreeBusyTimeOnly");
        case T__CalendarPermissionLevelType::FreeBusyTimeAndSubjectAndLocation:
            return QString::fromLatin1("FreeBusyTimeAndSubjectAndLocation");
        case T__CalendarPermissionLevelType::Custom:
            return QString::fromLatin1("Custom");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__CalendarPermissionLevelType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[12] = {
    { "None", T__CalendarPermissionLevelType::None },
    { "Owner", T__CalendarPermissionLevelType::Owner },
    { "PublishingEditor", T__CalendarPermissionLevelType::PublishingEditor },
    { "Editor", T__CalendarPermissionLevelType::Editor },
    { "PublishingAuthor", T__CalendarPermissionLevelType::PublishingAuthor },
    { "Author", T__CalendarPermissionLevelType::Author },
    { "NoneditingAuthor", T__CalendarPermissionLevelType::NoneditingAuthor },
    { "Reviewer", T__CalendarPermissionLevelType::Reviewer },
    { "Contributor", T__CalendarPermissionLevelType::Contributor },
    { "FreeBusyTimeOnly", T__CalendarPermissionLevelType::FreeBusyTimeOnly },
    { "FreeBusyTimeAndSubjectAndLocation", T__CalendarPermissionLevelType::FreeBusyTimeAndSubjectAndLocation },
    { "Custom", T__CalendarPermissionLevelType::Custom }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 12; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__CalendarPermissionLevelType'.", qPrintable(str) );
}

T__CalendarPermissionLevelType::T__CalendarPermissionLevelType()
    : mType(Type(0))
{
}

T__CalendarPermissionLevelType::~T__CalendarPermissionLevelType()
{
}


T__CalendarPermissionReadAccessType::T__CalendarPermissionReadAccessType( const Type &type )
{
    mType = type;
}

void T__CalendarPermissionReadAccessType::setType( Type type )
{
    mType = type;
}

T__CalendarPermissionReadAccessType::Type T__CalendarPermissionReadAccessType::type() const
{
    return mType;
}

T__CalendarPermissionReadAccessType::operator Type() const
{
    return mType;
}

QVariant T__CalendarPermissionReadAccessType::serialize() const
{
    switch ( mType ) {
        case T__CalendarPermissionReadAccessType::None:
            return QString::fromLatin1("None");
        case T__CalendarPermissionReadAccessType::TimeOnly:
            return QString::fromLatin1("TimeOnly");
        case T__CalendarPermissionReadAccessType::TimeAndSubjectAndLocation:
            return QString::fromLatin1("TimeAndSubjectAndLocation");
        case T__CalendarPermissionReadAccessType::FullDetails:
            return QString::fromLatin1("FullDetails");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__CalendarPermissionReadAccessType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "None", T__CalendarPermissionReadAccessType::None },
    { "TimeOnly", T__CalendarPermissionReadAccessType::TimeOnly },
    { "TimeAndSubjectAndLocation", T__CalendarPermissionReadAccessType::TimeAndSubjectAndLocation },
    { "FullDetails", T__CalendarPermissionReadAccessType::FullDetails }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__CalendarPermissionReadAccessType'.", qPrintable(str) );
}

T__CalendarPermissionReadAccessType::T__CalendarPermissionReadAccessType()
    : mType(Type(0))
{
}

T__CalendarPermissionReadAccessType::~T__CalendarPermissionReadAccessType()
{
}


T__PermissionActionType::T__PermissionActionType( const Type &type )
{
    mType = type;
}

void T__PermissionActionType::setType( Type type )
{
    mType = type;
}

T__PermissionActionType::Type T__PermissionActionType::type() const
{
    return mType;
}

T__PermissionActionType::operator Type() const
{
    return mType;
}

QVariant T__PermissionActionType::serialize() const
{
    switch ( mType ) {
        case T__PermissionActionType::None:
            return QString::fromLatin1("None");
        case T__PermissionActionType::Owned:
            return QString::fromLatin1("Owned");
        case T__PermissionActionType::All:
            return QString::fromLatin1("All");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void T__PermissionActionType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "None", T__PermissionActionType::None },
    { "Owned", T__PermissionActionType::Owned },
    { "All", T__PermissionActionType::All }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'T__PermissionActionType'.", qPrintable(str) );
}

T__PermissionActionType::T__PermissionActionType()
    : mType(Type(0))
{
}

T__PermissionActionType::~T__PermissionActionType()
{
}


class T__MimeContentType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
    QString mCharacterSet;
};

void T__MimeContentType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__MimeContentType::value() const
{
    return d_ptr->mValue;
}

T__MimeContentType::T__MimeContentType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

T__MimeContentType::operator QString() const
{
    return d_ptr->mValue;
}

void T__MimeContentType::setCharacterSet( const QString& characterSet )
{
    d_ptr->mCharacterSet = characterSet;
}

QString T__MimeContentType::characterSet() const
{
    return d_ptr->mCharacterSet;
}

KDSoapValue T__MimeContentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MimeContentType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:323
    KDSoapValueList attribs;
    KDSoapValue _valueCharacterSet(QString::fromLatin1("CharacterSet"), QVariant::fromValue(d_ptr->mCharacterSet), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCharacterSet.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueCharacterSet.isNil())
    attribs.append(_valueCharacterSet);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__MimeContentType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("CharacterSet")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCharacterSet = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__MimeContentType::T__MimeContentType()
    : d_ptr(new PrivateDPtr)
{
}

T__MimeContentType::~T__MimeContentType()
{
}

T__MimeContentType::T__MimeContentType( const T__MimeContentType& other )
    : d_ptr( other.d_ptr )
{
}

T__MimeContentType&  T__MimeContentType::operator=( const T__MimeContentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__FieldOrderType::PrivateDPtr : public QSharedData
{
public:
    T__BasePathToElementType mPath;
    T__SortDirectionType mOrder;
};

void T__FieldOrderType::setPath( const T__BasePathToElementType& path )
{
    d_ptr->mPath = path;
}

T__BasePathToElementType T__FieldOrderType::path() const
{
    return d_ptr->mPath;
}

void T__FieldOrderType::setOrder( const T__SortDirectionType& order )
{
    d_ptr->mOrder = order;
}

T__SortDirectionType T__FieldOrderType::order() const
{
    return d_ptr->mOrder;
}

KDSoapValue T__FieldOrderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FieldOrderType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePath(d_ptr->mPath.serialize(QString::fromLatin1("Path")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePath.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePath.setQualified(true);
    if (!_valuePath.isNil())
    args.append(_valuePath);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueOrder(QString::fromLatin1("Order"), d_ptr->mOrder.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SortDirectionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueOrder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueOrder.isNil())
    attribs.append(_valueOrder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__FieldOrderType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Path")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPath.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Order")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOrder.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__FieldOrderType::T__FieldOrderType()
    : d_ptr(new PrivateDPtr)
{
}

T__FieldOrderType::~T__FieldOrderType()
{
}

T__FieldOrderType::T__FieldOrderType( const T__FieldOrderType& other )
    : d_ptr( other.d_ptr )
{
}

T__FieldOrderType&  T__FieldOrderType::operator=( const T__FieldOrderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue T__SearchExpressionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SearchExpressionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    return mainValue;
}

void T__SearchExpressionType::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__SearchExpressionType::T__SearchExpressionType()
{
}

T__SearchExpressionType::~T__SearchExpressionType()
{
}


class T__PermissionSetType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfPermissionsType mPermissions;
    T__ArrayOfUnknownEntriesType mUnknownEntries;
};

void T__PermissionSetType::setPermissions( const T__ArrayOfPermissionsType& permissions )
{
    d_ptr->mPermissions = permissions;
}

T__ArrayOfPermissionsType T__PermissionSetType::permissions() const
{
    return d_ptr->mPermissions;
}

void T__PermissionSetType::setUnknownEntries( const T__ArrayOfUnknownEntriesType& unknownEntries )
{
    d_ptr->mUnknownEntries = unknownEntries;
}

T__ArrayOfUnknownEntriesType T__PermissionSetType::unknownEntries() const
{
    return d_ptr->mUnknownEntries;
}

KDSoapValue T__PermissionSetType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PermissionSetType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePermissions(d_ptr->mPermissions.serialize(QString::fromLatin1("Permissions")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePermissions.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePermissions.setQualified(true);
    if (!_valuePermissions.isNil())
    args.append(_valuePermissions);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueUnknownEntries(d_ptr->mUnknownEntries.serialize(QString::fromLatin1("UnknownEntries")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUnknownEntries.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUnknownEntries.setQualified(true);
    if (!_valueUnknownEntries.isNil())
    args.append(_valueUnknownEntries);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__PermissionSetType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Permissions")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPermissions.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("UnknownEntries")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUnknownEntries.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__PermissionSetType::T__PermissionSetType()
    : d_ptr(new PrivateDPtr)
{
}

T__PermissionSetType::~T__PermissionSetType()
{
}

T__PermissionSetType::T__PermissionSetType( const T__PermissionSetType& other )
    : d_ptr( other.d_ptr )
{
}

T__PermissionSetType&  T__PermissionSetType::operator=( const T__PermissionSetType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfDLExpansionType::PrivateDPtr : public QSharedData
{
public:
    QList<T__EmailAddressType> mMailbox;
};

void T__ArrayOfDLExpansionType::setMailbox( const QList<T__EmailAddressType>& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

QList<T__EmailAddressType> T__ArrayOfDLExpansionType::mailbox() const
{
    return d_ptr->mMailbox;
}

KDSoapValue T__ArrayOfDLExpansionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfDLExpansionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mMailbox.count(); ++i) {
        KDSoapValue _valueMailbox(d_ptr->mMailbox.at(i).serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMailbox.setQualified(true);
        if (!_valueMailbox.isNil())
        args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfDLExpansionType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__EmailAddressType mMailboxTemp;
            mMailboxTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMailbox.append(mMailboxTemp);
        }
    }
}

T__ArrayOfDLExpansionType::T__ArrayOfDLExpansionType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfDLExpansionType::~T__ArrayOfDLExpansionType()
{
}

T__ArrayOfDLExpansionType::T__ArrayOfDLExpansionType( const T__ArrayOfDLExpansionType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfDLExpansionType&  T__ArrayOfDLExpansionType::operator=( const T__ArrayOfDLExpansionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__FindItemParentType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfRealItemsType mItems;
    T__ArrayOfGroupedItemsType mGroups;
};

void T__FindItemParentType::setItems( const T__ArrayOfRealItemsType& items )
{
    d_ptr->mItems = items;
}

T__ArrayOfRealItemsType T__FindItemParentType::items() const
{
    return d_ptr->mItems;
}

void T__FindItemParentType::setGroups( const T__ArrayOfGroupedItemsType& groups )
{
    d_ptr->mGroups = groups;
}

T__ArrayOfGroupedItemsType T__FindItemParentType::groups() const
{
    return d_ptr->mGroups;
}

KDSoapValue T__FindItemParentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FindItemParentType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItems(d_ptr->mItems.serialize(QString::fromLatin1("Items")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItems.setQualified(true);
    if (!_valueItems.isNil())
    args.append(_valueItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueGroups(d_ptr->mGroups.serialize(QString::fromLatin1("Groups")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGroups.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueGroups.setQualified(true);
    if (!_valueGroups.isNil())
    args.append(_valueGroups);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FindItemParentType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Items")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItems.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Groups")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGroups.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__FindItemParentType::T__FindItemParentType()
    : d_ptr(new PrivateDPtr)
{
}

T__FindItemParentType::~T__FindItemParentType()
{
}

T__FindItemParentType::T__FindItemParentType( const T__FindItemParentType& other )
    : d_ptr( other.d_ptr )
{
}

T__FindItemParentType&  T__FindItemParentType::operator=( const T__FindItemParentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__RestrictionType::PrivateDPtr : public QSharedData
{
public:
    T__SearchExpressionType mSearchExpression;
};

void T__RestrictionType::setSearchExpression( const T__SearchExpressionType& searchExpression )
{
    d_ptr->mSearchExpression = searchExpression;
}

T__SearchExpressionType T__RestrictionType::searchExpression() const
{
    return d_ptr->mSearchExpression;
}

KDSoapValue T__RestrictionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RestrictionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSearchExpression(d_ptr->mSearchExpression.serialize(QString::fromLatin1("SearchExpression")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSearchExpression.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSearchExpression.setQualified(true);
    if (!_valueSearchExpression.isNil())
    args.append(_valueSearchExpression);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__RestrictionType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SearchExpression")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSearchExpression.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__RestrictionType::T__RestrictionType()
    : d_ptr(new PrivateDPtr)
{
}

T__RestrictionType::~T__RestrictionType()
{
}

T__RestrictionType::T__RestrictionType( const T__RestrictionType& other )
    : d_ptr( other.d_ptr )
{
}

T__RestrictionType&  T__RestrictionType::operator=( const T__RestrictionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__FolderResponseShapeType::PrivateDPtr : public QSharedData
{
public:
    T__DefaultShapeNamesType mBaseShape;
    T__NonEmptyArrayOfPathsToElementType mAdditionalProperties;
};

void T__FolderResponseShapeType::setBaseShape( const T__DefaultShapeNamesType& baseShape )
{
    d_ptr->mBaseShape = baseShape;
}

T__DefaultShapeNamesType T__FolderResponseShapeType::baseShape() const
{
    return d_ptr->mBaseShape;
}

void T__FolderResponseShapeType::setAdditionalProperties( const T__NonEmptyArrayOfPathsToElementType& additionalProperties )
{
    d_ptr->mAdditionalProperties = additionalProperties;
}

T__NonEmptyArrayOfPathsToElementType T__FolderResponseShapeType::additionalProperties() const
{
    return d_ptr->mAdditionalProperties;
}

KDSoapValue T__FolderResponseShapeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FolderResponseShapeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueBaseShape(QString::fromLatin1("BaseShape"), d_ptr->mBaseShape.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DefaultShapeNamesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueBaseShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBaseShape.setQualified(true);
    if (!_valueBaseShape.isNil())
    args.append(_valueBaseShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAdditionalProperties(d_ptr->mAdditionalProperties.serialize(QString::fromLatin1("AdditionalProperties")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAdditionalProperties.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAdditionalProperties.setQualified(true);
    if (!_valueAdditionalProperties.isNil())
    args.append(_valueAdditionalProperties);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FolderResponseShapeType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("BaseShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBaseShape.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("AdditionalProperties")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAdditionalProperties.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__FolderResponseShapeType::T__FolderResponseShapeType()
    : d_ptr(new PrivateDPtr)
{
}

T__FolderResponseShapeType::~T__FolderResponseShapeType()
{
}

T__FolderResponseShapeType::T__FolderResponseShapeType( const T__FolderResponseShapeType& other )
    : d_ptr( other.d_ptr )
{
}

T__FolderResponseShapeType&  T__FolderResponseShapeType::operator=( const T__FolderResponseShapeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfFolderChangesType::PrivateDPtr : public QSharedData
{
public:
    QList<T__FolderChangeType> mFolderChange;
};

void T__NonEmptyArrayOfFolderChangesType::setFolderChange( const QList<T__FolderChangeType>& folderChange )
{
    d_ptr->mFolderChange = folderChange;
}

QList<T__FolderChangeType> T__NonEmptyArrayOfFolderChangesType::folderChange() const
{
    return d_ptr->mFolderChange;
}

KDSoapValue T__NonEmptyArrayOfFolderChangesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfFolderChangesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mFolderChange.count(); ++i) {
        KDSoapValue _valueFolderChange(d_ptr->mFolderChange.at(i).serialize(QString::fromLatin1("FolderChange")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFolderChange.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueFolderChange.setQualified(true);
        if (!_valueFolderChange.isNil())
        args.append(_valueFolderChange);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfFolderChangesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderChange")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__FolderChangeType mFolderChangeTemp;
            mFolderChangeTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFolderChange.append(mFolderChangeTemp);
        }
    }
}

T__NonEmptyArrayOfFolderChangesType::T__NonEmptyArrayOfFolderChangesType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfFolderChangesType::~T__NonEmptyArrayOfFolderChangesType()
{
}

T__NonEmptyArrayOfFolderChangesType::T__NonEmptyArrayOfFolderChangesType( const T__NonEmptyArrayOfFolderChangesType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfFolderChangesType&  T__NonEmptyArrayOfFolderChangesType::operator=( const T__NonEmptyArrayOfFolderChangesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ServerVersionInfo::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mMajorVersion;
    int mMinorVersion;
    int mMajorBuildNumber;
    int mMinorBuildNumber;
    QString mVersion;
};

T__ServerVersionInfo::PrivateDPtr::PrivateDPtr()
    : mMajorVersion(0), mMinorVersion(0), mMajorBuildNumber(0), mMinorBuildNumber(0)
{
}


void T__ServerVersionInfo::setMajorVersion( int majorVersion )
{
    d_ptr->mMajorVersion = majorVersion;
}

int T__ServerVersionInfo::majorVersion() const
{
    return d_ptr->mMajorVersion;
}

void T__ServerVersionInfo::setMinorVersion( int minorVersion )
{
    d_ptr->mMinorVersion = minorVersion;
}

int T__ServerVersionInfo::minorVersion() const
{
    return d_ptr->mMinorVersion;
}

void T__ServerVersionInfo::setMajorBuildNumber( int majorBuildNumber )
{
    d_ptr->mMajorBuildNumber = majorBuildNumber;
}

int T__ServerVersionInfo::majorBuildNumber() const
{
    return d_ptr->mMajorBuildNumber;
}

void T__ServerVersionInfo::setMinorBuildNumber( int minorBuildNumber )
{
    d_ptr->mMinorBuildNumber = minorBuildNumber;
}

int T__ServerVersionInfo::minorBuildNumber() const
{
    return d_ptr->mMinorBuildNumber;
}

void T__ServerVersionInfo::setVersion( const QString& version )
{
    d_ptr->mVersion = version;
}

QString T__ServerVersionInfo::version() const
{
    return d_ptr->mVersion;
}

KDSoapValue T__ServerVersionInfo::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ServerVersionInfo"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList attribs;
    KDSoapValue _valueMajorVersion(QString::fromLatin1("MajorVersion"), QVariant::fromValue(d_ptr->mMajorVersion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMajorVersion.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueMajorVersion.isNil())
    attribs.append(_valueMajorVersion);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMinorVersion(QString::fromLatin1("MinorVersion"), QVariant::fromValue(d_ptr->mMinorVersion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMinorVersion.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueMinorVersion.isNil())
    attribs.append(_valueMinorVersion);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMajorBuildNumber(QString::fromLatin1("MajorBuildNumber"), QVariant::fromValue(d_ptr->mMajorBuildNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMajorBuildNumber.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueMajorBuildNumber.isNil())
    attribs.append(_valueMajorBuildNumber);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMinorBuildNumber(QString::fromLatin1("MinorBuildNumber"), QVariant::fromValue(d_ptr->mMinorBuildNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMinorBuildNumber.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueMinorBuildNumber.isNil())
    attribs.append(_valueMinorBuildNumber);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueVersion(QString::fromLatin1("Version"), QVariant::fromValue(d_ptr->mVersion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueVersion.isNil())
    attribs.append(_valueVersion);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ServerVersionInfo::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("MajorVersion")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMajorVersion = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MinorVersion")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMinorVersion = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MajorBuildNumber")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMajorBuildNumber = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MinorBuildNumber")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMinorBuildNumber = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Version")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mVersion = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ServerVersionInfo::T__ServerVersionInfo()
    : d_ptr(new PrivateDPtr)
{
}

T__ServerVersionInfo::~T__ServerVersionInfo()
{
}

T__ServerVersionInfo::T__ServerVersionInfo( const T__ServerVersionInfo& other )
    : d_ptr( other.d_ptr )
{
}

T__ServerVersionInfo&  T__ServerVersionInfo::operator=( const T__ServerVersionInfo& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__CalendarPermissionSetType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfCalendarPermissionsType mCalendarPermissions;
    T__ArrayOfUnknownEntriesType mUnknownEntries;
};

void T__CalendarPermissionSetType::setCalendarPermissions( const T__ArrayOfCalendarPermissionsType& calendarPermissions )
{
    d_ptr->mCalendarPermissions = calendarPermissions;
}

T__ArrayOfCalendarPermissionsType T__CalendarPermissionSetType::calendarPermissions() const
{
    return d_ptr->mCalendarPermissions;
}

void T__CalendarPermissionSetType::setUnknownEntries( const T__ArrayOfUnknownEntriesType& unknownEntries )
{
    d_ptr->mUnknownEntries = unknownEntries;
}

T__ArrayOfUnknownEntriesType T__CalendarPermissionSetType::unknownEntries() const
{
    return d_ptr->mUnknownEntries;
}

KDSoapValue T__CalendarPermissionSetType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarPermissionSetType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueCalendarPermissions(d_ptr->mCalendarPermissions.serialize(QString::fromLatin1("CalendarPermissions")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarPermissions.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarPermissions.setQualified(true);
    if (!_valueCalendarPermissions.isNil())
    args.append(_valueCalendarPermissions);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueUnknownEntries(d_ptr->mUnknownEntries.serialize(QString::fromLatin1("UnknownEntries")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUnknownEntries.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUnknownEntries.setQualified(true);
    if (!_valueUnknownEntries.isNil())
    args.append(_valueUnknownEntries);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__CalendarPermissionSetType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CalendarPermissions")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarPermissions.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("UnknownEntries")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUnknownEntries.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__CalendarPermissionSetType::T__CalendarPermissionSetType()
    : d_ptr(new PrivateDPtr)
{
}

T__CalendarPermissionSetType::~T__CalendarPermissionSetType()
{
}

T__CalendarPermissionSetType::T__CalendarPermissionSetType( const T__CalendarPermissionSetType& other )
    : d_ptr( other.d_ptr )
{
}

T__CalendarPermissionSetType&  T__CalendarPermissionSetType::operator=( const T__CalendarPermissionSetType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__GetUserOofSettingsResponse::PrivateDPtr : public QSharedData
{
public:
    TNS__ResponseMessageType mResponseMessage;
    T__UserOofSettings mOofSettings;
    T__ExternalAudience mAllowExternalOof;
};

void TNS__GetUserOofSettingsResponse::setResponseMessage( const TNS__ResponseMessageType& responseMessage )
{
    d_ptr->mResponseMessage = responseMessage;
}

TNS__ResponseMessageType TNS__GetUserOofSettingsResponse::responseMessage() const
{
    return d_ptr->mResponseMessage;
}

void TNS__GetUserOofSettingsResponse::setOofSettings( const T__UserOofSettings& oofSettings )
{
    d_ptr->mOofSettings = oofSettings;
}

T__UserOofSettings TNS__GetUserOofSettingsResponse::oofSettings() const
{
    return d_ptr->mOofSettings;
}

void TNS__GetUserOofSettingsResponse::setAllowExternalOof( const T__ExternalAudience& allowExternalOof )
{
    d_ptr->mAllowExternalOof = allowExternalOof;
}

T__ExternalAudience TNS__GetUserOofSettingsResponse::allowExternalOof() const
{
    return d_ptr->mAllowExternalOof;
}

KDSoapValue TNS__GetUserOofSettingsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetUserOofSettingsResponse"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueResponseMessage(d_ptr->mResponseMessage.serialize(QString::fromLatin1("ResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResponseMessage.setQualified(true);
    if (!_valueResponseMessage.isNil())
    args.append(_valueResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOofSettings(d_ptr->mOofSettings.serialize(QString::fromLatin1("OofSettings")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOofSettings.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOofSettings.setQualified(true);
    if (!_valueOofSettings.isNil())
    args.append(_valueOofSettings);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAllowExternalOof(QString::fromLatin1("AllowExternalOof"), d_ptr->mAllowExternalOof.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExternalAudience"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueAllowExternalOof.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAllowExternalOof.setQualified(true);
    if (!_valueAllowExternalOof.isNil())
    args.append(_valueAllowExternalOof);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetUserOofSettingsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("OofSettings")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOofSettings.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AllowExternalOof")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAllowExternalOof.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__GetUserOofSettingsResponse::TNS__GetUserOofSettingsResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetUserOofSettingsResponse::~TNS__GetUserOofSettingsResponse()
{
}

TNS__GetUserOofSettingsResponse::TNS__GetUserOofSettingsResponse( const TNS__GetUserOofSettingsResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetUserOofSettingsResponse&  TNS__GetUserOofSettingsResponse::operator=( const TNS__GetUserOofSettingsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ArrayOfFreeBusyResponse::PrivateDPtr : public QSharedData
{
public:
    QList<TNS__FreeBusyResponseType> mFreeBusyResponse;
};

void TNS__ArrayOfFreeBusyResponse::setFreeBusyResponse( const QList<TNS__FreeBusyResponseType>& freeBusyResponse )
{
    d_ptr->mFreeBusyResponse = freeBusyResponse;
}

QList<TNS__FreeBusyResponseType> TNS__ArrayOfFreeBusyResponse::freeBusyResponse() const
{
    return d_ptr->mFreeBusyResponse;
}

KDSoapValue TNS__ArrayOfFreeBusyResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ArrayOfFreeBusyResponse"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mFreeBusyResponse.count(); ++i) {
        KDSoapValue _valueFreeBusyResponse(d_ptr->mFreeBusyResponse.at(i).serialize(QString::fromLatin1("FreeBusyResponse")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFreeBusyResponse.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueFreeBusyResponse.setQualified(true);
        if (!_valueFreeBusyResponse.isNil())
        args.append(_valueFreeBusyResponse);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void TNS__ArrayOfFreeBusyResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FreeBusyResponse")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FreeBusyResponseType mFreeBusyResponseTemp;
            mFreeBusyResponseTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFreeBusyResponse.append(mFreeBusyResponseTemp);
        }
    }
}

TNS__ArrayOfFreeBusyResponse::TNS__ArrayOfFreeBusyResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ArrayOfFreeBusyResponse::~TNS__ArrayOfFreeBusyResponse()
{
}

TNS__ArrayOfFreeBusyResponse::TNS__ArrayOfFreeBusyResponse( const TNS__ArrayOfFreeBusyResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ArrayOfFreeBusyResponse&  TNS__ArrayOfFreeBusyResponse::operator=( const TNS__ArrayOfFreeBusyResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__InternetHeaderType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
    QString mHeaderName;
};

void T__InternetHeaderType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__InternetHeaderType::value() const
{
    return d_ptr->mValue;
}

T__InternetHeaderType::T__InternetHeaderType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

T__InternetHeaderType::operator QString() const
{
    return d_ptr->mValue;
}

void T__InternetHeaderType::setHeaderName( const QString& headerName )
{
    d_ptr->mHeaderName = headerName;
}

QString T__InternetHeaderType::headerName() const
{
    return d_ptr->mHeaderName;
}

KDSoapValue T__InternetHeaderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("InternetHeaderType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:323
    KDSoapValueList attribs;
    KDSoapValue _valueHeaderName(QString::fromLatin1("HeaderName"), QVariant::fromValue(d_ptr->mHeaderName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueHeaderName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueHeaderName.isNil())
    attribs.append(_valueHeaderName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__InternetHeaderType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("HeaderName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mHeaderName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__InternetHeaderType::T__InternetHeaderType()
    : d_ptr(new PrivateDPtr)
{
}

T__InternetHeaderType::~T__InternetHeaderType()
{
}

T__InternetHeaderType::T__InternetHeaderType( const T__InternetHeaderType& other )
    : d_ptr( other.d_ptr )
{
}

T__InternetHeaderType&  T__InternetHeaderType::operator=( const T__InternetHeaderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__EmailAddressDictionaryEntryType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
    T__EmailAddressKeyType mKey;
};

void T__EmailAddressDictionaryEntryType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__EmailAddressDictionaryEntryType::value() const
{
    return d_ptr->mValue;
}

T__EmailAddressDictionaryEntryType::T__EmailAddressDictionaryEntryType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

T__EmailAddressDictionaryEntryType::operator QString() const
{
    return d_ptr->mValue;
}

void T__EmailAddressDictionaryEntryType::setKey( const T__EmailAddressKeyType& key )
{
    d_ptr->mKey = key;
}

T__EmailAddressKeyType T__EmailAddressDictionaryEntryType::key() const
{
    return d_ptr->mKey;
}

KDSoapValue T__EmailAddressDictionaryEntryType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("EmailAddressDictionaryEntryType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:323
    KDSoapValueList attribs;
    KDSoapValue _valueKey(QString::fromLatin1("Key"), d_ptr->mKey.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("EmailAddressKeyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueKey.isNil())
    attribs.append(_valueKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__EmailAddressDictionaryEntryType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Key")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mKey.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__EmailAddressDictionaryEntryType::T__EmailAddressDictionaryEntryType()
    : d_ptr(new PrivateDPtr)
{
}

T__EmailAddressDictionaryEntryType::~T__EmailAddressDictionaryEntryType()
{
}

T__EmailAddressDictionaryEntryType::T__EmailAddressDictionaryEntryType( const T__EmailAddressDictionaryEntryType& other )
    : d_ptr( other.d_ptr )
{
}

T__EmailAddressDictionaryEntryType&  T__EmailAddressDictionaryEntryType::operator=( const T__EmailAddressDictionaryEntryType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfDeletedOccurrencesType::PrivateDPtr : public QSharedData
{
public:
    QList<T__DeletedOccurrenceInfoType> mDeletedOccurrence;
};

void T__NonEmptyArrayOfDeletedOccurrencesType::setDeletedOccurrence( const QList<T__DeletedOccurrenceInfoType>& deletedOccurrence )
{
    d_ptr->mDeletedOccurrence = deletedOccurrence;
}

QList<T__DeletedOccurrenceInfoType> T__NonEmptyArrayOfDeletedOccurrencesType::deletedOccurrence() const
{
    return d_ptr->mDeletedOccurrence;
}

KDSoapValue T__NonEmptyArrayOfDeletedOccurrencesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfDeletedOccurrencesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mDeletedOccurrence.count(); ++i) {
        KDSoapValue _valueDeletedOccurrence(d_ptr->mDeletedOccurrence.at(i).serialize(QString::fromLatin1("DeletedOccurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeletedOccurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDeletedOccurrence.setQualified(true);
        if (!_valueDeletedOccurrence.isNil())
        args.append(_valueDeletedOccurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfDeletedOccurrencesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DeletedOccurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DeletedOccurrenceInfoType mDeletedOccurrenceTemp;
            mDeletedOccurrenceTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeletedOccurrence.append(mDeletedOccurrenceTemp);
        }
    }
}

T__NonEmptyArrayOfDeletedOccurrencesType::T__NonEmptyArrayOfDeletedOccurrencesType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfDeletedOccurrencesType::~T__NonEmptyArrayOfDeletedOccurrencesType()
{
}

T__NonEmptyArrayOfDeletedOccurrencesType::T__NonEmptyArrayOfDeletedOccurrencesType( const T__NonEmptyArrayOfDeletedOccurrencesType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfDeletedOccurrencesType&  T__NonEmptyArrayOfDeletedOccurrencesType::operator=( const T__NonEmptyArrayOfDeletedOccurrencesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__TimeChangeType::PrivateDPtr : public QSharedData
{
public:
    QString mOffset;
    QTime mTime;
    T__RelativeYearlyRecurrencePatternType mRelativeYearlyRecurrence;
    QDate mAbsoluteDate;
    QString mTimeZoneName;
};

void T__TimeChangeType::setOffset( const QString& offset )
{
    d_ptr->mOffset = offset;
}

QString T__TimeChangeType::offset() const
{
    return d_ptr->mOffset;
}

void T__TimeChangeType::setTime( const QTime& time )
{
    d_ptr->mTime = time;
}

QTime T__TimeChangeType::time() const
{
    return d_ptr->mTime;
}

void T__TimeChangeType::setRelativeYearlyRecurrence( const T__RelativeYearlyRecurrencePatternType& relativeYearlyRecurrence )
{
    d_ptr->mRelativeYearlyRecurrence = relativeYearlyRecurrence;
}

T__RelativeYearlyRecurrencePatternType T__TimeChangeType::relativeYearlyRecurrence() const
{
    return d_ptr->mRelativeYearlyRecurrence;
}

void T__TimeChangeType::setAbsoluteDate( const QDate& absoluteDate )
{
    d_ptr->mAbsoluteDate = absoluteDate;
}

QDate T__TimeChangeType::absoluteDate() const
{
    return d_ptr->mAbsoluteDate;
}

void T__TimeChangeType::setTimeZoneName( const QString& timeZoneName )
{
    d_ptr->mTimeZoneName = timeZoneName;
}

QString T__TimeChangeType::timeZoneName() const
{
    return d_ptr->mTimeZoneName;
}

KDSoapValue T__TimeChangeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TimeChangeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueOffset(QString::fromLatin1("Offset"), QVariant::fromValue(d_ptr->mOffset), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueOffset.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOffset.setQualified(true);
    if (!_valueOffset.isNil())
    args.append(_valueOffset);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTime(QString::fromLatin1("Time"), QVariant::fromValue(d_ptr->mTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("time"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTime.setQualified(true);
    if (!_valueTime.isNil())
    args.append(_valueTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRelativeYearlyRecurrence(d_ptr->mRelativeYearlyRecurrence.serialize(QString::fromLatin1("RelativeYearlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRelativeYearlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRelativeYearlyRecurrence.setQualified(true);
    if (!_valueRelativeYearlyRecurrence.isNil())
    args.append(_valueRelativeYearlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAbsoluteDate(QString::fromLatin1("AbsoluteDate"), QVariant::fromValue(d_ptr->mAbsoluteDate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("date"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAbsoluteDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAbsoluteDate.setQualified(true);
    if (!_valueAbsoluteDate.isNil())
    args.append(_valueAbsoluteDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueTimeZoneName(QString::fromLatin1("TimeZoneName"), QVariant::fromValue(d_ptr->mTimeZoneName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTimeZoneName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueTimeZoneName.isNil())
    attribs.append(_valueTimeZoneName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__TimeChangeType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Offset")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOffset = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Time")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTime = val.value().value<QTime>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("RelativeYearlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRelativeYearlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AbsoluteDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAbsoluteDate = val.value().value<QDate>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("TimeZoneName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeZoneName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__TimeChangeType::T__TimeChangeType()
    : d_ptr(new PrivateDPtr)
{
}

T__TimeChangeType::~T__TimeChangeType()
{
}

T__TimeChangeType::T__TimeChangeType( const T__TimeChangeType& other )
    : d_ptr( other.d_ptr )
{
}

T__TimeChangeType&  T__TimeChangeType::operator=( const T__TimeChangeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfCalendarPermissionsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__CalendarPermissionType> mCalendarPermission;
};

void T__ArrayOfCalendarPermissionsType::setCalendarPermission( const QList<T__CalendarPermissionType>& calendarPermission )
{
    d_ptr->mCalendarPermission = calendarPermission;
}

QList<T__CalendarPermissionType> T__ArrayOfCalendarPermissionsType::calendarPermission() const
{
    return d_ptr->mCalendarPermission;
}

KDSoapValue T__ArrayOfCalendarPermissionsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfCalendarPermissionsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mCalendarPermission.count(); ++i) {
        KDSoapValue _valueCalendarPermission(d_ptr->mCalendarPermission.at(i).serialize(QString::fromLatin1("CalendarPermission")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCalendarPermission.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCalendarPermission.setQualified(true);
        if (!_valueCalendarPermission.isNil())
        args.append(_valueCalendarPermission);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfCalendarPermissionsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CalendarPermission")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__CalendarPermissionType mCalendarPermissionTemp;
            mCalendarPermissionTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCalendarPermission.append(mCalendarPermissionTemp);
        }
    }
}

T__ArrayOfCalendarPermissionsType::T__ArrayOfCalendarPermissionsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfCalendarPermissionsType::~T__ArrayOfCalendarPermissionsType()
{
}

T__ArrayOfCalendarPermissionsType::T__ArrayOfCalendarPermissionsType( const T__ArrayOfCalendarPermissionsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfCalendarPermissionsType&  T__ArrayOfCalendarPermissionsType::operator=( const T__ArrayOfCalendarPermissionsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__FolderChangeType::PrivateDPtr : public QSharedData
{
public:
    T__FolderIdType mFolderId;
    T__DistinguishedFolderIdType mDistinguishedFolderId;
    T__NonEmptyArrayOfFolderChangeDescriptionsType mUpdates;
};

void T__FolderChangeType::setFolderId( const T__FolderIdType& folderId )
{
    d_ptr->mFolderId = folderId;
}

T__FolderIdType T__FolderChangeType::folderId() const
{
    return d_ptr->mFolderId;
}

void T__FolderChangeType::setDistinguishedFolderId( const T__DistinguishedFolderIdType& distinguishedFolderId )
{
    d_ptr->mDistinguishedFolderId = distinguishedFolderId;
}

T__DistinguishedFolderIdType T__FolderChangeType::distinguishedFolderId() const
{
    return d_ptr->mDistinguishedFolderId;
}

void T__FolderChangeType::setUpdates( const T__NonEmptyArrayOfFolderChangeDescriptionsType& updates )
{
    d_ptr->mUpdates = updates;
}

T__NonEmptyArrayOfFolderChangeDescriptionsType T__FolderChangeType::updates() const
{
    return d_ptr->mUpdates;
}

KDSoapValue T__FolderChangeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FolderChangeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderId(d_ptr->mFolderId.serialize(QString::fromLatin1("FolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolderId.setQualified(true);
    if (!_valueFolderId.isNil())
    args.append(_valueFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDistinguishedFolderId(d_ptr->mDistinguishedFolderId.serialize(QString::fromLatin1("DistinguishedFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDistinguishedFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDistinguishedFolderId.setQualified(true);
    if (!_valueDistinguishedFolderId.isNil())
    args.append(_valueDistinguishedFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueUpdates(d_ptr->mUpdates.serialize(QString::fromLatin1("Updates")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdates.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUpdates.setQualified(true);
    if (!_valueUpdates.isNil())
    args.append(_valueUpdates);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FolderChangeType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DistinguishedFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDistinguishedFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Updates")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUpdates.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__FolderChangeType::T__FolderChangeType()
    : d_ptr(new PrivateDPtr)
{
}

T__FolderChangeType::~T__FolderChangeType()
{
}

T__FolderChangeType::T__FolderChangeType( const T__FolderChangeType& other )
    : d_ptr( other.d_ptr )
{
}

T__FolderChangeType&  T__FolderChangeType::operator=( const T__FolderChangeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__RecurrenceRangeBaseType::PrivateDPtr : public QSharedData
{
public:
    QDate mStartDate;
};

void T__RecurrenceRangeBaseType::setStartDate( const QDate& startDate )
{
    d_ptr->mStartDate = startDate;
}

QDate T__RecurrenceRangeBaseType::startDate() const
{
    return d_ptr->mStartDate;
}

KDSoapValue T__RecurrenceRangeBaseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RecurrenceRangeBaseType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueStartDate(QString::fromLatin1("StartDate"), QVariant::fromValue(d_ptr->mStartDate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("date"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStartDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStartDate.setQualified(true);
    if (!_valueStartDate.isNil())
    args.append(_valueStartDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__RecurrenceRangeBaseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("StartDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStartDate = val.value().value<QDate>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__RecurrenceRangeBaseType::T__RecurrenceRangeBaseType()
    : d_ptr(new PrivateDPtr)
{
}

T__RecurrenceRangeBaseType::~T__RecurrenceRangeBaseType()
{
}

T__RecurrenceRangeBaseType::T__RecurrenceRangeBaseType( const T__RecurrenceRangeBaseType& other )
    : d_ptr( other.d_ptr )
{
}

T__RecurrenceRangeBaseType&  T__RecurrenceRangeBaseType::operator=( const T__RecurrenceRangeBaseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SyncFolderHierarchyChangesType::PrivateDPtr : public QSharedData
{
public:
    QList<T__SyncFolderHierarchyCreateOrUpdateType> mCreate;
    QList<T__SyncFolderHierarchyCreateOrUpdateType> mUpdate;
    QList<T__SyncFolderHierarchyDeleteType> mDelete;
};

void T__SyncFolderHierarchyChangesType::setCreate( const QList<T__SyncFolderHierarchyCreateOrUpdateType>& create )
{
    d_ptr->mCreate = create;
}

QList<T__SyncFolderHierarchyCreateOrUpdateType> T__SyncFolderHierarchyChangesType::create() const
{
    return d_ptr->mCreate;
}

void T__SyncFolderHierarchyChangesType::setUpdate( const QList<T__SyncFolderHierarchyCreateOrUpdateType>& update )
{
    d_ptr->mUpdate = update;
}

QList<T__SyncFolderHierarchyCreateOrUpdateType> T__SyncFolderHierarchyChangesType::update() const
{
    return d_ptr->mUpdate;
}

void T__SyncFolderHierarchyChangesType::setDelete( const QList<T__SyncFolderHierarchyDeleteType>& delete_ )
{
    d_ptr->mDelete = delete_;
}

QList<T__SyncFolderHierarchyDeleteType> T__SyncFolderHierarchyChangesType::delete_() const
{
    return d_ptr->mDelete;
}

KDSoapValue T__SyncFolderHierarchyChangesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SyncFolderHierarchyChangesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mCreate.count(); ++i) {
        KDSoapValue _valueCreate(d_ptr->mCreate.at(i).serialize(QString::fromLatin1("Create")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCreate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCreate.setQualified(true);
        if (!_valueCreate.isNil())
        args.append(_valueCreate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mUpdate.count(); ++i) {
        KDSoapValue _valueUpdate(d_ptr->mUpdate.at(i).serialize(QString::fromLatin1("Update")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueUpdate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueUpdate.setQualified(true);
        if (!_valueUpdate.isNil())
        args.append(_valueUpdate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDelete.count(); ++i) {
        KDSoapValue _valueDelete(d_ptr->mDelete.at(i).serialize(QString::fromLatin1("Delete")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDelete.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDelete.setQualified(true);
        if (!_valueDelete.isNil())
        args.append(_valueDelete);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__SyncFolderHierarchyChangesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Create")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SyncFolderHierarchyCreateOrUpdateType mCreateTemp;
            mCreateTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCreate.append(mCreateTemp);
        }
        else if (name == QLatin1String("Update")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SyncFolderHierarchyCreateOrUpdateType mUpdateTemp;
            mUpdateTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mUpdate.append(mUpdateTemp);
        }
        else if (name == QLatin1String("Delete")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SyncFolderHierarchyDeleteType mDeleteTemp;
            mDeleteTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDelete.append(mDeleteTemp);
        }
    }
}

T__SyncFolderHierarchyChangesType::T__SyncFolderHierarchyChangesType()
    : d_ptr(new PrivateDPtr)
{
}

T__SyncFolderHierarchyChangesType::~T__SyncFolderHierarchyChangesType()
{
}

T__SyncFolderHierarchyChangesType::T__SyncFolderHierarchyChangesType( const T__SyncFolderHierarchyChangesType& other )
    : d_ptr( other.d_ptr )
{
}

T__SyncFolderHierarchyChangesType&  T__SyncFolderHierarchyChangesType::operator=( const T__SyncFolderHierarchyChangesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__TargetFolderIdType::PrivateDPtr : public QSharedData
{
public:
    T__FolderIdType mFolderId;
    T__DistinguishedFolderIdType mDistinguishedFolderId;
};

void T__TargetFolderIdType::setFolderId( const T__FolderIdType& folderId )
{
    d_ptr->mFolderId = folderId;
}

T__FolderIdType T__TargetFolderIdType::folderId() const
{
    return d_ptr->mFolderId;
}

void T__TargetFolderIdType::setDistinguishedFolderId( const T__DistinguishedFolderIdType& distinguishedFolderId )
{
    d_ptr->mDistinguishedFolderId = distinguishedFolderId;
}

T__DistinguishedFolderIdType T__TargetFolderIdType::distinguishedFolderId() const
{
    return d_ptr->mDistinguishedFolderId;
}

KDSoapValue T__TargetFolderIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TargetFolderIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderId(d_ptr->mFolderId.serialize(QString::fromLatin1("FolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolderId.setQualified(true);
    if (!_valueFolderId.isNil())
    args.append(_valueFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDistinguishedFolderId(d_ptr->mDistinguishedFolderId.serialize(QString::fromLatin1("DistinguishedFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDistinguishedFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDistinguishedFolderId.setQualified(true);
    if (!_valueDistinguishedFolderId.isNil())
    args.append(_valueDistinguishedFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__TargetFolderIdType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DistinguishedFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDistinguishedFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__TargetFolderIdType::T__TargetFolderIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__TargetFolderIdType::~T__TargetFolderIdType()
{
}

T__TargetFolderIdType::T__TargetFolderIdType( const T__TargetFolderIdType& other )
    : d_ptr( other.d_ptr )
{
}

T__TargetFolderIdType&  T__TargetFolderIdType::operator=( const T__TargetFolderIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__MailboxData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__EmailAddress mEmail;
    T__MeetingAttendeeType mAttendeeType;
    bool mExcludeConflicts;
};

T__MailboxData::PrivateDPtr::PrivateDPtr()
    : mExcludeConflicts(false)
{
}


void T__MailboxData::setEmail( const T__EmailAddress& email )
{
    d_ptr->mEmail = email;
}

T__EmailAddress T__MailboxData::email() const
{
    return d_ptr->mEmail;
}

void T__MailboxData::setAttendeeType( const T__MeetingAttendeeType& attendeeType )
{
    d_ptr->mAttendeeType = attendeeType;
}

T__MeetingAttendeeType T__MailboxData::attendeeType() const
{
    return d_ptr->mAttendeeType;
}

void T__MailboxData::setExcludeConflicts( bool excludeConflicts )
{
    d_ptr->mExcludeConflicts = excludeConflicts;
}

bool T__MailboxData::excludeConflicts() const
{
    return d_ptr->mExcludeConflicts;
}

KDSoapValue T__MailboxData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MailboxData"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueEmail(d_ptr->mEmail.serialize(QString::fromLatin1("Email")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueEmail.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEmail.setQualified(true);
    if (!_valueEmail.isNil())
    args.append(_valueEmail);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAttendeeType(QString::fromLatin1("AttendeeType"), d_ptr->mAttendeeType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MeetingAttendeeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueAttendeeType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAttendeeType.setQualified(true);
    if (!_valueAttendeeType.isNil())
    args.append(_valueAttendeeType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueExcludeConflicts(QString::fromLatin1("ExcludeConflicts"), QVariant::fromValue(d_ptr->mExcludeConflicts), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueExcludeConflicts.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueExcludeConflicts.setQualified(true);
    if (!_valueExcludeConflicts.isNil())
    args.append(_valueExcludeConflicts);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__MailboxData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Email")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEmail.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AttendeeType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttendeeType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("ExcludeConflicts")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mExcludeConflicts = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__MailboxData::T__MailboxData()
    : d_ptr(new PrivateDPtr)
{
}

T__MailboxData::~T__MailboxData()
{
}

T__MailboxData::T__MailboxData( const T__MailboxData& other )
    : d_ptr( other.d_ptr )
{
}

T__MailboxData&  T__MailboxData::operator=( const T__MailboxData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SyncFolderItemsReadFlagType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__ItemIdType mItemId;
    bool mIsRead;
};

T__SyncFolderItemsReadFlagType::PrivateDPtr::PrivateDPtr()
    : mIsRead(false)
{
}


void T__SyncFolderItemsReadFlagType::setItemId( const T__ItemIdType& itemId )
{
    d_ptr->mItemId = itemId;
}

T__ItemIdType T__SyncFolderItemsReadFlagType::itemId() const
{
    return d_ptr->mItemId;
}

void T__SyncFolderItemsReadFlagType::setIsRead( bool isRead )
{
    d_ptr->mIsRead = isRead;
}

bool T__SyncFolderItemsReadFlagType::isRead() const
{
    return d_ptr->mIsRead;
}

KDSoapValue T__SyncFolderItemsReadFlagType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SyncFolderItemsReadFlagType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemId(d_ptr->mItemId.serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemId.setQualified(true);
    if (!_valueItemId.isNil())
    args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsRead(QString::fromLatin1("IsRead"), QVariant::fromValue(d_ptr->mIsRead), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsRead.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsRead.setQualified(true);
    if (!_valueIsRead.isNil())
    args.append(_valueIsRead);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SyncFolderItemsReadFlagType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IsRead")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsRead = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__SyncFolderItemsReadFlagType::T__SyncFolderItemsReadFlagType()
    : d_ptr(new PrivateDPtr)
{
}

T__SyncFolderItemsReadFlagType::~T__SyncFolderItemsReadFlagType()
{
}

T__SyncFolderItemsReadFlagType::T__SyncFolderItemsReadFlagType( const T__SyncFolderItemsReadFlagType& other )
    : d_ptr( other.d_ptr )
{
}

T__SyncFolderItemsReadFlagType&  T__SyncFolderItemsReadFlagType::operator=( const T__SyncFolderItemsReadFlagType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NotificationType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__SubscriptionIdType mSubscriptionId;
    T__WatermarkType mPreviousWatermark;
    bool mMoreEvents;
    QList<T__MovedCopiedEventType> mCopiedEvent;
    QList<T__BaseObjectChangedEventType> mCreatedEvent;
    QList<T__BaseObjectChangedEventType> mDeletedEvent;
    QList<T__ModifiedEventType> mModifiedEvent;
    QList<T__MovedCopiedEventType> mMovedEvent;
    QList<T__BaseObjectChangedEventType> mNewMailEvent;
    QList<T__BaseNotificationEventType> mStatusEvent;
};

T__NotificationType::PrivateDPtr::PrivateDPtr()
    : mMoreEvents(false)
{
}


void T__NotificationType::setSubscriptionId( const T__SubscriptionIdType& subscriptionId )
{
    d_ptr->mSubscriptionId = subscriptionId;
}

T__SubscriptionIdType T__NotificationType::subscriptionId() const
{
    return d_ptr->mSubscriptionId;
}

void T__NotificationType::setPreviousWatermark( const T__WatermarkType& previousWatermark )
{
    d_ptr->mPreviousWatermark = previousWatermark;
}

T__WatermarkType T__NotificationType::previousWatermark() const
{
    return d_ptr->mPreviousWatermark;
}

void T__NotificationType::setMoreEvents( bool moreEvents )
{
    d_ptr->mMoreEvents = moreEvents;
}

bool T__NotificationType::moreEvents() const
{
    return d_ptr->mMoreEvents;
}

void T__NotificationType::setCopiedEvent( const QList<T__MovedCopiedEventType>& copiedEvent )
{
    d_ptr->mCopiedEvent = copiedEvent;
}

QList<T__MovedCopiedEventType> T__NotificationType::copiedEvent() const
{
    return d_ptr->mCopiedEvent;
}

void T__NotificationType::setCreatedEvent( const QList<T__BaseObjectChangedEventType>& createdEvent )
{
    d_ptr->mCreatedEvent = createdEvent;
}

QList<T__BaseObjectChangedEventType> T__NotificationType::createdEvent() const
{
    return d_ptr->mCreatedEvent;
}

void T__NotificationType::setDeletedEvent( const QList<T__BaseObjectChangedEventType>& deletedEvent )
{
    d_ptr->mDeletedEvent = deletedEvent;
}

QList<T__BaseObjectChangedEventType> T__NotificationType::deletedEvent() const
{
    return d_ptr->mDeletedEvent;
}

void T__NotificationType::setModifiedEvent( const QList<T__ModifiedEventType>& modifiedEvent )
{
    d_ptr->mModifiedEvent = modifiedEvent;
}

QList<T__ModifiedEventType> T__NotificationType::modifiedEvent() const
{
    return d_ptr->mModifiedEvent;
}

void T__NotificationType::setMovedEvent( const QList<T__MovedCopiedEventType>& movedEvent )
{
    d_ptr->mMovedEvent = movedEvent;
}

QList<T__MovedCopiedEventType> T__NotificationType::movedEvent() const
{
    return d_ptr->mMovedEvent;
}

void T__NotificationType::setNewMailEvent( const QList<T__BaseObjectChangedEventType>& newMailEvent )
{
    d_ptr->mNewMailEvent = newMailEvent;
}

QList<T__BaseObjectChangedEventType> T__NotificationType::newMailEvent() const
{
    return d_ptr->mNewMailEvent;
}

void T__NotificationType::setStatusEvent( const QList<T__BaseNotificationEventType>& statusEvent )
{
    d_ptr->mStatusEvent = statusEvent;
}

QList<T__BaseNotificationEventType> T__NotificationType::statusEvent() const
{
    return d_ptr->mStatusEvent;
}

KDSoapValue T__NotificationType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NotificationType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSubscriptionId(QString::fromLatin1("SubscriptionId"), d_ptr->mSubscriptionId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SubscriptionIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSubscriptionId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSubscriptionId.setQualified(true);
    if (!_valueSubscriptionId.isNil())
    args.append(_valueSubscriptionId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePreviousWatermark(QString::fromLatin1("PreviousWatermark"), d_ptr->mPreviousWatermark.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WatermarkType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valuePreviousWatermark.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePreviousWatermark.setQualified(true);
    if (!_valuePreviousWatermark.isNil())
    args.append(_valuePreviousWatermark);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMoreEvents(QString::fromLatin1("MoreEvents"), QVariant::fromValue(d_ptr->mMoreEvents), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMoreEvents.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMoreEvents.setQualified(true);
    if (!_valueMoreEvents.isNil())
    args.append(_valueMoreEvents);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    for (int i = 0; i < d_ptr->mCopiedEvent.count(); ++i) {
        KDSoapValue _valueCopiedEvent(d_ptr->mCopiedEvent.at(i).serialize(QString::fromLatin1("CopiedEvent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCopiedEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCopiedEvent.setQualified(true);
        if (!_valueCopiedEvent.isNil())
        args.append(_valueCopiedEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCreatedEvent.count(); ++i) {
        KDSoapValue _valueCreatedEvent(d_ptr->mCreatedEvent.at(i).serialize(QString::fromLatin1("CreatedEvent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCreatedEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCreatedEvent.setQualified(true);
        if (!_valueCreatedEvent.isNil())
        args.append(_valueCreatedEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDeletedEvent.count(); ++i) {
        KDSoapValue _valueDeletedEvent(d_ptr->mDeletedEvent.at(i).serialize(QString::fromLatin1("DeletedEvent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeletedEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDeletedEvent.setQualified(true);
        if (!_valueDeletedEvent.isNil())
        args.append(_valueDeletedEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mModifiedEvent.count(); ++i) {
        KDSoapValue _valueModifiedEvent(d_ptr->mModifiedEvent.at(i).serialize(QString::fromLatin1("ModifiedEvent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueModifiedEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueModifiedEvent.setQualified(true);
        if (!_valueModifiedEvent.isNil())
        args.append(_valueModifiedEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMovedEvent.count(); ++i) {
        KDSoapValue _valueMovedEvent(d_ptr->mMovedEvent.at(i).serialize(QString::fromLatin1("MovedEvent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMovedEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMovedEvent.setQualified(true);
        if (!_valueMovedEvent.isNil())
        args.append(_valueMovedEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mNewMailEvent.count(); ++i) {
        KDSoapValue _valueNewMailEvent(d_ptr->mNewMailEvent.at(i).serialize(QString::fromLatin1("NewMailEvent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueNewMailEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueNewMailEvent.setQualified(true);
        if (!_valueNewMailEvent.isNil())
        args.append(_valueNewMailEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mStatusEvent.count(); ++i) {
        KDSoapValue _valueStatusEvent(d_ptr->mStatusEvent.at(i).serialize(QString::fromLatin1("StatusEvent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueStatusEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueStatusEvent.setQualified(true);
        if (!_valueStatusEvent.isNil())
        args.append(_valueStatusEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NotificationType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SubscriptionId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSubscriptionId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("PreviousWatermark")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPreviousWatermark.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("MoreEvents")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMoreEvents = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CopiedEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MovedCopiedEventType mCopiedEventTemp;
            mCopiedEventTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCopiedEvent.append(mCopiedEventTemp);
        }
        else if (name == QLatin1String("CreatedEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__BaseObjectChangedEventType mCreatedEventTemp;
            mCreatedEventTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCreatedEvent.append(mCreatedEventTemp);
        }
        else if (name == QLatin1String("DeletedEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__BaseObjectChangedEventType mDeletedEventTemp;
            mDeletedEventTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeletedEvent.append(mDeletedEventTemp);
        }
        else if (name == QLatin1String("ModifiedEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ModifiedEventType mModifiedEventTemp;
            mModifiedEventTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mModifiedEvent.append(mModifiedEventTemp);
        }
        else if (name == QLatin1String("MovedEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MovedCopiedEventType mMovedEventTemp;
            mMovedEventTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMovedEvent.append(mMovedEventTemp);
        }
        else if (name == QLatin1String("NewMailEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__BaseObjectChangedEventType mNewMailEventTemp;
            mNewMailEventTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mNewMailEvent.append(mNewMailEventTemp);
        }
        else if (name == QLatin1String("StatusEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__BaseNotificationEventType mStatusEventTemp;
            mStatusEventTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mStatusEvent.append(mStatusEventTemp);
        }
    }
}

T__NotificationType::T__NotificationType()
    : d_ptr(new PrivateDPtr)
{
}

T__NotificationType::~T__NotificationType()
{
}

T__NotificationType::T__NotificationType( const T__NotificationType& other )
    : d_ptr( other.d_ptr )
{
}

T__NotificationType&  T__NotificationType::operator=( const T__NotificationType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__FieldURIOrConstantType::PrivateDPtr : public QSharedData
{
public:
    T__BasePathToElementType mPath;
    T__ConstantValueType mConstant;
};

void T__FieldURIOrConstantType::setPath( const T__BasePathToElementType& path )
{
    d_ptr->mPath = path;
}

T__BasePathToElementType T__FieldURIOrConstantType::path() const
{
    return d_ptr->mPath;
}

void T__FieldURIOrConstantType::setConstant( const T__ConstantValueType& constant )
{
    d_ptr->mConstant = constant;
}

T__ConstantValueType T__FieldURIOrConstantType::constant() const
{
    return d_ptr->mConstant;
}

KDSoapValue T__FieldURIOrConstantType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FieldURIOrConstantType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePath(d_ptr->mPath.serialize(QString::fromLatin1("Path")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePath.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePath.setQualified(true);
    if (!_valuePath.isNil())
    args.append(_valuePath);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConstant(d_ptr->mConstant.serialize(QString::fromLatin1("Constant")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConstant.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConstant.setQualified(true);
    if (!_valueConstant.isNil())
    args.append(_valueConstant);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FieldURIOrConstantType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Path")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPath.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Constant")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConstant.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__FieldURIOrConstantType::T__FieldURIOrConstantType()
    : d_ptr(new PrivateDPtr)
{
}

T__FieldURIOrConstantType::~T__FieldURIOrConstantType()
{
}

T__FieldURIOrConstantType::T__FieldURIOrConstantType( const T__FieldURIOrConstantType& other )
    : d_ptr( other.d_ptr )
{
}

T__FieldURIOrConstantType&  T__FieldURIOrConstantType::operator=( const T__FieldURIOrConstantType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfUserIdType::PrivateDPtr : public QSharedData
{
public:
    QList<T__UserIdType> mUserId;
};

void T__ArrayOfUserIdType::setUserId( const QList<T__UserIdType>& userId )
{
    d_ptr->mUserId = userId;
}

QList<T__UserIdType> T__ArrayOfUserIdType::userId() const
{
    return d_ptr->mUserId;
}

KDSoapValue T__ArrayOfUserIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfUserIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mUserId.count(); ++i) {
        KDSoapValue _valueUserId(d_ptr->mUserId.at(i).serialize(QString::fromLatin1("UserId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueUserId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueUserId.setQualified(true);
        if (!_valueUserId.isNil())
        args.append(_valueUserId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfUserIdType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UserId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__UserIdType mUserIdTemp;
            mUserIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mUserId.append(mUserIdTemp);
        }
    }
}

T__ArrayOfUserIdType::T__ArrayOfUserIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfUserIdType::~T__ArrayOfUserIdType()
{
}

T__ArrayOfUserIdType::T__ArrayOfUserIdType( const T__ArrayOfUserIdType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfUserIdType&  T__ArrayOfUserIdType::operator=( const T__ArrayOfUserIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfFolderChangeDescriptionsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__AppendToFolderFieldType> mAppendToFolderField;
    QList<T__SetFolderFieldType> mSetFolderField;
    QList<T__DeleteFolderFieldType> mDeleteFolderField;
};

void T__NonEmptyArrayOfFolderChangeDescriptionsType::setAppendToFolderField( const QList<T__AppendToFolderFieldType>& appendToFolderField )
{
    d_ptr->mAppendToFolderField = appendToFolderField;
}

QList<T__AppendToFolderFieldType> T__NonEmptyArrayOfFolderChangeDescriptionsType::appendToFolderField() const
{
    return d_ptr->mAppendToFolderField;
}

void T__NonEmptyArrayOfFolderChangeDescriptionsType::setSetFolderField( const QList<T__SetFolderFieldType>& setFolderField )
{
    d_ptr->mSetFolderField = setFolderField;
}

QList<T__SetFolderFieldType> T__NonEmptyArrayOfFolderChangeDescriptionsType::setFolderField() const
{
    return d_ptr->mSetFolderField;
}

void T__NonEmptyArrayOfFolderChangeDescriptionsType::setDeleteFolderField( const QList<T__DeleteFolderFieldType>& deleteFolderField )
{
    d_ptr->mDeleteFolderField = deleteFolderField;
}

QList<T__DeleteFolderFieldType> T__NonEmptyArrayOfFolderChangeDescriptionsType::deleteFolderField() const
{
    return d_ptr->mDeleteFolderField;
}

KDSoapValue T__NonEmptyArrayOfFolderChangeDescriptionsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfFolderChangeDescriptionsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mAppendToFolderField.count(); ++i) {
        KDSoapValue _valueAppendToFolderField(d_ptr->mAppendToFolderField.at(i).serialize(QString::fromLatin1("AppendToFolderField")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAppendToFolderField.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAppendToFolderField.setQualified(true);
        if (!_valueAppendToFolderField.isNil())
        args.append(_valueAppendToFolderField);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSetFolderField.count(); ++i) {
        KDSoapValue _valueSetFolderField(d_ptr->mSetFolderField.at(i).serialize(QString::fromLatin1("SetFolderField")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSetFolderField.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSetFolderField.setQualified(true);
        if (!_valueSetFolderField.isNil())
        args.append(_valueSetFolderField);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDeleteFolderField.count(); ++i) {
        KDSoapValue _valueDeleteFolderField(d_ptr->mDeleteFolderField.at(i).serialize(QString::fromLatin1("DeleteFolderField")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeleteFolderField.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDeleteFolderField.setQualified(true);
        if (!_valueDeleteFolderField.isNil())
        args.append(_valueDeleteFolderField);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfFolderChangeDescriptionsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AppendToFolderField")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__AppendToFolderFieldType mAppendToFolderFieldTemp;
            mAppendToFolderFieldTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAppendToFolderField.append(mAppendToFolderFieldTemp);
        }
        else if (name == QLatin1String("SetFolderField")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SetFolderFieldType mSetFolderFieldTemp;
            mSetFolderFieldTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSetFolderField.append(mSetFolderFieldTemp);
        }
        else if (name == QLatin1String("DeleteFolderField")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DeleteFolderFieldType mDeleteFolderFieldTemp;
            mDeleteFolderFieldTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeleteFolderField.append(mDeleteFolderFieldTemp);
        }
    }
}

T__NonEmptyArrayOfFolderChangeDescriptionsType::T__NonEmptyArrayOfFolderChangeDescriptionsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfFolderChangeDescriptionsType::~T__NonEmptyArrayOfFolderChangeDescriptionsType()
{
}

T__NonEmptyArrayOfFolderChangeDescriptionsType::T__NonEmptyArrayOfFolderChangeDescriptionsType( const T__NonEmptyArrayOfFolderChangeDescriptionsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfFolderChangeDescriptionsType&  T__NonEmptyArrayOfFolderChangeDescriptionsType::operator=( const T__NonEmptyArrayOfFolderChangeDescriptionsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ConstantValueType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
};

void T__ConstantValueType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__ConstantValueType::value() const
{
    return d_ptr->mValue;
}

KDSoapValue T__ConstantValueType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ConstantValueType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList attribs;
    KDSoapValue _valueValue(QString::fromLatin1("Value"), QVariant::fromValue(d_ptr->mValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueValue.isNil())
    attribs.append(_valueValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ConstantValueType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Value")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mValue = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ConstantValueType::T__ConstantValueType()
    : d_ptr(new PrivateDPtr)
{
}

T__ConstantValueType::~T__ConstantValueType()
{
}

T__ConstantValueType::T__ConstantValueType( const T__ConstantValueType& other )
    : d_ptr( other.d_ptr )
{
}

T__ConstantValueType&  T__ConstantValueType::operator=( const T__ConstantValueType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SidAndAttributesType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mSecurityIdentifier;
    unsigned int mAttributes;
};

T__SidAndAttributesType::PrivateDPtr::PrivateDPtr()
    : mAttributes(0)
{
}


void T__SidAndAttributesType::setSecurityIdentifier( const QString& securityIdentifier )
{
    d_ptr->mSecurityIdentifier = securityIdentifier;
}

QString T__SidAndAttributesType::securityIdentifier() const
{
    return d_ptr->mSecurityIdentifier;
}

void T__SidAndAttributesType::setAttributes( unsigned int attributes )
{
    d_ptr->mAttributes = attributes;
}

unsigned int T__SidAndAttributesType::attributes() const
{
    return d_ptr->mAttributes;
}

KDSoapValue T__SidAndAttributesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SidAndAttributesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSecurityIdentifier(QString::fromLatin1("SecurityIdentifier"), QVariant::fromValue(d_ptr->mSecurityIdentifier), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSecurityIdentifier.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSecurityIdentifier.setQualified(true);
    if (!_valueSecurityIdentifier.isNil())
    args.append(_valueSecurityIdentifier);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueAttributes(QString::fromLatin1("Attributes"), QVariant::fromValue(d_ptr->mAttributes), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("unsignedInt"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAttributes.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueAttributes.isNil())
    attribs.append(_valueAttributes);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__SidAndAttributesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SecurityIdentifier")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSecurityIdentifier = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Attributes")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttributes = val.value().value<unsigned int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__SidAndAttributesType::T__SidAndAttributesType()
    : d_ptr(new PrivateDPtr)
{
}

T__SidAndAttributesType::~T__SidAndAttributesType()
{
}

T__SidAndAttributesType::T__SidAndAttributesType( const T__SidAndAttributesType& other )
    : d_ptr( other.d_ptr )
{
}

T__SidAndAttributesType&  T__SidAndAttributesType::operator=( const T__SidAndAttributesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfAlternateIdsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__AlternateIdType> mAlternateId;
    QList<T__AlternatePublicFolderIdType> mAlternatePublicFolderId;
    QList<T__AlternatePublicFolderItemIdType> mAlternatePublicFolderItemId;
};

void T__NonEmptyArrayOfAlternateIdsType::setAlternateId( const QList<T__AlternateIdType>& alternateId )
{
    d_ptr->mAlternateId = alternateId;
}

QList<T__AlternateIdType> T__NonEmptyArrayOfAlternateIdsType::alternateId() const
{
    return d_ptr->mAlternateId;
}

void T__NonEmptyArrayOfAlternateIdsType::setAlternatePublicFolderId( const QList<T__AlternatePublicFolderIdType>& alternatePublicFolderId )
{
    d_ptr->mAlternatePublicFolderId = alternatePublicFolderId;
}

QList<T__AlternatePublicFolderIdType> T__NonEmptyArrayOfAlternateIdsType::alternatePublicFolderId() const
{
    return d_ptr->mAlternatePublicFolderId;
}

void T__NonEmptyArrayOfAlternateIdsType::setAlternatePublicFolderItemId( const QList<T__AlternatePublicFolderItemIdType>& alternatePublicFolderItemId )
{
    d_ptr->mAlternatePublicFolderItemId = alternatePublicFolderItemId;
}

QList<T__AlternatePublicFolderItemIdType> T__NonEmptyArrayOfAlternateIdsType::alternatePublicFolderItemId() const
{
    return d_ptr->mAlternatePublicFolderItemId;
}

KDSoapValue T__NonEmptyArrayOfAlternateIdsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfAlternateIdsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mAlternateId.count(); ++i) {
        KDSoapValue _valueAlternateId(d_ptr->mAlternateId.at(i).serialize(QString::fromLatin1("AlternateId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAlternateId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAlternateId.setQualified(true);
        if (!_valueAlternateId.isNil())
        args.append(_valueAlternateId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mAlternatePublicFolderId.count(); ++i) {
        KDSoapValue _valueAlternatePublicFolderId(d_ptr->mAlternatePublicFolderId.at(i).serialize(QString::fromLatin1("AlternatePublicFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAlternatePublicFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAlternatePublicFolderId.setQualified(true);
        if (!_valueAlternatePublicFolderId.isNil())
        args.append(_valueAlternatePublicFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mAlternatePublicFolderItemId.count(); ++i) {
        KDSoapValue _valueAlternatePublicFolderItemId(d_ptr->mAlternatePublicFolderItemId.at(i).serialize(QString::fromLatin1("AlternatePublicFolderItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAlternatePublicFolderItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAlternatePublicFolderItemId.setQualified(true);
        if (!_valueAlternatePublicFolderItemId.isNil())
        args.append(_valueAlternatePublicFolderItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfAlternateIdsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AlternateId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__AlternateIdType mAlternateIdTemp;
            mAlternateIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAlternateId.append(mAlternateIdTemp);
        }
        else if (name == QLatin1String("AlternatePublicFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__AlternatePublicFolderIdType mAlternatePublicFolderIdTemp;
            mAlternatePublicFolderIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAlternatePublicFolderId.append(mAlternatePublicFolderIdTemp);
        }
        else if (name == QLatin1String("AlternatePublicFolderItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__AlternatePublicFolderItemIdType mAlternatePublicFolderItemIdTemp;
            mAlternatePublicFolderItemIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAlternatePublicFolderItemId.append(mAlternatePublicFolderItemIdTemp);
        }
    }
}

T__NonEmptyArrayOfAlternateIdsType::T__NonEmptyArrayOfAlternateIdsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfAlternateIdsType::~T__NonEmptyArrayOfAlternateIdsType()
{
}

T__NonEmptyArrayOfAlternateIdsType::T__NonEmptyArrayOfAlternateIdsType( const T__NonEmptyArrayOfAlternateIdsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfAlternateIdsType&  T__NonEmptyArrayOfAlternateIdsType::operator=( const T__NonEmptyArrayOfAlternateIdsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ItemResponseShapeType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__DefaultShapeNamesType mBaseShape;
    bool mIncludeMimeContent;
    T__BodyTypeResponseType mBodyType;
    T__NonEmptyArrayOfPathsToElementType mAdditionalProperties;
};

T__ItemResponseShapeType::PrivateDPtr::PrivateDPtr()
    : mIncludeMimeContent(false)
{
}


void T__ItemResponseShapeType::setBaseShape( const T__DefaultShapeNamesType& baseShape )
{
    d_ptr->mBaseShape = baseShape;
}

T__DefaultShapeNamesType T__ItemResponseShapeType::baseShape() const
{
    return d_ptr->mBaseShape;
}

void T__ItemResponseShapeType::setIncludeMimeContent( bool includeMimeContent )
{
    d_ptr->mIncludeMimeContent = includeMimeContent;
}

bool T__ItemResponseShapeType::includeMimeContent() const
{
    return d_ptr->mIncludeMimeContent;
}

void T__ItemResponseShapeType::setBodyType( const T__BodyTypeResponseType& bodyType )
{
    d_ptr->mBodyType = bodyType;
}

T__BodyTypeResponseType T__ItemResponseShapeType::bodyType() const
{
    return d_ptr->mBodyType;
}

void T__ItemResponseShapeType::setAdditionalProperties( const T__NonEmptyArrayOfPathsToElementType& additionalProperties )
{
    d_ptr->mAdditionalProperties = additionalProperties;
}

T__NonEmptyArrayOfPathsToElementType T__ItemResponseShapeType::additionalProperties() const
{
    return d_ptr->mAdditionalProperties;
}

KDSoapValue T__ItemResponseShapeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemResponseShapeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueBaseShape(QString::fromLatin1("BaseShape"), d_ptr->mBaseShape.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DefaultShapeNamesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueBaseShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBaseShape.setQualified(true);
    if (!_valueBaseShape.isNil())
    args.append(_valueBaseShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIncludeMimeContent(QString::fromLatin1("IncludeMimeContent"), QVariant::fromValue(d_ptr->mIncludeMimeContent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIncludeMimeContent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIncludeMimeContent.setQualified(true);
    if (!_valueIncludeMimeContent.isNil())
    args.append(_valueIncludeMimeContent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBodyType(QString::fromLatin1("BodyType"), d_ptr->mBodyType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BodyTypeResponseType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueBodyType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBodyType.setQualified(true);
    if (!_valueBodyType.isNil())
    args.append(_valueBodyType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAdditionalProperties(d_ptr->mAdditionalProperties.serialize(QString::fromLatin1("AdditionalProperties")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAdditionalProperties.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAdditionalProperties.setQualified(true);
    if (!_valueAdditionalProperties.isNil())
    args.append(_valueAdditionalProperties);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ItemResponseShapeType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("BaseShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBaseShape.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("IncludeMimeContent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIncludeMimeContent = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("BodyType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBodyType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("AdditionalProperties")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAdditionalProperties.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ItemResponseShapeType::T__ItemResponseShapeType()
    : d_ptr(new PrivateDPtr)
{
}

T__ItemResponseShapeType::~T__ItemResponseShapeType()
{
}

T__ItemResponseShapeType::T__ItemResponseShapeType( const T__ItemResponseShapeType& other )
    : d_ptr( other.d_ptr )
{
}

T__ItemResponseShapeType&  T__ItemResponseShapeType::operator=( const T__ItemResponseShapeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfAttendeeConflictData::PrivateDPtr : public QSharedData
{
public:
    QList<T__UnknownAttendeeConflictData> mUnknownAttendeeConflictData;
    QList<T__IndividualAttendeeConflictData> mIndividualAttendeeConflictData;
    QList<T__TooBigGroupAttendeeConflictData> mTooBigGroupAttendeeConflictData;
    QList<T__GroupAttendeeConflictData> mGroupAttendeeConflictData;
};

void T__ArrayOfAttendeeConflictData::setUnknownAttendeeConflictData( const QList<T__UnknownAttendeeConflictData>& unknownAttendeeConflictData )
{
    d_ptr->mUnknownAttendeeConflictData = unknownAttendeeConflictData;
}

QList<T__UnknownAttendeeConflictData> T__ArrayOfAttendeeConflictData::unknownAttendeeConflictData() const
{
    return d_ptr->mUnknownAttendeeConflictData;
}

void T__ArrayOfAttendeeConflictData::setIndividualAttendeeConflictData( const QList<T__IndividualAttendeeConflictData>& individualAttendeeConflictData )
{
    d_ptr->mIndividualAttendeeConflictData = individualAttendeeConflictData;
}

QList<T__IndividualAttendeeConflictData> T__ArrayOfAttendeeConflictData::individualAttendeeConflictData() const
{
    return d_ptr->mIndividualAttendeeConflictData;
}

void T__ArrayOfAttendeeConflictData::setTooBigGroupAttendeeConflictData( const QList<T__TooBigGroupAttendeeConflictData>& tooBigGroupAttendeeConflictData )
{
    d_ptr->mTooBigGroupAttendeeConflictData = tooBigGroupAttendeeConflictData;
}

QList<T__TooBigGroupAttendeeConflictData> T__ArrayOfAttendeeConflictData::tooBigGroupAttendeeConflictData() const
{
    return d_ptr->mTooBigGroupAttendeeConflictData;
}

void T__ArrayOfAttendeeConflictData::setGroupAttendeeConflictData( const QList<T__GroupAttendeeConflictData>& groupAttendeeConflictData )
{
    d_ptr->mGroupAttendeeConflictData = groupAttendeeConflictData;
}

QList<T__GroupAttendeeConflictData> T__ArrayOfAttendeeConflictData::groupAttendeeConflictData() const
{
    return d_ptr->mGroupAttendeeConflictData;
}

KDSoapValue T__ArrayOfAttendeeConflictData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfAttendeeConflictData"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mUnknownAttendeeConflictData.count(); ++i) {
        KDSoapValue _valueUnknownAttendeeConflictData(d_ptr->mUnknownAttendeeConflictData.at(i).serialize(QString::fromLatin1("UnknownAttendeeConflictData")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueUnknownAttendeeConflictData.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueUnknownAttendeeConflictData.setQualified(true);
        _valueUnknownAttendeeConflictData.setNillable(true);
        args.append(_valueUnknownAttendeeConflictData);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mIndividualAttendeeConflictData.count(); ++i) {
        KDSoapValue _valueIndividualAttendeeConflictData(d_ptr->mIndividualAttendeeConflictData.at(i).serialize(QString::fromLatin1("IndividualAttendeeConflictData")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueIndividualAttendeeConflictData.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueIndividualAttendeeConflictData.setQualified(true);
        _valueIndividualAttendeeConflictData.setNillable(true);
        args.append(_valueIndividualAttendeeConflictData);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mTooBigGroupAttendeeConflictData.count(); ++i) {
        KDSoapValue _valueTooBigGroupAttendeeConflictData(d_ptr->mTooBigGroupAttendeeConflictData.at(i).serialize(QString::fromLatin1("TooBigGroupAttendeeConflictData")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueTooBigGroupAttendeeConflictData.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueTooBigGroupAttendeeConflictData.setQualified(true);
        _valueTooBigGroupAttendeeConflictData.setNillable(true);
        args.append(_valueTooBigGroupAttendeeConflictData);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mGroupAttendeeConflictData.count(); ++i) {
        KDSoapValue _valueGroupAttendeeConflictData(d_ptr->mGroupAttendeeConflictData.at(i).serialize(QString::fromLatin1("GroupAttendeeConflictData")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueGroupAttendeeConflictData.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueGroupAttendeeConflictData.setQualified(true);
        _valueGroupAttendeeConflictData.setNillable(true);
        args.append(_valueGroupAttendeeConflictData);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfAttendeeConflictData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UnknownAttendeeConflictData")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__UnknownAttendeeConflictData mUnknownAttendeeConflictDataTemp;
            mUnknownAttendeeConflictDataTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mUnknownAttendeeConflictData.append(mUnknownAttendeeConflictDataTemp);
        }
        else if (name == QLatin1String("IndividualAttendeeConflictData")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__IndividualAttendeeConflictData mIndividualAttendeeConflictDataTemp;
            mIndividualAttendeeConflictDataTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mIndividualAttendeeConflictData.append(mIndividualAttendeeConflictDataTemp);
        }
        else if (name == QLatin1String("TooBigGroupAttendeeConflictData")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__TooBigGroupAttendeeConflictData mTooBigGroupAttendeeConflictDataTemp;
            mTooBigGroupAttendeeConflictDataTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mTooBigGroupAttendeeConflictData.append(mTooBigGroupAttendeeConflictDataTemp);
        }
        else if (name == QLatin1String("GroupAttendeeConflictData")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__GroupAttendeeConflictData mGroupAttendeeConflictDataTemp;
            mGroupAttendeeConflictDataTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mGroupAttendeeConflictData.append(mGroupAttendeeConflictDataTemp);
        }
    }
}

T__ArrayOfAttendeeConflictData::T__ArrayOfAttendeeConflictData()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfAttendeeConflictData::~T__ArrayOfAttendeeConflictData()
{
}

T__ArrayOfAttendeeConflictData::T__ArrayOfAttendeeConflictData( const T__ArrayOfAttendeeConflictData& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfAttendeeConflictData&  T__ArrayOfAttendeeConflictData::operator=( const T__ArrayOfAttendeeConflictData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfPermissionsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__PermissionType> mPermission;
};

void T__ArrayOfPermissionsType::setPermission( const QList<T__PermissionType>& permission )
{
    d_ptr->mPermission = permission;
}

QList<T__PermissionType> T__ArrayOfPermissionsType::permission() const
{
    return d_ptr->mPermission;
}

KDSoapValue T__ArrayOfPermissionsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfPermissionsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mPermission.count(); ++i) {
        KDSoapValue _valuePermission(d_ptr->mPermission.at(i).serialize(QString::fromLatin1("Permission")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valuePermission.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valuePermission.setQualified(true);
        if (!_valuePermission.isNil())
        args.append(_valuePermission);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfPermissionsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Permission")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__PermissionType mPermissionTemp;
            mPermissionTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mPermission.append(mPermissionTemp);
        }
    }
}

T__ArrayOfPermissionsType::T__ArrayOfPermissionsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfPermissionsType::~T__ArrayOfPermissionsType()
{
}

T__ArrayOfPermissionsType::T__ArrayOfPermissionsType( const T__ArrayOfPermissionsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfPermissionsType&  T__ArrayOfPermissionsType::operator=( const T__ArrayOfPermissionsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__Duration::PrivateDPtr : public QSharedData
{
public:
    KDDateTime mStartTime;
    KDDateTime mEndTime;
};

void T__Duration::setStartTime( const KDDateTime& startTime )
{
    d_ptr->mStartTime = startTime;
}

KDDateTime T__Duration::startTime() const
{
    return d_ptr->mStartTime;
}

void T__Duration::setEndTime( const KDDateTime& endTime )
{
    d_ptr->mEndTime = endTime;
}

KDDateTime T__Duration::endTime() const
{
    return d_ptr->mEndTime;
}

KDSoapValue T__Duration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("Duration"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueStartTime(QString::fromLatin1("StartTime"), d_ptr->mStartTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStartTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStartTime.setQualified(true);
    if (!_valueStartTime.isNil())
    args.append(_valueStartTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEndTime(QString::fromLatin1("EndTime"), d_ptr->mEndTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueEndTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEndTime.setQualified(true);
    if (!_valueEndTime.isNil())
    args.append(_valueEndTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__Duration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("StartTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStartTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("EndTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEndTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__Duration::T__Duration()
    : d_ptr(new PrivateDPtr)
{
}

T__Duration::~T__Duration()
{
}

T__Duration::T__Duration( const T__Duration& other )
    : d_ptr( other.d_ptr )
{
}

T__Duration&  T__Duration::operator=( const T__Duration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__UserOofSettings::PrivateDPtr : public QSharedData
{
public:
    T__OofState mOofState;
    T__ExternalAudience mExternalAudience;
    T__Duration mDuration;
    T__ReplyBody mInternalReply;
    T__ReplyBody mExternalReply;
};

void T__UserOofSettings::setOofState( const T__OofState& oofState )
{
    d_ptr->mOofState = oofState;
}

T__OofState T__UserOofSettings::oofState() const
{
    return d_ptr->mOofState;
}

void T__UserOofSettings::setExternalAudience( const T__ExternalAudience& externalAudience )
{
    d_ptr->mExternalAudience = externalAudience;
}

T__ExternalAudience T__UserOofSettings::externalAudience() const
{
    return d_ptr->mExternalAudience;
}

void T__UserOofSettings::setDuration( const T__Duration& duration )
{
    d_ptr->mDuration = duration;
}

T__Duration T__UserOofSettings::duration() const
{
    return d_ptr->mDuration;
}

void T__UserOofSettings::setInternalReply( const T__ReplyBody& internalReply )
{
    d_ptr->mInternalReply = internalReply;
}

T__ReplyBody T__UserOofSettings::internalReply() const
{
    return d_ptr->mInternalReply;
}

void T__UserOofSettings::setExternalReply( const T__ReplyBody& externalReply )
{
    d_ptr->mExternalReply = externalReply;
}

T__ReplyBody T__UserOofSettings::externalReply() const
{
    return d_ptr->mExternalReply;
}

KDSoapValue T__UserOofSettings::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("UserOofSettings"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueOofState(QString::fromLatin1("OofState"), d_ptr->mOofState.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("OofState"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueOofState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOofState.setQualified(true);
    if (!_valueOofState.isNil())
    args.append(_valueOofState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueExternalAudience(QString::fromLatin1("ExternalAudience"), d_ptr->mExternalAudience.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExternalAudience"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueExternalAudience.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueExternalAudience.setQualified(true);
    if (!_valueExternalAudience.isNil())
    args.append(_valueExternalAudience);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDuration(d_ptr->mDuration.serialize(QString::fromLatin1("Duration")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDuration.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDuration.setQualified(true);
    if (!_valueDuration.isNil())
    args.append(_valueDuration);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInternalReply(d_ptr->mInternalReply.serialize(QString::fromLatin1("InternalReply")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueInternalReply.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInternalReply.setQualified(true);
    if (!_valueInternalReply.isNil())
    args.append(_valueInternalReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueExternalReply(d_ptr->mExternalReply.serialize(QString::fromLatin1("ExternalReply")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueExternalReply.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueExternalReply.setQualified(true);
    if (!_valueExternalReply.isNil())
    args.append(_valueExternalReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__UserOofSettings::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("OofState")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOofState.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("ExternalAudience")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mExternalAudience.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Duration")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDuration.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("InternalReply")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInternalReply.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ExternalReply")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mExternalReply.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__UserOofSettings::T__UserOofSettings()
    : d_ptr(new PrivateDPtr)
{
}

T__UserOofSettings::~T__UserOofSettings()
{
}

T__UserOofSettings::T__UserOofSettings( const T__UserOofSettings& other )
    : d_ptr( other.d_ptr )
{
}

T__UserOofSettings&  T__UserOofSettings::operator=( const T__UserOofSettings& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SearchParametersType::PrivateDPtr : public QSharedData
{
public:
    T__RestrictionType mRestriction;
    T__NonEmptyArrayOfBaseFolderIdsType mBaseFolderIds;
    T__SearchFolderTraversalType mTraversal;
};

void T__SearchParametersType::setRestriction( const T__RestrictionType& restriction )
{
    d_ptr->mRestriction = restriction;
}

T__RestrictionType T__SearchParametersType::restriction() const
{
    return d_ptr->mRestriction;
}

void T__SearchParametersType::setBaseFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& baseFolderIds )
{
    d_ptr->mBaseFolderIds = baseFolderIds;
}

T__NonEmptyArrayOfBaseFolderIdsType T__SearchParametersType::baseFolderIds() const
{
    return d_ptr->mBaseFolderIds;
}

void T__SearchParametersType::setTraversal( const T__SearchFolderTraversalType& traversal )
{
    d_ptr->mTraversal = traversal;
}

T__SearchFolderTraversalType T__SearchParametersType::traversal() const
{
    return d_ptr->mTraversal;
}

KDSoapValue T__SearchParametersType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SearchParametersType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueRestriction(d_ptr->mRestriction.serialize(QString::fromLatin1("Restriction")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRestriction.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRestriction.setQualified(true);
    if (!_valueRestriction.isNil())
    args.append(_valueRestriction);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBaseFolderIds(d_ptr->mBaseFolderIds.serialize(QString::fromLatin1("BaseFolderIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBaseFolderIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBaseFolderIds.setQualified(true);
    if (!_valueBaseFolderIds.isNil())
    args.append(_valueBaseFolderIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueTraversal(QString::fromLatin1("Traversal"), d_ptr->mTraversal.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SearchFolderTraversalType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueTraversal.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueTraversal.isNil())
    attribs.append(_valueTraversal);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__SearchParametersType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Restriction")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRestriction.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("BaseFolderIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBaseFolderIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Traversal")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTraversal.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__SearchParametersType::T__SearchParametersType()
    : d_ptr(new PrivateDPtr)
{
}

T__SearchParametersType::~T__SearchParametersType()
{
}

T__SearchParametersType::T__SearchParametersType( const T__SearchParametersType& other )
    : d_ptr( other.d_ptr )
{
}

T__SearchParametersType&  T__SearchParametersType::operator=( const T__SearchParametersType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__EmailAddressDictionaryType::PrivateDPtr : public QSharedData
{
public:
    QList<T__EmailAddressDictionaryEntryType> mEntry;
};

void T__EmailAddressDictionaryType::setEntry( const QList<T__EmailAddressDictionaryEntryType>& entry )
{
    d_ptr->mEntry = entry;
}

QList<T__EmailAddressDictionaryEntryType> T__EmailAddressDictionaryType::entry() const
{
    return d_ptr->mEntry;
}

KDSoapValue T__EmailAddressDictionaryType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("EmailAddressDictionaryType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mEntry.count(); ++i) {
        KDSoapValue _valueEntry(d_ptr->mEntry.at(i).serialize(QString::fromLatin1("Entry")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueEntry.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueEntry.setQualified(true);
        if (!_valueEntry.isNil())
        args.append(_valueEntry);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__EmailAddressDictionaryType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Entry")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__EmailAddressDictionaryEntryType mEntryTemp;
            mEntryTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mEntry.append(mEntryTemp);
        }
    }
}

T__EmailAddressDictionaryType::T__EmailAddressDictionaryType()
    : d_ptr(new PrivateDPtr)
{
}

T__EmailAddressDictionaryType::~T__EmailAddressDictionaryType()
{
}

T__EmailAddressDictionaryType::T__EmailAddressDictionaryType( const T__EmailAddressDictionaryType& other )
    : d_ptr( other.d_ptr )
{
}

T__EmailAddressDictionaryType&  T__EmailAddressDictionaryType::operator=( const T__EmailAddressDictionaryType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__PhoneNumberDictionaryEntryType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
    T__PhoneNumberKeyType mKey;
};

void T__PhoneNumberDictionaryEntryType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__PhoneNumberDictionaryEntryType::value() const
{
    return d_ptr->mValue;
}

T__PhoneNumberDictionaryEntryType::T__PhoneNumberDictionaryEntryType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

T__PhoneNumberDictionaryEntryType::operator QString() const
{
    return d_ptr->mValue;
}

void T__PhoneNumberDictionaryEntryType::setKey( const T__PhoneNumberKeyType& key )
{
    d_ptr->mKey = key;
}

T__PhoneNumberKeyType T__PhoneNumberDictionaryEntryType::key() const
{
    return d_ptr->mKey;
}

KDSoapValue T__PhoneNumberDictionaryEntryType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PhoneNumberDictionaryEntryType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:323
    KDSoapValueList attribs;
    KDSoapValue _valueKey(QString::fromLatin1("Key"), d_ptr->mKey.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PhoneNumberKeyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueKey.isNil())
    attribs.append(_valueKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__PhoneNumberDictionaryEntryType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Key")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mKey.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__PhoneNumberDictionaryEntryType::T__PhoneNumberDictionaryEntryType()
    : d_ptr(new PrivateDPtr)
{
}

T__PhoneNumberDictionaryEntryType::~T__PhoneNumberDictionaryEntryType()
{
}

T__PhoneNumberDictionaryEntryType::T__PhoneNumberDictionaryEntryType( const T__PhoneNumberDictionaryEntryType& other )
    : d_ptr( other.d_ptr )
{
}

T__PhoneNumberDictionaryEntryType&  T__PhoneNumberDictionaryEntryType::operator=( const T__PhoneNumberDictionaryEntryType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfAttachmentsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ItemAttachmentType> mItemAttachment;
    QList<T__FileAttachmentType> mFileAttachment;
};

void T__ArrayOfAttachmentsType::setItemAttachment( const QList<T__ItemAttachmentType>& itemAttachment )
{
    d_ptr->mItemAttachment = itemAttachment;
}

QList<T__ItemAttachmentType> T__ArrayOfAttachmentsType::itemAttachment() const
{
    return d_ptr->mItemAttachment;
}

void T__ArrayOfAttachmentsType::setFileAttachment( const QList<T__FileAttachmentType>& fileAttachment )
{
    d_ptr->mFileAttachment = fileAttachment;
}

QList<T__FileAttachmentType> T__ArrayOfAttachmentsType::fileAttachment() const
{
    return d_ptr->mFileAttachment;
}

KDSoapValue T__ArrayOfAttachmentsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfAttachmentsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mItemAttachment.count(); ++i) {
        KDSoapValue _valueItemAttachment(d_ptr->mItemAttachment.at(i).serialize(QString::fromLatin1("ItemAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueItemAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueItemAttachment.setQualified(true);
        if (!_valueItemAttachment.isNil())
        args.append(_valueItemAttachment);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mFileAttachment.count(); ++i) {
        KDSoapValue _valueFileAttachment(d_ptr->mFileAttachment.at(i).serialize(QString::fromLatin1("FileAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFileAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueFileAttachment.setQualified(true);
        if (!_valueFileAttachment.isNil())
        args.append(_valueFileAttachment);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfAttachmentsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemAttachment")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ItemAttachmentType mItemAttachmentTemp;
            mItemAttachmentTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mItemAttachment.append(mItemAttachmentTemp);
        }
        else if (name == QLatin1String("FileAttachment")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__FileAttachmentType mFileAttachmentTemp;
            mFileAttachmentTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFileAttachment.append(mFileAttachmentTemp);
        }
    }
}

T__ArrayOfAttachmentsType::T__ArrayOfAttachmentsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfAttachmentsType::~T__ArrayOfAttachmentsType()
{
}

T__ArrayOfAttachmentsType::T__ArrayOfAttachmentsType( const T__ArrayOfAttachmentsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfAttachmentsType&  T__ArrayOfAttachmentsType::operator=( const T__ArrayOfAttachmentsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ResolutionType::PrivateDPtr : public QSharedData
{
public:
    T__EmailAddressType mMailbox;
    T__ContactItemType mContact;
};

void T__ResolutionType::setMailbox( const T__EmailAddressType& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddressType T__ResolutionType::mailbox() const
{
    return d_ptr->mMailbox;
}

void T__ResolutionType::setContact( const T__ContactItemType& contact )
{
    d_ptr->mContact = contact;
}

T__ContactItemType T__ResolutionType::contact() const
{
    return d_ptr->mContact;
}

KDSoapValue T__ResolutionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResolutionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContact(d_ptr->mContact.serialize(QString::fromLatin1("Contact")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContact.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContact.setQualified(true);
    if (!_valueContact.isNil())
    args.append(_valueContact);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ResolutionType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Contact")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContact.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ResolutionType::T__ResolutionType()
    : d_ptr(new PrivateDPtr)
{
}

T__ResolutionType::~T__ResolutionType()
{
}

T__ResolutionType::T__ResolutionType( const T__ResolutionType& other )
    : d_ptr( other.d_ptr )
{
}

T__ResolutionType&  T__ResolutionType::operator=( const T__ResolutionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ExcludesValueType::PrivateDPtr : public QSharedData
{
public:
    T__ExcludesAttributeType mValue;
};

void T__ExcludesValueType::setValue( const T__ExcludesAttributeType& value )
{
    d_ptr->mValue = value;
}

T__ExcludesAttributeType T__ExcludesValueType::value() const
{
    return d_ptr->mValue;
}

KDSoapValue T__ExcludesValueType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExcludesValueType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList attribs;
    KDSoapValue _valueValue(QString::fromLatin1("Value"), d_ptr->mValue.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExcludesAttributeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueValue.isNil())
    attribs.append(_valueValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ExcludesValueType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Value")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mValue.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__ExcludesValueType::T__ExcludesValueType()
    : d_ptr(new PrivateDPtr)
{
}

T__ExcludesValueType::~T__ExcludesValueType()
{
}

T__ExcludesValueType::T__ExcludesValueType( const T__ExcludesValueType& other )
    : d_ptr( other.d_ptr )
{
}

T__ExcludesValueType&  T__ExcludesValueType::operator=( const T__ExcludesValueType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__TimeZoneType::PrivateDPtr : public QSharedData
{
public:
    QString mBaseOffset;
    T__TimeChangeType mStandard;
    T__TimeChangeType mDaylight;
    QString mTimeZoneName;
};

void T__TimeZoneType::setBaseOffset( const QString& baseOffset )
{
    d_ptr->mBaseOffset = baseOffset;
}

QString T__TimeZoneType::baseOffset() const
{
    return d_ptr->mBaseOffset;
}

void T__TimeZoneType::setStandard( const T__TimeChangeType& standard )
{
    d_ptr->mStandard = standard;
}

T__TimeChangeType T__TimeZoneType::standard() const
{
    return d_ptr->mStandard;
}

void T__TimeZoneType::setDaylight( const T__TimeChangeType& daylight )
{
    d_ptr->mDaylight = daylight;
}

T__TimeChangeType T__TimeZoneType::daylight() const
{
    return d_ptr->mDaylight;
}

void T__TimeZoneType::setTimeZoneName( const QString& timeZoneName )
{
    d_ptr->mTimeZoneName = timeZoneName;
}

QString T__TimeZoneType::timeZoneName() const
{
    return d_ptr->mTimeZoneName;
}

KDSoapValue T__TimeZoneType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TimeZoneType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueBaseOffset(QString::fromLatin1("BaseOffset"), QVariant::fromValue(d_ptr->mBaseOffset), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueBaseOffset.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBaseOffset.setQualified(true);
    if (!_valueBaseOffset.isNil())
    args.append(_valueBaseOffset);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStandard(d_ptr->mStandard.serialize(QString::fromLatin1("Standard")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueStandard.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStandard.setQualified(true);
    if (!_valueStandard.isNil())
    args.append(_valueStandard);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDaylight(d_ptr->mDaylight.serialize(QString::fromLatin1("Daylight")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDaylight.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDaylight.setQualified(true);
    if (!_valueDaylight.isNil())
    args.append(_valueDaylight);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueTimeZoneName(QString::fromLatin1("TimeZoneName"), QVariant::fromValue(d_ptr->mTimeZoneName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTimeZoneName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueTimeZoneName.isNil())
    attribs.append(_valueTimeZoneName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__TimeZoneType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("BaseOffset")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBaseOffset = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Standard")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStandard.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Daylight")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDaylight.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("TimeZoneName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeZoneName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__TimeZoneType::T__TimeZoneType()
    : d_ptr(new PrivateDPtr)
{
}

T__TimeZoneType::~T__TimeZoneType()
{
}

T__TimeZoneType::T__TimeZoneType( const T__TimeZoneType& other )
    : d_ptr( other.d_ptr )
{
}

T__TimeZoneType&  T__TimeZoneType::operator=( const T__TimeZoneType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfRecipientsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__EmailAddressType> mMailbox;
};

void T__ArrayOfRecipientsType::setMailbox( const QList<T__EmailAddressType>& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

QList<T__EmailAddressType> T__ArrayOfRecipientsType::mailbox() const
{
    return d_ptr->mMailbox;
}

KDSoapValue T__ArrayOfRecipientsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfRecipientsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mMailbox.count(); ++i) {
        KDSoapValue _valueMailbox(d_ptr->mMailbox.at(i).serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMailbox.setQualified(true);
        if (!_valueMailbox.isNil())
        args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfRecipientsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__EmailAddressType mMailboxTemp;
            mMailboxTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMailbox.append(mMailboxTemp);
        }
    }
}

T__ArrayOfRecipientsType::T__ArrayOfRecipientsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfRecipientsType::~T__ArrayOfRecipientsType()
{
}

T__ArrayOfRecipientsType::T__ArrayOfRecipientsType( const T__ArrayOfRecipientsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfRecipientsType&  T__ArrayOfRecipientsType::operator=( const T__ArrayOfRecipientsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__Suggestion::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    KDDateTime mMeetingTime;
    bool mIsWorkTime;
    T__SuggestionQuality mSuggestionQuality;
    T__ArrayOfAttendeeConflictData mAttendeeConflictDataArray;
};

T__Suggestion::PrivateDPtr::PrivateDPtr()
    : mIsWorkTime(false)
{
}


void T__Suggestion::setMeetingTime( const KDDateTime& meetingTime )
{
    d_ptr->mMeetingTime = meetingTime;
}

KDDateTime T__Suggestion::meetingTime() const
{
    return d_ptr->mMeetingTime;
}

void T__Suggestion::setIsWorkTime( bool isWorkTime )
{
    d_ptr->mIsWorkTime = isWorkTime;
}

bool T__Suggestion::isWorkTime() const
{
    return d_ptr->mIsWorkTime;
}

void T__Suggestion::setSuggestionQuality( const T__SuggestionQuality& suggestionQuality )
{
    d_ptr->mSuggestionQuality = suggestionQuality;
}

T__SuggestionQuality T__Suggestion::suggestionQuality() const
{
    return d_ptr->mSuggestionQuality;
}

void T__Suggestion::setAttendeeConflictDataArray( const T__ArrayOfAttendeeConflictData& attendeeConflictDataArray )
{
    d_ptr->mAttendeeConflictDataArray = attendeeConflictDataArray;
}

T__ArrayOfAttendeeConflictData T__Suggestion::attendeeConflictDataArray() const
{
    return d_ptr->mAttendeeConflictDataArray;
}

KDSoapValue T__Suggestion::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("Suggestion"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMeetingTime(QString::fromLatin1("MeetingTime"), d_ptr->mMeetingTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMeetingTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingTime.setQualified(true);
    if (!_valueMeetingTime.isNil())
    args.append(_valueMeetingTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsWorkTime(QString::fromLatin1("IsWorkTime"), QVariant::fromValue(d_ptr->mIsWorkTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsWorkTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsWorkTime.setQualified(true);
    if (!_valueIsWorkTime.isNil())
    args.append(_valueIsWorkTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSuggestionQuality(QString::fromLatin1("SuggestionQuality"), d_ptr->mSuggestionQuality.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SuggestionQuality"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSuggestionQuality.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSuggestionQuality.setQualified(true);
    if (!_valueSuggestionQuality.isNil())
    args.append(_valueSuggestionQuality);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAttendeeConflictDataArray(d_ptr->mAttendeeConflictDataArray.serialize(QString::fromLatin1("AttendeeConflictDataArray")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttendeeConflictDataArray.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAttendeeConflictDataArray.setQualified(true);
    if (!_valueAttendeeConflictDataArray.isNil())
    args.append(_valueAttendeeConflictDataArray);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__Suggestion::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("MeetingTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsWorkTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsWorkTime = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("SuggestionQuality")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSuggestionQuality.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("AttendeeConflictDataArray")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttendeeConflictDataArray.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__Suggestion::T__Suggestion()
    : d_ptr(new PrivateDPtr)
{
}

T__Suggestion::~T__Suggestion()
{
}

T__Suggestion::T__Suggestion( const T__Suggestion& other )
    : d_ptr( other.d_ptr )
{
}

T__Suggestion&  T__Suggestion::operator=( const T__Suggestion& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfSuggestionDayResult::PrivateDPtr : public QSharedData
{
public:
    QList<T__SuggestionDayResult> mSuggestionDayResult;
};

void T__ArrayOfSuggestionDayResult::setSuggestionDayResult( const QList<T__SuggestionDayResult>& suggestionDayResult )
{
    d_ptr->mSuggestionDayResult = suggestionDayResult;
}

QList<T__SuggestionDayResult> T__ArrayOfSuggestionDayResult::suggestionDayResult() const
{
    return d_ptr->mSuggestionDayResult;
}

KDSoapValue T__ArrayOfSuggestionDayResult::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfSuggestionDayResult"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mSuggestionDayResult.count(); ++i) {
        KDSoapValue _valueSuggestionDayResult(d_ptr->mSuggestionDayResult.at(i).serialize(QString::fromLatin1("SuggestionDayResult")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSuggestionDayResult.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSuggestionDayResult.setQualified(true);
        if (!_valueSuggestionDayResult.isNil())
        args.append(_valueSuggestionDayResult);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfSuggestionDayResult::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SuggestionDayResult")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SuggestionDayResult mSuggestionDayResultTemp;
            mSuggestionDayResultTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSuggestionDayResult.append(mSuggestionDayResultTemp);
        }
    }
}

T__ArrayOfSuggestionDayResult::T__ArrayOfSuggestionDayResult()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfSuggestionDayResult::~T__ArrayOfSuggestionDayResult()
{
}

T__ArrayOfSuggestionDayResult::T__ArrayOfSuggestionDayResult( const T__ArrayOfSuggestionDayResult& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfSuggestionDayResult&  T__ArrayOfSuggestionDayResult::operator=( const T__ArrayOfSuggestionDayResult& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__SetUserOofSettingsResponse::PrivateDPtr : public QSharedData
{
public:
    TNS__ResponseMessageType mResponseMessage;
};

void TNS__SetUserOofSettingsResponse::setResponseMessage( const TNS__ResponseMessageType& responseMessage )
{
    d_ptr->mResponseMessage = responseMessage;
}

TNS__ResponseMessageType TNS__SetUserOofSettingsResponse::responseMessage() const
{
    return d_ptr->mResponseMessage;
}

KDSoapValue TNS__SetUserOofSettingsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SetUserOofSettingsResponse"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueResponseMessage(d_ptr->mResponseMessage.serialize(QString::fromLatin1("ResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResponseMessage.setQualified(true);
    if (!_valueResponseMessage.isNil())
    args.append(_valueResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SetUserOofSettingsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__SetUserOofSettingsResponse::TNS__SetUserOofSettingsResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SetUserOofSettingsResponse::~TNS__SetUserOofSettingsResponse()
{
}

TNS__SetUserOofSettingsResponse::TNS__SetUserOofSettingsResponse( const TNS__SetUserOofSettingsResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__SetUserOofSettingsResponse&  TNS__SetUserOofSettingsResponse::operator=( const TNS__SetUserOofSettingsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SerializedSecurityContextType::PrivateDPtr : public QSharedData
{
public:
    QString mUserSid;
    T__NonEmptyArrayOfGroupIdentifiersType mGroupSids;
    T__NonEmptyArrayOfRestrictedGroupIdentifiersType mRestrictedGroupSids;
    QString mPrimarySmtpAddress;
};

void T__SerializedSecurityContextType::setUserSid( const QString& userSid )
{
    d_ptr->mUserSid = userSid;
}

QString T__SerializedSecurityContextType::userSid() const
{
    return d_ptr->mUserSid;
}

void T__SerializedSecurityContextType::setGroupSids( const T__NonEmptyArrayOfGroupIdentifiersType& groupSids )
{
    d_ptr->mGroupSids = groupSids;
}

T__NonEmptyArrayOfGroupIdentifiersType T__SerializedSecurityContextType::groupSids() const
{
    return d_ptr->mGroupSids;
}

void T__SerializedSecurityContextType::setRestrictedGroupSids( const T__NonEmptyArrayOfRestrictedGroupIdentifiersType& restrictedGroupSids )
{
    d_ptr->mRestrictedGroupSids = restrictedGroupSids;
}

T__NonEmptyArrayOfRestrictedGroupIdentifiersType T__SerializedSecurityContextType::restrictedGroupSids() const
{
    return d_ptr->mRestrictedGroupSids;
}

void T__SerializedSecurityContextType::setPrimarySmtpAddress( const QString& primarySmtpAddress )
{
    d_ptr->mPrimarySmtpAddress = primarySmtpAddress;
}

QString T__SerializedSecurityContextType::primarySmtpAddress() const
{
    return d_ptr->mPrimarySmtpAddress;
}

KDSoapValue T__SerializedSecurityContextType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SerializedSecurityContextType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueUserSid(QString::fromLatin1("UserSid"), QVariant::fromValue(d_ptr->mUserSid), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueUserSid.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUserSid.setQualified(true);
    if (!_valueUserSid.isNil())
    args.append(_valueUserSid);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueGroupSids(d_ptr->mGroupSids.serialize(QString::fromLatin1("GroupSids")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGroupSids.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueGroupSids.setQualified(true);
    if (!_valueGroupSids.isNil())
    args.append(_valueGroupSids);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRestrictedGroupSids(d_ptr->mRestrictedGroupSids.serialize(QString::fromLatin1("RestrictedGroupSids")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRestrictedGroupSids.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRestrictedGroupSids.setQualified(true);
    if (!_valueRestrictedGroupSids.isNil())
    args.append(_valueRestrictedGroupSids);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePrimarySmtpAddress(QString::fromLatin1("PrimarySmtpAddress"), QVariant::fromValue(d_ptr->mPrimarySmtpAddress), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePrimarySmtpAddress.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePrimarySmtpAddress.setQualified(true);
    if (!_valuePrimarySmtpAddress.isNil())
    args.append(_valuePrimarySmtpAddress);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SerializedSecurityContextType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UserSid")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUserSid = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("GroupSids")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGroupSids.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("RestrictedGroupSids")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRestrictedGroupSids.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("PrimarySmtpAddress")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPrimarySmtpAddress = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__SerializedSecurityContextType::T__SerializedSecurityContextType()
    : d_ptr(new PrivateDPtr)
{
}

T__SerializedSecurityContextType::~T__SerializedSecurityContextType()
{
}

T__SerializedSecurityContextType::T__SerializedSecurityContextType( const T__SerializedSecurityContextType& other )
    : d_ptr( other.d_ptr )
{
}

T__SerializedSecurityContextType&  T__SerializedSecurityContextType::operator=( const T__SerializedSecurityContextType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfAttendeesType::PrivateDPtr : public QSharedData
{
public:
    QList<T__AttendeeType> mAttendee;
};

void T__NonEmptyArrayOfAttendeesType::setAttendee( const QList<T__AttendeeType>& attendee )
{
    d_ptr->mAttendee = attendee;
}

QList<T__AttendeeType> T__NonEmptyArrayOfAttendeesType::attendee() const
{
    return d_ptr->mAttendee;
}

KDSoapValue T__NonEmptyArrayOfAttendeesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfAttendeesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mAttendee.count(); ++i) {
        KDSoapValue _valueAttendee(d_ptr->mAttendee.at(i).serialize(QString::fromLatin1("Attendee")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAttendee.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAttendee.setQualified(true);
        if (!_valueAttendee.isNil())
        args.append(_valueAttendee);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfAttendeesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Attendee")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__AttendeeType mAttendeeTemp;
            mAttendeeTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAttendee.append(mAttendeeTemp);
        }
    }
}

T__NonEmptyArrayOfAttendeesType::T__NonEmptyArrayOfAttendeesType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfAttendeesType::~T__NonEmptyArrayOfAttendeesType()
{
}

T__NonEmptyArrayOfAttendeesType::T__NonEmptyArrayOfAttendeesType( const T__NonEmptyArrayOfAttendeesType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfAttendeesType&  T__NonEmptyArrayOfAttendeesType::operator=( const T__NonEmptyArrayOfAttendeesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__AggregateOnType::PrivateDPtr : public QSharedData
{
public:
    T__PathToUnindexedFieldType mFieldURI;
    T__PathToIndexedFieldType mIndexedFieldURI;
    T__PathToExtendedFieldType mExtendedFieldURI;
    T__AggregateType mAggregate;
};

void T__AggregateOnType::setFieldURI( const T__PathToUnindexedFieldType& fieldURI )
{
    d_ptr->mFieldURI = fieldURI;
}

T__PathToUnindexedFieldType T__AggregateOnType::fieldURI() const
{
    return d_ptr->mFieldURI;
}

void T__AggregateOnType::setIndexedFieldURI( const T__PathToIndexedFieldType& indexedFieldURI )
{
    d_ptr->mIndexedFieldURI = indexedFieldURI;
}

T__PathToIndexedFieldType T__AggregateOnType::indexedFieldURI() const
{
    return d_ptr->mIndexedFieldURI;
}

void T__AggregateOnType::setExtendedFieldURI( const T__PathToExtendedFieldType& extendedFieldURI )
{
    d_ptr->mExtendedFieldURI = extendedFieldURI;
}

T__PathToExtendedFieldType T__AggregateOnType::extendedFieldURI() const
{
    return d_ptr->mExtendedFieldURI;
}

void T__AggregateOnType::setAggregate( const T__AggregateType& aggregate )
{
    d_ptr->mAggregate = aggregate;
}

T__AggregateType T__AggregateOnType::aggregate() const
{
    return d_ptr->mAggregate;
}

KDSoapValue T__AggregateOnType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AggregateOnType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFieldURI(d_ptr->mFieldURI.serialize(QString::fromLatin1("FieldURI")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFieldURI.setQualified(true);
    if (!_valueFieldURI.isNil())
    args.append(_valueFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIndexedFieldURI(d_ptr->mIndexedFieldURI.serialize(QString::fromLatin1("IndexedFieldURI")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueIndexedFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIndexedFieldURI.setQualified(true);
    if (!_valueIndexedFieldURI.isNil())
    args.append(_valueIndexedFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueExtendedFieldURI(d_ptr->mExtendedFieldURI.serialize(QString::fromLatin1("ExtendedFieldURI")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueExtendedFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueExtendedFieldURI.setQualified(true);
    if (!_valueExtendedFieldURI.isNil())
    args.append(_valueExtendedFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueAggregate(QString::fromLatin1("Aggregate"), d_ptr->mAggregate.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AggregateType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueAggregate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueAggregate.isNil())
    attribs.append(_valueAggregate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__AggregateOnType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFieldURI.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IndexedFieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIndexedFieldURI.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ExtendedFieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mExtendedFieldURI.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Aggregate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAggregate.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__AggregateOnType::T__AggregateOnType()
    : d_ptr(new PrivateDPtr)
{
}

T__AggregateOnType::~T__AggregateOnType()
{
}

T__AggregateOnType::T__AggregateOnType( const T__AggregateOnType& other )
    : d_ptr( other.d_ptr )
{
}

T__AggregateOnType&  T__AggregateOnType::operator=( const T__AggregateOnType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__WorkingHours::PrivateDPtr : public QSharedData
{
public:
    T__SerializableTimeZone mTimeZone;
    T__ArrayOfWorkingPeriod mWorkingPeriodArray;
};

void T__WorkingHours::setTimeZone( const T__SerializableTimeZone& timeZone )
{
    d_ptr->mTimeZone = timeZone;
}

T__SerializableTimeZone T__WorkingHours::timeZone() const
{
    return d_ptr->mTimeZone;
}

void T__WorkingHours::setWorkingPeriodArray( const T__ArrayOfWorkingPeriod& workingPeriodArray )
{
    d_ptr->mWorkingPeriodArray = workingPeriodArray;
}

T__ArrayOfWorkingPeriod T__WorkingHours::workingPeriodArray() const
{
    return d_ptr->mWorkingPeriodArray;
}

KDSoapValue T__WorkingHours::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WorkingHours"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueTimeZone(d_ptr->mTimeZone.serialize(QString::fromLatin1("TimeZone")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTimeZone.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeZone.setQualified(true);
    if (!_valueTimeZone.isNil())
    args.append(_valueTimeZone);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWorkingPeriodArray(d_ptr->mWorkingPeriodArray.serialize(QString::fromLatin1("WorkingPeriodArray")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueWorkingPeriodArray.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWorkingPeriodArray.setQualified(true);
    if (!_valueWorkingPeriodArray.isNil())
    args.append(_valueWorkingPeriodArray);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__WorkingHours::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("TimeZone")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeZone.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("WorkingPeriodArray")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWorkingPeriodArray.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__WorkingHours::T__WorkingHours()
    : d_ptr(new PrivateDPtr)
{
}

T__WorkingHours::~T__WorkingHours()
{
}

T__WorkingHours::T__WorkingHours( const T__WorkingHours& other )
    : d_ptr( other.d_ptr )
{
}

T__WorkingHours&  T__WorkingHours::operator=( const T__WorkingHours& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ConnectingSIDType::PrivateDPtr : public QSharedData
{
public:
    QString mPrincipalName;
    QString mSID;
    QString mPrimarySmtpAddress;
};

void T__ConnectingSIDType::setPrincipalName( const QString& principalName )
{
    d_ptr->mPrincipalName = principalName;
}

QString T__ConnectingSIDType::principalName() const
{
    return d_ptr->mPrincipalName;
}

void T__ConnectingSIDType::setSID( const QString& sID )
{
    d_ptr->mSID = sID;
}

QString T__ConnectingSIDType::sID() const
{
    return d_ptr->mSID;
}

void T__ConnectingSIDType::setPrimarySmtpAddress( const QString& primarySmtpAddress )
{
    d_ptr->mPrimarySmtpAddress = primarySmtpAddress;
}

QString T__ConnectingSIDType::primarySmtpAddress() const
{
    return d_ptr->mPrimarySmtpAddress;
}

KDSoapValue T__ConnectingSIDType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ConnectingSIDType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePrincipalName(QString::fromLatin1("PrincipalName"), QVariant::fromValue(d_ptr->mPrincipalName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePrincipalName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePrincipalName.setQualified(true);
    if (!_valuePrincipalName.isNil())
    args.append(_valuePrincipalName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSID(QString::fromLatin1("SID"), QVariant::fromValue(d_ptr->mSID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSID.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSID.setQualified(true);
    if (!_valueSID.isNil())
    args.append(_valueSID);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePrimarySmtpAddress(QString::fromLatin1("PrimarySmtpAddress"), QVariant::fromValue(d_ptr->mPrimarySmtpAddress), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePrimarySmtpAddress.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePrimarySmtpAddress.setQualified(true);
    if (!_valuePrimarySmtpAddress.isNil())
    args.append(_valuePrimarySmtpAddress);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ConnectingSIDType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("PrincipalName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPrincipalName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("SID")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSID = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("PrimarySmtpAddress")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPrimarySmtpAddress = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ConnectingSIDType::T__ConnectingSIDType()
    : d_ptr(new PrivateDPtr)
{
}

T__ConnectingSIDType::~T__ConnectingSIDType()
{
}

T__ConnectingSIDType::T__ConnectingSIDType( const T__ConnectingSIDType& other )
    : d_ptr( other.d_ptr )
{
}

T__ConnectingSIDType&  T__ConnectingSIDType::operator=( const T__ConnectingSIDType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ImAddressDictionaryEntryType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
    T__ImAddressKeyType mKey;
};

void T__ImAddressDictionaryEntryType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__ImAddressDictionaryEntryType::value() const
{
    return d_ptr->mValue;
}

T__ImAddressDictionaryEntryType::T__ImAddressDictionaryEntryType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

T__ImAddressDictionaryEntryType::operator QString() const
{
    return d_ptr->mValue;
}

void T__ImAddressDictionaryEntryType::setKey( const T__ImAddressKeyType& key )
{
    d_ptr->mKey = key;
}

T__ImAddressKeyType T__ImAddressDictionaryEntryType::key() const
{
    return d_ptr->mKey;
}

KDSoapValue T__ImAddressDictionaryEntryType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ImAddressDictionaryEntryType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:323
    KDSoapValueList attribs;
    KDSoapValue _valueKey(QString::fromLatin1("Key"), d_ptr->mKey.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ImAddressKeyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueKey.isNil())
    attribs.append(_valueKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ImAddressDictionaryEntryType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Key")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mKey.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__ImAddressDictionaryEntryType::T__ImAddressDictionaryEntryType()
    : d_ptr(new PrivateDPtr)
{
}

T__ImAddressDictionaryEntryType::~T__ImAddressDictionaryEntryType()
{
}

T__ImAddressDictionaryEntryType::T__ImAddressDictionaryEntryType( const T__ImAddressDictionaryEntryType& other )
    : d_ptr( other.d_ptr )
{
}

T__ImAddressDictionaryEntryType&  T__ImAddressDictionaryEntryType::operator=( const T__ImAddressDictionaryEntryType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__DeletedOccurrenceInfoType::PrivateDPtr : public QSharedData
{
public:
    KDDateTime mStart;
};

void T__DeletedOccurrenceInfoType::setStart( const KDDateTime& start )
{
    d_ptr->mStart = start;
}

KDDateTime T__DeletedOccurrenceInfoType::start() const
{
    return d_ptr->mStart;
}

KDSoapValue T__DeletedOccurrenceInfoType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DeletedOccurrenceInfoType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueStart(QString::fromLatin1("Start"), d_ptr->mStart.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStart.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStart.setQualified(true);
    if (!_valueStart.isNil())
    args.append(_valueStart);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__DeletedOccurrenceInfoType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Start")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStart = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__DeletedOccurrenceInfoType::T__DeletedOccurrenceInfoType()
    : d_ptr(new PrivateDPtr)
{
}

T__DeletedOccurrenceInfoType::~T__DeletedOccurrenceInfoType()
{
}

T__DeletedOccurrenceInfoType::T__DeletedOccurrenceInfoType( const T__DeletedOccurrenceInfoType& other )
    : d_ptr( other.d_ptr )
{
}

T__DeletedOccurrenceInfoType&  T__DeletedOccurrenceInfoType::operator=( const T__DeletedOccurrenceInfoType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfBaseFolderIdsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__FolderIdType> mFolderId;
    QList<T__DistinguishedFolderIdType> mDistinguishedFolderId;
};

void T__NonEmptyArrayOfBaseFolderIdsType::setFolderId( const QList<T__FolderIdType>& folderId )
{
    d_ptr->mFolderId = folderId;
}

QList<T__FolderIdType> T__NonEmptyArrayOfBaseFolderIdsType::folderId() const
{
    return d_ptr->mFolderId;
}

void T__NonEmptyArrayOfBaseFolderIdsType::setDistinguishedFolderId( const QList<T__DistinguishedFolderIdType>& distinguishedFolderId )
{
    d_ptr->mDistinguishedFolderId = distinguishedFolderId;
}

QList<T__DistinguishedFolderIdType> T__NonEmptyArrayOfBaseFolderIdsType::distinguishedFolderId() const
{
    return d_ptr->mDistinguishedFolderId;
}

KDSoapValue T__NonEmptyArrayOfBaseFolderIdsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfBaseFolderIdsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mFolderId.count(); ++i) {
        KDSoapValue _valueFolderId(d_ptr->mFolderId.at(i).serialize(QString::fromLatin1("FolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueFolderId.setQualified(true);
        if (!_valueFolderId.isNil())
        args.append(_valueFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDistinguishedFolderId.count(); ++i) {
        KDSoapValue _valueDistinguishedFolderId(d_ptr->mDistinguishedFolderId.at(i).serialize(QString::fromLatin1("DistinguishedFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDistinguishedFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDistinguishedFolderId.setQualified(true);
        if (!_valueDistinguishedFolderId.isNil())
        args.append(_valueDistinguishedFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfBaseFolderIdsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__FolderIdType mFolderIdTemp;
            mFolderIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFolderId.append(mFolderIdTemp);
        }
        else if (name == QLatin1String("DistinguishedFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DistinguishedFolderIdType mDistinguishedFolderIdTemp;
            mDistinguishedFolderIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDistinguishedFolderId.append(mDistinguishedFolderIdTemp);
        }
    }
}

T__NonEmptyArrayOfBaseFolderIdsType::T__NonEmptyArrayOfBaseFolderIdsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfBaseFolderIdsType::~T__NonEmptyArrayOfBaseFolderIdsType()
{
}

T__NonEmptyArrayOfBaseFolderIdsType::T__NonEmptyArrayOfBaseFolderIdsType( const T__NonEmptyArrayOfBaseFolderIdsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfBaseFolderIdsType&  T__NonEmptyArrayOfBaseFolderIdsType::operator=( const T__NonEmptyArrayOfBaseFolderIdsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__OccurrenceInfoType::PrivateDPtr : public QSharedData
{
public:
    T__ItemIdType mItemId;
    KDDateTime mStart;
    KDDateTime mEnd;
    KDDateTime mOriginalStart;
};

void T__OccurrenceInfoType::setItemId( const T__ItemIdType& itemId )
{
    d_ptr->mItemId = itemId;
}

T__ItemIdType T__OccurrenceInfoType::itemId() const
{
    return d_ptr->mItemId;
}

void T__OccurrenceInfoType::setStart( const KDDateTime& start )
{
    d_ptr->mStart = start;
}

KDDateTime T__OccurrenceInfoType::start() const
{
    return d_ptr->mStart;
}

void T__OccurrenceInfoType::setEnd( const KDDateTime& end )
{
    d_ptr->mEnd = end;
}

KDDateTime T__OccurrenceInfoType::end() const
{
    return d_ptr->mEnd;
}

void T__OccurrenceInfoType::setOriginalStart( const KDDateTime& originalStart )
{
    d_ptr->mOriginalStart = originalStart;
}

KDDateTime T__OccurrenceInfoType::originalStart() const
{
    return d_ptr->mOriginalStart;
}

KDSoapValue T__OccurrenceInfoType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("OccurrenceInfoType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemId(d_ptr->mItemId.serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemId.setQualified(true);
    if (!_valueItemId.isNil())
    args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStart(QString::fromLatin1("Start"), d_ptr->mStart.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStart.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStart.setQualified(true);
    if (!_valueStart.isNil())
    args.append(_valueStart);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEnd(QString::fromLatin1("End"), d_ptr->mEnd.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueEnd.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEnd.setQualified(true);
    if (!_valueEnd.isNil())
    args.append(_valueEnd);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOriginalStart(QString::fromLatin1("OriginalStart"), d_ptr->mOriginalStart.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueOriginalStart.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOriginalStart.setQualified(true);
    if (!_valueOriginalStart.isNil())
    args.append(_valueOriginalStart);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__OccurrenceInfoType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Start")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStart = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("End")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEnd = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("OriginalStart")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOriginalStart = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__OccurrenceInfoType::T__OccurrenceInfoType()
    : d_ptr(new PrivateDPtr)
{
}

T__OccurrenceInfoType::~T__OccurrenceInfoType()
{
}

T__OccurrenceInfoType::T__OccurrenceInfoType( const T__OccurrenceInfoType& other )
    : d_ptr( other.d_ptr )
{
}

T__OccurrenceInfoType&  T__OccurrenceInfoType::operator=( const T__OccurrenceInfoType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfAllItemsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ItemType> mItem;
    QList<T__MessageType> mMessage;
    QList<T__CalendarItemType> mCalendarItem;
    QList<T__ContactItemType> mContact;
    QList<T__DistributionListType> mDistributionList;
    QList<T__MeetingMessageType> mMeetingMessage;
    QList<T__MeetingRequestMessageType> mMeetingRequest;
    QList<T__MeetingResponseMessageType> mMeetingResponse;
    QList<T__MeetingCancellationMessageType> mMeetingCancellation;
    QList<T__TaskType> mTask;
    QList<T__PostItemType> mPostItem;
    QList<T__ReplyToItemType> mReplyToItem;
    QList<T__ForwardItemType> mForwardItem;
    QList<T__ReplyAllToItemType> mReplyAllToItem;
    QList<T__AcceptItemType> mAcceptItem;
    QList<T__TentativelyAcceptItemType> mTentativelyAcceptItem;
    QList<T__DeclineItemType> mDeclineItem;
    QList<T__CancelCalendarItemType> mCancelCalendarItem;
    QList<T__RemoveItemType> mRemoveItem;
    QList<T__SuppressReadReceiptType> mSuppressReadReceipt;
    QList<T__PostReplyItemType> mPostReplyItem;
};

void T__NonEmptyArrayOfAllItemsType::setItem( const QList<T__ItemType>& item )
{
    d_ptr->mItem = item;
}

QList<T__ItemType> T__NonEmptyArrayOfAllItemsType::item() const
{
    return d_ptr->mItem;
}

void T__NonEmptyArrayOfAllItemsType::setMessage( const QList<T__MessageType>& message )
{
    d_ptr->mMessage = message;
}

QList<T__MessageType> T__NonEmptyArrayOfAllItemsType::message() const
{
    return d_ptr->mMessage;
}

void T__NonEmptyArrayOfAllItemsType::setCalendarItem( const QList<T__CalendarItemType>& calendarItem )
{
    d_ptr->mCalendarItem = calendarItem;
}

QList<T__CalendarItemType> T__NonEmptyArrayOfAllItemsType::calendarItem() const
{
    return d_ptr->mCalendarItem;
}

void T__NonEmptyArrayOfAllItemsType::setContact( const QList<T__ContactItemType>& contact )
{
    d_ptr->mContact = contact;
}

QList<T__ContactItemType> T__NonEmptyArrayOfAllItemsType::contact() const
{
    return d_ptr->mContact;
}

void T__NonEmptyArrayOfAllItemsType::setDistributionList( const QList<T__DistributionListType>& distributionList )
{
    d_ptr->mDistributionList = distributionList;
}

QList<T__DistributionListType> T__NonEmptyArrayOfAllItemsType::distributionList() const
{
    return d_ptr->mDistributionList;
}

void T__NonEmptyArrayOfAllItemsType::setMeetingMessage( const QList<T__MeetingMessageType>& meetingMessage )
{
    d_ptr->mMeetingMessage = meetingMessage;
}

QList<T__MeetingMessageType> T__NonEmptyArrayOfAllItemsType::meetingMessage() const
{
    return d_ptr->mMeetingMessage;
}

void T__NonEmptyArrayOfAllItemsType::setMeetingRequest( const QList<T__MeetingRequestMessageType>& meetingRequest )
{
    d_ptr->mMeetingRequest = meetingRequest;
}

QList<T__MeetingRequestMessageType> T__NonEmptyArrayOfAllItemsType::meetingRequest() const
{
    return d_ptr->mMeetingRequest;
}

void T__NonEmptyArrayOfAllItemsType::setMeetingResponse( const QList<T__MeetingResponseMessageType>& meetingResponse )
{
    d_ptr->mMeetingResponse = meetingResponse;
}

QList<T__MeetingResponseMessageType> T__NonEmptyArrayOfAllItemsType::meetingResponse() const
{
    return d_ptr->mMeetingResponse;
}

void T__NonEmptyArrayOfAllItemsType::setMeetingCancellation( const QList<T__MeetingCancellationMessageType>& meetingCancellation )
{
    d_ptr->mMeetingCancellation = meetingCancellation;
}

QList<T__MeetingCancellationMessageType> T__NonEmptyArrayOfAllItemsType::meetingCancellation() const
{
    return d_ptr->mMeetingCancellation;
}

void T__NonEmptyArrayOfAllItemsType::setTask( const QList<T__TaskType>& task )
{
    d_ptr->mTask = task;
}

QList<T__TaskType> T__NonEmptyArrayOfAllItemsType::task() const
{
    return d_ptr->mTask;
}

void T__NonEmptyArrayOfAllItemsType::setPostItem( const QList<T__PostItemType>& postItem )
{
    d_ptr->mPostItem = postItem;
}

QList<T__PostItemType> T__NonEmptyArrayOfAllItemsType::postItem() const
{
    return d_ptr->mPostItem;
}

void T__NonEmptyArrayOfAllItemsType::setReplyToItem( const QList<T__ReplyToItemType>& replyToItem )
{
    d_ptr->mReplyToItem = replyToItem;
}

QList<T__ReplyToItemType> T__NonEmptyArrayOfAllItemsType::replyToItem() const
{
    return d_ptr->mReplyToItem;
}

void T__NonEmptyArrayOfAllItemsType::setForwardItem( const QList<T__ForwardItemType>& forwardItem )
{
    d_ptr->mForwardItem = forwardItem;
}

QList<T__ForwardItemType> T__NonEmptyArrayOfAllItemsType::forwardItem() const
{
    return d_ptr->mForwardItem;
}

void T__NonEmptyArrayOfAllItemsType::setReplyAllToItem( const QList<T__ReplyAllToItemType>& replyAllToItem )
{
    d_ptr->mReplyAllToItem = replyAllToItem;
}

QList<T__ReplyAllToItemType> T__NonEmptyArrayOfAllItemsType::replyAllToItem() const
{
    return d_ptr->mReplyAllToItem;
}

void T__NonEmptyArrayOfAllItemsType::setAcceptItem( const QList<T__AcceptItemType>& acceptItem )
{
    d_ptr->mAcceptItem = acceptItem;
}

QList<T__AcceptItemType> T__NonEmptyArrayOfAllItemsType::acceptItem() const
{
    return d_ptr->mAcceptItem;
}

void T__NonEmptyArrayOfAllItemsType::setTentativelyAcceptItem( const QList<T__TentativelyAcceptItemType>& tentativelyAcceptItem )
{
    d_ptr->mTentativelyAcceptItem = tentativelyAcceptItem;
}

QList<T__TentativelyAcceptItemType> T__NonEmptyArrayOfAllItemsType::tentativelyAcceptItem() const
{
    return d_ptr->mTentativelyAcceptItem;
}

void T__NonEmptyArrayOfAllItemsType::setDeclineItem( const QList<T__DeclineItemType>& declineItem )
{
    d_ptr->mDeclineItem = declineItem;
}

QList<T__DeclineItemType> T__NonEmptyArrayOfAllItemsType::declineItem() const
{
    return d_ptr->mDeclineItem;
}

void T__NonEmptyArrayOfAllItemsType::setCancelCalendarItem( const QList<T__CancelCalendarItemType>& cancelCalendarItem )
{
    d_ptr->mCancelCalendarItem = cancelCalendarItem;
}

QList<T__CancelCalendarItemType> T__NonEmptyArrayOfAllItemsType::cancelCalendarItem() const
{
    return d_ptr->mCancelCalendarItem;
}

void T__NonEmptyArrayOfAllItemsType::setRemoveItem( const QList<T__RemoveItemType>& removeItem )
{
    d_ptr->mRemoveItem = removeItem;
}

QList<T__RemoveItemType> T__NonEmptyArrayOfAllItemsType::removeItem() const
{
    return d_ptr->mRemoveItem;
}

void T__NonEmptyArrayOfAllItemsType::setSuppressReadReceipt( const QList<T__SuppressReadReceiptType>& suppressReadReceipt )
{
    d_ptr->mSuppressReadReceipt = suppressReadReceipt;
}

QList<T__SuppressReadReceiptType> T__NonEmptyArrayOfAllItemsType::suppressReadReceipt() const
{
    return d_ptr->mSuppressReadReceipt;
}

void T__NonEmptyArrayOfAllItemsType::setPostReplyItem( const QList<T__PostReplyItemType>& postReplyItem )
{
    d_ptr->mPostReplyItem = postReplyItem;
}

QList<T__PostReplyItemType> T__NonEmptyArrayOfAllItemsType::postReplyItem() const
{
    return d_ptr->mPostReplyItem;
}

KDSoapValue T__NonEmptyArrayOfAllItemsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfAllItemsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mItem.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItem.at(i).serialize(QString::fromLatin1("Item")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueItem.setQualified(true);
        if (!_valueItem.isNil())
        args.append(_valueItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMessage.count(); ++i) {
        KDSoapValue _valueMessage(d_ptr->mMessage.at(i).serialize(QString::fromLatin1("Message")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMessage.setQualified(true);
        if (!_valueMessage.isNil())
        args.append(_valueMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCalendarItem.count(); ++i) {
        KDSoapValue _valueCalendarItem(d_ptr->mCalendarItem.at(i).serialize(QString::fromLatin1("CalendarItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCalendarItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCalendarItem.setQualified(true);
        if (!_valueCalendarItem.isNil())
        args.append(_valueCalendarItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mContact.count(); ++i) {
        KDSoapValue _valueContact(d_ptr->mContact.at(i).serialize(QString::fromLatin1("Contact")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueContact.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueContact.setQualified(true);
        if (!_valueContact.isNil())
        args.append(_valueContact);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDistributionList.count(); ++i) {
        KDSoapValue _valueDistributionList(d_ptr->mDistributionList.at(i).serialize(QString::fromLatin1("DistributionList")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDistributionList.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDistributionList.setQualified(true);
        if (!_valueDistributionList.isNil())
        args.append(_valueDistributionList);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMeetingMessage.count(); ++i) {
        KDSoapValue _valueMeetingMessage(d_ptr->mMeetingMessage.at(i).serialize(QString::fromLatin1("MeetingMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMeetingMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMeetingMessage.setQualified(true);
        if (!_valueMeetingMessage.isNil())
        args.append(_valueMeetingMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMeetingRequest.count(); ++i) {
        KDSoapValue _valueMeetingRequest(d_ptr->mMeetingRequest.at(i).serialize(QString::fromLatin1("MeetingRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMeetingRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMeetingRequest.setQualified(true);
        if (!_valueMeetingRequest.isNil())
        args.append(_valueMeetingRequest);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMeetingResponse.count(); ++i) {
        KDSoapValue _valueMeetingResponse(d_ptr->mMeetingResponse.at(i).serialize(QString::fromLatin1("MeetingResponse")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMeetingResponse.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMeetingResponse.setQualified(true);
        if (!_valueMeetingResponse.isNil())
        args.append(_valueMeetingResponse);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMeetingCancellation.count(); ++i) {
        KDSoapValue _valueMeetingCancellation(d_ptr->mMeetingCancellation.at(i).serialize(QString::fromLatin1("MeetingCancellation")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMeetingCancellation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMeetingCancellation.setQualified(true);
        if (!_valueMeetingCancellation.isNil())
        args.append(_valueMeetingCancellation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mTask.count(); ++i) {
        KDSoapValue _valueTask(d_ptr->mTask.at(i).serialize(QString::fromLatin1("Task")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueTask.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueTask.setQualified(true);
        if (!_valueTask.isNil())
        args.append(_valueTask);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mPostItem.count(); ++i) {
        KDSoapValue _valuePostItem(d_ptr->mPostItem.at(i).serialize(QString::fromLatin1("PostItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valuePostItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valuePostItem.setQualified(true);
        if (!_valuePostItem.isNil())
        args.append(_valuePostItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mReplyToItem.count(); ++i) {
        KDSoapValue _valueReplyToItem(d_ptr->mReplyToItem.at(i).serialize(QString::fromLatin1("ReplyToItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueReplyToItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueReplyToItem.setQualified(true);
        if (!_valueReplyToItem.isNil())
        args.append(_valueReplyToItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mForwardItem.count(); ++i) {
        KDSoapValue _valueForwardItem(d_ptr->mForwardItem.at(i).serialize(QString::fromLatin1("ForwardItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueForwardItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueForwardItem.setQualified(true);
        if (!_valueForwardItem.isNil())
        args.append(_valueForwardItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mReplyAllToItem.count(); ++i) {
        KDSoapValue _valueReplyAllToItem(d_ptr->mReplyAllToItem.at(i).serialize(QString::fromLatin1("ReplyAllToItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueReplyAllToItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueReplyAllToItem.setQualified(true);
        if (!_valueReplyAllToItem.isNil())
        args.append(_valueReplyAllToItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mAcceptItem.count(); ++i) {
        KDSoapValue _valueAcceptItem(d_ptr->mAcceptItem.at(i).serialize(QString::fromLatin1("AcceptItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAcceptItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAcceptItem.setQualified(true);
        if (!_valueAcceptItem.isNil())
        args.append(_valueAcceptItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mTentativelyAcceptItem.count(); ++i) {
        KDSoapValue _valueTentativelyAcceptItem(d_ptr->mTentativelyAcceptItem.at(i).serialize(QString::fromLatin1("TentativelyAcceptItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueTentativelyAcceptItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueTentativelyAcceptItem.setQualified(true);
        if (!_valueTentativelyAcceptItem.isNil())
        args.append(_valueTentativelyAcceptItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDeclineItem.count(); ++i) {
        KDSoapValue _valueDeclineItem(d_ptr->mDeclineItem.at(i).serialize(QString::fromLatin1("DeclineItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeclineItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDeclineItem.setQualified(true);
        if (!_valueDeclineItem.isNil())
        args.append(_valueDeclineItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCancelCalendarItem.count(); ++i) {
        KDSoapValue _valueCancelCalendarItem(d_ptr->mCancelCalendarItem.at(i).serialize(QString::fromLatin1("CancelCalendarItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCancelCalendarItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCancelCalendarItem.setQualified(true);
        if (!_valueCancelCalendarItem.isNil())
        args.append(_valueCancelCalendarItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mRemoveItem.count(); ++i) {
        KDSoapValue _valueRemoveItem(d_ptr->mRemoveItem.at(i).serialize(QString::fromLatin1("RemoveItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueRemoveItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueRemoveItem.setQualified(true);
        if (!_valueRemoveItem.isNil())
        args.append(_valueRemoveItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSuppressReadReceipt.count(); ++i) {
        KDSoapValue _valueSuppressReadReceipt(d_ptr->mSuppressReadReceipt.at(i).serialize(QString::fromLatin1("SuppressReadReceipt")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSuppressReadReceipt.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSuppressReadReceipt.setQualified(true);
        if (!_valueSuppressReadReceipt.isNil())
        args.append(_valueSuppressReadReceipt);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mPostReplyItem.count(); ++i) {
        KDSoapValue _valuePostReplyItem(d_ptr->mPostReplyItem.at(i).serialize(QString::fromLatin1("PostReplyItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valuePostReplyItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valuePostReplyItem.setQualified(true);
        if (!_valuePostReplyItem.isNil())
        args.append(_valuePostReplyItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfAllItemsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Item")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ItemType mItemTemp;
            mItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mItem.append(mItemTemp);
        }
        else if (name == QLatin1String("Message")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MessageType mMessageTemp;
            mMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMessage.append(mMessageTemp);
        }
        else if (name == QLatin1String("CalendarItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__CalendarItemType mCalendarItemTemp;
            mCalendarItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCalendarItem.append(mCalendarItemTemp);
        }
        else if (name == QLatin1String("Contact")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ContactItemType mContactTemp;
            mContactTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mContact.append(mContactTemp);
        }
        else if (name == QLatin1String("DistributionList")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DistributionListType mDistributionListTemp;
            mDistributionListTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDistributionList.append(mDistributionListTemp);
        }
        else if (name == QLatin1String("MeetingMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MeetingMessageType mMeetingMessageTemp;
            mMeetingMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMeetingMessage.append(mMeetingMessageTemp);
        }
        else if (name == QLatin1String("MeetingRequest")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MeetingRequestMessageType mMeetingRequestTemp;
            mMeetingRequestTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMeetingRequest.append(mMeetingRequestTemp);
        }
        else if (name == QLatin1String("MeetingResponse")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MeetingResponseMessageType mMeetingResponseTemp;
            mMeetingResponseTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMeetingResponse.append(mMeetingResponseTemp);
        }
        else if (name == QLatin1String("MeetingCancellation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MeetingCancellationMessageType mMeetingCancellationTemp;
            mMeetingCancellationTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMeetingCancellation.append(mMeetingCancellationTemp);
        }
        else if (name == QLatin1String("Task")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__TaskType mTaskTemp;
            mTaskTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mTask.append(mTaskTemp);
        }
        else if (name == QLatin1String("PostItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__PostItemType mPostItemTemp;
            mPostItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mPostItem.append(mPostItemTemp);
        }
        else if (name == QLatin1String("ReplyToItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ReplyToItemType mReplyToItemTemp;
            mReplyToItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mReplyToItem.append(mReplyToItemTemp);
        }
        else if (name == QLatin1String("ForwardItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ForwardItemType mForwardItemTemp;
            mForwardItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mForwardItem.append(mForwardItemTemp);
        }
        else if (name == QLatin1String("ReplyAllToItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ReplyAllToItemType mReplyAllToItemTemp;
            mReplyAllToItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mReplyAllToItem.append(mReplyAllToItemTemp);
        }
        else if (name == QLatin1String("AcceptItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__AcceptItemType mAcceptItemTemp;
            mAcceptItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAcceptItem.append(mAcceptItemTemp);
        }
        else if (name == QLatin1String("TentativelyAcceptItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__TentativelyAcceptItemType mTentativelyAcceptItemTemp;
            mTentativelyAcceptItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mTentativelyAcceptItem.append(mTentativelyAcceptItemTemp);
        }
        else if (name == QLatin1String("DeclineItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DeclineItemType mDeclineItemTemp;
            mDeclineItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeclineItem.append(mDeclineItemTemp);
        }
        else if (name == QLatin1String("CancelCalendarItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__CancelCalendarItemType mCancelCalendarItemTemp;
            mCancelCalendarItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCancelCalendarItem.append(mCancelCalendarItemTemp);
        }
        else if (name == QLatin1String("RemoveItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__RemoveItemType mRemoveItemTemp;
            mRemoveItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mRemoveItem.append(mRemoveItemTemp);
        }
        else if (name == QLatin1String("SuppressReadReceipt")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SuppressReadReceiptType mSuppressReadReceiptTemp;
            mSuppressReadReceiptTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSuppressReadReceipt.append(mSuppressReadReceiptTemp);
        }
        else if (name == QLatin1String("PostReplyItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__PostReplyItemType mPostReplyItemTemp;
            mPostReplyItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mPostReplyItem.append(mPostReplyItemTemp);
        }
    }
}

T__NonEmptyArrayOfAllItemsType::T__NonEmptyArrayOfAllItemsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfAllItemsType::~T__NonEmptyArrayOfAllItemsType()
{
}

T__NonEmptyArrayOfAllItemsType::T__NonEmptyArrayOfAllItemsType( const T__NonEmptyArrayOfAllItemsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfAllItemsType&  T__NonEmptyArrayOfAllItemsType::operator=( const T__NonEmptyArrayOfAllItemsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ArrayOfDelegateUserResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    QList<TNS__DelegateUserResponseMessageType> mDelegateUserResponseMessageType;
};

void TNS__ArrayOfDelegateUserResponseMessageType::setDelegateUserResponseMessageType( const QList<TNS__DelegateUserResponseMessageType>& delegateUserResponseMessageType )
{
    d_ptr->mDelegateUserResponseMessageType = delegateUserResponseMessageType;
}

QList<TNS__DelegateUserResponseMessageType> TNS__ArrayOfDelegateUserResponseMessageType::delegateUserResponseMessageType() const
{
    return d_ptr->mDelegateUserResponseMessageType;
}

KDSoapValue TNS__ArrayOfDelegateUserResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ArrayOfDelegateUserResponseMessageType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mDelegateUserResponseMessageType.count(); ++i) {
        KDSoapValue _valueDelegateUserResponseMessageType(d_ptr->mDelegateUserResponseMessageType.at(i).serialize(QString::fromLatin1("DelegateUserResponseMessageType")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDelegateUserResponseMessageType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueDelegateUserResponseMessageType.setQualified(true);
        if (!_valueDelegateUserResponseMessageType.isNil())
        args.append(_valueDelegateUserResponseMessageType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void TNS__ArrayOfDelegateUserResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DelegateUserResponseMessageType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__DelegateUserResponseMessageType mDelegateUserResponseMessageTypeTemp;
            mDelegateUserResponseMessageTypeTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDelegateUserResponseMessageType.append(mDelegateUserResponseMessageTypeTemp);
        }
    }
}

TNS__ArrayOfDelegateUserResponseMessageType::TNS__ArrayOfDelegateUserResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ArrayOfDelegateUserResponseMessageType::~TNS__ArrayOfDelegateUserResponseMessageType()
{
}

TNS__ArrayOfDelegateUserResponseMessageType::TNS__ArrayOfDelegateUserResponseMessageType( const TNS__ArrayOfDelegateUserResponseMessageType& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ArrayOfDelegateUserResponseMessageType&  TNS__ArrayOfDelegateUserResponseMessageType::operator=( const TNS__ArrayOfDelegateUserResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__TimeZoneContextType::PrivateDPtr : public QSharedData
{
public:
    T__TimeZoneDefinitionType mTimeZoneDefinition;
    KDSoapValue mAnyAttribute;
};

void T__TimeZoneContextType::setTimeZoneDefinition( const T__TimeZoneDefinitionType& timeZoneDefinition )
{
    d_ptr->mTimeZoneDefinition = timeZoneDefinition;
}

T__TimeZoneDefinitionType T__TimeZoneContextType::timeZoneDefinition() const
{
    return d_ptr->mTimeZoneDefinition;
}

void T__TimeZoneContextType::setAnyAttribute( const KDSoapValue& anyAttribute )
{
    d_ptr->mAnyAttribute = anyAttribute;
}

KDSoapValue T__TimeZoneContextType::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue T__TimeZoneContextType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TimeZoneContextType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueTimeZoneDefinition(d_ptr->mTimeZoneDefinition.serialize(QString::fromLatin1("TimeZoneDefinition")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTimeZoneDefinition.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeZoneDefinition.setQualified(true);
    if (!_valueTimeZoneDefinition.isNil())
    args.append(_valueTimeZoneDefinition);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:199
    }
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__TimeZoneContextType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("TimeZoneDefinition")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeZoneDefinition.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("anyAttribute")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAnyAttribute = val;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:251
        }
    }
}

T__TimeZoneContextType::T__TimeZoneContextType()
    : d_ptr(new PrivateDPtr)
{
}

T__TimeZoneContextType::~T__TimeZoneContextType()
{
}

T__TimeZoneContextType::T__TimeZoneContextType( const T__TimeZoneContextType& other )
    : d_ptr( other.d_ptr )
{
}

T__TimeZoneContextType&  T__TimeZoneContextType::operator=( const T__TimeZoneContextType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue T__AttendeeConflictData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AttendeeConflictData"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    return mainValue;
}

void T__AttendeeConflictData::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__AttendeeConflictData::T__AttendeeConflictData()
{
}

T__AttendeeConflictData::~T__AttendeeConflictData()
{
}


class T__ArrayOfMailboxData::PrivateDPtr : public QSharedData
{
public:
    QList<T__MailboxData> mMailboxData;
};

void T__ArrayOfMailboxData::setMailboxData( const QList<T__MailboxData>& mailboxData )
{
    d_ptr->mMailboxData = mailboxData;
}

QList<T__MailboxData> T__ArrayOfMailboxData::mailboxData() const
{
    return d_ptr->mMailboxData;
}

KDSoapValue T__ArrayOfMailboxData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfMailboxData"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mMailboxData.count(); ++i) {
        KDSoapValue _valueMailboxData(d_ptr->mMailboxData.at(i).serialize(QString::fromLatin1("MailboxData")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMailboxData.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMailboxData.setQualified(true);
        _valueMailboxData.setNillable(true);
        args.append(_valueMailboxData);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfMailboxData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("MailboxData")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MailboxData mMailboxDataTemp;
            mMailboxDataTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMailboxData.append(mMailboxDataTemp);
        }
    }
}

T__ArrayOfMailboxData::T__ArrayOfMailboxData()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfMailboxData::~T__ArrayOfMailboxData()
{
}

T__ArrayOfMailboxData::T__ArrayOfMailboxData( const T__ArrayOfMailboxData& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfMailboxData&  T__ArrayOfMailboxData::operator=( const T__ArrayOfMailboxData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfPathsToElementType::PrivateDPtr : public QSharedData
{
public:
    QList<T__BasePathToElementType> mPath;
};

void T__NonEmptyArrayOfPathsToElementType::setPath( const QList<T__BasePathToElementType>& path )
{
    d_ptr->mPath = path;
}

QList<T__BasePathToElementType> T__NonEmptyArrayOfPathsToElementType::path() const
{
    return d_ptr->mPath;
}

KDSoapValue T__NonEmptyArrayOfPathsToElementType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfPathsToElementType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mPath.count(); ++i) {
        KDSoapValue _valuePath(d_ptr->mPath.at(i).serialize(QString::fromLatin1("Path")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valuePath.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valuePath.setQualified(true);
        if (!_valuePath.isNil())
        args.append(_valuePath);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfPathsToElementType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Path")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__BasePathToElementType mPathTemp;
            mPathTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mPath.append(mPathTemp);
        }
    }
}

T__NonEmptyArrayOfPathsToElementType::T__NonEmptyArrayOfPathsToElementType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfPathsToElementType::~T__NonEmptyArrayOfPathsToElementType()
{
}

T__NonEmptyArrayOfPathsToElementType::T__NonEmptyArrayOfPathsToElementType( const T__NonEmptyArrayOfPathsToElementType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfPathsToElementType&  T__NonEmptyArrayOfPathsToElementType::operator=( const T__NonEmptyArrayOfPathsToElementType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfBaseItemIdsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ItemIdType> mItemId;
};

void T__ArrayOfBaseItemIdsType::setItemId( const QList<T__ItemIdType>& itemId )
{
    d_ptr->mItemId = itemId;
}

QList<T__ItemIdType> T__ArrayOfBaseItemIdsType::itemId() const
{
    return d_ptr->mItemId;
}

KDSoapValue T__ArrayOfBaseItemIdsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfBaseItemIdsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mItemId.count(); ++i) {
        KDSoapValue _valueItemId(d_ptr->mItemId.at(i).serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueItemId.setQualified(true);
        if (!_valueItemId.isNil())
        args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfBaseItemIdsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ItemIdType mItemIdTemp;
            mItemIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mItemId.append(mItemIdTemp);
        }
    }
}

T__ArrayOfBaseItemIdsType::T__ArrayOfBaseItemIdsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfBaseItemIdsType::~T__ArrayOfBaseItemIdsType()
{
}

T__ArrayOfBaseItemIdsType::T__ArrayOfBaseItemIdsType( const T__ArrayOfBaseItemIdsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfBaseItemIdsType&  T__ArrayOfBaseItemIdsType::operator=( const T__ArrayOfBaseItemIdsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfCalendarEvent::PrivateDPtr : public QSharedData
{
public:
    QList<T__CalendarEvent> mCalendarEvent;
};

void T__ArrayOfCalendarEvent::setCalendarEvent( const QList<T__CalendarEvent>& calendarEvent )
{
    d_ptr->mCalendarEvent = calendarEvent;
}

QList<T__CalendarEvent> T__ArrayOfCalendarEvent::calendarEvent() const
{
    return d_ptr->mCalendarEvent;
}

KDSoapValue T__ArrayOfCalendarEvent::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfCalendarEvent"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mCalendarEvent.count(); ++i) {
        KDSoapValue _valueCalendarEvent(d_ptr->mCalendarEvent.at(i).serialize(QString::fromLatin1("CalendarEvent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCalendarEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCalendarEvent.setQualified(true);
        if (!_valueCalendarEvent.isNil())
        args.append(_valueCalendarEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfCalendarEvent::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CalendarEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__CalendarEvent mCalendarEventTemp;
            mCalendarEventTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCalendarEvent.append(mCalendarEventTemp);
        }
    }
}

T__ArrayOfCalendarEvent::T__ArrayOfCalendarEvent()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfCalendarEvent::~T__ArrayOfCalendarEvent()
{
}

T__ArrayOfCalendarEvent::T__ArrayOfCalendarEvent( const T__ArrayOfCalendarEvent& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfCalendarEvent&  T__ArrayOfCalendarEvent::operator=( const T__ArrayOfCalendarEvent& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SerializableTimeZoneTime::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mBias;
    QString mTime;
    int mDayOrder;
    int mMonth;
    T__DayOfWeekType mDayOfWeek;
    QString mYear;
};

T__SerializableTimeZoneTime::PrivateDPtr::PrivateDPtr()
    : mBias(0), mDayOrder(0), mMonth(0)
{
}


void T__SerializableTimeZoneTime::setBias( int bias )
{
    d_ptr->mBias = bias;
}

int T__SerializableTimeZoneTime::bias() const
{
    return d_ptr->mBias;
}

void T__SerializableTimeZoneTime::setTime( const QString& time )
{
    d_ptr->mTime = time;
}

QString T__SerializableTimeZoneTime::time() const
{
    return d_ptr->mTime;
}

void T__SerializableTimeZoneTime::setDayOrder( int dayOrder )
{
    d_ptr->mDayOrder = dayOrder;
}

int T__SerializableTimeZoneTime::dayOrder() const
{
    return d_ptr->mDayOrder;
}

void T__SerializableTimeZoneTime::setMonth( int month )
{
    d_ptr->mMonth = month;
}

int T__SerializableTimeZoneTime::month() const
{
    return d_ptr->mMonth;
}

void T__SerializableTimeZoneTime::setDayOfWeek( const T__DayOfWeekType& dayOfWeek )
{
    d_ptr->mDayOfWeek = dayOfWeek;
}

T__DayOfWeekType T__SerializableTimeZoneTime::dayOfWeek() const
{
    return d_ptr->mDayOfWeek;
}

void T__SerializableTimeZoneTime::setYear( const QString& year )
{
    d_ptr->mYear = year;
}

QString T__SerializableTimeZoneTime::year() const
{
    return d_ptr->mYear;
}

KDSoapValue T__SerializableTimeZoneTime::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SerializableTimeZoneTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueBias(QString::fromLatin1("Bias"), QVariant::fromValue(d_ptr->mBias), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueBias.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBias.setQualified(true);
    if (!_valueBias.isNil())
    args.append(_valueBias);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTime(QString::fromLatin1("Time"), QVariant::fromValue(d_ptr->mTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTime.setQualified(true);
    if (!_valueTime.isNil())
    args.append(_valueTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDayOrder(QString::fromLatin1("DayOrder"), QVariant::fromValue(d_ptr->mDayOrder), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("short"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDayOrder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDayOrder.setQualified(true);
    if (!_valueDayOrder.isNil())
    args.append(_valueDayOrder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMonth(QString::fromLatin1("Month"), QVariant::fromValue(d_ptr->mMonth), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("short"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMonth.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMonth.setQualified(true);
    if (!_valueMonth.isNil())
    args.append(_valueMonth);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDayOfWeek(QString::fromLatin1("DayOfWeek"), d_ptr->mDayOfWeek.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DayOfWeekType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDayOfWeek.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDayOfWeek.setQualified(true);
    if (!_valueDayOfWeek.isNil())
    args.append(_valueDayOfWeek);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueYear(QString::fromLatin1("Year"), QVariant::fromValue(d_ptr->mYear), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueYear.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueYear.setQualified(true);
    if (!_valueYear.isNil())
    args.append(_valueYear);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SerializableTimeZoneTime::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Bias")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBias = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Time")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTime = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DayOrder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDayOrder = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Month")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMonth = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DayOfWeek")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDayOfWeek.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Year")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mYear = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__SerializableTimeZoneTime::T__SerializableTimeZoneTime()
    : d_ptr(new PrivateDPtr)
{
}

T__SerializableTimeZoneTime::~T__SerializableTimeZoneTime()
{
}

T__SerializableTimeZoneTime::T__SerializableTimeZoneTime( const T__SerializableTimeZoneTime& other )
    : d_ptr( other.d_ptr )
{
}

T__SerializableTimeZoneTime&  T__SerializableTimeZoneTime::operator=( const T__SerializableTimeZoneTime& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ArrayOfResponseMessagesType::PrivateDPtr : public QSharedData
{
public:
    QList<TNS__ItemInfoResponseMessageType> mCreateItemResponseMessage;
    QList<TNS__ResponseMessageType> mDeleteItemResponseMessage;
    QList<TNS__ItemInfoResponseMessageType> mGetItemResponseMessage;
    QList<TNS__UpdateItemResponseMessageType> mUpdateItemResponseMessage;
    QList<TNS__ResponseMessageType> mSendItemResponseMessage;
    QList<TNS__ResponseMessageType> mDeleteFolderResponseMessage;
    QList<TNS__FolderInfoResponseMessageType> mCreateFolderResponseMessage;
    QList<TNS__FolderInfoResponseMessageType> mGetFolderResponseMessage;
    QList<TNS__FindFolderResponseMessageType> mFindFolderResponseMessage;
    QList<TNS__FolderInfoResponseMessageType> mUpdateFolderResponseMessage;
    QList<TNS__FolderInfoResponseMessageType> mMoveFolderResponseMessage;
    QList<TNS__FolderInfoResponseMessageType> mCopyFolderResponseMessage;
    QList<TNS__AttachmentInfoResponseMessageType> mCreateAttachmentResponseMessage;
    QList<TNS__DeleteAttachmentResponseMessageType> mDeleteAttachmentResponseMessage;
    QList<TNS__AttachmentInfoResponseMessageType> mGetAttachmentResponseMessage;
    QList<TNS__FindItemResponseMessageType> mFindItemResponseMessage;
    QList<TNS__ItemInfoResponseMessageType> mMoveItemResponseMessage;
    QList<TNS__ItemInfoResponseMessageType> mCopyItemResponseMessage;
    QList<TNS__ResolveNamesResponseMessageType> mResolveNamesResponseMessage;
    QList<TNS__ExpandDLResponseMessageType> mExpandDLResponseMessage;
    QList<TNS__GetEventsResponseMessageType> mGetEventsResponseMessage;
    QList<TNS__SubscribeResponseMessageType> mSubscribeResponseMessage;
    QList<TNS__ResponseMessageType> mUnsubscribeResponseMessage;
    QList<TNS__SendNotificationResponseMessageType> mSendNotificationResponseMessage;
    QList<TNS__SyncFolderHierarchyResponseMessageType> mSyncFolderHierarchyResponseMessage;
    QList<TNS__SyncFolderItemsResponseMessageType> mSyncFolderItemsResponseMessage;
    QList<TNS__FolderInfoResponseMessageType> mCreateManagedFolderResponseMessage;
    QList<TNS__ConvertIdResponseMessageType> mConvertIdResponseMessage;
};

void TNS__ArrayOfResponseMessagesType::setCreateItemResponseMessage( const QList<TNS__ItemInfoResponseMessageType>& createItemResponseMessage )
{
    d_ptr->mCreateItemResponseMessage = createItemResponseMessage;
}

QList<TNS__ItemInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::createItemResponseMessage() const
{
    return d_ptr->mCreateItemResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setDeleteItemResponseMessage( const QList<TNS__ResponseMessageType>& deleteItemResponseMessage )
{
    d_ptr->mDeleteItemResponseMessage = deleteItemResponseMessage;
}

QList<TNS__ResponseMessageType> TNS__ArrayOfResponseMessagesType::deleteItemResponseMessage() const
{
    return d_ptr->mDeleteItemResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setGetItemResponseMessage( const QList<TNS__ItemInfoResponseMessageType>& getItemResponseMessage )
{
    d_ptr->mGetItemResponseMessage = getItemResponseMessage;
}

QList<TNS__ItemInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::getItemResponseMessage() const
{
    return d_ptr->mGetItemResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setUpdateItemResponseMessage( const QList<TNS__UpdateItemResponseMessageType>& updateItemResponseMessage )
{
    d_ptr->mUpdateItemResponseMessage = updateItemResponseMessage;
}

QList<TNS__UpdateItemResponseMessageType> TNS__ArrayOfResponseMessagesType::updateItemResponseMessage() const
{
    return d_ptr->mUpdateItemResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setSendItemResponseMessage( const QList<TNS__ResponseMessageType>& sendItemResponseMessage )
{
    d_ptr->mSendItemResponseMessage = sendItemResponseMessage;
}

QList<TNS__ResponseMessageType> TNS__ArrayOfResponseMessagesType::sendItemResponseMessage() const
{
    return d_ptr->mSendItemResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setDeleteFolderResponseMessage( const QList<TNS__ResponseMessageType>& deleteFolderResponseMessage )
{
    d_ptr->mDeleteFolderResponseMessage = deleteFolderResponseMessage;
}

QList<TNS__ResponseMessageType> TNS__ArrayOfResponseMessagesType::deleteFolderResponseMessage() const
{
    return d_ptr->mDeleteFolderResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setCreateFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& createFolderResponseMessage )
{
    d_ptr->mCreateFolderResponseMessage = createFolderResponseMessage;
}

QList<TNS__FolderInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::createFolderResponseMessage() const
{
    return d_ptr->mCreateFolderResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setGetFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& getFolderResponseMessage )
{
    d_ptr->mGetFolderResponseMessage = getFolderResponseMessage;
}

QList<TNS__FolderInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::getFolderResponseMessage() const
{
    return d_ptr->mGetFolderResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setFindFolderResponseMessage( const QList<TNS__FindFolderResponseMessageType>& findFolderResponseMessage )
{
    d_ptr->mFindFolderResponseMessage = findFolderResponseMessage;
}

QList<TNS__FindFolderResponseMessageType> TNS__ArrayOfResponseMessagesType::findFolderResponseMessage() const
{
    return d_ptr->mFindFolderResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setUpdateFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& updateFolderResponseMessage )
{
    d_ptr->mUpdateFolderResponseMessage = updateFolderResponseMessage;
}

QList<TNS__FolderInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::updateFolderResponseMessage() const
{
    return d_ptr->mUpdateFolderResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setMoveFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& moveFolderResponseMessage )
{
    d_ptr->mMoveFolderResponseMessage = moveFolderResponseMessage;
}

QList<TNS__FolderInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::moveFolderResponseMessage() const
{
    return d_ptr->mMoveFolderResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setCopyFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& copyFolderResponseMessage )
{
    d_ptr->mCopyFolderResponseMessage = copyFolderResponseMessage;
}

QList<TNS__FolderInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::copyFolderResponseMessage() const
{
    return d_ptr->mCopyFolderResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setCreateAttachmentResponseMessage( const QList<TNS__AttachmentInfoResponseMessageType>& createAttachmentResponseMessage )
{
    d_ptr->mCreateAttachmentResponseMessage = createAttachmentResponseMessage;
}

QList<TNS__AttachmentInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::createAttachmentResponseMessage() const
{
    return d_ptr->mCreateAttachmentResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setDeleteAttachmentResponseMessage( const QList<TNS__DeleteAttachmentResponseMessageType>& deleteAttachmentResponseMessage )
{
    d_ptr->mDeleteAttachmentResponseMessage = deleteAttachmentResponseMessage;
}

QList<TNS__DeleteAttachmentResponseMessageType> TNS__ArrayOfResponseMessagesType::deleteAttachmentResponseMessage() const
{
    return d_ptr->mDeleteAttachmentResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setGetAttachmentResponseMessage( const QList<TNS__AttachmentInfoResponseMessageType>& getAttachmentResponseMessage )
{
    d_ptr->mGetAttachmentResponseMessage = getAttachmentResponseMessage;
}

QList<TNS__AttachmentInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::getAttachmentResponseMessage() const
{
    return d_ptr->mGetAttachmentResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setFindItemResponseMessage( const QList<TNS__FindItemResponseMessageType>& findItemResponseMessage )
{
    d_ptr->mFindItemResponseMessage = findItemResponseMessage;
}

QList<TNS__FindItemResponseMessageType> TNS__ArrayOfResponseMessagesType::findItemResponseMessage() const
{
    return d_ptr->mFindItemResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setMoveItemResponseMessage( const QList<TNS__ItemInfoResponseMessageType>& moveItemResponseMessage )
{
    d_ptr->mMoveItemResponseMessage = moveItemResponseMessage;
}

QList<TNS__ItemInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::moveItemResponseMessage() const
{
    return d_ptr->mMoveItemResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setCopyItemResponseMessage( const QList<TNS__ItemInfoResponseMessageType>& copyItemResponseMessage )
{
    d_ptr->mCopyItemResponseMessage = copyItemResponseMessage;
}

QList<TNS__ItemInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::copyItemResponseMessage() const
{
    return d_ptr->mCopyItemResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setResolveNamesResponseMessage( const QList<TNS__ResolveNamesResponseMessageType>& resolveNamesResponseMessage )
{
    d_ptr->mResolveNamesResponseMessage = resolveNamesResponseMessage;
}

QList<TNS__ResolveNamesResponseMessageType> TNS__ArrayOfResponseMessagesType::resolveNamesResponseMessage() const
{
    return d_ptr->mResolveNamesResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setExpandDLResponseMessage( const QList<TNS__ExpandDLResponseMessageType>& expandDLResponseMessage )
{
    d_ptr->mExpandDLResponseMessage = expandDLResponseMessage;
}

QList<TNS__ExpandDLResponseMessageType> TNS__ArrayOfResponseMessagesType::expandDLResponseMessage() const
{
    return d_ptr->mExpandDLResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setGetEventsResponseMessage( const QList<TNS__GetEventsResponseMessageType>& getEventsResponseMessage )
{
    d_ptr->mGetEventsResponseMessage = getEventsResponseMessage;
}

QList<TNS__GetEventsResponseMessageType> TNS__ArrayOfResponseMessagesType::getEventsResponseMessage() const
{
    return d_ptr->mGetEventsResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setSubscribeResponseMessage( const QList<TNS__SubscribeResponseMessageType>& subscribeResponseMessage )
{
    d_ptr->mSubscribeResponseMessage = subscribeResponseMessage;
}

QList<TNS__SubscribeResponseMessageType> TNS__ArrayOfResponseMessagesType::subscribeResponseMessage() const
{
    return d_ptr->mSubscribeResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setUnsubscribeResponseMessage( const QList<TNS__ResponseMessageType>& unsubscribeResponseMessage )
{
    d_ptr->mUnsubscribeResponseMessage = unsubscribeResponseMessage;
}

QList<TNS__ResponseMessageType> TNS__ArrayOfResponseMessagesType::unsubscribeResponseMessage() const
{
    return d_ptr->mUnsubscribeResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setSendNotificationResponseMessage( const QList<TNS__SendNotificationResponseMessageType>& sendNotificationResponseMessage )
{
    d_ptr->mSendNotificationResponseMessage = sendNotificationResponseMessage;
}

QList<TNS__SendNotificationResponseMessageType> TNS__ArrayOfResponseMessagesType::sendNotificationResponseMessage() const
{
    return d_ptr->mSendNotificationResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setSyncFolderHierarchyResponseMessage( const QList<TNS__SyncFolderHierarchyResponseMessageType>& syncFolderHierarchyResponseMessage )
{
    d_ptr->mSyncFolderHierarchyResponseMessage = syncFolderHierarchyResponseMessage;
}

QList<TNS__SyncFolderHierarchyResponseMessageType> TNS__ArrayOfResponseMessagesType::syncFolderHierarchyResponseMessage() const
{
    return d_ptr->mSyncFolderHierarchyResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setSyncFolderItemsResponseMessage( const QList<TNS__SyncFolderItemsResponseMessageType>& syncFolderItemsResponseMessage )
{
    d_ptr->mSyncFolderItemsResponseMessage = syncFolderItemsResponseMessage;
}

QList<TNS__SyncFolderItemsResponseMessageType> TNS__ArrayOfResponseMessagesType::syncFolderItemsResponseMessage() const
{
    return d_ptr->mSyncFolderItemsResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setCreateManagedFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& createManagedFolderResponseMessage )
{
    d_ptr->mCreateManagedFolderResponseMessage = createManagedFolderResponseMessage;
}

QList<TNS__FolderInfoResponseMessageType> TNS__ArrayOfResponseMessagesType::createManagedFolderResponseMessage() const
{
    return d_ptr->mCreateManagedFolderResponseMessage;
}

void TNS__ArrayOfResponseMessagesType::setConvertIdResponseMessage( const QList<TNS__ConvertIdResponseMessageType>& convertIdResponseMessage )
{
    d_ptr->mConvertIdResponseMessage = convertIdResponseMessage;
}

QList<TNS__ConvertIdResponseMessageType> TNS__ArrayOfResponseMessagesType::convertIdResponseMessage() const
{
    return d_ptr->mConvertIdResponseMessage;
}

KDSoapValue TNS__ArrayOfResponseMessagesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ArrayOfResponseMessagesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mCreateItemResponseMessage.count(); ++i) {
        KDSoapValue _valueCreateItemResponseMessage(d_ptr->mCreateItemResponseMessage.at(i).serialize(QString::fromLatin1("CreateItemResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCreateItemResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueCreateItemResponseMessage.setQualified(true);
        if (!_valueCreateItemResponseMessage.isNil())
        args.append(_valueCreateItemResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDeleteItemResponseMessage.count(); ++i) {
        KDSoapValue _valueDeleteItemResponseMessage(d_ptr->mDeleteItemResponseMessage.at(i).serialize(QString::fromLatin1("DeleteItemResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeleteItemResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueDeleteItemResponseMessage.setQualified(true);
        if (!_valueDeleteItemResponseMessage.isNil())
        args.append(_valueDeleteItemResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mGetItemResponseMessage.count(); ++i) {
        KDSoapValue _valueGetItemResponseMessage(d_ptr->mGetItemResponseMessage.at(i).serialize(QString::fromLatin1("GetItemResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueGetItemResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueGetItemResponseMessage.setQualified(true);
        if (!_valueGetItemResponseMessage.isNil())
        args.append(_valueGetItemResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mUpdateItemResponseMessage.count(); ++i) {
        KDSoapValue _valueUpdateItemResponseMessage(d_ptr->mUpdateItemResponseMessage.at(i).serialize(QString::fromLatin1("UpdateItemResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueUpdateItemResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueUpdateItemResponseMessage.setQualified(true);
        if (!_valueUpdateItemResponseMessage.isNil())
        args.append(_valueUpdateItemResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSendItemResponseMessage.count(); ++i) {
        KDSoapValue _valueSendItemResponseMessage(d_ptr->mSendItemResponseMessage.at(i).serialize(QString::fromLatin1("SendItemResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSendItemResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueSendItemResponseMessage.setQualified(true);
        if (!_valueSendItemResponseMessage.isNil())
        args.append(_valueSendItemResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDeleteFolderResponseMessage.count(); ++i) {
        KDSoapValue _valueDeleteFolderResponseMessage(d_ptr->mDeleteFolderResponseMessage.at(i).serialize(QString::fromLatin1("DeleteFolderResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeleteFolderResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueDeleteFolderResponseMessage.setQualified(true);
        if (!_valueDeleteFolderResponseMessage.isNil())
        args.append(_valueDeleteFolderResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCreateFolderResponseMessage.count(); ++i) {
        KDSoapValue _valueCreateFolderResponseMessage(d_ptr->mCreateFolderResponseMessage.at(i).serialize(QString::fromLatin1("CreateFolderResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCreateFolderResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueCreateFolderResponseMessage.setQualified(true);
        if (!_valueCreateFolderResponseMessage.isNil())
        args.append(_valueCreateFolderResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mGetFolderResponseMessage.count(); ++i) {
        KDSoapValue _valueGetFolderResponseMessage(d_ptr->mGetFolderResponseMessage.at(i).serialize(QString::fromLatin1("GetFolderResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueGetFolderResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueGetFolderResponseMessage.setQualified(true);
        if (!_valueGetFolderResponseMessage.isNil())
        args.append(_valueGetFolderResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mFindFolderResponseMessage.count(); ++i) {
        KDSoapValue _valueFindFolderResponseMessage(d_ptr->mFindFolderResponseMessage.at(i).serialize(QString::fromLatin1("FindFolderResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFindFolderResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueFindFolderResponseMessage.setQualified(true);
        if (!_valueFindFolderResponseMessage.isNil())
        args.append(_valueFindFolderResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mUpdateFolderResponseMessage.count(); ++i) {
        KDSoapValue _valueUpdateFolderResponseMessage(d_ptr->mUpdateFolderResponseMessage.at(i).serialize(QString::fromLatin1("UpdateFolderResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueUpdateFolderResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueUpdateFolderResponseMessage.setQualified(true);
        if (!_valueUpdateFolderResponseMessage.isNil())
        args.append(_valueUpdateFolderResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMoveFolderResponseMessage.count(); ++i) {
        KDSoapValue _valueMoveFolderResponseMessage(d_ptr->mMoveFolderResponseMessage.at(i).serialize(QString::fromLatin1("MoveFolderResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMoveFolderResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueMoveFolderResponseMessage.setQualified(true);
        if (!_valueMoveFolderResponseMessage.isNil())
        args.append(_valueMoveFolderResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCopyFolderResponseMessage.count(); ++i) {
        KDSoapValue _valueCopyFolderResponseMessage(d_ptr->mCopyFolderResponseMessage.at(i).serialize(QString::fromLatin1("CopyFolderResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCopyFolderResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueCopyFolderResponseMessage.setQualified(true);
        if (!_valueCopyFolderResponseMessage.isNil())
        args.append(_valueCopyFolderResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCreateAttachmentResponseMessage.count(); ++i) {
        KDSoapValue _valueCreateAttachmentResponseMessage(d_ptr->mCreateAttachmentResponseMessage.at(i).serialize(QString::fromLatin1("CreateAttachmentResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCreateAttachmentResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueCreateAttachmentResponseMessage.setQualified(true);
        if (!_valueCreateAttachmentResponseMessage.isNil())
        args.append(_valueCreateAttachmentResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDeleteAttachmentResponseMessage.count(); ++i) {
        KDSoapValue _valueDeleteAttachmentResponseMessage(d_ptr->mDeleteAttachmentResponseMessage.at(i).serialize(QString::fromLatin1("DeleteAttachmentResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeleteAttachmentResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueDeleteAttachmentResponseMessage.setQualified(true);
        if (!_valueDeleteAttachmentResponseMessage.isNil())
        args.append(_valueDeleteAttachmentResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mGetAttachmentResponseMessage.count(); ++i) {
        KDSoapValue _valueGetAttachmentResponseMessage(d_ptr->mGetAttachmentResponseMessage.at(i).serialize(QString::fromLatin1("GetAttachmentResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueGetAttachmentResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueGetAttachmentResponseMessage.setQualified(true);
        if (!_valueGetAttachmentResponseMessage.isNil())
        args.append(_valueGetAttachmentResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mFindItemResponseMessage.count(); ++i) {
        KDSoapValue _valueFindItemResponseMessage(d_ptr->mFindItemResponseMessage.at(i).serialize(QString::fromLatin1("FindItemResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFindItemResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueFindItemResponseMessage.setQualified(true);
        if (!_valueFindItemResponseMessage.isNil())
        args.append(_valueFindItemResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMoveItemResponseMessage.count(); ++i) {
        KDSoapValue _valueMoveItemResponseMessage(d_ptr->mMoveItemResponseMessage.at(i).serialize(QString::fromLatin1("MoveItemResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMoveItemResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueMoveItemResponseMessage.setQualified(true);
        if (!_valueMoveItemResponseMessage.isNil())
        args.append(_valueMoveItemResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCopyItemResponseMessage.count(); ++i) {
        KDSoapValue _valueCopyItemResponseMessage(d_ptr->mCopyItemResponseMessage.at(i).serialize(QString::fromLatin1("CopyItemResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCopyItemResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueCopyItemResponseMessage.setQualified(true);
        if (!_valueCopyItemResponseMessage.isNil())
        args.append(_valueCopyItemResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mResolveNamesResponseMessage.count(); ++i) {
        KDSoapValue _valueResolveNamesResponseMessage(d_ptr->mResolveNamesResponseMessage.at(i).serialize(QString::fromLatin1("ResolveNamesResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueResolveNamesResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueResolveNamesResponseMessage.setQualified(true);
        if (!_valueResolveNamesResponseMessage.isNil())
        args.append(_valueResolveNamesResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mExpandDLResponseMessage.count(); ++i) {
        KDSoapValue _valueExpandDLResponseMessage(d_ptr->mExpandDLResponseMessage.at(i).serialize(QString::fromLatin1("ExpandDLResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueExpandDLResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueExpandDLResponseMessage.setQualified(true);
        if (!_valueExpandDLResponseMessage.isNil())
        args.append(_valueExpandDLResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mGetEventsResponseMessage.count(); ++i) {
        KDSoapValue _valueGetEventsResponseMessage(d_ptr->mGetEventsResponseMessage.at(i).serialize(QString::fromLatin1("GetEventsResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueGetEventsResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueGetEventsResponseMessage.setQualified(true);
        if (!_valueGetEventsResponseMessage.isNil())
        args.append(_valueGetEventsResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSubscribeResponseMessage.count(); ++i) {
        KDSoapValue _valueSubscribeResponseMessage(d_ptr->mSubscribeResponseMessage.at(i).serialize(QString::fromLatin1("SubscribeResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSubscribeResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueSubscribeResponseMessage.setQualified(true);
        if (!_valueSubscribeResponseMessage.isNil())
        args.append(_valueSubscribeResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mUnsubscribeResponseMessage.count(); ++i) {
        KDSoapValue _valueUnsubscribeResponseMessage(d_ptr->mUnsubscribeResponseMessage.at(i).serialize(QString::fromLatin1("UnsubscribeResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueUnsubscribeResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueUnsubscribeResponseMessage.setQualified(true);
        if (!_valueUnsubscribeResponseMessage.isNil())
        args.append(_valueUnsubscribeResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSendNotificationResponseMessage.count(); ++i) {
        KDSoapValue _valueSendNotificationResponseMessage(d_ptr->mSendNotificationResponseMessage.at(i).serialize(QString::fromLatin1("SendNotificationResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSendNotificationResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueSendNotificationResponseMessage.setQualified(true);
        if (!_valueSendNotificationResponseMessage.isNil())
        args.append(_valueSendNotificationResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSyncFolderHierarchyResponseMessage.count(); ++i) {
        KDSoapValue _valueSyncFolderHierarchyResponseMessage(d_ptr->mSyncFolderHierarchyResponseMessage.at(i).serialize(QString::fromLatin1("SyncFolderHierarchyResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSyncFolderHierarchyResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueSyncFolderHierarchyResponseMessage.setQualified(true);
        if (!_valueSyncFolderHierarchyResponseMessage.isNil())
        args.append(_valueSyncFolderHierarchyResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSyncFolderItemsResponseMessage.count(); ++i) {
        KDSoapValue _valueSyncFolderItemsResponseMessage(d_ptr->mSyncFolderItemsResponseMessage.at(i).serialize(QString::fromLatin1("SyncFolderItemsResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSyncFolderItemsResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueSyncFolderItemsResponseMessage.setQualified(true);
        if (!_valueSyncFolderItemsResponseMessage.isNil())
        args.append(_valueSyncFolderItemsResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCreateManagedFolderResponseMessage.count(); ++i) {
        KDSoapValue _valueCreateManagedFolderResponseMessage(d_ptr->mCreateManagedFolderResponseMessage.at(i).serialize(QString::fromLatin1("CreateManagedFolderResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCreateManagedFolderResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueCreateManagedFolderResponseMessage.setQualified(true);
        if (!_valueCreateManagedFolderResponseMessage.isNil())
        args.append(_valueCreateManagedFolderResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mConvertIdResponseMessage.count(); ++i) {
        KDSoapValue _valueConvertIdResponseMessage(d_ptr->mConvertIdResponseMessage.at(i).serialize(QString::fromLatin1("ConvertIdResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueConvertIdResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
        _valueConvertIdResponseMessage.setQualified(true);
        if (!_valueConvertIdResponseMessage.isNil())
        args.append(_valueConvertIdResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void TNS__ArrayOfResponseMessagesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CreateItemResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ItemInfoResponseMessageType mCreateItemResponseMessageTemp;
            mCreateItemResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCreateItemResponseMessage.append(mCreateItemResponseMessageTemp);
        }
        else if (name == QLatin1String("DeleteItemResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ResponseMessageType mDeleteItemResponseMessageTemp;
            mDeleteItemResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeleteItemResponseMessage.append(mDeleteItemResponseMessageTemp);
        }
        else if (name == QLatin1String("GetItemResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ItemInfoResponseMessageType mGetItemResponseMessageTemp;
            mGetItemResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mGetItemResponseMessage.append(mGetItemResponseMessageTemp);
        }
        else if (name == QLatin1String("UpdateItemResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__UpdateItemResponseMessageType mUpdateItemResponseMessageTemp;
            mUpdateItemResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mUpdateItemResponseMessage.append(mUpdateItemResponseMessageTemp);
        }
        else if (name == QLatin1String("SendItemResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ResponseMessageType mSendItemResponseMessageTemp;
            mSendItemResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSendItemResponseMessage.append(mSendItemResponseMessageTemp);
        }
        else if (name == QLatin1String("DeleteFolderResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ResponseMessageType mDeleteFolderResponseMessageTemp;
            mDeleteFolderResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeleteFolderResponseMessage.append(mDeleteFolderResponseMessageTemp);
        }
        else if (name == QLatin1String("CreateFolderResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FolderInfoResponseMessageType mCreateFolderResponseMessageTemp;
            mCreateFolderResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCreateFolderResponseMessage.append(mCreateFolderResponseMessageTemp);
        }
        else if (name == QLatin1String("GetFolderResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FolderInfoResponseMessageType mGetFolderResponseMessageTemp;
            mGetFolderResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mGetFolderResponseMessage.append(mGetFolderResponseMessageTemp);
        }
        else if (name == QLatin1String("FindFolderResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FindFolderResponseMessageType mFindFolderResponseMessageTemp;
            mFindFolderResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFindFolderResponseMessage.append(mFindFolderResponseMessageTemp);
        }
        else if (name == QLatin1String("UpdateFolderResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FolderInfoResponseMessageType mUpdateFolderResponseMessageTemp;
            mUpdateFolderResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mUpdateFolderResponseMessage.append(mUpdateFolderResponseMessageTemp);
        }
        else if (name == QLatin1String("MoveFolderResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FolderInfoResponseMessageType mMoveFolderResponseMessageTemp;
            mMoveFolderResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMoveFolderResponseMessage.append(mMoveFolderResponseMessageTemp);
        }
        else if (name == QLatin1String("CopyFolderResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FolderInfoResponseMessageType mCopyFolderResponseMessageTemp;
            mCopyFolderResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCopyFolderResponseMessage.append(mCopyFolderResponseMessageTemp);
        }
        else if (name == QLatin1String("CreateAttachmentResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__AttachmentInfoResponseMessageType mCreateAttachmentResponseMessageTemp;
            mCreateAttachmentResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCreateAttachmentResponseMessage.append(mCreateAttachmentResponseMessageTemp);
        }
        else if (name == QLatin1String("DeleteAttachmentResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__DeleteAttachmentResponseMessageType mDeleteAttachmentResponseMessageTemp;
            mDeleteAttachmentResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeleteAttachmentResponseMessage.append(mDeleteAttachmentResponseMessageTemp);
        }
        else if (name == QLatin1String("GetAttachmentResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__AttachmentInfoResponseMessageType mGetAttachmentResponseMessageTemp;
            mGetAttachmentResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mGetAttachmentResponseMessage.append(mGetAttachmentResponseMessageTemp);
        }
        else if (name == QLatin1String("FindItemResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FindItemResponseMessageType mFindItemResponseMessageTemp;
            mFindItemResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFindItemResponseMessage.append(mFindItemResponseMessageTemp);
        }
        else if (name == QLatin1String("MoveItemResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ItemInfoResponseMessageType mMoveItemResponseMessageTemp;
            mMoveItemResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMoveItemResponseMessage.append(mMoveItemResponseMessageTemp);
        }
        else if (name == QLatin1String("CopyItemResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ItemInfoResponseMessageType mCopyItemResponseMessageTemp;
            mCopyItemResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCopyItemResponseMessage.append(mCopyItemResponseMessageTemp);
        }
        else if (name == QLatin1String("ResolveNamesResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ResolveNamesResponseMessageType mResolveNamesResponseMessageTemp;
            mResolveNamesResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mResolveNamesResponseMessage.append(mResolveNamesResponseMessageTemp);
        }
        else if (name == QLatin1String("ExpandDLResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ExpandDLResponseMessageType mExpandDLResponseMessageTemp;
            mExpandDLResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mExpandDLResponseMessage.append(mExpandDLResponseMessageTemp);
        }
        else if (name == QLatin1String("GetEventsResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__GetEventsResponseMessageType mGetEventsResponseMessageTemp;
            mGetEventsResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mGetEventsResponseMessage.append(mGetEventsResponseMessageTemp);
        }
        else if (name == QLatin1String("SubscribeResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__SubscribeResponseMessageType mSubscribeResponseMessageTemp;
            mSubscribeResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSubscribeResponseMessage.append(mSubscribeResponseMessageTemp);
        }
        else if (name == QLatin1String("UnsubscribeResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ResponseMessageType mUnsubscribeResponseMessageTemp;
            mUnsubscribeResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mUnsubscribeResponseMessage.append(mUnsubscribeResponseMessageTemp);
        }
        else if (name == QLatin1String("SendNotificationResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__SendNotificationResponseMessageType mSendNotificationResponseMessageTemp;
            mSendNotificationResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSendNotificationResponseMessage.append(mSendNotificationResponseMessageTemp);
        }
        else if (name == QLatin1String("SyncFolderHierarchyResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__SyncFolderHierarchyResponseMessageType mSyncFolderHierarchyResponseMessageTemp;
            mSyncFolderHierarchyResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSyncFolderHierarchyResponseMessage.append(mSyncFolderHierarchyResponseMessageTemp);
        }
        else if (name == QLatin1String("SyncFolderItemsResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__SyncFolderItemsResponseMessageType mSyncFolderItemsResponseMessageTemp;
            mSyncFolderItemsResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSyncFolderItemsResponseMessage.append(mSyncFolderItemsResponseMessageTemp);
        }
        else if (name == QLatin1String("CreateManagedFolderResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__FolderInfoResponseMessageType mCreateManagedFolderResponseMessageTemp;
            mCreateManagedFolderResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCreateManagedFolderResponseMessage.append(mCreateManagedFolderResponseMessageTemp);
        }
        else if (name == QLatin1String("ConvertIdResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            TNS__ConvertIdResponseMessageType mConvertIdResponseMessageTemp;
            mConvertIdResponseMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mConvertIdResponseMessage.append(mConvertIdResponseMessageTemp);
        }
    }
}

TNS__ArrayOfResponseMessagesType::TNS__ArrayOfResponseMessagesType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ArrayOfResponseMessagesType::~TNS__ArrayOfResponseMessagesType()
{
}

TNS__ArrayOfResponseMessagesType::TNS__ArrayOfResponseMessagesType( const TNS__ArrayOfResponseMessagesType& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ArrayOfResponseMessagesType&  TNS__ArrayOfResponseMessagesType::operator=( const TNS__ArrayOfResponseMessagesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue T__BasePathToElementType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BasePathToElementType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    return mainValue;
}

void T__BasePathToElementType::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__BasePathToElementType::T__BasePathToElementType()
{
}

T__BasePathToElementType::~T__BasePathToElementType()
{
}


class T__BaseSubscriptionRequestType::PrivateDPtr : public QSharedData
{
public:
    T__NonEmptyArrayOfBaseFolderIdsType mFolderIds;
    T__NonEmptyArrayOfNotificationEventTypesType mEventTypes;
    T__WatermarkType mWatermark;
};

void T__BaseSubscriptionRequestType::setFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& folderIds )
{
    d_ptr->mFolderIds = folderIds;
}

T__NonEmptyArrayOfBaseFolderIdsType T__BaseSubscriptionRequestType::folderIds() const
{
    return d_ptr->mFolderIds;
}

void T__BaseSubscriptionRequestType::setEventTypes( const T__NonEmptyArrayOfNotificationEventTypesType& eventTypes )
{
    d_ptr->mEventTypes = eventTypes;
}

T__NonEmptyArrayOfNotificationEventTypesType T__BaseSubscriptionRequestType::eventTypes() const
{
    return d_ptr->mEventTypes;
}

void T__BaseSubscriptionRequestType::setWatermark( const T__WatermarkType& watermark )
{
    d_ptr->mWatermark = watermark;
}

T__WatermarkType T__BaseSubscriptionRequestType::watermark() const
{
    return d_ptr->mWatermark;
}

KDSoapValue T__BaseSubscriptionRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BaseSubscriptionRequestType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderIds(d_ptr->mFolderIds.serialize(QString::fromLatin1("FolderIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolderIds.setQualified(true);
    if (!_valueFolderIds.isNil())
    args.append(_valueFolderIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEventTypes(d_ptr->mEventTypes.serialize(QString::fromLatin1("EventTypes")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueEventTypes.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEventTypes.setQualified(true);
    if (!_valueEventTypes.isNil())
    args.append(_valueEventTypes);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWatermark(QString::fromLatin1("Watermark"), d_ptr->mWatermark.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WatermarkType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueWatermark.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWatermark.setQualified(true);
    if (!_valueWatermark.isNil())
    args.append(_valueWatermark);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__BaseSubscriptionRequestType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("EventTypes")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEventTypes.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Watermark")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWatermark.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__BaseSubscriptionRequestType::T__BaseSubscriptionRequestType()
    : d_ptr(new PrivateDPtr)
{
}

T__BaseSubscriptionRequestType::~T__BaseSubscriptionRequestType()
{
}

T__BaseSubscriptionRequestType::T__BaseSubscriptionRequestType( const T__BaseSubscriptionRequestType& other )
    : d_ptr( other.d_ptr )
{
}

T__BaseSubscriptionRequestType&  T__BaseSubscriptionRequestType::operator=( const T__BaseSubscriptionRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfUnknownEntriesType::PrivateDPtr : public QSharedData
{
public:
    QStringList mUnknownEntry;
};

void T__ArrayOfUnknownEntriesType::setUnknownEntry( const QStringList& unknownEntry )
{
    d_ptr->mUnknownEntry = unknownEntry;
}

QStringList T__ArrayOfUnknownEntriesType::unknownEntry() const
{
    return d_ptr->mUnknownEntry;
}

KDSoapValue T__ArrayOfUnknownEntriesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfUnknownEntriesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mUnknownEntry.count(); ++i) {
        KDSoapValue _valueUnknownEntry(QString::fromLatin1("UnknownEntry"), QVariant::fromValue(d_ptr->mUnknownEntry.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
        _valueUnknownEntry.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueUnknownEntry.setQualified(true);
        if (!_valueUnknownEntry.isNil())
        args.append(_valueUnknownEntry);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfUnknownEntriesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UnknownEntry")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            QString mUnknownEntryTemp;
            mUnknownEntryTemp = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
            d_ptr->mUnknownEntry.append(mUnknownEntryTemp);
        }
    }
}

T__ArrayOfUnknownEntriesType::T__ArrayOfUnknownEntriesType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfUnknownEntriesType::~T__ArrayOfUnknownEntriesType()
{
}

T__ArrayOfUnknownEntriesType::T__ArrayOfUnknownEntriesType( const T__ArrayOfUnknownEntriesType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfUnknownEntriesType&  T__ArrayOfUnknownEntriesType::operator=( const T__ArrayOfUnknownEntriesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfRealItemsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ItemType> mItem;
    QList<T__MessageType> mMessage;
    QList<T__CalendarItemType> mCalendarItem;
    QList<T__ContactItemType> mContact;
    QList<T__DistributionListType> mDistributionList;
    QList<T__MeetingMessageType> mMeetingMessage;
    QList<T__MeetingRequestMessageType> mMeetingRequest;
    QList<T__MeetingResponseMessageType> mMeetingResponse;
    QList<T__MeetingCancellationMessageType> mMeetingCancellation;
    QList<T__TaskType> mTask;
    QList<T__PostItemType> mPostItem;
};

void T__ArrayOfRealItemsType::setItem( const QList<T__ItemType>& item )
{
    d_ptr->mItem = item;
}

QList<T__ItemType> T__ArrayOfRealItemsType::item() const
{
    return d_ptr->mItem;
}

void T__ArrayOfRealItemsType::setMessage( const QList<T__MessageType>& message )
{
    d_ptr->mMessage = message;
}

QList<T__MessageType> T__ArrayOfRealItemsType::message() const
{
    return d_ptr->mMessage;
}

void T__ArrayOfRealItemsType::setCalendarItem( const QList<T__CalendarItemType>& calendarItem )
{
    d_ptr->mCalendarItem = calendarItem;
}

QList<T__CalendarItemType> T__ArrayOfRealItemsType::calendarItem() const
{
    return d_ptr->mCalendarItem;
}

void T__ArrayOfRealItemsType::setContact( const QList<T__ContactItemType>& contact )
{
    d_ptr->mContact = contact;
}

QList<T__ContactItemType> T__ArrayOfRealItemsType::contact() const
{
    return d_ptr->mContact;
}

void T__ArrayOfRealItemsType::setDistributionList( const QList<T__DistributionListType>& distributionList )
{
    d_ptr->mDistributionList = distributionList;
}

QList<T__DistributionListType> T__ArrayOfRealItemsType::distributionList() const
{
    return d_ptr->mDistributionList;
}

void T__ArrayOfRealItemsType::setMeetingMessage( const QList<T__MeetingMessageType>& meetingMessage )
{
    d_ptr->mMeetingMessage = meetingMessage;
}

QList<T__MeetingMessageType> T__ArrayOfRealItemsType::meetingMessage() const
{
    return d_ptr->mMeetingMessage;
}

void T__ArrayOfRealItemsType::setMeetingRequest( const QList<T__MeetingRequestMessageType>& meetingRequest )
{
    d_ptr->mMeetingRequest = meetingRequest;
}

QList<T__MeetingRequestMessageType> T__ArrayOfRealItemsType::meetingRequest() const
{
    return d_ptr->mMeetingRequest;
}

void T__ArrayOfRealItemsType::setMeetingResponse( const QList<T__MeetingResponseMessageType>& meetingResponse )
{
    d_ptr->mMeetingResponse = meetingResponse;
}

QList<T__MeetingResponseMessageType> T__ArrayOfRealItemsType::meetingResponse() const
{
    return d_ptr->mMeetingResponse;
}

void T__ArrayOfRealItemsType::setMeetingCancellation( const QList<T__MeetingCancellationMessageType>& meetingCancellation )
{
    d_ptr->mMeetingCancellation = meetingCancellation;
}

QList<T__MeetingCancellationMessageType> T__ArrayOfRealItemsType::meetingCancellation() const
{
    return d_ptr->mMeetingCancellation;
}

void T__ArrayOfRealItemsType::setTask( const QList<T__TaskType>& task )
{
    d_ptr->mTask = task;
}

QList<T__TaskType> T__ArrayOfRealItemsType::task() const
{
    return d_ptr->mTask;
}

void T__ArrayOfRealItemsType::setPostItem( const QList<T__PostItemType>& postItem )
{
    d_ptr->mPostItem = postItem;
}

QList<T__PostItemType> T__ArrayOfRealItemsType::postItem() const
{
    return d_ptr->mPostItem;
}

KDSoapValue T__ArrayOfRealItemsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfRealItemsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mItem.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItem.at(i).serialize(QString::fromLatin1("Item")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueItem.setQualified(true);
        if (!_valueItem.isNil())
        args.append(_valueItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMessage.count(); ++i) {
        KDSoapValue _valueMessage(d_ptr->mMessage.at(i).serialize(QString::fromLatin1("Message")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMessage.setQualified(true);
        if (!_valueMessage.isNil())
        args.append(_valueMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCalendarItem.count(); ++i) {
        KDSoapValue _valueCalendarItem(d_ptr->mCalendarItem.at(i).serialize(QString::fromLatin1("CalendarItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCalendarItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCalendarItem.setQualified(true);
        if (!_valueCalendarItem.isNil())
        args.append(_valueCalendarItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mContact.count(); ++i) {
        KDSoapValue _valueContact(d_ptr->mContact.at(i).serialize(QString::fromLatin1("Contact")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueContact.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueContact.setQualified(true);
        if (!_valueContact.isNil())
        args.append(_valueContact);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDistributionList.count(); ++i) {
        KDSoapValue _valueDistributionList(d_ptr->mDistributionList.at(i).serialize(QString::fromLatin1("DistributionList")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDistributionList.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDistributionList.setQualified(true);
        if (!_valueDistributionList.isNil())
        args.append(_valueDistributionList);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMeetingMessage.count(); ++i) {
        KDSoapValue _valueMeetingMessage(d_ptr->mMeetingMessage.at(i).serialize(QString::fromLatin1("MeetingMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMeetingMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMeetingMessage.setQualified(true);
        if (!_valueMeetingMessage.isNil())
        args.append(_valueMeetingMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMeetingRequest.count(); ++i) {
        KDSoapValue _valueMeetingRequest(d_ptr->mMeetingRequest.at(i).serialize(QString::fromLatin1("MeetingRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMeetingRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMeetingRequest.setQualified(true);
        if (!_valueMeetingRequest.isNil())
        args.append(_valueMeetingRequest);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMeetingResponse.count(); ++i) {
        KDSoapValue _valueMeetingResponse(d_ptr->mMeetingResponse.at(i).serialize(QString::fromLatin1("MeetingResponse")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMeetingResponse.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMeetingResponse.setQualified(true);
        if (!_valueMeetingResponse.isNil())
        args.append(_valueMeetingResponse);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mMeetingCancellation.count(); ++i) {
        KDSoapValue _valueMeetingCancellation(d_ptr->mMeetingCancellation.at(i).serialize(QString::fromLatin1("MeetingCancellation")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueMeetingCancellation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueMeetingCancellation.setQualified(true);
        if (!_valueMeetingCancellation.isNil())
        args.append(_valueMeetingCancellation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mTask.count(); ++i) {
        KDSoapValue _valueTask(d_ptr->mTask.at(i).serialize(QString::fromLatin1("Task")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueTask.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueTask.setQualified(true);
        if (!_valueTask.isNil())
        args.append(_valueTask);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mPostItem.count(); ++i) {
        KDSoapValue _valuePostItem(d_ptr->mPostItem.at(i).serialize(QString::fromLatin1("PostItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valuePostItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valuePostItem.setQualified(true);
        if (!_valuePostItem.isNil())
        args.append(_valuePostItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfRealItemsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Item")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ItemType mItemTemp;
            mItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mItem.append(mItemTemp);
        }
        else if (name == QLatin1String("Message")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MessageType mMessageTemp;
            mMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMessage.append(mMessageTemp);
        }
        else if (name == QLatin1String("CalendarItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__CalendarItemType mCalendarItemTemp;
            mCalendarItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCalendarItem.append(mCalendarItemTemp);
        }
        else if (name == QLatin1String("Contact")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ContactItemType mContactTemp;
            mContactTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mContact.append(mContactTemp);
        }
        else if (name == QLatin1String("DistributionList")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DistributionListType mDistributionListTemp;
            mDistributionListTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDistributionList.append(mDistributionListTemp);
        }
        else if (name == QLatin1String("MeetingMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MeetingMessageType mMeetingMessageTemp;
            mMeetingMessageTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMeetingMessage.append(mMeetingMessageTemp);
        }
        else if (name == QLatin1String("MeetingRequest")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MeetingRequestMessageType mMeetingRequestTemp;
            mMeetingRequestTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMeetingRequest.append(mMeetingRequestTemp);
        }
        else if (name == QLatin1String("MeetingResponse")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MeetingResponseMessageType mMeetingResponseTemp;
            mMeetingResponseTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMeetingResponse.append(mMeetingResponseTemp);
        }
        else if (name == QLatin1String("MeetingCancellation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__MeetingCancellationMessageType mMeetingCancellationTemp;
            mMeetingCancellationTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mMeetingCancellation.append(mMeetingCancellationTemp);
        }
        else if (name == QLatin1String("Task")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__TaskType mTaskTemp;
            mTaskTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mTask.append(mTaskTemp);
        }
        else if (name == QLatin1String("PostItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__PostItemType mPostItemTemp;
            mPostItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mPostItem.append(mPostItemTemp);
        }
    }
}

T__ArrayOfRealItemsType::T__ArrayOfRealItemsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfRealItemsType::~T__ArrayOfRealItemsType()
{
}

T__ArrayOfRealItemsType::T__ArrayOfRealItemsType( const T__ArrayOfRealItemsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfRealItemsType&  T__ArrayOfRealItemsType::operator=( const T__ArrayOfRealItemsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__GetUserAvailabilityResponseType::PrivateDPtr : public QSharedData
{
public:
    TNS__ArrayOfFreeBusyResponse mFreeBusyResponseArray;
    TNS__SuggestionsResponseType mSuggestionsResponse;
};

void TNS__GetUserAvailabilityResponseType::setFreeBusyResponseArray( const TNS__ArrayOfFreeBusyResponse& freeBusyResponseArray )
{
    d_ptr->mFreeBusyResponseArray = freeBusyResponseArray;
}

TNS__ArrayOfFreeBusyResponse TNS__GetUserAvailabilityResponseType::freeBusyResponseArray() const
{
    return d_ptr->mFreeBusyResponseArray;
}

void TNS__GetUserAvailabilityResponseType::setSuggestionsResponse( const TNS__SuggestionsResponseType& suggestionsResponse )
{
    d_ptr->mSuggestionsResponse = suggestionsResponse;
}

TNS__SuggestionsResponseType TNS__GetUserAvailabilityResponseType::suggestionsResponse() const
{
    return d_ptr->mSuggestionsResponse;
}

KDSoapValue TNS__GetUserAvailabilityResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetUserAvailabilityResponseType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFreeBusyResponseArray(d_ptr->mFreeBusyResponseArray.serialize(QString::fromLatin1("FreeBusyResponseArray")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFreeBusyResponseArray.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFreeBusyResponseArray.setQualified(true);
    if (!_valueFreeBusyResponseArray.isNil())
    args.append(_valueFreeBusyResponseArray);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSuggestionsResponse(d_ptr->mSuggestionsResponse.serialize(QString::fromLatin1("SuggestionsResponse")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSuggestionsResponse.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSuggestionsResponse.setQualified(true);
    if (!_valueSuggestionsResponse.isNil())
    args.append(_valueSuggestionsResponse);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetUserAvailabilityResponseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FreeBusyResponseArray")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFreeBusyResponseArray.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SuggestionsResponse")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSuggestionsResponse.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__GetUserAvailabilityResponseType::TNS__GetUserAvailabilityResponseType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetUserAvailabilityResponseType::~TNS__GetUserAvailabilityResponseType()
{
}

TNS__GetUserAvailabilityResponseType::TNS__GetUserAvailabilityResponseType( const TNS__GetUserAvailabilityResponseType& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetUserAvailabilityResponseType&  TNS__GetUserAvailabilityResponseType::operator=( const TNS__GetUserAvailabilityResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue T__BaseEmailAddressType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BaseEmailAddressType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    return mainValue;
}

void T__BaseEmailAddressType::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__BaseEmailAddressType::T__BaseEmailAddressType()
{
}

T__BaseEmailAddressType::~T__BaseEmailAddressType()
{
}


class T__ArrayOfStringsType::PrivateDPtr : public QSharedData
{
public:
    QStringList mString;
};

void T__ArrayOfStringsType::setString( const QStringList& string )
{
    d_ptr->mString = string;
}

QStringList T__ArrayOfStringsType::string() const
{
    return d_ptr->mString;
}

KDSoapValue T__ArrayOfStringsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfStringsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mString.count(); ++i) {
        KDSoapValue _valueString(QString::fromLatin1("String"), QVariant::fromValue(d_ptr->mString.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
        _valueString.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueString.setQualified(true);
        if (!_valueString.isNil())
        args.append(_valueString);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfStringsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("String")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            QString mStringTemp;
            mStringTemp = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
            d_ptr->mString.append(mStringTemp);
        }
    }
}

T__ArrayOfStringsType::T__ArrayOfStringsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfStringsType::~T__ArrayOfStringsType()
{
}

T__ArrayOfStringsType::T__ArrayOfStringsType( const T__ArrayOfStringsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfStringsType&  T__ArrayOfStringsType::operator=( const T__ArrayOfStringsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__FreeBusyView::PrivateDPtr : public QSharedData
{
public:
    T__FreeBusyViewType mFreeBusyViewType;
    QString mMergedFreeBusy;
    T__ArrayOfCalendarEvent mCalendarEventArray;
    T__WorkingHours mWorkingHours;
};

void T__FreeBusyView::setFreeBusyViewType( const T__FreeBusyViewType& freeBusyViewType )
{
    d_ptr->mFreeBusyViewType = freeBusyViewType;
}

T__FreeBusyViewType T__FreeBusyView::freeBusyViewType() const
{
    return d_ptr->mFreeBusyViewType;
}

void T__FreeBusyView::setMergedFreeBusy( const QString& mergedFreeBusy )
{
    d_ptr->mMergedFreeBusy = mergedFreeBusy;
}

QString T__FreeBusyView::mergedFreeBusy() const
{
    return d_ptr->mMergedFreeBusy;
}

void T__FreeBusyView::setCalendarEventArray( const T__ArrayOfCalendarEvent& calendarEventArray )
{
    d_ptr->mCalendarEventArray = calendarEventArray;
}

T__ArrayOfCalendarEvent T__FreeBusyView::calendarEventArray() const
{
    return d_ptr->mCalendarEventArray;
}

void T__FreeBusyView::setWorkingHours( const T__WorkingHours& workingHours )
{
    d_ptr->mWorkingHours = workingHours;
}

T__WorkingHours T__FreeBusyView::workingHours() const
{
    return d_ptr->mWorkingHours;
}

KDSoapValue T__FreeBusyView::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FreeBusyView"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFreeBusyViewType(QString::fromLatin1("FreeBusyViewType"), d_ptr->mFreeBusyViewType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FreeBusyViewType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueFreeBusyViewType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFreeBusyViewType.setQualified(true);
    if (!_valueFreeBusyViewType.isNil())
    args.append(_valueFreeBusyViewType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMergedFreeBusy(QString::fromLatin1("MergedFreeBusy"), QVariant::fromValue(d_ptr->mMergedFreeBusy), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMergedFreeBusy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMergedFreeBusy.setQualified(true);
    if (!_valueMergedFreeBusy.isNil())
    args.append(_valueMergedFreeBusy);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarEventArray(d_ptr->mCalendarEventArray.serialize(QString::fromLatin1("CalendarEventArray")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarEventArray.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarEventArray.setQualified(true);
    if (!_valueCalendarEventArray.isNil())
    args.append(_valueCalendarEventArray);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWorkingHours(d_ptr->mWorkingHours.serialize(QString::fromLatin1("WorkingHours")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueWorkingHours.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWorkingHours.setQualified(true);
    if (!_valueWorkingHours.isNil())
    args.append(_valueWorkingHours);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FreeBusyView::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FreeBusyViewType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFreeBusyViewType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("MergedFreeBusy")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMergedFreeBusy = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CalendarEventArray")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarEventArray.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("WorkingHours")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWorkingHours.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__FreeBusyView::T__FreeBusyView()
    : d_ptr(new PrivateDPtr)
{
}

T__FreeBusyView::~T__FreeBusyView()
{
}

T__FreeBusyView::T__FreeBusyView( const T__FreeBusyView& other )
    : d_ptr( other.d_ptr )
{
}

T__FreeBusyView&  T__FreeBusyView::operator=( const T__FreeBusyView& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfNotificationEventTypesType::PrivateDPtr : public QSharedData
{
public:
    QList<T__NotificationEventTypeType> mEventType;
};

void T__NonEmptyArrayOfNotificationEventTypesType::setEventType( const QList<T__NotificationEventTypeType>& eventType )
{
    d_ptr->mEventType = eventType;
}

QList<T__NotificationEventTypeType> T__NonEmptyArrayOfNotificationEventTypesType::eventType() const
{
    return d_ptr->mEventType;
}

KDSoapValue T__NonEmptyArrayOfNotificationEventTypesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfNotificationEventTypesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mEventType.count(); ++i) {
        KDSoapValue _valueEventType(QString::fromLatin1("EventType"), d_ptr->mEventType.at(i).serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NotificationEventTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
        _valueEventType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueEventType.setQualified(true);
        if (!_valueEventType.isNil())
        args.append(_valueEventType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfNotificationEventTypesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("EventType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__NotificationEventTypeType mEventTypeTemp;
            mEventTypeTemp.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
            d_ptr->mEventType.append(mEventTypeTemp);
        }
    }
}

T__NonEmptyArrayOfNotificationEventTypesType::T__NonEmptyArrayOfNotificationEventTypesType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfNotificationEventTypesType::~T__NonEmptyArrayOfNotificationEventTypesType()
{
}

T__NonEmptyArrayOfNotificationEventTypesType::T__NonEmptyArrayOfNotificationEventTypesType( const T__NonEmptyArrayOfNotificationEventTypesType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfNotificationEventTypesType&  T__NonEmptyArrayOfNotificationEventTypesType::operator=( const T__NonEmptyArrayOfNotificationEventTypesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mMessageText;
    TNS__ResponseCodeType mResponseCode;
    int mDescriptiveLinkKey;
    TNS__MessageXml mMessageXml;
    T__ResponseClassType mResponseClass;
};

TNS__ResponseMessageType::PrivateDPtr::PrivateDPtr()
    : mDescriptiveLinkKey(0)
{
}


void TNS__ResponseMessageType::setMessageText( const QString& messageText )
{
    d_ptr->mMessageText = messageText;
}

QString TNS__ResponseMessageType::messageText() const
{
    return d_ptr->mMessageText;
}

void TNS__ResponseMessageType::setResponseCode( const TNS__ResponseCodeType& responseCode )
{
    d_ptr->mResponseCode = responseCode;
}

TNS__ResponseCodeType TNS__ResponseMessageType::responseCode() const
{
    return d_ptr->mResponseCode;
}

void TNS__ResponseMessageType::setDescriptiveLinkKey( int descriptiveLinkKey )
{
    d_ptr->mDescriptiveLinkKey = descriptiveLinkKey;
}

int TNS__ResponseMessageType::descriptiveLinkKey() const
{
    return d_ptr->mDescriptiveLinkKey;
}

void TNS__ResponseMessageType::setMessageXml( const TNS__MessageXml& messageXml )
{
    d_ptr->mMessageXml = messageXml;
}

TNS__MessageXml TNS__ResponseMessageType::messageXml() const
{
    return d_ptr->mMessageXml;
}

void TNS__ResponseMessageType::setResponseClass( const T__ResponseClassType& responseClass )
{
    d_ptr->mResponseClass = responseClass;
}

T__ResponseClassType TNS__ResponseMessageType::responseClass() const
{
    return d_ptr->mResponseClass;
}

KDSoapValue TNS__ResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ResponseMessageType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMessageText(QString::fromLatin1("MessageText"), QVariant::fromValue(d_ptr->mMessageText), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMessageText.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMessageText.setQualified(true);
    if (!_valueMessageText.isNil())
    args.append(_valueMessageText);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueResponseCode(QString::fromLatin1("ResponseCode"), d_ptr->mResponseCode.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ResponseCodeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueResponseCode.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResponseCode.setQualified(true);
    if (!_valueResponseCode.isNil())
    args.append(_valueResponseCode);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDescriptiveLinkKey(QString::fromLatin1("DescriptiveLinkKey"), QVariant::fromValue(d_ptr->mDescriptiveLinkKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDescriptiveLinkKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDescriptiveLinkKey.setQualified(true);
    if (!_valueDescriptiveLinkKey.isNil())
    args.append(_valueDescriptiveLinkKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMessageXml(d_ptr->mMessageXml.serialize(QString::fromLatin1("MessageXml")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMessageXml.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMessageXml.setQualified(true);
    if (!_valueMessageXml.isNil())
    args.append(_valueMessageXml);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueResponseClass(QString::fromLatin1("ResponseClass"), d_ptr->mResponseClass.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResponseClassType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueResponseClass.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueResponseClass.isNil())
    attribs.append(_valueResponseClass);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__ResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("MessageText")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessageText = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ResponseCode")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseCode.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("DescriptiveLinkKey")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDescriptiveLinkKey = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MessageXml")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessageXml.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ResponseClass")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseClass.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__ResponseMessageType::TNS__ResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ResponseMessageType::~TNS__ResponseMessageType()
{
}

TNS__ResponseMessageType::TNS__ResponseMessageType( const TNS__ResponseMessageType& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ResponseMessageType&  TNS__ResponseMessageType::operator=( const TNS__ResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ConflictResultsType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mCount;
};

T__ConflictResultsType::PrivateDPtr::PrivateDPtr()
    : mCount(0)
{
}


void T__ConflictResultsType::setCount( int count )
{
    d_ptr->mCount = count;
}

int T__ConflictResultsType::count() const
{
    return d_ptr->mCount;
}

KDSoapValue T__ConflictResultsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ConflictResultsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueCount(QString::fromLatin1("Count"), QVariant::fromValue(d_ptr->mCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCount.setQualified(true);
    if (!_valueCount.isNil())
    args.append(_valueCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ConflictResultsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Count")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ConflictResultsType::T__ConflictResultsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ConflictResultsType::~T__ConflictResultsType()
{
}

T__ConflictResultsType::T__ConflictResultsType( const T__ConflictResultsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ConflictResultsType&  T__ConflictResultsType::operator=( const T__ConflictResultsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__BodyType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
    T__BodyTypeType mBodyType;
};

void T__BodyType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__BodyType::value() const
{
    return d_ptr->mValue;
}

T__BodyType::T__BodyType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

T__BodyType::operator QString() const
{
    return d_ptr->mValue;
}

void T__BodyType::setBodyType( const T__BodyTypeType& bodyType )
{
    d_ptr->mBodyType = bodyType;
}

T__BodyTypeType T__BodyType::bodyType() const
{
    return d_ptr->mBodyType;
}

KDSoapValue T__BodyType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BodyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:323
    KDSoapValueList attribs;
    KDSoapValue _valueBodyType(QString::fromLatin1("BodyType"), d_ptr->mBodyType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BodyTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueBodyType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueBodyType.isNil())
    attribs.append(_valueBodyType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__BodyType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("BodyType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBodyType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__BodyType::T__BodyType()
    : d_ptr(new PrivateDPtr)
{
}

T__BodyType::~T__BodyType()
{
}

T__BodyType::T__BodyType( const T__BodyType& other )
    : d_ptr( other.d_ptr )
{
}

T__BodyType&  T__BodyType::operator=( const T__BodyType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__DelegatePermissionsType::PrivateDPtr : public QSharedData
{
public:
    T__DelegateFolderPermissionLevelType mCalendarFolderPermissionLevel;
    T__DelegateFolderPermissionLevelType mTasksFolderPermissionLevel;
    T__DelegateFolderPermissionLevelType mInboxFolderPermissionLevel;
    T__DelegateFolderPermissionLevelType mContactsFolderPermissionLevel;
    T__DelegateFolderPermissionLevelType mNotesFolderPermissionLevel;
    T__DelegateFolderPermissionLevelType mJournalFolderPermissionLevel;
};

void T__DelegatePermissionsType::setCalendarFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& calendarFolderPermissionLevel )
{
    d_ptr->mCalendarFolderPermissionLevel = calendarFolderPermissionLevel;
}

T__DelegateFolderPermissionLevelType T__DelegatePermissionsType::calendarFolderPermissionLevel() const
{
    return d_ptr->mCalendarFolderPermissionLevel;
}

void T__DelegatePermissionsType::setTasksFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& tasksFolderPermissionLevel )
{
    d_ptr->mTasksFolderPermissionLevel = tasksFolderPermissionLevel;
}

T__DelegateFolderPermissionLevelType T__DelegatePermissionsType::tasksFolderPermissionLevel() const
{
    return d_ptr->mTasksFolderPermissionLevel;
}

void T__DelegatePermissionsType::setInboxFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& inboxFolderPermissionLevel )
{
    d_ptr->mInboxFolderPermissionLevel = inboxFolderPermissionLevel;
}

T__DelegateFolderPermissionLevelType T__DelegatePermissionsType::inboxFolderPermissionLevel() const
{
    return d_ptr->mInboxFolderPermissionLevel;
}

void T__DelegatePermissionsType::setContactsFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& contactsFolderPermissionLevel )
{
    d_ptr->mContactsFolderPermissionLevel = contactsFolderPermissionLevel;
}

T__DelegateFolderPermissionLevelType T__DelegatePermissionsType::contactsFolderPermissionLevel() const
{
    return d_ptr->mContactsFolderPermissionLevel;
}

void T__DelegatePermissionsType::setNotesFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& notesFolderPermissionLevel )
{
    d_ptr->mNotesFolderPermissionLevel = notesFolderPermissionLevel;
}

T__DelegateFolderPermissionLevelType T__DelegatePermissionsType::notesFolderPermissionLevel() const
{
    return d_ptr->mNotesFolderPermissionLevel;
}

void T__DelegatePermissionsType::setJournalFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& journalFolderPermissionLevel )
{
    d_ptr->mJournalFolderPermissionLevel = journalFolderPermissionLevel;
}

T__DelegateFolderPermissionLevelType T__DelegatePermissionsType::journalFolderPermissionLevel() const
{
    return d_ptr->mJournalFolderPermissionLevel;
}

KDSoapValue T__DelegatePermissionsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DelegatePermissionsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueCalendarFolderPermissionLevel(QString::fromLatin1("CalendarFolderPermissionLevel"), d_ptr->mCalendarFolderPermissionLevel.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DelegateFolderPermissionLevelType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueCalendarFolderPermissionLevel.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarFolderPermissionLevel.setQualified(true);
    if (!_valueCalendarFolderPermissionLevel.isNil())
    args.append(_valueCalendarFolderPermissionLevel);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTasksFolderPermissionLevel(QString::fromLatin1("TasksFolderPermissionLevel"), d_ptr->mTasksFolderPermissionLevel.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DelegateFolderPermissionLevelType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueTasksFolderPermissionLevel.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTasksFolderPermissionLevel.setQualified(true);
    if (!_valueTasksFolderPermissionLevel.isNil())
    args.append(_valueTasksFolderPermissionLevel);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInboxFolderPermissionLevel(QString::fromLatin1("InboxFolderPermissionLevel"), d_ptr->mInboxFolderPermissionLevel.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DelegateFolderPermissionLevelType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueInboxFolderPermissionLevel.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInboxFolderPermissionLevel.setQualified(true);
    if (!_valueInboxFolderPermissionLevel.isNil())
    args.append(_valueInboxFolderPermissionLevel);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContactsFolderPermissionLevel(QString::fromLatin1("ContactsFolderPermissionLevel"), d_ptr->mContactsFolderPermissionLevel.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DelegateFolderPermissionLevelType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueContactsFolderPermissionLevel.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContactsFolderPermissionLevel.setQualified(true);
    if (!_valueContactsFolderPermissionLevel.isNil())
    args.append(_valueContactsFolderPermissionLevel);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNotesFolderPermissionLevel(QString::fromLatin1("NotesFolderPermissionLevel"), d_ptr->mNotesFolderPermissionLevel.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DelegateFolderPermissionLevelType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueNotesFolderPermissionLevel.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNotesFolderPermissionLevel.setQualified(true);
    if (!_valueNotesFolderPermissionLevel.isNil())
    args.append(_valueNotesFolderPermissionLevel);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueJournalFolderPermissionLevel(QString::fromLatin1("JournalFolderPermissionLevel"), d_ptr->mJournalFolderPermissionLevel.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DelegateFolderPermissionLevelType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueJournalFolderPermissionLevel.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueJournalFolderPermissionLevel.setQualified(true);
    if (!_valueJournalFolderPermissionLevel.isNil())
    args.append(_valueJournalFolderPermissionLevel);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__DelegatePermissionsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CalendarFolderPermissionLevel")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarFolderPermissionLevel.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("TasksFolderPermissionLevel")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTasksFolderPermissionLevel.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("InboxFolderPermissionLevel")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInboxFolderPermissionLevel.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("ContactsFolderPermissionLevel")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContactsFolderPermissionLevel.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("NotesFolderPermissionLevel")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNotesFolderPermissionLevel.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("JournalFolderPermissionLevel")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mJournalFolderPermissionLevel.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__DelegatePermissionsType::T__DelegatePermissionsType()
    : d_ptr(new PrivateDPtr)
{
}

T__DelegatePermissionsType::~T__DelegatePermissionsType()
{
}

T__DelegatePermissionsType::T__DelegatePermissionsType( const T__DelegatePermissionsType& other )
    : d_ptr( other.d_ptr )
{
}

T__DelegatePermissionsType&  T__DelegatePermissionsType::operator=( const T__DelegatePermissionsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__EffectiveRightsType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mCreateAssociated;
    bool mCreateContents;
    bool mCreateHierarchy;
    bool mDelete;
    bool mModify;
    bool mRead;
};

T__EffectiveRightsType::PrivateDPtr::PrivateDPtr()
    : mCreateAssociated(false), mCreateContents(false), mCreateHierarchy(false), mDelete(false), mModify(false), mRead(false)
{
}


void T__EffectiveRightsType::setCreateAssociated( bool createAssociated )
{
    d_ptr->mCreateAssociated = createAssociated;
}

bool T__EffectiveRightsType::createAssociated() const
{
    return d_ptr->mCreateAssociated;
}

void T__EffectiveRightsType::setCreateContents( bool createContents )
{
    d_ptr->mCreateContents = createContents;
}

bool T__EffectiveRightsType::createContents() const
{
    return d_ptr->mCreateContents;
}

void T__EffectiveRightsType::setCreateHierarchy( bool createHierarchy )
{
    d_ptr->mCreateHierarchy = createHierarchy;
}

bool T__EffectiveRightsType::createHierarchy() const
{
    return d_ptr->mCreateHierarchy;
}

void T__EffectiveRightsType::setDelete( bool delete_ )
{
    d_ptr->mDelete = delete_;
}

bool T__EffectiveRightsType::delete_() const
{
    return d_ptr->mDelete;
}

void T__EffectiveRightsType::setModify( bool modify )
{
    d_ptr->mModify = modify;
}

bool T__EffectiveRightsType::modify() const
{
    return d_ptr->mModify;
}

void T__EffectiveRightsType::setRead( bool read )
{
    d_ptr->mRead = read;
}

bool T__EffectiveRightsType::read() const
{
    return d_ptr->mRead;
}

KDSoapValue T__EffectiveRightsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("EffectiveRightsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueCreateAssociated(QString::fromLatin1("CreateAssociated"), QVariant::fromValue(d_ptr->mCreateAssociated), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCreateAssociated.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCreateAssociated.setQualified(true);
    if (!_valueCreateAssociated.isNil())
    args.append(_valueCreateAssociated);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCreateContents(QString::fromLatin1("CreateContents"), QVariant::fromValue(d_ptr->mCreateContents), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCreateContents.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCreateContents.setQualified(true);
    if (!_valueCreateContents.isNil())
    args.append(_valueCreateContents);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCreateHierarchy(QString::fromLatin1("CreateHierarchy"), QVariant::fromValue(d_ptr->mCreateHierarchy), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCreateHierarchy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCreateHierarchy.setQualified(true);
    if (!_valueCreateHierarchy.isNil())
    args.append(_valueCreateHierarchy);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDelete(QString::fromLatin1("Delete"), QVariant::fromValue(d_ptr->mDelete), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDelete.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDelete.setQualified(true);
    if (!_valueDelete.isNil())
    args.append(_valueDelete);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueModify(QString::fromLatin1("Modify"), QVariant::fromValue(d_ptr->mModify), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueModify.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueModify.setQualified(true);
    if (!_valueModify.isNil())
    args.append(_valueModify);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRead(QString::fromLatin1("Read"), QVariant::fromValue(d_ptr->mRead), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueRead.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRead.setQualified(true);
    if (!_valueRead.isNil())
    args.append(_valueRead);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__EffectiveRightsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CreateAssociated")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCreateAssociated = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CreateContents")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCreateContents = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CreateHierarchy")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCreateHierarchy = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Delete")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDelete = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Modify")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mModify = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Read")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRead = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__EffectiveRightsType::T__EffectiveRightsType()
    : d_ptr(new PrivateDPtr)
{
}

T__EffectiveRightsType::~T__EffectiveRightsType()
{
}

T__EffectiveRightsType::T__EffectiveRightsType( const T__EffectiveRightsType& other )
    : d_ptr( other.d_ptr )
{
}

T__EffectiveRightsType&  T__EffectiveRightsType::operator=( const T__EffectiveRightsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfResponseObjectsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__AcceptItemType> mAcceptItem;
    QList<T__TentativelyAcceptItemType> mTentativelyAcceptItem;
    QList<T__DeclineItemType> mDeclineItem;
    QList<T__ReplyToItemType> mReplyToItem;
    QList<T__ForwardItemType> mForwardItem;
    QList<T__ReplyAllToItemType> mReplyAllToItem;
    QList<T__CancelCalendarItemType> mCancelCalendarItem;
    QList<T__RemoveItemType> mRemoveItem;
    QList<T__SuppressReadReceiptType> mSuppressReadReceipt;
    QList<T__PostReplyItemType> mPostReplyItem;
};

void T__NonEmptyArrayOfResponseObjectsType::setAcceptItem( const QList<T__AcceptItemType>& acceptItem )
{
    d_ptr->mAcceptItem = acceptItem;
}

QList<T__AcceptItemType> T__NonEmptyArrayOfResponseObjectsType::acceptItem() const
{
    return d_ptr->mAcceptItem;
}

void T__NonEmptyArrayOfResponseObjectsType::setTentativelyAcceptItem( const QList<T__TentativelyAcceptItemType>& tentativelyAcceptItem )
{
    d_ptr->mTentativelyAcceptItem = tentativelyAcceptItem;
}

QList<T__TentativelyAcceptItemType> T__NonEmptyArrayOfResponseObjectsType::tentativelyAcceptItem() const
{
    return d_ptr->mTentativelyAcceptItem;
}

void T__NonEmptyArrayOfResponseObjectsType::setDeclineItem( const QList<T__DeclineItemType>& declineItem )
{
    d_ptr->mDeclineItem = declineItem;
}

QList<T__DeclineItemType> T__NonEmptyArrayOfResponseObjectsType::declineItem() const
{
    return d_ptr->mDeclineItem;
}

void T__NonEmptyArrayOfResponseObjectsType::setReplyToItem( const QList<T__ReplyToItemType>& replyToItem )
{
    d_ptr->mReplyToItem = replyToItem;
}

QList<T__ReplyToItemType> T__NonEmptyArrayOfResponseObjectsType::replyToItem() const
{
    return d_ptr->mReplyToItem;
}

void T__NonEmptyArrayOfResponseObjectsType::setForwardItem( const QList<T__ForwardItemType>& forwardItem )
{
    d_ptr->mForwardItem = forwardItem;
}

QList<T__ForwardItemType> T__NonEmptyArrayOfResponseObjectsType::forwardItem() const
{
    return d_ptr->mForwardItem;
}

void T__NonEmptyArrayOfResponseObjectsType::setReplyAllToItem( const QList<T__ReplyAllToItemType>& replyAllToItem )
{
    d_ptr->mReplyAllToItem = replyAllToItem;
}

QList<T__ReplyAllToItemType> T__NonEmptyArrayOfResponseObjectsType::replyAllToItem() const
{
    return d_ptr->mReplyAllToItem;
}

void T__NonEmptyArrayOfResponseObjectsType::setCancelCalendarItem( const QList<T__CancelCalendarItemType>& cancelCalendarItem )
{
    d_ptr->mCancelCalendarItem = cancelCalendarItem;
}

QList<T__CancelCalendarItemType> T__NonEmptyArrayOfResponseObjectsType::cancelCalendarItem() const
{
    return d_ptr->mCancelCalendarItem;
}

void T__NonEmptyArrayOfResponseObjectsType::setRemoveItem( const QList<T__RemoveItemType>& removeItem )
{
    d_ptr->mRemoveItem = removeItem;
}

QList<T__RemoveItemType> T__NonEmptyArrayOfResponseObjectsType::removeItem() const
{
    return d_ptr->mRemoveItem;
}

void T__NonEmptyArrayOfResponseObjectsType::setSuppressReadReceipt( const QList<T__SuppressReadReceiptType>& suppressReadReceipt )
{
    d_ptr->mSuppressReadReceipt = suppressReadReceipt;
}

QList<T__SuppressReadReceiptType> T__NonEmptyArrayOfResponseObjectsType::suppressReadReceipt() const
{
    return d_ptr->mSuppressReadReceipt;
}

void T__NonEmptyArrayOfResponseObjectsType::setPostReplyItem( const QList<T__PostReplyItemType>& postReplyItem )
{
    d_ptr->mPostReplyItem = postReplyItem;
}

QList<T__PostReplyItemType> T__NonEmptyArrayOfResponseObjectsType::postReplyItem() const
{
    return d_ptr->mPostReplyItem;
}

KDSoapValue T__NonEmptyArrayOfResponseObjectsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfResponseObjectsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mAcceptItem.count(); ++i) {
        KDSoapValue _valueAcceptItem(d_ptr->mAcceptItem.at(i).serialize(QString::fromLatin1("AcceptItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAcceptItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAcceptItem.setQualified(true);
        if (!_valueAcceptItem.isNil())
        args.append(_valueAcceptItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mTentativelyAcceptItem.count(); ++i) {
        KDSoapValue _valueTentativelyAcceptItem(d_ptr->mTentativelyAcceptItem.at(i).serialize(QString::fromLatin1("TentativelyAcceptItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueTentativelyAcceptItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueTentativelyAcceptItem.setQualified(true);
        if (!_valueTentativelyAcceptItem.isNil())
        args.append(_valueTentativelyAcceptItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDeclineItem.count(); ++i) {
        KDSoapValue _valueDeclineItem(d_ptr->mDeclineItem.at(i).serialize(QString::fromLatin1("DeclineItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeclineItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDeclineItem.setQualified(true);
        if (!_valueDeclineItem.isNil())
        args.append(_valueDeclineItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mReplyToItem.count(); ++i) {
        KDSoapValue _valueReplyToItem(d_ptr->mReplyToItem.at(i).serialize(QString::fromLatin1("ReplyToItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueReplyToItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueReplyToItem.setQualified(true);
        if (!_valueReplyToItem.isNil())
        args.append(_valueReplyToItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mForwardItem.count(); ++i) {
        KDSoapValue _valueForwardItem(d_ptr->mForwardItem.at(i).serialize(QString::fromLatin1("ForwardItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueForwardItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueForwardItem.setQualified(true);
        if (!_valueForwardItem.isNil())
        args.append(_valueForwardItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mReplyAllToItem.count(); ++i) {
        KDSoapValue _valueReplyAllToItem(d_ptr->mReplyAllToItem.at(i).serialize(QString::fromLatin1("ReplyAllToItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueReplyAllToItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueReplyAllToItem.setQualified(true);
        if (!_valueReplyAllToItem.isNil())
        args.append(_valueReplyAllToItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCancelCalendarItem.count(); ++i) {
        KDSoapValue _valueCancelCalendarItem(d_ptr->mCancelCalendarItem.at(i).serialize(QString::fromLatin1("CancelCalendarItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCancelCalendarItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCancelCalendarItem.setQualified(true);
        if (!_valueCancelCalendarItem.isNil())
        args.append(_valueCancelCalendarItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mRemoveItem.count(); ++i) {
        KDSoapValue _valueRemoveItem(d_ptr->mRemoveItem.at(i).serialize(QString::fromLatin1("RemoveItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueRemoveItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueRemoveItem.setQualified(true);
        if (!_valueRemoveItem.isNil())
        args.append(_valueRemoveItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSuppressReadReceipt.count(); ++i) {
        KDSoapValue _valueSuppressReadReceipt(d_ptr->mSuppressReadReceipt.at(i).serialize(QString::fromLatin1("SuppressReadReceipt")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSuppressReadReceipt.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSuppressReadReceipt.setQualified(true);
        if (!_valueSuppressReadReceipt.isNil())
        args.append(_valueSuppressReadReceipt);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mPostReplyItem.count(); ++i) {
        KDSoapValue _valuePostReplyItem(d_ptr->mPostReplyItem.at(i).serialize(QString::fromLatin1("PostReplyItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valuePostReplyItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valuePostReplyItem.setQualified(true);
        if (!_valuePostReplyItem.isNil())
        args.append(_valuePostReplyItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfResponseObjectsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AcceptItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__AcceptItemType mAcceptItemTemp;
            mAcceptItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAcceptItem.append(mAcceptItemTemp);
        }
        else if (name == QLatin1String("TentativelyAcceptItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__TentativelyAcceptItemType mTentativelyAcceptItemTemp;
            mTentativelyAcceptItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mTentativelyAcceptItem.append(mTentativelyAcceptItemTemp);
        }
        else if (name == QLatin1String("DeclineItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DeclineItemType mDeclineItemTemp;
            mDeclineItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeclineItem.append(mDeclineItemTemp);
        }
        else if (name == QLatin1String("ReplyToItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ReplyToItemType mReplyToItemTemp;
            mReplyToItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mReplyToItem.append(mReplyToItemTemp);
        }
        else if (name == QLatin1String("ForwardItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ForwardItemType mForwardItemTemp;
            mForwardItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mForwardItem.append(mForwardItemTemp);
        }
        else if (name == QLatin1String("ReplyAllToItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ReplyAllToItemType mReplyAllToItemTemp;
            mReplyAllToItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mReplyAllToItem.append(mReplyAllToItemTemp);
        }
        else if (name == QLatin1String("CancelCalendarItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__CancelCalendarItemType mCancelCalendarItemTemp;
            mCancelCalendarItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCancelCalendarItem.append(mCancelCalendarItemTemp);
        }
        else if (name == QLatin1String("RemoveItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__RemoveItemType mRemoveItemTemp;
            mRemoveItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mRemoveItem.append(mRemoveItemTemp);
        }
        else if (name == QLatin1String("SuppressReadReceipt")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SuppressReadReceiptType mSuppressReadReceiptTemp;
            mSuppressReadReceiptTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSuppressReadReceipt.append(mSuppressReadReceiptTemp);
        }
        else if (name == QLatin1String("PostReplyItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__PostReplyItemType mPostReplyItemTemp;
            mPostReplyItemTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mPostReplyItem.append(mPostReplyItemTemp);
        }
    }
}

T__NonEmptyArrayOfResponseObjectsType::T__NonEmptyArrayOfResponseObjectsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfResponseObjectsType::~T__NonEmptyArrayOfResponseObjectsType()
{
}

T__NonEmptyArrayOfResponseObjectsType::T__NonEmptyArrayOfResponseObjectsType( const T__NonEmptyArrayOfResponseObjectsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfResponseObjectsType&  T__NonEmptyArrayOfResponseObjectsType::operator=( const T__NonEmptyArrayOfResponseObjectsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SuggestionDayResult::PrivateDPtr : public QSharedData
{
public:
    KDDateTime mDate;
    T__SuggestionQuality mDayQuality;
    T__ArrayOfSuggestion mSuggestionArray;
};

void T__SuggestionDayResult::setDate( const KDDateTime& date )
{
    d_ptr->mDate = date;
}

KDDateTime T__SuggestionDayResult::date() const
{
    return d_ptr->mDate;
}

void T__SuggestionDayResult::setDayQuality( const T__SuggestionQuality& dayQuality )
{
    d_ptr->mDayQuality = dayQuality;
}

T__SuggestionQuality T__SuggestionDayResult::dayQuality() const
{
    return d_ptr->mDayQuality;
}

void T__SuggestionDayResult::setSuggestionArray( const T__ArrayOfSuggestion& suggestionArray )
{
    d_ptr->mSuggestionArray = suggestionArray;
}

T__ArrayOfSuggestion T__SuggestionDayResult::suggestionArray() const
{
    return d_ptr->mSuggestionArray;
}

KDSoapValue T__SuggestionDayResult::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SuggestionDayResult"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDate(QString::fromLatin1("Date"), d_ptr->mDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDate.setQualified(true);
    if (!_valueDate.isNil())
    args.append(_valueDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDayQuality(QString::fromLatin1("DayQuality"), d_ptr->mDayQuality.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SuggestionQuality"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDayQuality.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDayQuality.setQualified(true);
    if (!_valueDayQuality.isNil())
    args.append(_valueDayQuality);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSuggestionArray(d_ptr->mSuggestionArray.serialize(QString::fromLatin1("SuggestionArray")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSuggestionArray.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSuggestionArray.setQualified(true);
    if (!_valueSuggestionArray.isNil())
    args.append(_valueSuggestionArray);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SuggestionDayResult::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Date")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDate = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DayQuality")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDayQuality.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("SuggestionArray")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSuggestionArray.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SuggestionDayResult::T__SuggestionDayResult()
    : d_ptr(new PrivateDPtr)
{
}

T__SuggestionDayResult::~T__SuggestionDayResult()
{
}

T__SuggestionDayResult::T__SuggestionDayResult( const T__SuggestionDayResult& other )
    : d_ptr( other.d_ptr )
{
}

T__SuggestionDayResult&  T__SuggestionDayResult::operator=( const T__SuggestionDayResult& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ExtendedPropertyType::PrivateDPtr : public QSharedData
{
public:
    T__PathToExtendedFieldType mExtendedFieldURI;
    QString mValue;
    T__NonEmptyArrayOfPropertyValuesType mValues;
};

void T__ExtendedPropertyType::setExtendedFieldURI( const T__PathToExtendedFieldType& extendedFieldURI )
{
    d_ptr->mExtendedFieldURI = extendedFieldURI;
}

T__PathToExtendedFieldType T__ExtendedPropertyType::extendedFieldURI() const
{
    return d_ptr->mExtendedFieldURI;
}

void T__ExtendedPropertyType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__ExtendedPropertyType::value() const
{
    return d_ptr->mValue;
}

void T__ExtendedPropertyType::setValues( const T__NonEmptyArrayOfPropertyValuesType& values )
{
    d_ptr->mValues = values;
}

T__NonEmptyArrayOfPropertyValuesType T__ExtendedPropertyType::values() const
{
    return d_ptr->mValues;
}

KDSoapValue T__ExtendedPropertyType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExtendedPropertyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueExtendedFieldURI(d_ptr->mExtendedFieldURI.serialize(QString::fromLatin1("ExtendedFieldURI")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueExtendedFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueExtendedFieldURI.setQualified(true);
    if (!_valueExtendedFieldURI.isNil())
    args.append(_valueExtendedFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueValue(QString::fromLatin1("Value"), QVariant::fromValue(d_ptr->mValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueValue.setQualified(true);
    if (!_valueValue.isNil())
    args.append(_valueValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueValues(d_ptr->mValues.serialize(QString::fromLatin1("Values")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueValues.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueValues.setQualified(true);
    if (!_valueValues.isNil())
    args.append(_valueValues);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ExtendedPropertyType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ExtendedFieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mExtendedFieldURI.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Value")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mValue = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Values")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mValues.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ExtendedPropertyType::T__ExtendedPropertyType()
    : d_ptr(new PrivateDPtr)
{
}

T__ExtendedPropertyType::~T__ExtendedPropertyType()
{
}

T__ExtendedPropertyType::T__ExtendedPropertyType( const T__ExtendedPropertyType& other )
    : d_ptr( other.d_ptr )
{
}

T__ExtendedPropertyType&  T__ExtendedPropertyType::operator=( const T__ExtendedPropertyType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__WorkingPeriod::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__DaysOfWeekType mDayOfWeek;
    int mStartTimeInMinutes;
    int mEndTimeInMinutes;
};

T__WorkingPeriod::PrivateDPtr::PrivateDPtr()
    : mStartTimeInMinutes(0), mEndTimeInMinutes(0)
{
}


void T__WorkingPeriod::setDayOfWeek( const T__DaysOfWeekType& dayOfWeek )
{
    d_ptr->mDayOfWeek = dayOfWeek;
}

T__DaysOfWeekType T__WorkingPeriod::dayOfWeek() const
{
    return d_ptr->mDayOfWeek;
}

void T__WorkingPeriod::setStartTimeInMinutes( int startTimeInMinutes )
{
    d_ptr->mStartTimeInMinutes = startTimeInMinutes;
}

int T__WorkingPeriod::startTimeInMinutes() const
{
    return d_ptr->mStartTimeInMinutes;
}

void T__WorkingPeriod::setEndTimeInMinutes( int endTimeInMinutes )
{
    d_ptr->mEndTimeInMinutes = endTimeInMinutes;
}

int T__WorkingPeriod::endTimeInMinutes() const
{
    return d_ptr->mEndTimeInMinutes;
}

KDSoapValue T__WorkingPeriod::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WorkingPeriod"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDayOfWeek(QString::fromLatin1("DayOfWeek"), d_ptr->mDayOfWeek.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DaysOfWeekType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDayOfWeek.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDayOfWeek.setQualified(true);
    if (!_valueDayOfWeek.isNil())
    args.append(_valueDayOfWeek);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStartTimeInMinutes(QString::fromLatin1("StartTimeInMinutes"), QVariant::fromValue(d_ptr->mStartTimeInMinutes), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStartTimeInMinutes.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStartTimeInMinutes.setQualified(true);
    if (!_valueStartTimeInMinutes.isNil())
    args.append(_valueStartTimeInMinutes);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEndTimeInMinutes(QString::fromLatin1("EndTimeInMinutes"), QVariant::fromValue(d_ptr->mEndTimeInMinutes), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueEndTimeInMinutes.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEndTimeInMinutes.setQualified(true);
    if (!_valueEndTimeInMinutes.isNil())
    args.append(_valueEndTimeInMinutes);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__WorkingPeriod::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DayOfWeek")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDayOfWeek.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("StartTimeInMinutes")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStartTimeInMinutes = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("EndTimeInMinutes")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEndTimeInMinutes = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__WorkingPeriod::T__WorkingPeriod()
    : d_ptr(new PrivateDPtr)
{
}

T__WorkingPeriod::~T__WorkingPeriod()
{
}

T__WorkingPeriod::T__WorkingPeriod( const T__WorkingPeriod& other )
    : d_ptr( other.d_ptr )
{
}

T__WorkingPeriod&  T__WorkingPeriod::operator=( const T__WorkingPeriod& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfInternetHeadersType::PrivateDPtr : public QSharedData
{
public:
    QList<T__InternetHeaderType> mInternetMessageHeader;
};

void T__NonEmptyArrayOfInternetHeadersType::setInternetMessageHeader( const QList<T__InternetHeaderType>& internetMessageHeader )
{
    d_ptr->mInternetMessageHeader = internetMessageHeader;
}

QList<T__InternetHeaderType> T__NonEmptyArrayOfInternetHeadersType::internetMessageHeader() const
{
    return d_ptr->mInternetMessageHeader;
}

KDSoapValue T__NonEmptyArrayOfInternetHeadersType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfInternetHeadersType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mInternetMessageHeader.count(); ++i) {
        KDSoapValue _valueInternetMessageHeader(d_ptr->mInternetMessageHeader.at(i).serialize(QString::fromLatin1("InternetMessageHeader")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueInternetMessageHeader.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueInternetMessageHeader.setQualified(true);
        if (!_valueInternetMessageHeader.isNil())
        args.append(_valueInternetMessageHeader);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfInternetHeadersType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("InternetMessageHeader")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__InternetHeaderType mInternetMessageHeaderTemp;
            mInternetMessageHeaderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mInternetMessageHeader.append(mInternetMessageHeaderTemp);
        }
    }
}

T__NonEmptyArrayOfInternetHeadersType::T__NonEmptyArrayOfInternetHeadersType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfInternetHeadersType::~T__NonEmptyArrayOfInternetHeadersType()
{
}

T__NonEmptyArrayOfInternetHeadersType::T__NonEmptyArrayOfInternetHeadersType( const T__NonEmptyArrayOfInternetHeadersType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfInternetHeadersType&  T__NonEmptyArrayOfInternetHeadersType::operator=( const T__NonEmptyArrayOfInternetHeadersType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__MessageXml::PrivateDPtr : public QSharedData
{
public:
    QList<KDSoapValue> mAny;
};

void TNS__MessageXml::setAny( const QList<KDSoapValue>& any )
{
    d_ptr->mAny = any;
}

QList<KDSoapValue> TNS__MessageXml::any() const
{
    return d_ptr->mAny;
}

KDSoapValue TNS__MessageXml::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("MessageXml"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:199
        }
    }
    return mainValue;
}

void TNS__MessageXml::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:238
            d_ptr->mAny.append(val);
        }
    }
}

TNS__MessageXml::TNS__MessageXml()
    : d_ptr(new PrivateDPtr)
{
}

TNS__MessageXml::~TNS__MessageXml()
{
}

TNS__MessageXml::TNS__MessageXml( const TNS__MessageXml& other )
    : d_ptr( other.d_ptr )
{
}

TNS__MessageXml&  TNS__MessageXml::operator=( const TNS__MessageXml& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfRestrictedGroupIdentifiersType::PrivateDPtr : public QSharedData
{
public:
    QList<T__SidAndAttributesType> mRestrictedGroupIdentifier;
};

void T__NonEmptyArrayOfRestrictedGroupIdentifiersType::setRestrictedGroupIdentifier( const QList<T__SidAndAttributesType>& restrictedGroupIdentifier )
{
    d_ptr->mRestrictedGroupIdentifier = restrictedGroupIdentifier;
}

QList<T__SidAndAttributesType> T__NonEmptyArrayOfRestrictedGroupIdentifiersType::restrictedGroupIdentifier() const
{
    return d_ptr->mRestrictedGroupIdentifier;
}

KDSoapValue T__NonEmptyArrayOfRestrictedGroupIdentifiersType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfRestrictedGroupIdentifiersType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mRestrictedGroupIdentifier.count(); ++i) {
        KDSoapValue _valueRestrictedGroupIdentifier(d_ptr->mRestrictedGroupIdentifier.at(i).serialize(QString::fromLatin1("RestrictedGroupIdentifier")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueRestrictedGroupIdentifier.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueRestrictedGroupIdentifier.setQualified(true);
        if (!_valueRestrictedGroupIdentifier.isNil())
        args.append(_valueRestrictedGroupIdentifier);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfRestrictedGroupIdentifiersType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("RestrictedGroupIdentifier")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SidAndAttributesType mRestrictedGroupIdentifierTemp;
            mRestrictedGroupIdentifierTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mRestrictedGroupIdentifier.append(mRestrictedGroupIdentifierTemp);
        }
    }
}

T__NonEmptyArrayOfRestrictedGroupIdentifiersType::T__NonEmptyArrayOfRestrictedGroupIdentifiersType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfRestrictedGroupIdentifiersType::~T__NonEmptyArrayOfRestrictedGroupIdentifiersType()
{
}

T__NonEmptyArrayOfRestrictedGroupIdentifiersType::T__NonEmptyArrayOfRestrictedGroupIdentifiersType( const T__NonEmptyArrayOfRestrictedGroupIdentifiersType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfRestrictedGroupIdentifiersType&  T__NonEmptyArrayOfRestrictedGroupIdentifiersType::operator=( const T__NonEmptyArrayOfRestrictedGroupIdentifiersType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfItemChangesType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ItemChangeType> mItemChange;
};

void T__NonEmptyArrayOfItemChangesType::setItemChange( const QList<T__ItemChangeType>& itemChange )
{
    d_ptr->mItemChange = itemChange;
}

QList<T__ItemChangeType> T__NonEmptyArrayOfItemChangesType::itemChange() const
{
    return d_ptr->mItemChange;
}

KDSoapValue T__NonEmptyArrayOfItemChangesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfItemChangesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mItemChange.count(); ++i) {
        KDSoapValue _valueItemChange(d_ptr->mItemChange.at(i).serialize(QString::fromLatin1("ItemChange")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueItemChange.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueItemChange.setQualified(true);
        if (!_valueItemChange.isNil())
        args.append(_valueItemChange);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfItemChangesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemChange")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ItemChangeType mItemChangeTemp;
            mItemChangeTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mItemChange.append(mItemChangeTemp);
        }
    }
}

T__NonEmptyArrayOfItemChangesType::T__NonEmptyArrayOfItemChangesType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfItemChangesType::~T__NonEmptyArrayOfItemChangesType()
{
}

T__NonEmptyArrayOfItemChangesType::T__NonEmptyArrayOfItemChangesType( const T__NonEmptyArrayOfItemChangesType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfItemChangesType&  T__NonEmptyArrayOfItemChangesType::operator=( const T__NonEmptyArrayOfItemChangesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfFoldersType::PrivateDPtr : public QSharedData
{
public:
    QList<T__FolderType> mFolder;
    QList<T__CalendarFolderType> mCalendarFolder;
    QList<T__ContactsFolderType> mContactsFolder;
    QList<T__SearchFolderType> mSearchFolder;
    QList<T__TasksFolderType> mTasksFolder;
};

void T__NonEmptyArrayOfFoldersType::setFolder( const QList<T__FolderType>& folder )
{
    d_ptr->mFolder = folder;
}

QList<T__FolderType> T__NonEmptyArrayOfFoldersType::folder() const
{
    return d_ptr->mFolder;
}

void T__NonEmptyArrayOfFoldersType::setCalendarFolder( const QList<T__CalendarFolderType>& calendarFolder )
{
    d_ptr->mCalendarFolder = calendarFolder;
}

QList<T__CalendarFolderType> T__NonEmptyArrayOfFoldersType::calendarFolder() const
{
    return d_ptr->mCalendarFolder;
}

void T__NonEmptyArrayOfFoldersType::setContactsFolder( const QList<T__ContactsFolderType>& contactsFolder )
{
    d_ptr->mContactsFolder = contactsFolder;
}

QList<T__ContactsFolderType> T__NonEmptyArrayOfFoldersType::contactsFolder() const
{
    return d_ptr->mContactsFolder;
}

void T__NonEmptyArrayOfFoldersType::setSearchFolder( const QList<T__SearchFolderType>& searchFolder )
{
    d_ptr->mSearchFolder = searchFolder;
}

QList<T__SearchFolderType> T__NonEmptyArrayOfFoldersType::searchFolder() const
{
    return d_ptr->mSearchFolder;
}

void T__NonEmptyArrayOfFoldersType::setTasksFolder( const QList<T__TasksFolderType>& tasksFolder )
{
    d_ptr->mTasksFolder = tasksFolder;
}

QList<T__TasksFolderType> T__NonEmptyArrayOfFoldersType::tasksFolder() const
{
    return d_ptr->mTasksFolder;
}

KDSoapValue T__NonEmptyArrayOfFoldersType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfFoldersType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mFolder.count(); ++i) {
        KDSoapValue _valueFolder(d_ptr->mFolder.at(i).serialize(QString::fromLatin1("Folder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueFolder.setQualified(true);
        if (!_valueFolder.isNil())
        args.append(_valueFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCalendarFolder.count(); ++i) {
        KDSoapValue _valueCalendarFolder(d_ptr->mCalendarFolder.at(i).serialize(QString::fromLatin1("CalendarFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCalendarFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCalendarFolder.setQualified(true);
        if (!_valueCalendarFolder.isNil())
        args.append(_valueCalendarFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mContactsFolder.count(); ++i) {
        KDSoapValue _valueContactsFolder(d_ptr->mContactsFolder.at(i).serialize(QString::fromLatin1("ContactsFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueContactsFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueContactsFolder.setQualified(true);
        if (!_valueContactsFolder.isNil())
        args.append(_valueContactsFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSearchFolder.count(); ++i) {
        KDSoapValue _valueSearchFolder(d_ptr->mSearchFolder.at(i).serialize(QString::fromLatin1("SearchFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSearchFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSearchFolder.setQualified(true);
        if (!_valueSearchFolder.isNil())
        args.append(_valueSearchFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mTasksFolder.count(); ++i) {
        KDSoapValue _valueTasksFolder(d_ptr->mTasksFolder.at(i).serialize(QString::fromLatin1("TasksFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueTasksFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueTasksFolder.setQualified(true);
        if (!_valueTasksFolder.isNil())
        args.append(_valueTasksFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfFoldersType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Folder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__FolderType mFolderTemp;
            mFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFolder.append(mFolderTemp);
        }
        else if (name == QLatin1String("CalendarFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__CalendarFolderType mCalendarFolderTemp;
            mCalendarFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCalendarFolder.append(mCalendarFolderTemp);
        }
        else if (name == QLatin1String("ContactsFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ContactsFolderType mContactsFolderTemp;
            mContactsFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mContactsFolder.append(mContactsFolderTemp);
        }
        else if (name == QLatin1String("SearchFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SearchFolderType mSearchFolderTemp;
            mSearchFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSearchFolder.append(mSearchFolderTemp);
        }
        else if (name == QLatin1String("TasksFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__TasksFolderType mTasksFolderTemp;
            mTasksFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mTasksFolder.append(mTasksFolderTemp);
        }
    }
}

T__NonEmptyArrayOfFoldersType::T__NonEmptyArrayOfFoldersType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfFoldersType::~T__NonEmptyArrayOfFoldersType()
{
}

T__NonEmptyArrayOfFoldersType::T__NonEmptyArrayOfFoldersType( const T__NonEmptyArrayOfFoldersType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfFoldersType&  T__NonEmptyArrayOfFoldersType::operator=( const T__NonEmptyArrayOfFoldersType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__PhoneNumberDictionaryType::PrivateDPtr : public QSharedData
{
public:
    QList<T__PhoneNumberDictionaryEntryType> mEntry;
};

void T__PhoneNumberDictionaryType::setEntry( const QList<T__PhoneNumberDictionaryEntryType>& entry )
{
    d_ptr->mEntry = entry;
}

QList<T__PhoneNumberDictionaryEntryType> T__PhoneNumberDictionaryType::entry() const
{
    return d_ptr->mEntry;
}

KDSoapValue T__PhoneNumberDictionaryType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PhoneNumberDictionaryType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mEntry.count(); ++i) {
        KDSoapValue _valueEntry(d_ptr->mEntry.at(i).serialize(QString::fromLatin1("Entry")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueEntry.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueEntry.setQualified(true);
        if (!_valueEntry.isNil())
        args.append(_valueEntry);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__PhoneNumberDictionaryType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Entry")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__PhoneNumberDictionaryEntryType mEntryTemp;
            mEntryTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mEntry.append(mEntryTemp);
        }
    }
}

T__PhoneNumberDictionaryType::T__PhoneNumberDictionaryType()
    : d_ptr(new PrivateDPtr)
{
}

T__PhoneNumberDictionaryType::~T__PhoneNumberDictionaryType()
{
}

T__PhoneNumberDictionaryType::T__PhoneNumberDictionaryType( const T__PhoneNumberDictionaryType& other )
    : d_ptr( other.d_ptr )
{
}

T__PhoneNumberDictionaryType&  T__PhoneNumberDictionaryType::operator=( const T__PhoneNumberDictionaryType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__PhysicalAddressDictionaryEntryType::PrivateDPtr : public QSharedData
{
public:
    QString mStreet;
    QString mCity;
    QString mState;
    QString mCountryOrRegion;
    QString mPostalCode;
    T__PhysicalAddressKeyType mKey;
};

void T__PhysicalAddressDictionaryEntryType::setStreet( const QString& street )
{
    d_ptr->mStreet = street;
}

QString T__PhysicalAddressDictionaryEntryType::street() const
{
    return d_ptr->mStreet;
}

void T__PhysicalAddressDictionaryEntryType::setCity( const QString& city )
{
    d_ptr->mCity = city;
}

QString T__PhysicalAddressDictionaryEntryType::city() const
{
    return d_ptr->mCity;
}

void T__PhysicalAddressDictionaryEntryType::setState( const QString& state )
{
    d_ptr->mState = state;
}

QString T__PhysicalAddressDictionaryEntryType::state() const
{
    return d_ptr->mState;
}

void T__PhysicalAddressDictionaryEntryType::setCountryOrRegion( const QString& countryOrRegion )
{
    d_ptr->mCountryOrRegion = countryOrRegion;
}

QString T__PhysicalAddressDictionaryEntryType::countryOrRegion() const
{
    return d_ptr->mCountryOrRegion;
}

void T__PhysicalAddressDictionaryEntryType::setPostalCode( const QString& postalCode )
{
    d_ptr->mPostalCode = postalCode;
}

QString T__PhysicalAddressDictionaryEntryType::postalCode() const
{
    return d_ptr->mPostalCode;
}

void T__PhysicalAddressDictionaryEntryType::setKey( const T__PhysicalAddressKeyType& key )
{
    d_ptr->mKey = key;
}

T__PhysicalAddressKeyType T__PhysicalAddressDictionaryEntryType::key() const
{
    return d_ptr->mKey;
}

KDSoapValue T__PhysicalAddressDictionaryEntryType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PhysicalAddressDictionaryEntryType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueStreet(QString::fromLatin1("Street"), QVariant::fromValue(d_ptr->mStreet), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStreet.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStreet.setQualified(true);
    if (!_valueStreet.isNil())
    args.append(_valueStreet);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCity(QString::fromLatin1("City"), QVariant::fromValue(d_ptr->mCity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCity.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCity.setQualified(true);
    if (!_valueCity.isNil())
    args.append(_valueCity);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueState(QString::fromLatin1("State"), QVariant::fromValue(d_ptr->mState), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueState.setQualified(true);
    if (!_valueState.isNil())
    args.append(_valueState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCountryOrRegion(QString::fromLatin1("CountryOrRegion"), QVariant::fromValue(d_ptr->mCountryOrRegion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCountryOrRegion.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCountryOrRegion.setQualified(true);
    if (!_valueCountryOrRegion.isNil())
    args.append(_valueCountryOrRegion);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePostalCode(QString::fromLatin1("PostalCode"), QVariant::fromValue(d_ptr->mPostalCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePostalCode.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePostalCode.setQualified(true);
    if (!_valuePostalCode.isNil())
    args.append(_valuePostalCode);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueKey(QString::fromLatin1("Key"), d_ptr->mKey.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PhysicalAddressKeyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueKey.isNil())
    attribs.append(_valueKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__PhysicalAddressDictionaryEntryType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Street")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStreet = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("City")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCity = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("State")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mState = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CountryOrRegion")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCountryOrRegion = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("PostalCode")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPostalCode = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Key")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mKey.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__PhysicalAddressDictionaryEntryType::T__PhysicalAddressDictionaryEntryType()
    : d_ptr(new PrivateDPtr)
{
}

T__PhysicalAddressDictionaryEntryType::~T__PhysicalAddressDictionaryEntryType()
{
}

T__PhysicalAddressDictionaryEntryType::T__PhysicalAddressDictionaryEntryType( const T__PhysicalAddressDictionaryEntryType& other )
    : d_ptr( other.d_ptr )
{
}

T__PhysicalAddressDictionaryEntryType&  T__PhysicalAddressDictionaryEntryType::operator=( const T__PhysicalAddressDictionaryEntryType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfSuggestion::PrivateDPtr : public QSharedData
{
public:
    QList<T__Suggestion> mSuggestion;
};

void T__ArrayOfSuggestion::setSuggestion( const QList<T__Suggestion>& suggestion )
{
    d_ptr->mSuggestion = suggestion;
}

QList<T__Suggestion> T__ArrayOfSuggestion::suggestion() const
{
    return d_ptr->mSuggestion;
}

KDSoapValue T__ArrayOfSuggestion::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfSuggestion"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mSuggestion.count(); ++i) {
        KDSoapValue _valueSuggestion(d_ptr->mSuggestion.at(i).serialize(QString::fromLatin1("Suggestion")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSuggestion.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSuggestion.setQualified(true);
        if (!_valueSuggestion.isNil())
        args.append(_valueSuggestion);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfSuggestion::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Suggestion")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__Suggestion mSuggestionTemp;
            mSuggestionTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSuggestion.append(mSuggestionTemp);
        }
    }
}

T__ArrayOfSuggestion::T__ArrayOfSuggestion()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfSuggestion::~T__ArrayOfSuggestion()
{
}

T__ArrayOfSuggestion::T__ArrayOfSuggestion( const T__ArrayOfSuggestion& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfSuggestion&  T__ArrayOfSuggestion::operator=( const T__ArrayOfSuggestion& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__BasePagingType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mMaxEntriesReturned;
};

T__BasePagingType::PrivateDPtr::PrivateDPtr()
    : mMaxEntriesReturned(0)
{
}


void T__BasePagingType::setMaxEntriesReturned( int maxEntriesReturned )
{
    d_ptr->mMaxEntriesReturned = maxEntriesReturned;
}

int T__BasePagingType::maxEntriesReturned() const
{
    return d_ptr->mMaxEntriesReturned;
}

KDSoapValue T__BasePagingType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BasePagingType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList attribs;
    KDSoapValue _valueMaxEntriesReturned(QString::fromLatin1("MaxEntriesReturned"), QVariant::fromValue(d_ptr->mMaxEntriesReturned), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMaxEntriesReturned.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueMaxEntriesReturned.isNil())
    attribs.append(_valueMaxEntriesReturned);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__BasePagingType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("MaxEntriesReturned")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMaxEntriesReturned = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__BasePagingType::T__BasePagingType()
    : d_ptr(new PrivateDPtr)
{
}

T__BasePagingType::~T__BasePagingType()
{
}

T__BasePagingType::T__BasePagingType( const T__BasePagingType& other )
    : d_ptr( other.d_ptr )
{
}

T__BasePagingType&  T__BasePagingType::operator=( const T__BasePagingType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ReplyBody::PrivateDPtr : public QSharedData
{
public:
    QString mMessage;
    QString mLang;
};

void T__ReplyBody::setMessage( const QString& message )
{
    d_ptr->mMessage = message;
}

QString T__ReplyBody::message() const
{
    return d_ptr->mMessage;
}

void T__ReplyBody::setLang( const QString& lang )
{
    d_ptr->mLang = lang;
}

QString T__ReplyBody::lang() const
{
    return d_ptr->mLang;
}

KDSoapValue T__ReplyBody::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ReplyBody"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMessage(QString::fromLatin1("Message"), QVariant::fromValue(d_ptr->mMessage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMessage.setQualified(true);
    if (!_valueMessage.isNil())
    args.append(_valueMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueLang(QString::fromLatin1("lang"), QVariant::fromValue(d_ptr->mLang), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueLang.setNamespaceUri(KDSoapNamespaceManager::xmlSchema2001());
    if (!_valueLang.isNil())
    attribs.append(_valueLang);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ReplyBody::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Message")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessage = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("lang")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLang = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ReplyBody::T__ReplyBody()
    : d_ptr(new PrivateDPtr)
{
}

T__ReplyBody::~T__ReplyBody()
{
}

T__ReplyBody::T__ReplyBody( const T__ReplyBody& other )
    : d_ptr( other.d_ptr )
{
}

T__ReplyBody&  T__ReplyBody::operator=( const T__ReplyBody& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfAttachmentsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ItemAttachmentType> mItemAttachment;
    QList<T__FileAttachmentType> mFileAttachment;
};

void T__NonEmptyArrayOfAttachmentsType::setItemAttachment( const QList<T__ItemAttachmentType>& itemAttachment )
{
    d_ptr->mItemAttachment = itemAttachment;
}

QList<T__ItemAttachmentType> T__NonEmptyArrayOfAttachmentsType::itemAttachment() const
{
    return d_ptr->mItemAttachment;
}

void T__NonEmptyArrayOfAttachmentsType::setFileAttachment( const QList<T__FileAttachmentType>& fileAttachment )
{
    d_ptr->mFileAttachment = fileAttachment;
}

QList<T__FileAttachmentType> T__NonEmptyArrayOfAttachmentsType::fileAttachment() const
{
    return d_ptr->mFileAttachment;
}

KDSoapValue T__NonEmptyArrayOfAttachmentsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfAttachmentsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mItemAttachment.count(); ++i) {
        KDSoapValue _valueItemAttachment(d_ptr->mItemAttachment.at(i).serialize(QString::fromLatin1("ItemAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueItemAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueItemAttachment.setQualified(true);
        if (!_valueItemAttachment.isNil())
        args.append(_valueItemAttachment);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mFileAttachment.count(); ++i) {
        KDSoapValue _valueFileAttachment(d_ptr->mFileAttachment.at(i).serialize(QString::fromLatin1("FileAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFileAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueFileAttachment.setQualified(true);
        if (!_valueFileAttachment.isNil())
        args.append(_valueFileAttachment);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfAttachmentsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemAttachment")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ItemAttachmentType mItemAttachmentTemp;
            mItemAttachmentTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mItemAttachment.append(mItemAttachmentTemp);
        }
        else if (name == QLatin1String("FileAttachment")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__FileAttachmentType mFileAttachmentTemp;
            mFileAttachmentTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFileAttachment.append(mFileAttachmentTemp);
        }
    }
}

T__NonEmptyArrayOfAttachmentsType::T__NonEmptyArrayOfAttachmentsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfAttachmentsType::~T__NonEmptyArrayOfAttachmentsType()
{
}

T__NonEmptyArrayOfAttachmentsType::T__NonEmptyArrayOfAttachmentsType( const T__NonEmptyArrayOfAttachmentsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfAttachmentsType&  T__NonEmptyArrayOfAttachmentsType::operator=( const T__NonEmptyArrayOfAttachmentsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue T__RecurrencePatternBaseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RecurrencePatternBaseType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    return mainValue;
}

void T__RecurrencePatternBaseType::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__RecurrencePatternBaseType::T__RecurrencePatternBaseType()
{
}

T__RecurrencePatternBaseType::~T__RecurrencePatternBaseType()
{
}


class T__ArrayOfDelegateUserType::PrivateDPtr : public QSharedData
{
public:
    QList<T__DelegateUserType> mDelegateUser;
};

void T__ArrayOfDelegateUserType::setDelegateUser( const QList<T__DelegateUserType>& delegateUser )
{
    d_ptr->mDelegateUser = delegateUser;
}

QList<T__DelegateUserType> T__ArrayOfDelegateUserType::delegateUser() const
{
    return d_ptr->mDelegateUser;
}

KDSoapValue T__ArrayOfDelegateUserType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfDelegateUserType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mDelegateUser.count(); ++i) {
        KDSoapValue _valueDelegateUser(d_ptr->mDelegateUser.at(i).serialize(QString::fromLatin1("DelegateUser")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDelegateUser.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDelegateUser.setQualified(true);
        if (!_valueDelegateUser.isNil())
        args.append(_valueDelegateUser);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfDelegateUserType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DelegateUser")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DelegateUserType mDelegateUserTemp;
            mDelegateUserTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDelegateUser.append(mDelegateUserTemp);
        }
    }
}

T__ArrayOfDelegateUserType::T__ArrayOfDelegateUserType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfDelegateUserType::~T__ArrayOfDelegateUserType()
{
}

T__ArrayOfDelegateUserType::T__ArrayOfDelegateUserType( const T__ArrayOfDelegateUserType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfDelegateUserType&  T__ArrayOfDelegateUserType::operator=( const T__ArrayOfDelegateUserType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SyncFolderHierarchyCreateOrUpdateType::PrivateDPtr : public QSharedData
{
public:
    T__FolderType mFolder;
    T__CalendarFolderType mCalendarFolder;
    T__ContactsFolderType mContactsFolder;
    T__SearchFolderType mSearchFolder;
    T__TasksFolderType mTasksFolder;
};

void T__SyncFolderHierarchyCreateOrUpdateType::setFolder( const T__FolderType& folder )
{
    d_ptr->mFolder = folder;
}

T__FolderType T__SyncFolderHierarchyCreateOrUpdateType::folder() const
{
    return d_ptr->mFolder;
}

void T__SyncFolderHierarchyCreateOrUpdateType::setCalendarFolder( const T__CalendarFolderType& calendarFolder )
{
    d_ptr->mCalendarFolder = calendarFolder;
}

T__CalendarFolderType T__SyncFolderHierarchyCreateOrUpdateType::calendarFolder() const
{
    return d_ptr->mCalendarFolder;
}

void T__SyncFolderHierarchyCreateOrUpdateType::setContactsFolder( const T__ContactsFolderType& contactsFolder )
{
    d_ptr->mContactsFolder = contactsFolder;
}

T__ContactsFolderType T__SyncFolderHierarchyCreateOrUpdateType::contactsFolder() const
{
    return d_ptr->mContactsFolder;
}

void T__SyncFolderHierarchyCreateOrUpdateType::setSearchFolder( const T__SearchFolderType& searchFolder )
{
    d_ptr->mSearchFolder = searchFolder;
}

T__SearchFolderType T__SyncFolderHierarchyCreateOrUpdateType::searchFolder() const
{
    return d_ptr->mSearchFolder;
}

void T__SyncFolderHierarchyCreateOrUpdateType::setTasksFolder( const T__TasksFolderType& tasksFolder )
{
    d_ptr->mTasksFolder = tasksFolder;
}

T__TasksFolderType T__SyncFolderHierarchyCreateOrUpdateType::tasksFolder() const
{
    return d_ptr->mTasksFolder;
}

KDSoapValue T__SyncFolderHierarchyCreateOrUpdateType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SyncFolderHierarchyCreateOrUpdateType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolder(d_ptr->mFolder.serialize(QString::fromLatin1("Folder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolder.setQualified(true);
    if (!_valueFolder.isNil())
    args.append(_valueFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarFolder(d_ptr->mCalendarFolder.serialize(QString::fromLatin1("CalendarFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarFolder.setQualified(true);
    if (!_valueCalendarFolder.isNil())
    args.append(_valueCalendarFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContactsFolder(d_ptr->mContactsFolder.serialize(QString::fromLatin1("ContactsFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContactsFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContactsFolder.setQualified(true);
    if (!_valueContactsFolder.isNil())
    args.append(_valueContactsFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSearchFolder(d_ptr->mSearchFolder.serialize(QString::fromLatin1("SearchFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSearchFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSearchFolder.setQualified(true);
    if (!_valueSearchFolder.isNil())
    args.append(_valueSearchFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTasksFolder(d_ptr->mTasksFolder.serialize(QString::fromLatin1("TasksFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTasksFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTasksFolder.setQualified(true);
    if (!_valueTasksFolder.isNil())
    args.append(_valueTasksFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SyncFolderHierarchyCreateOrUpdateType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Folder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CalendarFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ContactsFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContactsFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SearchFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSearchFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("TasksFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTasksFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SyncFolderHierarchyCreateOrUpdateType::T__SyncFolderHierarchyCreateOrUpdateType()
    : d_ptr(new PrivateDPtr)
{
}

T__SyncFolderHierarchyCreateOrUpdateType::~T__SyncFolderHierarchyCreateOrUpdateType()
{
}

T__SyncFolderHierarchyCreateOrUpdateType::T__SyncFolderHierarchyCreateOrUpdateType( const T__SyncFolderHierarchyCreateOrUpdateType& other )
    : d_ptr( other.d_ptr )
{
}

T__SyncFolderHierarchyCreateOrUpdateType&  T__SyncFolderHierarchyCreateOrUpdateType::operator=( const T__SyncFolderHierarchyCreateOrUpdateType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__FreeBusyResponseType::PrivateDPtr : public QSharedData
{
public:
    TNS__ResponseMessageType mResponseMessage;
    T__FreeBusyView mFreeBusyView;
};

void TNS__FreeBusyResponseType::setResponseMessage( const TNS__ResponseMessageType& responseMessage )
{
    d_ptr->mResponseMessage = responseMessage;
}

TNS__ResponseMessageType TNS__FreeBusyResponseType::responseMessage() const
{
    return d_ptr->mResponseMessage;
}

void TNS__FreeBusyResponseType::setFreeBusyView( const T__FreeBusyView& freeBusyView )
{
    d_ptr->mFreeBusyView = freeBusyView;
}

T__FreeBusyView TNS__FreeBusyResponseType::freeBusyView() const
{
    return d_ptr->mFreeBusyView;
}

KDSoapValue TNS__FreeBusyResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("FreeBusyResponseType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueResponseMessage(d_ptr->mResponseMessage.serialize(QString::fromLatin1("ResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResponseMessage.setQualified(true);
    if (!_valueResponseMessage.isNil())
    args.append(_valueResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFreeBusyView(d_ptr->mFreeBusyView.serialize(QString::fromLatin1("FreeBusyView")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFreeBusyView.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFreeBusyView.setQualified(true);
    if (!_valueFreeBusyView.isNil())
    args.append(_valueFreeBusyView);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__FreeBusyResponseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FreeBusyView")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFreeBusyView.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__FreeBusyResponseType::TNS__FreeBusyResponseType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__FreeBusyResponseType::~TNS__FreeBusyResponseType()
{
}

TNS__FreeBusyResponseType::TNS__FreeBusyResponseType( const TNS__FreeBusyResponseType& other )
    : d_ptr( other.d_ptr )
{
}

TNS__FreeBusyResponseType&  TNS__FreeBusyResponseType::operator=( const TNS__FreeBusyResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SerializableTimeZone::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mBias;
    T__SerializableTimeZoneTime mStandardTime;
    T__SerializableTimeZoneTime mDaylightTime;
};

T__SerializableTimeZone::PrivateDPtr::PrivateDPtr()
    : mBias(0)
{
}


void T__SerializableTimeZone::setBias( int bias )
{
    d_ptr->mBias = bias;
}

int T__SerializableTimeZone::bias() const
{
    return d_ptr->mBias;
}

void T__SerializableTimeZone::setStandardTime( const T__SerializableTimeZoneTime& standardTime )
{
    d_ptr->mStandardTime = standardTime;
}

T__SerializableTimeZoneTime T__SerializableTimeZone::standardTime() const
{
    return d_ptr->mStandardTime;
}

void T__SerializableTimeZone::setDaylightTime( const T__SerializableTimeZoneTime& daylightTime )
{
    d_ptr->mDaylightTime = daylightTime;
}

T__SerializableTimeZoneTime T__SerializableTimeZone::daylightTime() const
{
    return d_ptr->mDaylightTime;
}

KDSoapValue T__SerializableTimeZone::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SerializableTimeZone"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueBias(QString::fromLatin1("Bias"), QVariant::fromValue(d_ptr->mBias), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueBias.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBias.setQualified(true);
    if (!_valueBias.isNil())
    args.append(_valueBias);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStandardTime(d_ptr->mStandardTime.serialize(QString::fromLatin1("StandardTime")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueStandardTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStandardTime.setQualified(true);
    if (!_valueStandardTime.isNil())
    args.append(_valueStandardTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDaylightTime(d_ptr->mDaylightTime.serialize(QString::fromLatin1("DaylightTime")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDaylightTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDaylightTime.setQualified(true);
    if (!_valueDaylightTime.isNil())
    args.append(_valueDaylightTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SerializableTimeZone::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Bias")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBias = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("StandardTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStandardTime.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DaylightTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDaylightTime.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SerializableTimeZone::T__SerializableTimeZone()
    : d_ptr(new PrivateDPtr)
{
}

T__SerializableTimeZone::~T__SerializableTimeZone()
{
}

T__SerializableTimeZone::T__SerializableTimeZone( const T__SerializableTimeZone& other )
    : d_ptr( other.d_ptr )
{
}

T__SerializableTimeZone&  T__SerializableTimeZone::operator=( const T__SerializableTimeZone& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__BaseGroupByType::PrivateDPtr : public QSharedData
{
public:
    T__SortDirectionType mOrder;
};

void T__BaseGroupByType::setOrder( const T__SortDirectionType& order )
{
    d_ptr->mOrder = order;
}

T__SortDirectionType T__BaseGroupByType::order() const
{
    return d_ptr->mOrder;
}

KDSoapValue T__BaseGroupByType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BaseGroupByType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList attribs;
    KDSoapValue _valueOrder(QString::fromLatin1("Order"), d_ptr->mOrder.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SortDirectionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueOrder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueOrder.isNil())
    attribs.append(_valueOrder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__BaseGroupByType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Order")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOrder.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__BaseGroupByType::T__BaseGroupByType()
    : d_ptr(new PrivateDPtr)
{
}

T__BaseGroupByType::~T__BaseGroupByType()
{
}

T__BaseGroupByType::T__BaseGroupByType( const T__BaseGroupByType& other )
    : d_ptr( other.d_ptr )
{
}

T__BaseGroupByType&  T__BaseGroupByType::operator=( const T__BaseGroupByType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__TaskRecurrenceType::PrivateDPtr : public QSharedData
{
public:
    T__RelativeYearlyRecurrencePatternType mRelativeYearlyRecurrence;
    T__AbsoluteYearlyRecurrencePatternType mAbsoluteYearlyRecurrence;
    T__RelativeMonthlyRecurrencePatternType mRelativeMonthlyRecurrence;
    T__AbsoluteMonthlyRecurrencePatternType mAbsoluteMonthlyRecurrence;
    T__WeeklyRecurrencePatternType mWeeklyRecurrence;
    T__DailyRecurrencePatternType mDailyRecurrence;
    T__DailyRegeneratingPatternType mDailyRegeneration;
    T__WeeklyRegeneratingPatternType mWeeklyRegeneration;
    T__MonthlyRegeneratingPatternType mMonthlyRegeneration;
    T__YearlyRegeneratingPatternType mYearlyRegeneration;
    T__NoEndRecurrenceRangeType mNoEndRecurrence;
    T__EndDateRecurrenceRangeType mEndDateRecurrence;
    T__NumberedRecurrenceRangeType mNumberedRecurrence;
};

void T__TaskRecurrenceType::setRelativeYearlyRecurrence( const T__RelativeYearlyRecurrencePatternType& relativeYearlyRecurrence )
{
    d_ptr->mRelativeYearlyRecurrence = relativeYearlyRecurrence;
}

T__RelativeYearlyRecurrencePatternType T__TaskRecurrenceType::relativeYearlyRecurrence() const
{
    return d_ptr->mRelativeYearlyRecurrence;
}

void T__TaskRecurrenceType::setAbsoluteYearlyRecurrence( const T__AbsoluteYearlyRecurrencePatternType& absoluteYearlyRecurrence )
{
    d_ptr->mAbsoluteYearlyRecurrence = absoluteYearlyRecurrence;
}

T__AbsoluteYearlyRecurrencePatternType T__TaskRecurrenceType::absoluteYearlyRecurrence() const
{
    return d_ptr->mAbsoluteYearlyRecurrence;
}

void T__TaskRecurrenceType::setRelativeMonthlyRecurrence( const T__RelativeMonthlyRecurrencePatternType& relativeMonthlyRecurrence )
{
    d_ptr->mRelativeMonthlyRecurrence = relativeMonthlyRecurrence;
}

T__RelativeMonthlyRecurrencePatternType T__TaskRecurrenceType::relativeMonthlyRecurrence() const
{
    return d_ptr->mRelativeMonthlyRecurrence;
}

void T__TaskRecurrenceType::setAbsoluteMonthlyRecurrence( const T__AbsoluteMonthlyRecurrencePatternType& absoluteMonthlyRecurrence )
{
    d_ptr->mAbsoluteMonthlyRecurrence = absoluteMonthlyRecurrence;
}

T__AbsoluteMonthlyRecurrencePatternType T__TaskRecurrenceType::absoluteMonthlyRecurrence() const
{
    return d_ptr->mAbsoluteMonthlyRecurrence;
}

void T__TaskRecurrenceType::setWeeklyRecurrence( const T__WeeklyRecurrencePatternType& weeklyRecurrence )
{
    d_ptr->mWeeklyRecurrence = weeklyRecurrence;
}

T__WeeklyRecurrencePatternType T__TaskRecurrenceType::weeklyRecurrence() const
{
    return d_ptr->mWeeklyRecurrence;
}

void T__TaskRecurrenceType::setDailyRecurrence( const T__DailyRecurrencePatternType& dailyRecurrence )
{
    d_ptr->mDailyRecurrence = dailyRecurrence;
}

T__DailyRecurrencePatternType T__TaskRecurrenceType::dailyRecurrence() const
{
    return d_ptr->mDailyRecurrence;
}

void T__TaskRecurrenceType::setDailyRegeneration( const T__DailyRegeneratingPatternType& dailyRegeneration )
{
    d_ptr->mDailyRegeneration = dailyRegeneration;
}

T__DailyRegeneratingPatternType T__TaskRecurrenceType::dailyRegeneration() const
{
    return d_ptr->mDailyRegeneration;
}

void T__TaskRecurrenceType::setWeeklyRegeneration( const T__WeeklyRegeneratingPatternType& weeklyRegeneration )
{
    d_ptr->mWeeklyRegeneration = weeklyRegeneration;
}

T__WeeklyRegeneratingPatternType T__TaskRecurrenceType::weeklyRegeneration() const
{
    return d_ptr->mWeeklyRegeneration;
}

void T__TaskRecurrenceType::setMonthlyRegeneration( const T__MonthlyRegeneratingPatternType& monthlyRegeneration )
{
    d_ptr->mMonthlyRegeneration = monthlyRegeneration;
}

T__MonthlyRegeneratingPatternType T__TaskRecurrenceType::monthlyRegeneration() const
{
    return d_ptr->mMonthlyRegeneration;
}

void T__TaskRecurrenceType::setYearlyRegeneration( const T__YearlyRegeneratingPatternType& yearlyRegeneration )
{
    d_ptr->mYearlyRegeneration = yearlyRegeneration;
}

T__YearlyRegeneratingPatternType T__TaskRecurrenceType::yearlyRegeneration() const
{
    return d_ptr->mYearlyRegeneration;
}

void T__TaskRecurrenceType::setNoEndRecurrence( const T__NoEndRecurrenceRangeType& noEndRecurrence )
{
    d_ptr->mNoEndRecurrence = noEndRecurrence;
}

T__NoEndRecurrenceRangeType T__TaskRecurrenceType::noEndRecurrence() const
{
    return d_ptr->mNoEndRecurrence;
}

void T__TaskRecurrenceType::setEndDateRecurrence( const T__EndDateRecurrenceRangeType& endDateRecurrence )
{
    d_ptr->mEndDateRecurrence = endDateRecurrence;
}

T__EndDateRecurrenceRangeType T__TaskRecurrenceType::endDateRecurrence() const
{
    return d_ptr->mEndDateRecurrence;
}

void T__TaskRecurrenceType::setNumberedRecurrence( const T__NumberedRecurrenceRangeType& numberedRecurrence )
{
    d_ptr->mNumberedRecurrence = numberedRecurrence;
}

T__NumberedRecurrenceRangeType T__TaskRecurrenceType::numberedRecurrence() const
{
    return d_ptr->mNumberedRecurrence;
}

KDSoapValue T__TaskRecurrenceType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TaskRecurrenceType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueRelativeYearlyRecurrence(d_ptr->mRelativeYearlyRecurrence.serialize(QString::fromLatin1("RelativeYearlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRelativeYearlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRelativeYearlyRecurrence.setQualified(true);
    if (!_valueRelativeYearlyRecurrence.isNil())
    args.append(_valueRelativeYearlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAbsoluteYearlyRecurrence(d_ptr->mAbsoluteYearlyRecurrence.serialize(QString::fromLatin1("AbsoluteYearlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAbsoluteYearlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAbsoluteYearlyRecurrence.setQualified(true);
    if (!_valueAbsoluteYearlyRecurrence.isNil())
    args.append(_valueAbsoluteYearlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRelativeMonthlyRecurrence(d_ptr->mRelativeMonthlyRecurrence.serialize(QString::fromLatin1("RelativeMonthlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRelativeMonthlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRelativeMonthlyRecurrence.setQualified(true);
    if (!_valueRelativeMonthlyRecurrence.isNil())
    args.append(_valueRelativeMonthlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAbsoluteMonthlyRecurrence(d_ptr->mAbsoluteMonthlyRecurrence.serialize(QString::fromLatin1("AbsoluteMonthlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAbsoluteMonthlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAbsoluteMonthlyRecurrence.setQualified(true);
    if (!_valueAbsoluteMonthlyRecurrence.isNil())
    args.append(_valueAbsoluteMonthlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWeeklyRecurrence(d_ptr->mWeeklyRecurrence.serialize(QString::fromLatin1("WeeklyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueWeeklyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWeeklyRecurrence.setQualified(true);
    if (!_valueWeeklyRecurrence.isNil())
    args.append(_valueWeeklyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDailyRecurrence(d_ptr->mDailyRecurrence.serialize(QString::fromLatin1("DailyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDailyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDailyRecurrence.setQualified(true);
    if (!_valueDailyRecurrence.isNil())
    args.append(_valueDailyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDailyRegeneration(d_ptr->mDailyRegeneration.serialize(QString::fromLatin1("DailyRegeneration")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDailyRegeneration.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDailyRegeneration.setQualified(true);
    if (!_valueDailyRegeneration.isNil())
    args.append(_valueDailyRegeneration);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWeeklyRegeneration(d_ptr->mWeeklyRegeneration.serialize(QString::fromLatin1("WeeklyRegeneration")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueWeeklyRegeneration.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWeeklyRegeneration.setQualified(true);
    if (!_valueWeeklyRegeneration.isNil())
    args.append(_valueWeeklyRegeneration);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMonthlyRegeneration(d_ptr->mMonthlyRegeneration.serialize(QString::fromLatin1("MonthlyRegeneration")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMonthlyRegeneration.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMonthlyRegeneration.setQualified(true);
    if (!_valueMonthlyRegeneration.isNil())
    args.append(_valueMonthlyRegeneration);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueYearlyRegeneration(d_ptr->mYearlyRegeneration.serialize(QString::fromLatin1("YearlyRegeneration")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueYearlyRegeneration.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueYearlyRegeneration.setQualified(true);
    if (!_valueYearlyRegeneration.isNil())
    args.append(_valueYearlyRegeneration);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNoEndRecurrence(d_ptr->mNoEndRecurrence.serialize(QString::fromLatin1("NoEndRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueNoEndRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNoEndRecurrence.setQualified(true);
    if (!_valueNoEndRecurrence.isNil())
    args.append(_valueNoEndRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEndDateRecurrence(d_ptr->mEndDateRecurrence.serialize(QString::fromLatin1("EndDateRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueEndDateRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEndDateRecurrence.setQualified(true);
    if (!_valueEndDateRecurrence.isNil())
    args.append(_valueEndDateRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNumberedRecurrence(d_ptr->mNumberedRecurrence.serialize(QString::fromLatin1("NumberedRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueNumberedRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNumberedRecurrence.setQualified(true);
    if (!_valueNumberedRecurrence.isNil())
    args.append(_valueNumberedRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__TaskRecurrenceType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("RelativeYearlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRelativeYearlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AbsoluteYearlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAbsoluteYearlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("RelativeMonthlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRelativeMonthlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AbsoluteMonthlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAbsoluteMonthlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("WeeklyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWeeklyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DailyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDailyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DailyRegeneration")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDailyRegeneration.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("WeeklyRegeneration")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWeeklyRegeneration.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MonthlyRegeneration")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMonthlyRegeneration.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("YearlyRegeneration")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mYearlyRegeneration.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("NoEndRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNoEndRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("EndDateRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEndDateRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("NumberedRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNumberedRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__TaskRecurrenceType::T__TaskRecurrenceType()
    : d_ptr(new PrivateDPtr)
{
}

T__TaskRecurrenceType::~T__TaskRecurrenceType()
{
}

T__TaskRecurrenceType::T__TaskRecurrenceType( const T__TaskRecurrenceType& other )
    : d_ptr( other.d_ptr )
{
}

T__TaskRecurrenceType&  T__TaskRecurrenceType::operator=( const T__TaskRecurrenceType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__AttachmentType::PrivateDPtr : public QSharedData
{
public:
    T__AttachmentIdType mAttachmentId;
    QString mName;
    QString mContentType;
    QString mContentId;
    QString mContentLocation;
};

void T__AttachmentType::setAttachmentId( const T__AttachmentIdType& attachmentId )
{
    d_ptr->mAttachmentId = attachmentId;
}

T__AttachmentIdType T__AttachmentType::attachmentId() const
{
    return d_ptr->mAttachmentId;
}

void T__AttachmentType::setName( const QString& name )
{
    d_ptr->mName = name;
}

QString T__AttachmentType::name() const
{
    return d_ptr->mName;
}

void T__AttachmentType::setContentType( const QString& contentType )
{
    d_ptr->mContentType = contentType;
}

QString T__AttachmentType::contentType() const
{
    return d_ptr->mContentType;
}

void T__AttachmentType::setContentId( const QString& contentId )
{
    d_ptr->mContentId = contentId;
}

QString T__AttachmentType::contentId() const
{
    return d_ptr->mContentId;
}

void T__AttachmentType::setContentLocation( const QString& contentLocation )
{
    d_ptr->mContentLocation = contentLocation;
}

QString T__AttachmentType::contentLocation() const
{
    return d_ptr->mContentLocation;
}

KDSoapValue T__AttachmentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AttachmentType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueAttachmentId(d_ptr->mAttachmentId.serialize(QString::fromLatin1("AttachmentId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttachmentId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAttachmentId.setQualified(true);
    if (!_valueAttachmentId.isNil())
    args.append(_valueAttachmentId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueName.setQualified(true);
    if (!_valueName.isNil())
    args.append(_valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContentType(QString::fromLatin1("ContentType"), QVariant::fromValue(d_ptr->mContentType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueContentType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContentType.setQualified(true);
    if (!_valueContentType.isNil())
    args.append(_valueContentType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContentId(QString::fromLatin1("ContentId"), QVariant::fromValue(d_ptr->mContentId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueContentId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContentId.setQualified(true);
    if (!_valueContentId.isNil())
    args.append(_valueContentId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContentLocation(QString::fromLatin1("ContentLocation"), QVariant::fromValue(d_ptr->mContentLocation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueContentLocation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContentLocation.setQualified(true);
    if (!_valueContentLocation.isNil())
    args.append(_valueContentLocation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__AttachmentType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AttachmentId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttachmentId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Name")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ContentType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContentType = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ContentId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContentId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ContentLocation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContentLocation = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__AttachmentType::T__AttachmentType()
    : d_ptr(new PrivateDPtr)
{
}

T__AttachmentType::~T__AttachmentType()
{
}

T__AttachmentType::T__AttachmentType( const T__AttachmentType& other )
    : d_ptr( other.d_ptr )
{
}

T__AttachmentType&  T__AttachmentType::operator=( const T__AttachmentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__AttachmentResponseShapeType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mIncludeMimeContent;
    T__BodyTypeResponseType mBodyType;
    T__NonEmptyArrayOfPathsToElementType mAdditionalProperties;
};

T__AttachmentResponseShapeType::PrivateDPtr::PrivateDPtr()
    : mIncludeMimeContent(false)
{
}


void T__AttachmentResponseShapeType::setIncludeMimeContent( bool includeMimeContent )
{
    d_ptr->mIncludeMimeContent = includeMimeContent;
}

bool T__AttachmentResponseShapeType::includeMimeContent() const
{
    return d_ptr->mIncludeMimeContent;
}

void T__AttachmentResponseShapeType::setBodyType( const T__BodyTypeResponseType& bodyType )
{
    d_ptr->mBodyType = bodyType;
}

T__BodyTypeResponseType T__AttachmentResponseShapeType::bodyType() const
{
    return d_ptr->mBodyType;
}

void T__AttachmentResponseShapeType::setAdditionalProperties( const T__NonEmptyArrayOfPathsToElementType& additionalProperties )
{
    d_ptr->mAdditionalProperties = additionalProperties;
}

T__NonEmptyArrayOfPathsToElementType T__AttachmentResponseShapeType::additionalProperties() const
{
    return d_ptr->mAdditionalProperties;
}

KDSoapValue T__AttachmentResponseShapeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AttachmentResponseShapeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueIncludeMimeContent(QString::fromLatin1("IncludeMimeContent"), QVariant::fromValue(d_ptr->mIncludeMimeContent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIncludeMimeContent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIncludeMimeContent.setQualified(true);
    if (!_valueIncludeMimeContent.isNil())
    args.append(_valueIncludeMimeContent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBodyType(QString::fromLatin1("BodyType"), d_ptr->mBodyType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BodyTypeResponseType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueBodyType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBodyType.setQualified(true);
    if (!_valueBodyType.isNil())
    args.append(_valueBodyType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAdditionalProperties(d_ptr->mAdditionalProperties.serialize(QString::fromLatin1("AdditionalProperties")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAdditionalProperties.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAdditionalProperties.setQualified(true);
    if (!_valueAdditionalProperties.isNil())
    args.append(_valueAdditionalProperties);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__AttachmentResponseShapeType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("IncludeMimeContent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIncludeMimeContent = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("BodyType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBodyType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("AdditionalProperties")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAdditionalProperties.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__AttachmentResponseShapeType::T__AttachmentResponseShapeType()
    : d_ptr(new PrivateDPtr)
{
}

T__AttachmentResponseShapeType::~T__AttachmentResponseShapeType()
{
}

T__AttachmentResponseShapeType::T__AttachmentResponseShapeType( const T__AttachmentResponseShapeType& other )
    : d_ptr( other.d_ptr )
{
}

T__AttachmentResponseShapeType&  T__AttachmentResponseShapeType::operator=( const T__AttachmentResponseShapeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__GroupedItemsType::PrivateDPtr : public QSharedData
{
public:
    QString mGroupIndex;
    T__ArrayOfRealItemsType mItems;
};

void T__GroupedItemsType::setGroupIndex( const QString& groupIndex )
{
    d_ptr->mGroupIndex = groupIndex;
}

QString T__GroupedItemsType::groupIndex() const
{
    return d_ptr->mGroupIndex;
}

void T__GroupedItemsType::setItems( const T__ArrayOfRealItemsType& items )
{
    d_ptr->mItems = items;
}

T__ArrayOfRealItemsType T__GroupedItemsType::items() const
{
    return d_ptr->mItems;
}

KDSoapValue T__GroupedItemsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("GroupedItemsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueGroupIndex(QString::fromLatin1("GroupIndex"), QVariant::fromValue(d_ptr->mGroupIndex), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueGroupIndex.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueGroupIndex.setQualified(true);
    if (!_valueGroupIndex.isNil())
    args.append(_valueGroupIndex);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItems(d_ptr->mItems.serialize(QString::fromLatin1("Items")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItems.setQualified(true);
    if (!_valueItems.isNil())
    args.append(_valueItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__GroupedItemsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GroupIndex")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGroupIndex = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Items")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItems.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__GroupedItemsType::T__GroupedItemsType()
    : d_ptr(new PrivateDPtr)
{
}

T__GroupedItemsType::~T__GroupedItemsType()
{
}

T__GroupedItemsType::T__GroupedItemsType( const T__GroupedItemsType& other )
    : d_ptr( other.d_ptr )
{
}

T__GroupedItemsType&  T__GroupedItemsType::operator=( const T__GroupedItemsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfFieldOrdersType::PrivateDPtr : public QSharedData
{
public:
    QList<T__FieldOrderType> mFieldOrder;
};

void T__NonEmptyArrayOfFieldOrdersType::setFieldOrder( const QList<T__FieldOrderType>& fieldOrder )
{
    d_ptr->mFieldOrder = fieldOrder;
}

QList<T__FieldOrderType> T__NonEmptyArrayOfFieldOrdersType::fieldOrder() const
{
    return d_ptr->mFieldOrder;
}

KDSoapValue T__NonEmptyArrayOfFieldOrdersType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfFieldOrdersType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mFieldOrder.count(); ++i) {
        KDSoapValue _valueFieldOrder(d_ptr->mFieldOrder.at(i).serialize(QString::fromLatin1("FieldOrder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFieldOrder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueFieldOrder.setQualified(true);
        if (!_valueFieldOrder.isNil())
        args.append(_valueFieldOrder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfFieldOrdersType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FieldOrder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__FieldOrderType mFieldOrderTemp;
            mFieldOrderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFieldOrder.append(mFieldOrderTemp);
        }
    }
}

T__NonEmptyArrayOfFieldOrdersType::T__NonEmptyArrayOfFieldOrdersType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfFieldOrdersType::~T__NonEmptyArrayOfFieldOrdersType()
{
}

T__NonEmptyArrayOfFieldOrdersType::T__NonEmptyArrayOfFieldOrdersType( const T__NonEmptyArrayOfFieldOrdersType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfFieldOrdersType&  T__NonEmptyArrayOfFieldOrdersType::operator=( const T__NonEmptyArrayOfFieldOrdersType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfFoldersType::PrivateDPtr : public QSharedData
{
public:
    QList<T__FolderType> mFolder;
    QList<T__CalendarFolderType> mCalendarFolder;
    QList<T__ContactsFolderType> mContactsFolder;
    QList<T__SearchFolderType> mSearchFolder;
    QList<T__TasksFolderType> mTasksFolder;
};

void T__ArrayOfFoldersType::setFolder( const QList<T__FolderType>& folder )
{
    d_ptr->mFolder = folder;
}

QList<T__FolderType> T__ArrayOfFoldersType::folder() const
{
    return d_ptr->mFolder;
}

void T__ArrayOfFoldersType::setCalendarFolder( const QList<T__CalendarFolderType>& calendarFolder )
{
    d_ptr->mCalendarFolder = calendarFolder;
}

QList<T__CalendarFolderType> T__ArrayOfFoldersType::calendarFolder() const
{
    return d_ptr->mCalendarFolder;
}

void T__ArrayOfFoldersType::setContactsFolder( const QList<T__ContactsFolderType>& contactsFolder )
{
    d_ptr->mContactsFolder = contactsFolder;
}

QList<T__ContactsFolderType> T__ArrayOfFoldersType::contactsFolder() const
{
    return d_ptr->mContactsFolder;
}

void T__ArrayOfFoldersType::setSearchFolder( const QList<T__SearchFolderType>& searchFolder )
{
    d_ptr->mSearchFolder = searchFolder;
}

QList<T__SearchFolderType> T__ArrayOfFoldersType::searchFolder() const
{
    return d_ptr->mSearchFolder;
}

void T__ArrayOfFoldersType::setTasksFolder( const QList<T__TasksFolderType>& tasksFolder )
{
    d_ptr->mTasksFolder = tasksFolder;
}

QList<T__TasksFolderType> T__ArrayOfFoldersType::tasksFolder() const
{
    return d_ptr->mTasksFolder;
}

KDSoapValue T__ArrayOfFoldersType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfFoldersType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mFolder.count(); ++i) {
        KDSoapValue _valueFolder(d_ptr->mFolder.at(i).serialize(QString::fromLatin1("Folder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueFolder.setQualified(true);
        if (!_valueFolder.isNil())
        args.append(_valueFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mCalendarFolder.count(); ++i) {
        KDSoapValue _valueCalendarFolder(d_ptr->mCalendarFolder.at(i).serialize(QString::fromLatin1("CalendarFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCalendarFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCalendarFolder.setQualified(true);
        if (!_valueCalendarFolder.isNil())
        args.append(_valueCalendarFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mContactsFolder.count(); ++i) {
        KDSoapValue _valueContactsFolder(d_ptr->mContactsFolder.at(i).serialize(QString::fromLatin1("ContactsFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueContactsFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueContactsFolder.setQualified(true);
        if (!_valueContactsFolder.isNil())
        args.append(_valueContactsFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSearchFolder.count(); ++i) {
        KDSoapValue _valueSearchFolder(d_ptr->mSearchFolder.at(i).serialize(QString::fromLatin1("SearchFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSearchFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSearchFolder.setQualified(true);
        if (!_valueSearchFolder.isNil())
        args.append(_valueSearchFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mTasksFolder.count(); ++i) {
        KDSoapValue _valueTasksFolder(d_ptr->mTasksFolder.at(i).serialize(QString::fromLatin1("TasksFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueTasksFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueTasksFolder.setQualified(true);
        if (!_valueTasksFolder.isNil())
        args.append(_valueTasksFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfFoldersType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Folder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__FolderType mFolderTemp;
            mFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mFolder.append(mFolderTemp);
        }
        else if (name == QLatin1String("CalendarFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__CalendarFolderType mCalendarFolderTemp;
            mCalendarFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCalendarFolder.append(mCalendarFolderTemp);
        }
        else if (name == QLatin1String("ContactsFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ContactsFolderType mContactsFolderTemp;
            mContactsFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mContactsFolder.append(mContactsFolderTemp);
        }
        else if (name == QLatin1String("SearchFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SearchFolderType mSearchFolderTemp;
            mSearchFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSearchFolder.append(mSearchFolderTemp);
        }
        else if (name == QLatin1String("TasksFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__TasksFolderType mTasksFolderTemp;
            mTasksFolderTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mTasksFolder.append(mTasksFolderTemp);
        }
    }
}

T__ArrayOfFoldersType::T__ArrayOfFoldersType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfFoldersType::~T__ArrayOfFoldersType()
{
}

T__ArrayOfFoldersType::T__ArrayOfFoldersType( const T__ArrayOfFoldersType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfFoldersType&  T__ArrayOfFoldersType::operator=( const T__ArrayOfFoldersType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__BaseResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    TNS__ArrayOfResponseMessagesType mResponseMessages;
};

void TNS__BaseResponseMessageType::setResponseMessages( const TNS__ArrayOfResponseMessagesType& responseMessages )
{
    d_ptr->mResponseMessages = responseMessages;
}

TNS__ArrayOfResponseMessagesType TNS__BaseResponseMessageType::responseMessages() const
{
    return d_ptr->mResponseMessages;
}

KDSoapValue TNS__BaseResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("BaseResponseMessageType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueResponseMessages(d_ptr->mResponseMessages.serialize(QString::fromLatin1("ResponseMessages")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResponseMessages.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResponseMessages.setQualified(true);
    if (!_valueResponseMessages.isNil())
    args.append(_valueResponseMessages);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__BaseResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ResponseMessages")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseMessages.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__BaseResponseMessageType::TNS__BaseResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__BaseResponseMessageType::~TNS__BaseResponseMessageType()
{
}

TNS__BaseResponseMessageType::TNS__BaseResponseMessageType( const TNS__BaseResponseMessageType& other )
    : d_ptr( other.d_ptr )
{
}

TNS__BaseResponseMessageType&  TNS__BaseResponseMessageType::operator=( const TNS__BaseResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ManagedFolderInformationType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mCanDelete;
    bool mCanRenameOrMove;
    bool mMustDisplayComment;
    bool mHasQuota;
    bool mIsManagedFoldersRoot;
    QString mManagedFolderId;
    QString mComment;
    int mStorageQuota;
    int mFolderSize;
    QString mHomePage;
};

T__ManagedFolderInformationType::PrivateDPtr::PrivateDPtr()
    : mCanDelete(false), mCanRenameOrMove(false), mMustDisplayComment(false), mHasQuota(false), mIsManagedFoldersRoot(false), mStorageQuota(0), mFolderSize(0)
{
}


void T__ManagedFolderInformationType::setCanDelete( bool canDelete )
{
    d_ptr->mCanDelete = canDelete;
}

bool T__ManagedFolderInformationType::canDelete() const
{
    return d_ptr->mCanDelete;
}

void T__ManagedFolderInformationType::setCanRenameOrMove( bool canRenameOrMove )
{
    d_ptr->mCanRenameOrMove = canRenameOrMove;
}

bool T__ManagedFolderInformationType::canRenameOrMove() const
{
    return d_ptr->mCanRenameOrMove;
}

void T__ManagedFolderInformationType::setMustDisplayComment( bool mustDisplayComment )
{
    d_ptr->mMustDisplayComment = mustDisplayComment;
}

bool T__ManagedFolderInformationType::mustDisplayComment() const
{
    return d_ptr->mMustDisplayComment;
}

void T__ManagedFolderInformationType::setHasQuota( bool hasQuota )
{
    d_ptr->mHasQuota = hasQuota;
}

bool T__ManagedFolderInformationType::hasQuota() const
{
    return d_ptr->mHasQuota;
}

void T__ManagedFolderInformationType::setIsManagedFoldersRoot( bool isManagedFoldersRoot )
{
    d_ptr->mIsManagedFoldersRoot = isManagedFoldersRoot;
}

bool T__ManagedFolderInformationType::isManagedFoldersRoot() const
{
    return d_ptr->mIsManagedFoldersRoot;
}

void T__ManagedFolderInformationType::setManagedFolderId( const QString& managedFolderId )
{
    d_ptr->mManagedFolderId = managedFolderId;
}

QString T__ManagedFolderInformationType::managedFolderId() const
{
    return d_ptr->mManagedFolderId;
}

void T__ManagedFolderInformationType::setComment( const QString& comment )
{
    d_ptr->mComment = comment;
}

QString T__ManagedFolderInformationType::comment() const
{
    return d_ptr->mComment;
}

void T__ManagedFolderInformationType::setStorageQuota( int storageQuota )
{
    d_ptr->mStorageQuota = storageQuota;
}

int T__ManagedFolderInformationType::storageQuota() const
{
    return d_ptr->mStorageQuota;
}

void T__ManagedFolderInformationType::setFolderSize( int folderSize )
{
    d_ptr->mFolderSize = folderSize;
}

int T__ManagedFolderInformationType::folderSize() const
{
    return d_ptr->mFolderSize;
}

void T__ManagedFolderInformationType::setHomePage( const QString& homePage )
{
    d_ptr->mHomePage = homePage;
}

QString T__ManagedFolderInformationType::homePage() const
{
    return d_ptr->mHomePage;
}

KDSoapValue T__ManagedFolderInformationType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ManagedFolderInformationType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueCanDelete(QString::fromLatin1("CanDelete"), QVariant::fromValue(d_ptr->mCanDelete), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCanDelete.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCanDelete.setQualified(true);
    if (!_valueCanDelete.isNil())
    args.append(_valueCanDelete);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCanRenameOrMove(QString::fromLatin1("CanRenameOrMove"), QVariant::fromValue(d_ptr->mCanRenameOrMove), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCanRenameOrMove.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCanRenameOrMove.setQualified(true);
    if (!_valueCanRenameOrMove.isNil())
    args.append(_valueCanRenameOrMove);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMustDisplayComment(QString::fromLatin1("MustDisplayComment"), QVariant::fromValue(d_ptr->mMustDisplayComment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMustDisplayComment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMustDisplayComment.setQualified(true);
    if (!_valueMustDisplayComment.isNil())
    args.append(_valueMustDisplayComment);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueHasQuota(QString::fromLatin1("HasQuota"), QVariant::fromValue(d_ptr->mHasQuota), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueHasQuota.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueHasQuota.setQualified(true);
    if (!_valueHasQuota.isNil())
    args.append(_valueHasQuota);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsManagedFoldersRoot(QString::fromLatin1("IsManagedFoldersRoot"), QVariant::fromValue(d_ptr->mIsManagedFoldersRoot), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsManagedFoldersRoot.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsManagedFoldersRoot.setQualified(true);
    if (!_valueIsManagedFoldersRoot.isNil())
    args.append(_valueIsManagedFoldersRoot);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueManagedFolderId(QString::fromLatin1("ManagedFolderId"), QVariant::fromValue(d_ptr->mManagedFolderId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueManagedFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueManagedFolderId.setQualified(true);
    if (!_valueManagedFolderId.isNil())
    args.append(_valueManagedFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueComment(QString::fromLatin1("Comment"), QVariant::fromValue(d_ptr->mComment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueComment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueComment.setQualified(true);
    if (!_valueComment.isNil())
    args.append(_valueComment);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStorageQuota(QString::fromLatin1("StorageQuota"), QVariant::fromValue(d_ptr->mStorageQuota), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStorageQuota.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStorageQuota.setQualified(true);
    if (!_valueStorageQuota.isNil())
    args.append(_valueStorageQuota);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFolderSize(QString::fromLatin1("FolderSize"), QVariant::fromValue(d_ptr->mFolderSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFolderSize.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolderSize.setQualified(true);
    if (!_valueFolderSize.isNil())
    args.append(_valueFolderSize);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueHomePage(QString::fromLatin1("HomePage"), QVariant::fromValue(d_ptr->mHomePage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueHomePage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueHomePage.setQualified(true);
    if (!_valueHomePage.isNil())
    args.append(_valueHomePage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ManagedFolderInformationType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CanDelete")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCanDelete = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CanRenameOrMove")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCanRenameOrMove = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MustDisplayComment")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMustDisplayComment = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("HasQuota")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mHasQuota = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsManagedFoldersRoot")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsManagedFoldersRoot = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ManagedFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mManagedFolderId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Comment")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mComment = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("StorageQuota")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStorageQuota = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("FolderSize")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderSize = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("HomePage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mHomePage = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ManagedFolderInformationType::T__ManagedFolderInformationType()
    : d_ptr(new PrivateDPtr)
{
}

T__ManagedFolderInformationType::~T__ManagedFolderInformationType()
{
}

T__ManagedFolderInformationType::T__ManagedFolderInformationType( const T__ManagedFolderInformationType& other )
    : d_ptr( other.d_ptr )
{
}

T__ManagedFolderInformationType&  T__ManagedFolderInformationType::operator=( const T__ManagedFolderInformationType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue T__BaseItemIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BaseItemIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    return mainValue;
}

void T__BaseItemIdType::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__BaseItemIdType::T__BaseItemIdType()
{
}

T__BaseItemIdType::~T__BaseItemIdType()
{
}


class T__ImAddressDictionaryType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ImAddressDictionaryEntryType> mEntry;
};

void T__ImAddressDictionaryType::setEntry( const QList<T__ImAddressDictionaryEntryType>& entry )
{
    d_ptr->mEntry = entry;
}

QList<T__ImAddressDictionaryEntryType> T__ImAddressDictionaryType::entry() const
{
    return d_ptr->mEntry;
}

KDSoapValue T__ImAddressDictionaryType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ImAddressDictionaryType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mEntry.count(); ++i) {
        KDSoapValue _valueEntry(d_ptr->mEntry.at(i).serialize(QString::fromLatin1("Entry")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueEntry.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueEntry.setQualified(true);
        if (!_valueEntry.isNil())
        args.append(_valueEntry);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ImAddressDictionaryType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Entry")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ImAddressDictionaryEntryType mEntryTemp;
            mEntryTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mEntry.append(mEntryTemp);
        }
    }
}

T__ImAddressDictionaryType::T__ImAddressDictionaryType()
    : d_ptr(new PrivateDPtr)
{
}

T__ImAddressDictionaryType::~T__ImAddressDictionaryType()
{
}

T__ImAddressDictionaryType::T__ImAddressDictionaryType( const T__ImAddressDictionaryType& other )
    : d_ptr( other.d_ptr )
{
}

T__ImAddressDictionaryType&  T__ImAddressDictionaryType::operator=( const T__ImAddressDictionaryType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ExchangeImpersonationType::PrivateDPtr : public QSharedData
{
public:
    T__ConnectingSIDType mConnectingSID;
};

void T__ExchangeImpersonationType::setConnectingSID( const T__ConnectingSIDType& connectingSID )
{
    d_ptr->mConnectingSID = connectingSID;
}

T__ConnectingSIDType T__ExchangeImpersonationType::connectingSID() const
{
    return d_ptr->mConnectingSID;
}

KDSoapValue T__ExchangeImpersonationType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExchangeImpersonationType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueConnectingSID(d_ptr->mConnectingSID.serialize(QString::fromLatin1("ConnectingSID")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConnectingSID.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConnectingSID.setQualified(true);
    if (!_valueConnectingSID.isNil())
    args.append(_valueConnectingSID);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ExchangeImpersonationType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ConnectingSID")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConnectingSID.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ExchangeImpersonationType::T__ExchangeImpersonationType()
    : d_ptr(new PrivateDPtr)
{
}

T__ExchangeImpersonationType::~T__ExchangeImpersonationType()
{
}

T__ExchangeImpersonationType::T__ExchangeImpersonationType( const T__ExchangeImpersonationType& other )
    : d_ptr( other.d_ptr )
{
}

T__ExchangeImpersonationType&  T__ExchangeImpersonationType::operator=( const T__ExchangeImpersonationType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ChangeDescriptionType::PrivateDPtr : public QSharedData
{
public:
    T__BasePathToElementType mPath;
};

void T__ChangeDescriptionType::setPath( const T__BasePathToElementType& path )
{
    d_ptr->mPath = path;
}

T__BasePathToElementType T__ChangeDescriptionType::path() const
{
    return d_ptr->mPath;
}

KDSoapValue T__ChangeDescriptionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ChangeDescriptionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePath(d_ptr->mPath.serialize(QString::fromLatin1("Path")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePath.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePath.setQualified(true);
    if (!_valuePath.isNil())
    args.append(_valuePath);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ChangeDescriptionType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Path")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPath.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ChangeDescriptionType::T__ChangeDescriptionType()
    : d_ptr(new PrivateDPtr)
{
}

T__ChangeDescriptionType::~T__ChangeDescriptionType()
{
}

T__ChangeDescriptionType::T__ChangeDescriptionType( const T__ChangeDescriptionType& other )
    : d_ptr( other.d_ptr )
{
}

T__ChangeDescriptionType&  T__ChangeDescriptionType::operator=( const T__ChangeDescriptionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__BaseNotificationEventType::PrivateDPtr : public QSharedData
{
public:
    T__WatermarkType mWatermark;
};

void T__BaseNotificationEventType::setWatermark( const T__WatermarkType& watermark )
{
    d_ptr->mWatermark = watermark;
}

T__WatermarkType T__BaseNotificationEventType::watermark() const
{
    return d_ptr->mWatermark;
}

KDSoapValue T__BaseNotificationEventType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BaseNotificationEventType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueWatermark(QString::fromLatin1("Watermark"), d_ptr->mWatermark.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WatermarkType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueWatermark.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWatermark.setQualified(true);
    if (!_valueWatermark.isNil())
    args.append(_valueWatermark);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__BaseNotificationEventType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Watermark")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWatermark.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__BaseNotificationEventType::T__BaseNotificationEventType()
    : d_ptr(new PrivateDPtr)
{
}

T__BaseNotificationEventType::~T__BaseNotificationEventType()
{
}

T__BaseNotificationEventType::T__BaseNotificationEventType( const T__BaseNotificationEventType& other )
    : d_ptr( other.d_ptr )
{
}

T__BaseNotificationEventType&  T__BaseNotificationEventType::operator=( const T__BaseNotificationEventType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfFolderNamesType::PrivateDPtr : public QSharedData
{
public:
    QStringList mFolderName;
};

void T__NonEmptyArrayOfFolderNamesType::setFolderName( const QStringList& folderName )
{
    d_ptr->mFolderName = folderName;
}

QStringList T__NonEmptyArrayOfFolderNamesType::folderName() const
{
    return d_ptr->mFolderName;
}

KDSoapValue T__NonEmptyArrayOfFolderNamesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfFolderNamesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mFolderName.count(); ++i) {
        KDSoapValue _valueFolderName(QString::fromLatin1("FolderName"), QVariant::fromValue(d_ptr->mFolderName.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
        _valueFolderName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueFolderName.setQualified(true);
        if (!_valueFolderName.isNil())
        args.append(_valueFolderName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfFolderNamesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            QString mFolderNameTemp;
            mFolderNameTemp = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
            d_ptr->mFolderName.append(mFolderNameTemp);
        }
    }
}

T__NonEmptyArrayOfFolderNamesType::T__NonEmptyArrayOfFolderNamesType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfFolderNamesType::~T__NonEmptyArrayOfFolderNamesType()
{
}

T__NonEmptyArrayOfFolderNamesType::T__NonEmptyArrayOfFolderNamesType( const T__NonEmptyArrayOfFolderNamesType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfFolderNamesType&  T__NonEmptyArrayOfFolderNamesType::operator=( const T__NonEmptyArrayOfFolderNamesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SuggestionsViewOptionsType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mGoodThreshold;
    int mMaximumResultsByDay;
    int mMaximumNonWorkHourResultsByDay;
    int mMeetingDurationInMinutes;
    T__SuggestionQuality mMinimumSuggestionQuality;
    T__Duration mDetailedSuggestionsWindow;
    KDDateTime mCurrentMeetingTime;
    QString mGlobalObjectId;
};

T__SuggestionsViewOptionsType::PrivateDPtr::PrivateDPtr()
    : mGoodThreshold(0), mMaximumResultsByDay(0), mMaximumNonWorkHourResultsByDay(0), mMeetingDurationInMinutes(0)
{
}


void T__SuggestionsViewOptionsType::setGoodThreshold( int goodThreshold )
{
    d_ptr->mGoodThreshold = goodThreshold;
}

int T__SuggestionsViewOptionsType::goodThreshold() const
{
    return d_ptr->mGoodThreshold;
}

void T__SuggestionsViewOptionsType::setMaximumResultsByDay( int maximumResultsByDay )
{
    d_ptr->mMaximumResultsByDay = maximumResultsByDay;
}

int T__SuggestionsViewOptionsType::maximumResultsByDay() const
{
    return d_ptr->mMaximumResultsByDay;
}

void T__SuggestionsViewOptionsType::setMaximumNonWorkHourResultsByDay( int maximumNonWorkHourResultsByDay )
{
    d_ptr->mMaximumNonWorkHourResultsByDay = maximumNonWorkHourResultsByDay;
}

int T__SuggestionsViewOptionsType::maximumNonWorkHourResultsByDay() const
{
    return d_ptr->mMaximumNonWorkHourResultsByDay;
}

void T__SuggestionsViewOptionsType::setMeetingDurationInMinutes( int meetingDurationInMinutes )
{
    d_ptr->mMeetingDurationInMinutes = meetingDurationInMinutes;
}

int T__SuggestionsViewOptionsType::meetingDurationInMinutes() const
{
    return d_ptr->mMeetingDurationInMinutes;
}

void T__SuggestionsViewOptionsType::setMinimumSuggestionQuality( const T__SuggestionQuality& minimumSuggestionQuality )
{
    d_ptr->mMinimumSuggestionQuality = minimumSuggestionQuality;
}

T__SuggestionQuality T__SuggestionsViewOptionsType::minimumSuggestionQuality() const
{
    return d_ptr->mMinimumSuggestionQuality;
}

void T__SuggestionsViewOptionsType::setDetailedSuggestionsWindow( const T__Duration& detailedSuggestionsWindow )
{
    d_ptr->mDetailedSuggestionsWindow = detailedSuggestionsWindow;
}

T__Duration T__SuggestionsViewOptionsType::detailedSuggestionsWindow() const
{
    return d_ptr->mDetailedSuggestionsWindow;
}

void T__SuggestionsViewOptionsType::setCurrentMeetingTime( const KDDateTime& currentMeetingTime )
{
    d_ptr->mCurrentMeetingTime = currentMeetingTime;
}

KDDateTime T__SuggestionsViewOptionsType::currentMeetingTime() const
{
    return d_ptr->mCurrentMeetingTime;
}

void T__SuggestionsViewOptionsType::setGlobalObjectId( const QString& globalObjectId )
{
    d_ptr->mGlobalObjectId = globalObjectId;
}

QString T__SuggestionsViewOptionsType::globalObjectId() const
{
    return d_ptr->mGlobalObjectId;
}

KDSoapValue T__SuggestionsViewOptionsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SuggestionsViewOptionsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueGoodThreshold(QString::fromLatin1("GoodThreshold"), QVariant::fromValue(d_ptr->mGoodThreshold), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueGoodThreshold.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueGoodThreshold.setQualified(true);
    if (!_valueGoodThreshold.isNil())
    args.append(_valueGoodThreshold);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMaximumResultsByDay(QString::fromLatin1("MaximumResultsByDay"), QVariant::fromValue(d_ptr->mMaximumResultsByDay), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMaximumResultsByDay.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMaximumResultsByDay.setQualified(true);
    if (!_valueMaximumResultsByDay.isNil())
    args.append(_valueMaximumResultsByDay);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMaximumNonWorkHourResultsByDay(QString::fromLatin1("MaximumNonWorkHourResultsByDay"), QVariant::fromValue(d_ptr->mMaximumNonWorkHourResultsByDay), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMaximumNonWorkHourResultsByDay.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMaximumNonWorkHourResultsByDay.setQualified(true);
    if (!_valueMaximumNonWorkHourResultsByDay.isNil())
    args.append(_valueMaximumNonWorkHourResultsByDay);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingDurationInMinutes(QString::fromLatin1("MeetingDurationInMinutes"), QVariant::fromValue(d_ptr->mMeetingDurationInMinutes), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMeetingDurationInMinutes.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingDurationInMinutes.setQualified(true);
    if (!_valueMeetingDurationInMinutes.isNil())
    args.append(_valueMeetingDurationInMinutes);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMinimumSuggestionQuality(QString::fromLatin1("MinimumSuggestionQuality"), d_ptr->mMinimumSuggestionQuality.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SuggestionQuality"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMinimumSuggestionQuality.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMinimumSuggestionQuality.setQualified(true);
    if (!_valueMinimumSuggestionQuality.isNil())
    args.append(_valueMinimumSuggestionQuality);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDetailedSuggestionsWindow(d_ptr->mDetailedSuggestionsWindow.serialize(QString::fromLatin1("DetailedSuggestionsWindow")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDetailedSuggestionsWindow.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDetailedSuggestionsWindow.setQualified(true);
    if (!_valueDetailedSuggestionsWindow.isNil())
    args.append(_valueDetailedSuggestionsWindow);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCurrentMeetingTime(QString::fromLatin1("CurrentMeetingTime"), d_ptr->mCurrentMeetingTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCurrentMeetingTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCurrentMeetingTime.setQualified(true);
    if (!_valueCurrentMeetingTime.isNil())
    args.append(_valueCurrentMeetingTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueGlobalObjectId(QString::fromLatin1("GlobalObjectId"), QVariant::fromValue(d_ptr->mGlobalObjectId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueGlobalObjectId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueGlobalObjectId.setQualified(true);
    if (!_valueGlobalObjectId.isNil())
    args.append(_valueGlobalObjectId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SuggestionsViewOptionsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GoodThreshold")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGoodThreshold = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MaximumResultsByDay")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMaximumResultsByDay = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MaximumNonWorkHourResultsByDay")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMaximumNonWorkHourResultsByDay = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MeetingDurationInMinutes")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingDurationInMinutes = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MinimumSuggestionQuality")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMinimumSuggestionQuality.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("DetailedSuggestionsWindow")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDetailedSuggestionsWindow.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CurrentMeetingTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCurrentMeetingTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("GlobalObjectId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGlobalObjectId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__SuggestionsViewOptionsType::T__SuggestionsViewOptionsType()
    : d_ptr(new PrivateDPtr)
{
}

T__SuggestionsViewOptionsType::~T__SuggestionsViewOptionsType()
{
}

T__SuggestionsViewOptionsType::T__SuggestionsViewOptionsType( const T__SuggestionsViewOptionsType& other )
    : d_ptr( other.d_ptr )
{
}

T__SuggestionsViewOptionsType&  T__SuggestionsViewOptionsType::operator=( const T__SuggestionsViewOptionsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfOccurrenceInfoType::PrivateDPtr : public QSharedData
{
public:
    QList<T__OccurrenceInfoType> mOccurrence;
};

void T__NonEmptyArrayOfOccurrenceInfoType::setOccurrence( const QList<T__OccurrenceInfoType>& occurrence )
{
    d_ptr->mOccurrence = occurrence;
}

QList<T__OccurrenceInfoType> T__NonEmptyArrayOfOccurrenceInfoType::occurrence() const
{
    return d_ptr->mOccurrence;
}

KDSoapValue T__NonEmptyArrayOfOccurrenceInfoType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfOccurrenceInfoType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mOccurrence.count(); ++i) {
        KDSoapValue _valueOccurrence(d_ptr->mOccurrence.at(i).serialize(QString::fromLatin1("Occurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueOccurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueOccurrence.setQualified(true);
        if (!_valueOccurrence.isNil())
        args.append(_valueOccurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfOccurrenceInfoType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Occurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__OccurrenceInfoType mOccurrenceTemp;
            mOccurrenceTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mOccurrence.append(mOccurrenceTemp);
        }
    }
}

T__NonEmptyArrayOfOccurrenceInfoType::T__NonEmptyArrayOfOccurrenceInfoType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfOccurrenceInfoType::~T__NonEmptyArrayOfOccurrenceInfoType()
{
}

T__NonEmptyArrayOfOccurrenceInfoType::T__NonEmptyArrayOfOccurrenceInfoType( const T__NonEmptyArrayOfOccurrenceInfoType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfOccurrenceInfoType&  T__NonEmptyArrayOfOccurrenceInfoType::operator=( const T__NonEmptyArrayOfOccurrenceInfoType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__DelegateUserType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__UserIdType mUserId;
    T__DelegatePermissionsType mDelegatePermissions;
    bool mReceiveCopiesOfMeetingMessages;
    bool mViewPrivateItems;
};

T__DelegateUserType::PrivateDPtr::PrivateDPtr()
    : mReceiveCopiesOfMeetingMessages(false), mViewPrivateItems(false)
{
}


void T__DelegateUserType::setUserId( const T__UserIdType& userId )
{
    d_ptr->mUserId = userId;
}

T__UserIdType T__DelegateUserType::userId() const
{
    return d_ptr->mUserId;
}

void T__DelegateUserType::setDelegatePermissions( const T__DelegatePermissionsType& delegatePermissions )
{
    d_ptr->mDelegatePermissions = delegatePermissions;
}

T__DelegatePermissionsType T__DelegateUserType::delegatePermissions() const
{
    return d_ptr->mDelegatePermissions;
}

void T__DelegateUserType::setReceiveCopiesOfMeetingMessages( bool receiveCopiesOfMeetingMessages )
{
    d_ptr->mReceiveCopiesOfMeetingMessages = receiveCopiesOfMeetingMessages;
}

bool T__DelegateUserType::receiveCopiesOfMeetingMessages() const
{
    return d_ptr->mReceiveCopiesOfMeetingMessages;
}

void T__DelegateUserType::setViewPrivateItems( bool viewPrivateItems )
{
    d_ptr->mViewPrivateItems = viewPrivateItems;
}

bool T__DelegateUserType::viewPrivateItems() const
{
    return d_ptr->mViewPrivateItems;
}

KDSoapValue T__DelegateUserType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DelegateUserType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueUserId(d_ptr->mUserId.serialize(QString::fromLatin1("UserId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUserId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUserId.setQualified(true);
    if (!_valueUserId.isNil())
    args.append(_valueUserId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDelegatePermissions(d_ptr->mDelegatePermissions.serialize(QString::fromLatin1("DelegatePermissions")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDelegatePermissions.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDelegatePermissions.setQualified(true);
    if (!_valueDelegatePermissions.isNil())
    args.append(_valueDelegatePermissions);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReceiveCopiesOfMeetingMessages(QString::fromLatin1("ReceiveCopiesOfMeetingMessages"), QVariant::fromValue(d_ptr->mReceiveCopiesOfMeetingMessages), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueReceiveCopiesOfMeetingMessages.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReceiveCopiesOfMeetingMessages.setQualified(true);
    if (!_valueReceiveCopiesOfMeetingMessages.isNil())
    args.append(_valueReceiveCopiesOfMeetingMessages);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueViewPrivateItems(QString::fromLatin1("ViewPrivateItems"), QVariant::fromValue(d_ptr->mViewPrivateItems), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueViewPrivateItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueViewPrivateItems.setQualified(true);
    if (!_valueViewPrivateItems.isNil())
    args.append(_valueViewPrivateItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__DelegateUserType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UserId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUserId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DelegatePermissions")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDelegatePermissions.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ReceiveCopiesOfMeetingMessages")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReceiveCopiesOfMeetingMessages = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ViewPrivateItems")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mViewPrivateItems = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__DelegateUserType::T__DelegateUserType()
    : d_ptr(new PrivateDPtr)
{
}

T__DelegateUserType::~T__DelegateUserType()
{
}

T__DelegateUserType::T__DelegateUserType( const T__DelegateUserType& other )
    : d_ptr( other.d_ptr )
{
}

T__DelegateUserType&  T__DelegateUserType::operator=( const T__DelegateUserType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfItemChangeDescriptionsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__AppendToItemFieldType> mAppendToItemField;
    QList<T__SetItemFieldType> mSetItemField;
    QList<T__DeleteItemFieldType> mDeleteItemField;
};

void T__NonEmptyArrayOfItemChangeDescriptionsType::setAppendToItemField( const QList<T__AppendToItemFieldType>& appendToItemField )
{
    d_ptr->mAppendToItemField = appendToItemField;
}

QList<T__AppendToItemFieldType> T__NonEmptyArrayOfItemChangeDescriptionsType::appendToItemField() const
{
    return d_ptr->mAppendToItemField;
}

void T__NonEmptyArrayOfItemChangeDescriptionsType::setSetItemField( const QList<T__SetItemFieldType>& setItemField )
{
    d_ptr->mSetItemField = setItemField;
}

QList<T__SetItemFieldType> T__NonEmptyArrayOfItemChangeDescriptionsType::setItemField() const
{
    return d_ptr->mSetItemField;
}

void T__NonEmptyArrayOfItemChangeDescriptionsType::setDeleteItemField( const QList<T__DeleteItemFieldType>& deleteItemField )
{
    d_ptr->mDeleteItemField = deleteItemField;
}

QList<T__DeleteItemFieldType> T__NonEmptyArrayOfItemChangeDescriptionsType::deleteItemField() const
{
    return d_ptr->mDeleteItemField;
}

KDSoapValue T__NonEmptyArrayOfItemChangeDescriptionsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfItemChangeDescriptionsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mAppendToItemField.count(); ++i) {
        KDSoapValue _valueAppendToItemField(d_ptr->mAppendToItemField.at(i).serialize(QString::fromLatin1("AppendToItemField")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAppendToItemField.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAppendToItemField.setQualified(true);
        if (!_valueAppendToItemField.isNil())
        args.append(_valueAppendToItemField);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mSetItemField.count(); ++i) {
        KDSoapValue _valueSetItemField(d_ptr->mSetItemField.at(i).serialize(QString::fromLatin1("SetItemField")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSetItemField.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSetItemField.setQualified(true);
        if (!_valueSetItemField.isNil())
        args.append(_valueSetItemField);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDeleteItemField.count(); ++i) {
        KDSoapValue _valueDeleteItemField(d_ptr->mDeleteItemField.at(i).serialize(QString::fromLatin1("DeleteItemField")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDeleteItemField.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDeleteItemField.setQualified(true);
        if (!_valueDeleteItemField.isNil())
        args.append(_valueDeleteItemField);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfItemChangeDescriptionsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AppendToItemField")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__AppendToItemFieldType mAppendToItemFieldTemp;
            mAppendToItemFieldTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAppendToItemField.append(mAppendToItemFieldTemp);
        }
        else if (name == QLatin1String("SetItemField")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SetItemFieldType mSetItemFieldTemp;
            mSetItemFieldTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSetItemField.append(mSetItemFieldTemp);
        }
        else if (name == QLatin1String("DeleteItemField")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__DeleteItemFieldType mDeleteItemFieldTemp;
            mDeleteItemFieldTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDeleteItemField.append(mDeleteItemFieldTemp);
        }
    }
}

T__NonEmptyArrayOfItemChangeDescriptionsType::T__NonEmptyArrayOfItemChangeDescriptionsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfItemChangeDescriptionsType::~T__NonEmptyArrayOfItemChangeDescriptionsType()
{
}

T__NonEmptyArrayOfItemChangeDescriptionsType::T__NonEmptyArrayOfItemChangeDescriptionsType( const T__NonEmptyArrayOfItemChangeDescriptionsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfItemChangeDescriptionsType&  T__NonEmptyArrayOfItemChangeDescriptionsType::operator=( const T__NonEmptyArrayOfItemChangeDescriptionsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__AlternateIdBaseType::PrivateDPtr : public QSharedData
{
public:
    T__IdFormatType mFormat;
};

void T__AlternateIdBaseType::setFormat( const T__IdFormatType& format )
{
    d_ptr->mFormat = format;
}

T__IdFormatType T__AlternateIdBaseType::format() const
{
    return d_ptr->mFormat;
}

KDSoapValue T__AlternateIdBaseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AlternateIdBaseType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList attribs;
    KDSoapValue _valueFormat(QString::fromLatin1("Format"), d_ptr->mFormat.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IdFormatType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueFormat.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueFormat.isNil())
    attribs.append(_valueFormat);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__AlternateIdBaseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Format")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFormat.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__AlternateIdBaseType::T__AlternateIdBaseType()
    : d_ptr(new PrivateDPtr)
{
}

T__AlternateIdBaseType::~T__AlternateIdBaseType()
{
}

T__AlternateIdBaseType::T__AlternateIdBaseType( const T__AlternateIdBaseType& other )
    : d_ptr( other.d_ptr )
{
}

T__AlternateIdBaseType&  T__AlternateIdBaseType::operator=( const T__AlternateIdBaseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfResolutionType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ResolutionType> mResolution;
};

void T__ArrayOfResolutionType::setResolution( const QList<T__ResolutionType>& resolution )
{
    d_ptr->mResolution = resolution;
}

QList<T__ResolutionType> T__ArrayOfResolutionType::resolution() const
{
    return d_ptr->mResolution;
}

KDSoapValue T__ArrayOfResolutionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfResolutionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mResolution.count(); ++i) {
        KDSoapValue _valueResolution(d_ptr->mResolution.at(i).serialize(QString::fromLatin1("Resolution")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueResolution.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueResolution.setQualified(true);
        if (!_valueResolution.isNil())
        args.append(_valueResolution);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfResolutionType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Resolution")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ResolutionType mResolutionTemp;
            mResolutionTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mResolution.append(mResolutionTemp);
        }
    }
}

T__ArrayOfResolutionType::T__ArrayOfResolutionType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfResolutionType::~T__ArrayOfResolutionType()
{
}

T__ArrayOfResolutionType::T__ArrayOfResolutionType( const T__ArrayOfResolutionType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfResolutionType&  T__ArrayOfResolutionType::operator=( const T__ArrayOfResolutionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ItemChangeType::PrivateDPtr : public QSharedData
{
public:
    T__ItemIdType mItemId;
    T__OccurrenceItemIdType mOccurrenceItemId;
    T__RecurringMasterItemIdType mRecurringMasterItemId;
    T__NonEmptyArrayOfItemChangeDescriptionsType mUpdates;
};

void T__ItemChangeType::setItemId( const T__ItemIdType& itemId )
{
    d_ptr->mItemId = itemId;
}

T__ItemIdType T__ItemChangeType::itemId() const
{
    return d_ptr->mItemId;
}

void T__ItemChangeType::setOccurrenceItemId( const T__OccurrenceItemIdType& occurrenceItemId )
{
    d_ptr->mOccurrenceItemId = occurrenceItemId;
}

T__OccurrenceItemIdType T__ItemChangeType::occurrenceItemId() const
{
    return d_ptr->mOccurrenceItemId;
}

void T__ItemChangeType::setRecurringMasterItemId( const T__RecurringMasterItemIdType& recurringMasterItemId )
{
    d_ptr->mRecurringMasterItemId = recurringMasterItemId;
}

T__RecurringMasterItemIdType T__ItemChangeType::recurringMasterItemId() const
{
    return d_ptr->mRecurringMasterItemId;
}

void T__ItemChangeType::setUpdates( const T__NonEmptyArrayOfItemChangeDescriptionsType& updates )
{
    d_ptr->mUpdates = updates;
}

T__NonEmptyArrayOfItemChangeDescriptionsType T__ItemChangeType::updates() const
{
    return d_ptr->mUpdates;
}

KDSoapValue T__ItemChangeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemChangeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemId(d_ptr->mItemId.serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemId.setQualified(true);
    if (!_valueItemId.isNil())
    args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOccurrenceItemId(d_ptr->mOccurrenceItemId.serialize(QString::fromLatin1("OccurrenceItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOccurrenceItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOccurrenceItemId.setQualified(true);
    if (!_valueOccurrenceItemId.isNil())
    args.append(_valueOccurrenceItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRecurringMasterItemId(d_ptr->mRecurringMasterItemId.serialize(QString::fromLatin1("RecurringMasterItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRecurringMasterItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRecurringMasterItemId.setQualified(true);
    if (!_valueRecurringMasterItemId.isNil())
    args.append(_valueRecurringMasterItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueUpdates(d_ptr->mUpdates.serialize(QString::fromLatin1("Updates")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdates.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUpdates.setQualified(true);
    if (!_valueUpdates.isNil())
    args.append(_valueUpdates);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ItemChangeType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("OccurrenceItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOccurrenceItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("RecurringMasterItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRecurringMasterItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Updates")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUpdates.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ItemChangeType::T__ItemChangeType()
    : d_ptr(new PrivateDPtr)
{
}

T__ItemChangeType::~T__ItemChangeType()
{
}

T__ItemChangeType::T__ItemChangeType( const T__ItemChangeType& other )
    : d_ptr( other.d_ptr )
{
}

T__ItemChangeType&  T__ItemChangeType::operator=( const T__ItemChangeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ItemType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__MimeContentType mMimeContent;
    T__ItemIdType mItemId;
    T__FolderIdType mParentFolderId;
    T__ItemClassType mItemClass;
    QString mSubject;
    T__SensitivityChoicesType mSensitivity;
    T__BodyType mBody;
    T__NonEmptyArrayOfAttachmentsType mAttachments;
    KDDateTime mDateTimeReceived;
    int mSize;
    T__ArrayOfStringsType mCategories;
    T__ImportanceChoicesType mImportance;
    QString mInReplyTo;
    bool mIsSubmitted;
    bool mIsDraft;
    bool mIsFromMe;
    bool mIsResend;
    bool mIsUnmodified;
    T__NonEmptyArrayOfInternetHeadersType mInternetMessageHeaders;
    KDDateTime mDateTimeSent;
    KDDateTime mDateTimeCreated;
    T__NonEmptyArrayOfResponseObjectsType mResponseObjects;
    KDDateTime mReminderDueBy;
    bool mReminderIsSet;
    T__ReminderMinutesBeforeStartType mReminderMinutesBeforeStart;
    QString mDisplayCc;
    QString mDisplayTo;
    bool mHasAttachments;
    QList<T__ExtendedPropertyType> mExtendedProperty;
    QString mCulture;
    T__EffectiveRightsType mEffectiveRights;
    QString mLastModifiedName;
    KDDateTime mLastModifiedTime;
};

T__ItemType::PrivateDPtr::PrivateDPtr()
    : mSize(0), mIsSubmitted(false), mIsDraft(false), mIsFromMe(false), mIsResend(false), mIsUnmodified(false), mReminderIsSet(false), mHasAttachments(false)
{
}


void T__ItemType::setMimeContent( const T__MimeContentType& mimeContent )
{
    d_ptr->mMimeContent = mimeContent;
}

T__MimeContentType T__ItemType::mimeContent() const
{
    return d_ptr->mMimeContent;
}

void T__ItemType::setItemId( const T__ItemIdType& itemId )
{
    d_ptr->mItemId = itemId;
}

T__ItemIdType T__ItemType::itemId() const
{
    return d_ptr->mItemId;
}

void T__ItemType::setParentFolderId( const T__FolderIdType& parentFolderId )
{
    d_ptr->mParentFolderId = parentFolderId;
}

T__FolderIdType T__ItemType::parentFolderId() const
{
    return d_ptr->mParentFolderId;
}

void T__ItemType::setItemClass( const T__ItemClassType& itemClass )
{
    d_ptr->mItemClass = itemClass;
}

T__ItemClassType T__ItemType::itemClass() const
{
    return d_ptr->mItemClass;
}

void T__ItemType::setSubject( const QString& subject )
{
    d_ptr->mSubject = subject;
}

QString T__ItemType::subject() const
{
    return d_ptr->mSubject;
}

void T__ItemType::setSensitivity( const T__SensitivityChoicesType& sensitivity )
{
    d_ptr->mSensitivity = sensitivity;
}

T__SensitivityChoicesType T__ItemType::sensitivity() const
{
    return d_ptr->mSensitivity;
}

void T__ItemType::setBody( const T__BodyType& body )
{
    d_ptr->mBody = body;
}

T__BodyType T__ItemType::body() const
{
    return d_ptr->mBody;
}

void T__ItemType::setAttachments( const T__NonEmptyArrayOfAttachmentsType& attachments )
{
    d_ptr->mAttachments = attachments;
}

T__NonEmptyArrayOfAttachmentsType T__ItemType::attachments() const
{
    return d_ptr->mAttachments;
}

void T__ItemType::setDateTimeReceived( const KDDateTime& dateTimeReceived )
{
    d_ptr->mDateTimeReceived = dateTimeReceived;
}

KDDateTime T__ItemType::dateTimeReceived() const
{
    return d_ptr->mDateTimeReceived;
}

void T__ItemType::setSize( int size )
{
    d_ptr->mSize = size;
}

int T__ItemType::size() const
{
    return d_ptr->mSize;
}

void T__ItemType::setCategories( const T__ArrayOfStringsType& categories )
{
    d_ptr->mCategories = categories;
}

T__ArrayOfStringsType T__ItemType::categories() const
{
    return d_ptr->mCategories;
}

void T__ItemType::setImportance( const T__ImportanceChoicesType& importance )
{
    d_ptr->mImportance = importance;
}

T__ImportanceChoicesType T__ItemType::importance() const
{
    return d_ptr->mImportance;
}

void T__ItemType::setInReplyTo( const QString& inReplyTo )
{
    d_ptr->mInReplyTo = inReplyTo;
}

QString T__ItemType::inReplyTo() const
{
    return d_ptr->mInReplyTo;
}

void T__ItemType::setIsSubmitted( bool isSubmitted )
{
    d_ptr->mIsSubmitted = isSubmitted;
}

bool T__ItemType::isSubmitted() const
{
    return d_ptr->mIsSubmitted;
}

void T__ItemType::setIsDraft( bool isDraft )
{
    d_ptr->mIsDraft = isDraft;
}

bool T__ItemType::isDraft() const
{
    return d_ptr->mIsDraft;
}

void T__ItemType::setIsFromMe( bool isFromMe )
{
    d_ptr->mIsFromMe = isFromMe;
}

bool T__ItemType::isFromMe() const
{
    return d_ptr->mIsFromMe;
}

void T__ItemType::setIsResend( bool isResend )
{
    d_ptr->mIsResend = isResend;
}

bool T__ItemType::isResend() const
{
    return d_ptr->mIsResend;
}

void T__ItemType::setIsUnmodified( bool isUnmodified )
{
    d_ptr->mIsUnmodified = isUnmodified;
}

bool T__ItemType::isUnmodified() const
{
    return d_ptr->mIsUnmodified;
}

void T__ItemType::setInternetMessageHeaders( const T__NonEmptyArrayOfInternetHeadersType& internetMessageHeaders )
{
    d_ptr->mInternetMessageHeaders = internetMessageHeaders;
}

T__NonEmptyArrayOfInternetHeadersType T__ItemType::internetMessageHeaders() const
{
    return d_ptr->mInternetMessageHeaders;
}

void T__ItemType::setDateTimeSent( const KDDateTime& dateTimeSent )
{
    d_ptr->mDateTimeSent = dateTimeSent;
}

KDDateTime T__ItemType::dateTimeSent() const
{
    return d_ptr->mDateTimeSent;
}

void T__ItemType::setDateTimeCreated( const KDDateTime& dateTimeCreated )
{
    d_ptr->mDateTimeCreated = dateTimeCreated;
}

KDDateTime T__ItemType::dateTimeCreated() const
{
    return d_ptr->mDateTimeCreated;
}

void T__ItemType::setResponseObjects( const T__NonEmptyArrayOfResponseObjectsType& responseObjects )
{
    d_ptr->mResponseObjects = responseObjects;
}

T__NonEmptyArrayOfResponseObjectsType T__ItemType::responseObjects() const
{
    return d_ptr->mResponseObjects;
}

void T__ItemType::setReminderDueBy( const KDDateTime& reminderDueBy )
{
    d_ptr->mReminderDueBy = reminderDueBy;
}

KDDateTime T__ItemType::reminderDueBy() const
{
    return d_ptr->mReminderDueBy;
}

void T__ItemType::setReminderIsSet( bool reminderIsSet )
{
    d_ptr->mReminderIsSet = reminderIsSet;
}

bool T__ItemType::reminderIsSet() const
{
    return d_ptr->mReminderIsSet;
}

void T__ItemType::setReminderMinutesBeforeStart( const T__ReminderMinutesBeforeStartType& reminderMinutesBeforeStart )
{
    d_ptr->mReminderMinutesBeforeStart = reminderMinutesBeforeStart;
}

T__ReminderMinutesBeforeStartType T__ItemType::reminderMinutesBeforeStart() const
{
    return d_ptr->mReminderMinutesBeforeStart;
}

void T__ItemType::setDisplayCc( const QString& displayCc )
{
    d_ptr->mDisplayCc = displayCc;
}

QString T__ItemType::displayCc() const
{
    return d_ptr->mDisplayCc;
}

void T__ItemType::setDisplayTo( const QString& displayTo )
{
    d_ptr->mDisplayTo = displayTo;
}

QString T__ItemType::displayTo() const
{
    return d_ptr->mDisplayTo;
}

void T__ItemType::setHasAttachments( bool hasAttachments )
{
    d_ptr->mHasAttachments = hasAttachments;
}

bool T__ItemType::hasAttachments() const
{
    return d_ptr->mHasAttachments;
}

void T__ItemType::setExtendedProperty( const QList<T__ExtendedPropertyType>& extendedProperty )
{
    d_ptr->mExtendedProperty = extendedProperty;
}

QList<T__ExtendedPropertyType> T__ItemType::extendedProperty() const
{
    return d_ptr->mExtendedProperty;
}

void T__ItemType::setCulture( const QString& culture )
{
    d_ptr->mCulture = culture;
}

QString T__ItemType::culture() const
{
    return d_ptr->mCulture;
}

void T__ItemType::setEffectiveRights( const T__EffectiveRightsType& effectiveRights )
{
    d_ptr->mEffectiveRights = effectiveRights;
}

T__EffectiveRightsType T__ItemType::effectiveRights() const
{
    return d_ptr->mEffectiveRights;
}

void T__ItemType::setLastModifiedName( const QString& lastModifiedName )
{
    d_ptr->mLastModifiedName = lastModifiedName;
}

QString T__ItemType::lastModifiedName() const
{
    return d_ptr->mLastModifiedName;
}

void T__ItemType::setLastModifiedTime( const KDDateTime& lastModifiedTime )
{
    d_ptr->mLastModifiedTime = lastModifiedTime;
}

KDDateTime T__ItemType::lastModifiedTime() const
{
    return d_ptr->mLastModifiedTime;
}

KDSoapValue T__ItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMimeContent(d_ptr->mMimeContent.serialize(QString::fromLatin1("MimeContent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMimeContent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMimeContent.setQualified(true);
    if (!_valueMimeContent.isNil())
    args.append(_valueMimeContent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItemId(d_ptr->mItemId.serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemId.setQualified(true);
    if (!_valueItemId.isNil())
    args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueParentFolderId(d_ptr->mParentFolderId.serialize(QString::fromLatin1("ParentFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueParentFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueParentFolderId.setQualified(true);
    if (!_valueParentFolderId.isNil())
    args.append(_valueParentFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItemClass(QString::fromLatin1("ItemClass"), d_ptr->mItemClass.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemClassType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueItemClass.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemClass.setQualified(true);
    if (!_valueItemClass.isNil())
    args.append(_valueItemClass);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSubject(QString::fromLatin1("Subject"), QVariant::fromValue(d_ptr->mSubject), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSubject.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSubject.setQualified(true);
    if (!_valueSubject.isNil())
    args.append(_valueSubject);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSensitivity(QString::fromLatin1("Sensitivity"), d_ptr->mSensitivity.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SensitivityChoicesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSensitivity.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSensitivity.setQualified(true);
    if (!_valueSensitivity.isNil())
    args.append(_valueSensitivity);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBody(d_ptr->mBody.serialize(QString::fromLatin1("Body")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBody.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBody.setQualified(true);
    if (!_valueBody.isNil())
    args.append(_valueBody);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAttachments(d_ptr->mAttachments.serialize(QString::fromLatin1("Attachments")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttachments.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAttachments.setQualified(true);
    if (!_valueAttachments.isNil())
    args.append(_valueAttachments);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDateTimeReceived(QString::fromLatin1("DateTimeReceived"), d_ptr->mDateTimeReceived.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDateTimeReceived.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDateTimeReceived.setQualified(true);
    if (!_valueDateTimeReceived.isNil())
    args.append(_valueDateTimeReceived);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSize(QString::fromLatin1("Size"), QVariant::fromValue(d_ptr->mSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSize.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSize.setQualified(true);
    if (!_valueSize.isNil())
    args.append(_valueSize);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCategories(d_ptr->mCategories.serialize(QString::fromLatin1("Categories")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCategories.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCategories.setQualified(true);
    if (!_valueCategories.isNil())
    args.append(_valueCategories);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueImportance(QString::fromLatin1("Importance"), d_ptr->mImportance.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ImportanceChoicesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueImportance.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueImportance.setQualified(true);
    if (!_valueImportance.isNil())
    args.append(_valueImportance);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInReplyTo(QString::fromLatin1("InReplyTo"), QVariant::fromValue(d_ptr->mInReplyTo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueInReplyTo.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInReplyTo.setQualified(true);
    if (!_valueInReplyTo.isNil())
    args.append(_valueInReplyTo);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsSubmitted(QString::fromLatin1("IsSubmitted"), QVariant::fromValue(d_ptr->mIsSubmitted), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsSubmitted.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsSubmitted.setQualified(true);
    if (!_valueIsSubmitted.isNil())
    args.append(_valueIsSubmitted);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsDraft(QString::fromLatin1("IsDraft"), QVariant::fromValue(d_ptr->mIsDraft), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsDraft.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsDraft.setQualified(true);
    if (!_valueIsDraft.isNil())
    args.append(_valueIsDraft);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsFromMe(QString::fromLatin1("IsFromMe"), QVariant::fromValue(d_ptr->mIsFromMe), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsFromMe.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsFromMe.setQualified(true);
    if (!_valueIsFromMe.isNil())
    args.append(_valueIsFromMe);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsResend(QString::fromLatin1("IsResend"), QVariant::fromValue(d_ptr->mIsResend), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsResend.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsResend.setQualified(true);
    if (!_valueIsResend.isNil())
    args.append(_valueIsResend);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsUnmodified(QString::fromLatin1("IsUnmodified"), QVariant::fromValue(d_ptr->mIsUnmodified), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsUnmodified.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsUnmodified.setQualified(true);
    if (!_valueIsUnmodified.isNil())
    args.append(_valueIsUnmodified);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInternetMessageHeaders(d_ptr->mInternetMessageHeaders.serialize(QString::fromLatin1("InternetMessageHeaders")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueInternetMessageHeaders.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInternetMessageHeaders.setQualified(true);
    if (!_valueInternetMessageHeaders.isNil())
    args.append(_valueInternetMessageHeaders);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDateTimeSent(QString::fromLatin1("DateTimeSent"), d_ptr->mDateTimeSent.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDateTimeSent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDateTimeSent.setQualified(true);
    if (!_valueDateTimeSent.isNil())
    args.append(_valueDateTimeSent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDateTimeCreated(QString::fromLatin1("DateTimeCreated"), d_ptr->mDateTimeCreated.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDateTimeCreated.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDateTimeCreated.setQualified(true);
    if (!_valueDateTimeCreated.isNil())
    args.append(_valueDateTimeCreated);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueResponseObjects(d_ptr->mResponseObjects.serialize(QString::fromLatin1("ResponseObjects")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResponseObjects.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueResponseObjects.setQualified(true);
    if (!_valueResponseObjects.isNil())
    args.append(_valueResponseObjects);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReminderDueBy(QString::fromLatin1("ReminderDueBy"), d_ptr->mReminderDueBy.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueReminderDueBy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReminderDueBy.setQualified(true);
    if (!_valueReminderDueBy.isNil())
    args.append(_valueReminderDueBy);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReminderIsSet(QString::fromLatin1("ReminderIsSet"), QVariant::fromValue(d_ptr->mReminderIsSet), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueReminderIsSet.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReminderIsSet.setQualified(true);
    if (!_valueReminderIsSet.isNil())
    args.append(_valueReminderIsSet);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReminderMinutesBeforeStart(QString::fromLatin1("ReminderMinutesBeforeStart"), d_ptr->mReminderMinutesBeforeStart.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ReminderMinutesBeforeStartType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueReminderMinutesBeforeStart.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReminderMinutesBeforeStart.setQualified(true);
    if (!_valueReminderMinutesBeforeStart.isNil())
    args.append(_valueReminderMinutesBeforeStart);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDisplayCc(QString::fromLatin1("DisplayCc"), QVariant::fromValue(d_ptr->mDisplayCc), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDisplayCc.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDisplayCc.setQualified(true);
    if (!_valueDisplayCc.isNil())
    args.append(_valueDisplayCc);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDisplayTo(QString::fromLatin1("DisplayTo"), QVariant::fromValue(d_ptr->mDisplayTo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDisplayTo.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDisplayTo.setQualified(true);
    if (!_valueDisplayTo.isNil())
    args.append(_valueDisplayTo);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueHasAttachments(QString::fromLatin1("HasAttachments"), QVariant::fromValue(d_ptr->mHasAttachments), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueHasAttachments.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueHasAttachments.setQualified(true);
    if (!_valueHasAttachments.isNil())
    args.append(_valueHasAttachments);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    for (int i = 0; i < d_ptr->mExtendedProperty.count(); ++i) {
        KDSoapValue _valueExtendedProperty(d_ptr->mExtendedProperty.at(i).serialize(QString::fromLatin1("ExtendedProperty")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueExtendedProperty.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueExtendedProperty.setQualified(true);
        if (!_valueExtendedProperty.isNil())
        args.append(_valueExtendedProperty);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    KDSoapValue _valueCulture(QString::fromLatin1("Culture"), QVariant::fromValue(d_ptr->mCulture), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("language"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCulture.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCulture.setQualified(true);
    if (!_valueCulture.isNil())
    args.append(_valueCulture);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEffectiveRights(d_ptr->mEffectiveRights.serialize(QString::fromLatin1("EffectiveRights")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueEffectiveRights.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEffectiveRights.setQualified(true);
    if (!_valueEffectiveRights.isNil())
    args.append(_valueEffectiveRights);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLastModifiedName(QString::fromLatin1("LastModifiedName"), QVariant::fromValue(d_ptr->mLastModifiedName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueLastModifiedName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLastModifiedName.setQualified(true);
    if (!_valueLastModifiedName.isNil())
    args.append(_valueLastModifiedName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLastModifiedTime(QString::fromLatin1("LastModifiedTime"), d_ptr->mLastModifiedTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueLastModifiedTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLastModifiedTime.setQualified(true);
    if (!_valueLastModifiedTime.isNil())
    args.append(_valueLastModifiedTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ItemType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("MimeContent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMimeContent.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ParentFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mParentFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ItemClass")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemClass.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Subject")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSubject = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Sensitivity")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSensitivity.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Body")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBody.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Attachments")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttachments.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DateTimeReceived")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDateTimeReceived = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Size")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSize = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Categories")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCategories.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Importance")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mImportance.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("InReplyTo")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInReplyTo = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsSubmitted")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsSubmitted = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsDraft")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsDraft = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsFromMe")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsFromMe = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsResend")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsResend = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsUnmodified")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsUnmodified = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("InternetMessageHeaders")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInternetMessageHeaders.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DateTimeSent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDateTimeSent = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DateTimeCreated")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDateTimeCreated = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ResponseObjects")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseObjects.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ReminderDueBy")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReminderDueBy = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ReminderIsSet")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReminderIsSet = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ReminderMinutesBeforeStart")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReminderMinutesBeforeStart.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("DisplayCc")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDisplayCc = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DisplayTo")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDisplayTo = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("HasAttachments")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mHasAttachments = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ExtendedProperty")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ExtendedPropertyType mExtendedPropertyTemp;
            mExtendedPropertyTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mExtendedProperty.append(mExtendedPropertyTemp);
        }
        else if (name == QLatin1String("Culture")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCulture = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("EffectiveRights")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEffectiveRights.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("LastModifiedName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLastModifiedName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("LastModifiedTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLastModifiedTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ItemType::T__ItemType()
    : d_ptr(new PrivateDPtr)
{
}

T__ItemType::~T__ItemType()
{
}

T__ItemType::T__ItemType( const T__ItemType& other )
    : d_ptr( other.d_ptr )
{
}

T__ItemType&  T__ItemType::operator=( const T__ItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__FreeBusyViewOptionsType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__Duration mTimeWindow;
    int mMergedFreeBusyIntervalInMinutes;
    T__FreeBusyViewType mRequestedView;
};

T__FreeBusyViewOptionsType::PrivateDPtr::PrivateDPtr()
    : mMergedFreeBusyIntervalInMinutes(0)
{
}


void T__FreeBusyViewOptionsType::setTimeWindow( const T__Duration& timeWindow )
{
    d_ptr->mTimeWindow = timeWindow;
}

T__Duration T__FreeBusyViewOptionsType::timeWindow() const
{
    return d_ptr->mTimeWindow;
}

void T__FreeBusyViewOptionsType::setMergedFreeBusyIntervalInMinutes( int mergedFreeBusyIntervalInMinutes )
{
    d_ptr->mMergedFreeBusyIntervalInMinutes = mergedFreeBusyIntervalInMinutes;
}

int T__FreeBusyViewOptionsType::mergedFreeBusyIntervalInMinutes() const
{
    return d_ptr->mMergedFreeBusyIntervalInMinutes;
}

void T__FreeBusyViewOptionsType::setRequestedView( const T__FreeBusyViewType& requestedView )
{
    d_ptr->mRequestedView = requestedView;
}

T__FreeBusyViewType T__FreeBusyViewOptionsType::requestedView() const
{
    return d_ptr->mRequestedView;
}

KDSoapValue T__FreeBusyViewOptionsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FreeBusyViewOptionsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueTimeWindow(d_ptr->mTimeWindow.serialize(QString::fromLatin1("TimeWindow")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTimeWindow.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeWindow.setQualified(true);
    if (!_valueTimeWindow.isNil())
    args.append(_valueTimeWindow);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMergedFreeBusyIntervalInMinutes(QString::fromLatin1("MergedFreeBusyIntervalInMinutes"), QVariant::fromValue(d_ptr->mMergedFreeBusyIntervalInMinutes), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMergedFreeBusyIntervalInMinutes.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMergedFreeBusyIntervalInMinutes.setQualified(true);
    if (!_valueMergedFreeBusyIntervalInMinutes.isNil())
    args.append(_valueMergedFreeBusyIntervalInMinutes);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRequestedView(QString::fromLatin1("RequestedView"), d_ptr->mRequestedView.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FreeBusyViewType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueRequestedView.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRequestedView.setQualified(true);
    if (!_valueRequestedView.isNil())
    args.append(_valueRequestedView);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FreeBusyViewOptionsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("TimeWindow")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeWindow.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MergedFreeBusyIntervalInMinutes")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMergedFreeBusyIntervalInMinutes = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("RequestedView")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRequestedView.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__FreeBusyViewOptionsType::T__FreeBusyViewOptionsType()
    : d_ptr(new PrivateDPtr)
{
}

T__FreeBusyViewOptionsType::~T__FreeBusyViewOptionsType()
{
}

T__FreeBusyViewOptionsType::T__FreeBusyViewOptionsType( const T__FreeBusyViewOptionsType& other )
    : d_ptr( other.d_ptr )
{
}

T__FreeBusyViewOptionsType&  T__FreeBusyViewOptionsType::operator=( const T__FreeBusyViewOptionsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__TimeZoneDefinitionType::PrivateDPtr : public QSharedData
{
public:
    QString mId;
};

void T__TimeZoneDefinitionType::setId( const QString& id )
{
    d_ptr->mId = id;
}

QString T__TimeZoneDefinitionType::id() const
{
    return d_ptr->mId;
}

KDSoapValue T__TimeZoneDefinitionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TimeZoneDefinitionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList attribs;
    KDSoapValue _valueId(QString::fromLatin1("Id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueId.isNil())
    attribs.append(_valueId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__TimeZoneDefinitionType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Id")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__TimeZoneDefinitionType::T__TimeZoneDefinitionType()
    : d_ptr(new PrivateDPtr)
{
}

T__TimeZoneDefinitionType::~T__TimeZoneDefinitionType()
{
}

T__TimeZoneDefinitionType::T__TimeZoneDefinitionType( const T__TimeZoneDefinitionType& other )
    : d_ptr( other.d_ptr )
{
}

T__TimeZoneDefinitionType&  T__TimeZoneDefinitionType::operator=( const T__TimeZoneDefinitionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfRequestAttachmentIdsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__RequestAttachmentIdType> mAttachmentId;
};

void T__NonEmptyArrayOfRequestAttachmentIdsType::setAttachmentId( const QList<T__RequestAttachmentIdType>& attachmentId )
{
    d_ptr->mAttachmentId = attachmentId;
}

QList<T__RequestAttachmentIdType> T__NonEmptyArrayOfRequestAttachmentIdsType::attachmentId() const
{
    return d_ptr->mAttachmentId;
}

KDSoapValue T__NonEmptyArrayOfRequestAttachmentIdsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfRequestAttachmentIdsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mAttachmentId.count(); ++i) {
        KDSoapValue _valueAttachmentId(d_ptr->mAttachmentId.at(i).serialize(QString::fromLatin1("AttachmentId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueAttachmentId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueAttachmentId.setQualified(true);
        if (!_valueAttachmentId.isNil())
        args.append(_valueAttachmentId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfRequestAttachmentIdsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AttachmentId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__RequestAttachmentIdType mAttachmentIdTemp;
            mAttachmentIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mAttachmentId.append(mAttachmentIdTemp);
        }
    }
}

T__NonEmptyArrayOfRequestAttachmentIdsType::T__NonEmptyArrayOfRequestAttachmentIdsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfRequestAttachmentIdsType::~T__NonEmptyArrayOfRequestAttachmentIdsType()
{
}

T__NonEmptyArrayOfRequestAttachmentIdsType::T__NonEmptyArrayOfRequestAttachmentIdsType( const T__NonEmptyArrayOfRequestAttachmentIdsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfRequestAttachmentIdsType&  T__NonEmptyArrayOfRequestAttachmentIdsType::operator=( const T__NonEmptyArrayOfRequestAttachmentIdsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__CalendarEvent::PrivateDPtr : public QSharedData
{
public:
    KDDateTime mStartTime;
    KDDateTime mEndTime;
    T__LegacyFreeBusyType mBusyType;
    T__CalendarEventDetails mCalendarEventDetails;
};

void T__CalendarEvent::setStartTime( const KDDateTime& startTime )
{
    d_ptr->mStartTime = startTime;
}

KDDateTime T__CalendarEvent::startTime() const
{
    return d_ptr->mStartTime;
}

void T__CalendarEvent::setEndTime( const KDDateTime& endTime )
{
    d_ptr->mEndTime = endTime;
}

KDDateTime T__CalendarEvent::endTime() const
{
    return d_ptr->mEndTime;
}

void T__CalendarEvent::setBusyType( const T__LegacyFreeBusyType& busyType )
{
    d_ptr->mBusyType = busyType;
}

T__LegacyFreeBusyType T__CalendarEvent::busyType() const
{
    return d_ptr->mBusyType;
}

void T__CalendarEvent::setCalendarEventDetails( const T__CalendarEventDetails& calendarEventDetails )
{
    d_ptr->mCalendarEventDetails = calendarEventDetails;
}

T__CalendarEventDetails T__CalendarEvent::calendarEventDetails() const
{
    return d_ptr->mCalendarEventDetails;
}

KDSoapValue T__CalendarEvent::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarEvent"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueStartTime(QString::fromLatin1("StartTime"), d_ptr->mStartTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStartTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStartTime.setQualified(true);
    if (!_valueStartTime.isNil())
    args.append(_valueStartTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEndTime(QString::fromLatin1("EndTime"), d_ptr->mEndTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueEndTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEndTime.setQualified(true);
    if (!_valueEndTime.isNil())
    args.append(_valueEndTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBusyType(QString::fromLatin1("BusyType"), d_ptr->mBusyType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("LegacyFreeBusyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueBusyType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBusyType.setQualified(true);
    if (!_valueBusyType.isNil())
    args.append(_valueBusyType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarEventDetails(d_ptr->mCalendarEventDetails.serialize(QString::fromLatin1("CalendarEventDetails")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarEventDetails.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarEventDetails.setQualified(true);
    if (!_valueCalendarEventDetails.isNil())
    args.append(_valueCalendarEventDetails);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__CalendarEvent::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("StartTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStartTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("EndTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEndTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("BusyType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBusyType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("CalendarEventDetails")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarEventDetails.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__CalendarEvent::T__CalendarEvent()
    : d_ptr(new PrivateDPtr)
{
}

T__CalendarEvent::~T__CalendarEvent()
{
}

T__CalendarEvent::T__CalendarEvent( const T__CalendarEvent& other )
    : d_ptr( other.d_ptr )
{
}

T__CalendarEvent&  T__CalendarEvent::operator=( const T__CalendarEvent& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SyncFolderItemsDeleteType::PrivateDPtr : public QSharedData
{
public:
    T__ItemIdType mItemId;
};

void T__SyncFolderItemsDeleteType::setItemId( const T__ItemIdType& itemId )
{
    d_ptr->mItemId = itemId;
}

T__ItemIdType T__SyncFolderItemsDeleteType::itemId() const
{
    return d_ptr->mItemId;
}

KDSoapValue T__SyncFolderItemsDeleteType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SyncFolderItemsDeleteType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemId(d_ptr->mItemId.serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemId.setQualified(true);
    if (!_valueItemId.isNil())
    args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SyncFolderItemsDeleteType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SyncFolderItemsDeleteType::T__SyncFolderItemsDeleteType()
    : d_ptr(new PrivateDPtr)
{
}

T__SyncFolderItemsDeleteType::~T__SyncFolderItemsDeleteType()
{
}

T__SyncFolderItemsDeleteType::T__SyncFolderItemsDeleteType( const T__SyncFolderItemsDeleteType& other )
    : d_ptr( other.d_ptr )
{
}

T__SyncFolderItemsDeleteType&  T__SyncFolderItemsDeleteType::operator=( const T__SyncFolderItemsDeleteType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__BasePermissionType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__UserIdType mUserId;
    bool mCanCreateItems;
    bool mCanCreateSubFolders;
    bool mIsFolderOwner;
    bool mIsFolderVisible;
    bool mIsFolderContact;
    T__PermissionActionType mEditItems;
    T__PermissionActionType mDeleteItems;
};

T__BasePermissionType::PrivateDPtr::PrivateDPtr()
    : mCanCreateItems(false), mCanCreateSubFolders(false), mIsFolderOwner(false), mIsFolderVisible(false), mIsFolderContact(false)
{
}


void T__BasePermissionType::setUserId( const T__UserIdType& userId )
{
    d_ptr->mUserId = userId;
}

T__UserIdType T__BasePermissionType::userId() const
{
    return d_ptr->mUserId;
}

void T__BasePermissionType::setCanCreateItems( bool canCreateItems )
{
    d_ptr->mCanCreateItems = canCreateItems;
}

bool T__BasePermissionType::canCreateItems() const
{
    return d_ptr->mCanCreateItems;
}

void T__BasePermissionType::setCanCreateSubFolders( bool canCreateSubFolders )
{
    d_ptr->mCanCreateSubFolders = canCreateSubFolders;
}

bool T__BasePermissionType::canCreateSubFolders() const
{
    return d_ptr->mCanCreateSubFolders;
}

void T__BasePermissionType::setIsFolderOwner( bool isFolderOwner )
{
    d_ptr->mIsFolderOwner = isFolderOwner;
}

bool T__BasePermissionType::isFolderOwner() const
{
    return d_ptr->mIsFolderOwner;
}

void T__BasePermissionType::setIsFolderVisible( bool isFolderVisible )
{
    d_ptr->mIsFolderVisible = isFolderVisible;
}

bool T__BasePermissionType::isFolderVisible() const
{
    return d_ptr->mIsFolderVisible;
}

void T__BasePermissionType::setIsFolderContact( bool isFolderContact )
{
    d_ptr->mIsFolderContact = isFolderContact;
}

bool T__BasePermissionType::isFolderContact() const
{
    return d_ptr->mIsFolderContact;
}

void T__BasePermissionType::setEditItems( const T__PermissionActionType& editItems )
{
    d_ptr->mEditItems = editItems;
}

T__PermissionActionType T__BasePermissionType::editItems() const
{
    return d_ptr->mEditItems;
}

void T__BasePermissionType::setDeleteItems( const T__PermissionActionType& deleteItems )
{
    d_ptr->mDeleteItems = deleteItems;
}

T__PermissionActionType T__BasePermissionType::deleteItems() const
{
    return d_ptr->mDeleteItems;
}

KDSoapValue T__BasePermissionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BasePermissionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueUserId(d_ptr->mUserId.serialize(QString::fromLatin1("UserId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUserId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUserId.setQualified(true);
    if (!_valueUserId.isNil())
    args.append(_valueUserId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCanCreateItems(QString::fromLatin1("CanCreateItems"), QVariant::fromValue(d_ptr->mCanCreateItems), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCanCreateItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCanCreateItems.setQualified(true);
    if (!_valueCanCreateItems.isNil())
    args.append(_valueCanCreateItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCanCreateSubFolders(QString::fromLatin1("CanCreateSubFolders"), QVariant::fromValue(d_ptr->mCanCreateSubFolders), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCanCreateSubFolders.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCanCreateSubFolders.setQualified(true);
    if (!_valueCanCreateSubFolders.isNil())
    args.append(_valueCanCreateSubFolders);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsFolderOwner(QString::fromLatin1("IsFolderOwner"), QVariant::fromValue(d_ptr->mIsFolderOwner), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsFolderOwner.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsFolderOwner.setQualified(true);
    if (!_valueIsFolderOwner.isNil())
    args.append(_valueIsFolderOwner);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsFolderVisible(QString::fromLatin1("IsFolderVisible"), QVariant::fromValue(d_ptr->mIsFolderVisible), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsFolderVisible.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsFolderVisible.setQualified(true);
    if (!_valueIsFolderVisible.isNil())
    args.append(_valueIsFolderVisible);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsFolderContact(QString::fromLatin1("IsFolderContact"), QVariant::fromValue(d_ptr->mIsFolderContact), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsFolderContact.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsFolderContact.setQualified(true);
    if (!_valueIsFolderContact.isNil())
    args.append(_valueIsFolderContact);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEditItems(QString::fromLatin1("EditItems"), d_ptr->mEditItems.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PermissionActionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueEditItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEditItems.setQualified(true);
    if (!_valueEditItems.isNil())
    args.append(_valueEditItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDeleteItems(QString::fromLatin1("DeleteItems"), d_ptr->mDeleteItems.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PermissionActionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDeleteItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDeleteItems.setQualified(true);
    if (!_valueDeleteItems.isNil())
    args.append(_valueDeleteItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__BasePermissionType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UserId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUserId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CanCreateItems")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCanCreateItems = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CanCreateSubFolders")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCanCreateSubFolders = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsFolderOwner")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsFolderOwner = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsFolderVisible")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsFolderVisible = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsFolderContact")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsFolderContact = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("EditItems")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEditItems.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("DeleteItems")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDeleteItems.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__BasePermissionType::T__BasePermissionType()
    : d_ptr(new PrivateDPtr)
{
}

T__BasePermissionType::~T__BasePermissionType()
{
}

T__BasePermissionType::T__BasePermissionType( const T__BasePermissionType& other )
    : d_ptr( other.d_ptr )
{
}

T__BasePermissionType&  T__BasePermissionType::operator=( const T__BasePermissionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__EmailAddress::PrivateDPtr : public QSharedData
{
public:
    QString mName;
    QString mAddress;
    QString mRoutingType;
};

void T__EmailAddress::setName( const QString& name )
{
    d_ptr->mName = name;
}

QString T__EmailAddress::name() const
{
    return d_ptr->mName;
}

void T__EmailAddress::setAddress( const QString& address )
{
    d_ptr->mAddress = address;
}

QString T__EmailAddress::address() const
{
    return d_ptr->mAddress;
}

void T__EmailAddress::setRoutingType( const QString& routingType )
{
    d_ptr->mRoutingType = routingType;
}

QString T__EmailAddress::routingType() const
{
    return d_ptr->mRoutingType;
}

KDSoapValue T__EmailAddress::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("EmailAddress"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueName.setQualified(true);
    if (!_valueName.isNil())
    args.append(_valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAddress(QString::fromLatin1("Address"), QVariant::fromValue(d_ptr->mAddress), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAddress.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAddress.setQualified(true);
    if (!_valueAddress.isNil())
    args.append(_valueAddress);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRoutingType(QString::fromLatin1("RoutingType"), QVariant::fromValue(d_ptr->mRoutingType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueRoutingType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRoutingType.setQualified(true);
    if (!_valueRoutingType.isNil())
    args.append(_valueRoutingType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__EmailAddress::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Name")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Address")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAddress = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("RoutingType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRoutingType = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__EmailAddress::T__EmailAddress()
    : d_ptr(new PrivateDPtr)
{
}

T__EmailAddress::~T__EmailAddress()
{
}

T__EmailAddress::T__EmailAddress( const T__EmailAddress& other )
    : d_ptr( other.d_ptr )
{
}

T__EmailAddress&  T__EmailAddress::operator=( const T__EmailAddress& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__CompleteNameType::PrivateDPtr : public QSharedData
{
public:
    QString mTitle;
    QString mFirstName;
    QString mMiddleName;
    QString mLastName;
    QString mSuffix;
    QString mInitials;
    QString mFullName;
    QString mNickname;
    QString mYomiFirstName;
    QString mYomiLastName;
};

void T__CompleteNameType::setTitle( const QString& title )
{
    d_ptr->mTitle = title;
}

QString T__CompleteNameType::title() const
{
    return d_ptr->mTitle;
}

void T__CompleteNameType::setFirstName( const QString& firstName )
{
    d_ptr->mFirstName = firstName;
}

QString T__CompleteNameType::firstName() const
{
    return d_ptr->mFirstName;
}

void T__CompleteNameType::setMiddleName( const QString& middleName )
{
    d_ptr->mMiddleName = middleName;
}

QString T__CompleteNameType::middleName() const
{
    return d_ptr->mMiddleName;
}

void T__CompleteNameType::setLastName( const QString& lastName )
{
    d_ptr->mLastName = lastName;
}

QString T__CompleteNameType::lastName() const
{
    return d_ptr->mLastName;
}

void T__CompleteNameType::setSuffix( const QString& suffix )
{
    d_ptr->mSuffix = suffix;
}

QString T__CompleteNameType::suffix() const
{
    return d_ptr->mSuffix;
}

void T__CompleteNameType::setInitials( const QString& initials )
{
    d_ptr->mInitials = initials;
}

QString T__CompleteNameType::initials() const
{
    return d_ptr->mInitials;
}

void T__CompleteNameType::setFullName( const QString& fullName )
{
    d_ptr->mFullName = fullName;
}

QString T__CompleteNameType::fullName() const
{
    return d_ptr->mFullName;
}

void T__CompleteNameType::setNickname( const QString& nickname )
{
    d_ptr->mNickname = nickname;
}

QString T__CompleteNameType::nickname() const
{
    return d_ptr->mNickname;
}

void T__CompleteNameType::setYomiFirstName( const QString& yomiFirstName )
{
    d_ptr->mYomiFirstName = yomiFirstName;
}

QString T__CompleteNameType::yomiFirstName() const
{
    return d_ptr->mYomiFirstName;
}

void T__CompleteNameType::setYomiLastName( const QString& yomiLastName )
{
    d_ptr->mYomiLastName = yomiLastName;
}

QString T__CompleteNameType::yomiLastName() const
{
    return d_ptr->mYomiLastName;
}

KDSoapValue T__CompleteNameType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CompleteNameType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueTitle(QString::fromLatin1("Title"), QVariant::fromValue(d_ptr->mTitle), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTitle.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTitle.setQualified(true);
    if (!_valueTitle.isNil())
    args.append(_valueTitle);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFirstName(QString::fromLatin1("FirstName"), QVariant::fromValue(d_ptr->mFirstName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFirstName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFirstName.setQualified(true);
    if (!_valueFirstName.isNil())
    args.append(_valueFirstName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMiddleName(QString::fromLatin1("MiddleName"), QVariant::fromValue(d_ptr->mMiddleName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMiddleName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMiddleName.setQualified(true);
    if (!_valueMiddleName.isNil())
    args.append(_valueMiddleName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLastName(QString::fromLatin1("LastName"), QVariant::fromValue(d_ptr->mLastName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueLastName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLastName.setQualified(true);
    if (!_valueLastName.isNil())
    args.append(_valueLastName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSuffix(QString::fromLatin1("Suffix"), QVariant::fromValue(d_ptr->mSuffix), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSuffix.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSuffix.setQualified(true);
    if (!_valueSuffix.isNil())
    args.append(_valueSuffix);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInitials(QString::fromLatin1("Initials"), QVariant::fromValue(d_ptr->mInitials), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueInitials.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInitials.setQualified(true);
    if (!_valueInitials.isNil())
    args.append(_valueInitials);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFullName(QString::fromLatin1("FullName"), QVariant::fromValue(d_ptr->mFullName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFullName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFullName.setQualified(true);
    if (!_valueFullName.isNil())
    args.append(_valueFullName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNickname(QString::fromLatin1("Nickname"), QVariant::fromValue(d_ptr->mNickname), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNickname.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNickname.setQualified(true);
    if (!_valueNickname.isNil())
    args.append(_valueNickname);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueYomiFirstName(QString::fromLatin1("YomiFirstName"), QVariant::fromValue(d_ptr->mYomiFirstName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueYomiFirstName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueYomiFirstName.setQualified(true);
    if (!_valueYomiFirstName.isNil())
    args.append(_valueYomiFirstName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueYomiLastName(QString::fromLatin1("YomiLastName"), QVariant::fromValue(d_ptr->mYomiLastName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueYomiLastName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueYomiLastName.setQualified(true);
    if (!_valueYomiLastName.isNil())
    args.append(_valueYomiLastName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__CompleteNameType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Title")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTitle = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("FirstName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFirstName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MiddleName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMiddleName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("LastName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLastName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Suffix")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSuffix = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Initials")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInitials = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("FullName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFullName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Nickname")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNickname = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("YomiFirstName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mYomiFirstName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("YomiLastName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mYomiLastName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__CompleteNameType::T__CompleteNameType()
    : d_ptr(new PrivateDPtr)
{
}

T__CompleteNameType::~T__CompleteNameType()
{
}

T__CompleteNameType::T__CompleteNameType( const T__CompleteNameType& other )
    : d_ptr( other.d_ptr )
{
}

T__CompleteNameType&  T__CompleteNameType::operator=( const T__CompleteNameType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SyncFolderHierarchyDeleteType::PrivateDPtr : public QSharedData
{
public:
    T__FolderIdType mFolderId;
};

void T__SyncFolderHierarchyDeleteType::setFolderId( const T__FolderIdType& folderId )
{
    d_ptr->mFolderId = folderId;
}

T__FolderIdType T__SyncFolderHierarchyDeleteType::folderId() const
{
    return d_ptr->mFolderId;
}

KDSoapValue T__SyncFolderHierarchyDeleteType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SyncFolderHierarchyDeleteType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderId(d_ptr->mFolderId.serialize(QString::fromLatin1("FolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolderId.setQualified(true);
    if (!_valueFolderId.isNil())
    args.append(_valueFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SyncFolderHierarchyDeleteType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SyncFolderHierarchyDeleteType::T__SyncFolderHierarchyDeleteType()
    : d_ptr(new PrivateDPtr)
{
}

T__SyncFolderHierarchyDeleteType::~T__SyncFolderHierarchyDeleteType()
{
}

T__SyncFolderHierarchyDeleteType::T__SyncFolderHierarchyDeleteType( const T__SyncFolderHierarchyDeleteType& other )
    : d_ptr( other.d_ptr )
{
}

T__SyncFolderHierarchyDeleteType&  T__SyncFolderHierarchyDeleteType::operator=( const T__SyncFolderHierarchyDeleteType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SyncFolderItemsChangesType::PrivateDPtr : public QSharedData
{
public:
    QList<T__SyncFolderItemsCreateOrUpdateType> mCreate;
    QList<T__SyncFolderItemsCreateOrUpdateType> mUpdate;
    QList<T__SyncFolderItemsDeleteType> mDelete;
    QList<T__SyncFolderItemsReadFlagType> mReadFlagChange;
};

void T__SyncFolderItemsChangesType::setCreate( const QList<T__SyncFolderItemsCreateOrUpdateType>& create )
{
    d_ptr->mCreate = create;
}

QList<T__SyncFolderItemsCreateOrUpdateType> T__SyncFolderItemsChangesType::create() const
{
    return d_ptr->mCreate;
}

void T__SyncFolderItemsChangesType::setUpdate( const QList<T__SyncFolderItemsCreateOrUpdateType>& update )
{
    d_ptr->mUpdate = update;
}

QList<T__SyncFolderItemsCreateOrUpdateType> T__SyncFolderItemsChangesType::update() const
{
    return d_ptr->mUpdate;
}

void T__SyncFolderItemsChangesType::setDelete( const QList<T__SyncFolderItemsDeleteType>& delete_ )
{
    d_ptr->mDelete = delete_;
}

QList<T__SyncFolderItemsDeleteType> T__SyncFolderItemsChangesType::delete_() const
{
    return d_ptr->mDelete;
}

void T__SyncFolderItemsChangesType::setReadFlagChange( const QList<T__SyncFolderItemsReadFlagType>& readFlagChange )
{
    d_ptr->mReadFlagChange = readFlagChange;
}

QList<T__SyncFolderItemsReadFlagType> T__SyncFolderItemsChangesType::readFlagChange() const
{
    return d_ptr->mReadFlagChange;
}

KDSoapValue T__SyncFolderItemsChangesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SyncFolderItemsChangesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mCreate.count(); ++i) {
        KDSoapValue _valueCreate(d_ptr->mCreate.at(i).serialize(QString::fromLatin1("Create")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueCreate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueCreate.setQualified(true);
        if (!_valueCreate.isNil())
        args.append(_valueCreate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mUpdate.count(); ++i) {
        KDSoapValue _valueUpdate(d_ptr->mUpdate.at(i).serialize(QString::fromLatin1("Update")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueUpdate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueUpdate.setQualified(true);
        if (!_valueUpdate.isNil())
        args.append(_valueUpdate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mDelete.count(); ++i) {
        KDSoapValue _valueDelete(d_ptr->mDelete.at(i).serialize(QString::fromLatin1("Delete")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueDelete.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueDelete.setQualified(true);
        if (!_valueDelete.isNil())
        args.append(_valueDelete);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mReadFlagChange.count(); ++i) {
        KDSoapValue _valueReadFlagChange(d_ptr->mReadFlagChange.at(i).serialize(QString::fromLatin1("ReadFlagChange")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueReadFlagChange.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueReadFlagChange.setQualified(true);
        if (!_valueReadFlagChange.isNil())
        args.append(_valueReadFlagChange);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__SyncFolderItemsChangesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Create")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SyncFolderItemsCreateOrUpdateType mCreateTemp;
            mCreateTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mCreate.append(mCreateTemp);
        }
        else if (name == QLatin1String("Update")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SyncFolderItemsCreateOrUpdateType mUpdateTemp;
            mUpdateTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mUpdate.append(mUpdateTemp);
        }
        else if (name == QLatin1String("Delete")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SyncFolderItemsDeleteType mDeleteTemp;
            mDeleteTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mDelete.append(mDeleteTemp);
        }
        else if (name == QLatin1String("ReadFlagChange")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SyncFolderItemsReadFlagType mReadFlagChangeTemp;
            mReadFlagChangeTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mReadFlagChange.append(mReadFlagChangeTemp);
        }
    }
}

T__SyncFolderItemsChangesType::T__SyncFolderItemsChangesType()
    : d_ptr(new PrivateDPtr)
{
}

T__SyncFolderItemsChangesType::~T__SyncFolderItemsChangesType()
{
}

T__SyncFolderItemsChangesType::T__SyncFolderItemsChangesType( const T__SyncFolderItemsChangesType& other )
    : d_ptr( other.d_ptr )
{
}

T__SyncFolderItemsChangesType&  T__SyncFolderItemsChangesType::operator=( const T__SyncFolderItemsChangesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfGroupedItemsType::PrivateDPtr : public QSharedData
{
public:
    T__GroupedItemsType mGroupedItems;
};

void T__ArrayOfGroupedItemsType::setGroupedItems( const T__GroupedItemsType& groupedItems )
{
    d_ptr->mGroupedItems = groupedItems;
}

T__GroupedItemsType T__ArrayOfGroupedItemsType::groupedItems() const
{
    return d_ptr->mGroupedItems;
}

KDSoapValue T__ArrayOfGroupedItemsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfGroupedItemsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueGroupedItems(d_ptr->mGroupedItems.serialize(QString::fromLatin1("GroupedItems")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGroupedItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueGroupedItems.setQualified(true);
    if (!_valueGroupedItems.isNil())
    args.append(_valueGroupedItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ArrayOfGroupedItemsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GroupedItems")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGroupedItems.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ArrayOfGroupedItemsType::T__ArrayOfGroupedItemsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfGroupedItemsType::~T__ArrayOfGroupedItemsType()
{
}

T__ArrayOfGroupedItemsType::T__ArrayOfGroupedItemsType( const T__ArrayOfGroupedItemsType& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfGroupedItemsType&  T__ArrayOfGroupedItemsType::operator=( const T__ArrayOfGroupedItemsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__CalendarEventDetails::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mID;
    QString mSubject;
    QString mLocation;
    bool mIsMeeting;
    bool mIsRecurring;
    bool mIsException;
    bool mIsReminderSet;
    bool mIsPrivate;
};

T__CalendarEventDetails::PrivateDPtr::PrivateDPtr()
    : mIsMeeting(false), mIsRecurring(false), mIsException(false), mIsReminderSet(false), mIsPrivate(false)
{
}


void T__CalendarEventDetails::setID( const QString& iD )
{
    d_ptr->mID = iD;
}

QString T__CalendarEventDetails::iD() const
{
    return d_ptr->mID;
}

void T__CalendarEventDetails::setSubject( const QString& subject )
{
    d_ptr->mSubject = subject;
}

QString T__CalendarEventDetails::subject() const
{
    return d_ptr->mSubject;
}

void T__CalendarEventDetails::setLocation( const QString& location )
{
    d_ptr->mLocation = location;
}

QString T__CalendarEventDetails::location() const
{
    return d_ptr->mLocation;
}

void T__CalendarEventDetails::setIsMeeting( bool isMeeting )
{
    d_ptr->mIsMeeting = isMeeting;
}

bool T__CalendarEventDetails::isMeeting() const
{
    return d_ptr->mIsMeeting;
}

void T__CalendarEventDetails::setIsRecurring( bool isRecurring )
{
    d_ptr->mIsRecurring = isRecurring;
}

bool T__CalendarEventDetails::isRecurring() const
{
    return d_ptr->mIsRecurring;
}

void T__CalendarEventDetails::setIsException( bool isException )
{
    d_ptr->mIsException = isException;
}

bool T__CalendarEventDetails::isException() const
{
    return d_ptr->mIsException;
}

void T__CalendarEventDetails::setIsReminderSet( bool isReminderSet )
{
    d_ptr->mIsReminderSet = isReminderSet;
}

bool T__CalendarEventDetails::isReminderSet() const
{
    return d_ptr->mIsReminderSet;
}

void T__CalendarEventDetails::setIsPrivate( bool isPrivate )
{
    d_ptr->mIsPrivate = isPrivate;
}

bool T__CalendarEventDetails::isPrivate() const
{
    return d_ptr->mIsPrivate;
}

KDSoapValue T__CalendarEventDetails::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarEventDetails"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueID(QString::fromLatin1("ID"), QVariant::fromValue(d_ptr->mID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueID.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueID.setQualified(true);
    if (!_valueID.isNil())
    args.append(_valueID);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSubject(QString::fromLatin1("Subject"), QVariant::fromValue(d_ptr->mSubject), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSubject.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSubject.setQualified(true);
    if (!_valueSubject.isNil())
    args.append(_valueSubject);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLocation(QString::fromLatin1("Location"), QVariant::fromValue(d_ptr->mLocation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueLocation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLocation.setQualified(true);
    if (!_valueLocation.isNil())
    args.append(_valueLocation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsMeeting(QString::fromLatin1("IsMeeting"), QVariant::fromValue(d_ptr->mIsMeeting), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsMeeting.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsMeeting.setQualified(true);
    if (!_valueIsMeeting.isNil())
    args.append(_valueIsMeeting);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsRecurring(QString::fromLatin1("IsRecurring"), QVariant::fromValue(d_ptr->mIsRecurring), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsRecurring.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsRecurring.setQualified(true);
    if (!_valueIsRecurring.isNil())
    args.append(_valueIsRecurring);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsException(QString::fromLatin1("IsException"), QVariant::fromValue(d_ptr->mIsException), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsException.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsException.setQualified(true);
    if (!_valueIsException.isNil())
    args.append(_valueIsException);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsReminderSet(QString::fromLatin1("IsReminderSet"), QVariant::fromValue(d_ptr->mIsReminderSet), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsReminderSet.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsReminderSet.setQualified(true);
    if (!_valueIsReminderSet.isNil())
    args.append(_valueIsReminderSet);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsPrivate(QString::fromLatin1("IsPrivate"), QVariant::fromValue(d_ptr->mIsPrivate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsPrivate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsPrivate.setQualified(true);
    if (!_valueIsPrivate.isNil())
    args.append(_valueIsPrivate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__CalendarEventDetails::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ID")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mID = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Subject")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSubject = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Location")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLocation = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsMeeting")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsMeeting = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsRecurring")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsRecurring = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsException")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsException = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsReminderSet")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsReminderSet = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsPrivate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsPrivate = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__CalendarEventDetails::T__CalendarEventDetails()
    : d_ptr(new PrivateDPtr)
{
}

T__CalendarEventDetails::~T__CalendarEventDetails()
{
}

T__CalendarEventDetails::T__CalendarEventDetails( const T__CalendarEventDetails& other )
    : d_ptr( other.d_ptr )
{
}

T__CalendarEventDetails&  T__CalendarEventDetails::operator=( const T__CalendarEventDetails& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfBaseItemIdsType::PrivateDPtr : public QSharedData
{
public:
    QList<T__ItemIdType> mItemId;
    QList<T__OccurrenceItemIdType> mOccurrenceItemId;
    QList<T__RecurringMasterItemIdType> mRecurringMasterItemId;
};

void T__NonEmptyArrayOfBaseItemIdsType::setItemId( const QList<T__ItemIdType>& itemId )
{
    d_ptr->mItemId = itemId;
}

QList<T__ItemIdType> T__NonEmptyArrayOfBaseItemIdsType::itemId() const
{
    return d_ptr->mItemId;
}

void T__NonEmptyArrayOfBaseItemIdsType::setOccurrenceItemId( const QList<T__OccurrenceItemIdType>& occurrenceItemId )
{
    d_ptr->mOccurrenceItemId = occurrenceItemId;
}

QList<T__OccurrenceItemIdType> T__NonEmptyArrayOfBaseItemIdsType::occurrenceItemId() const
{
    return d_ptr->mOccurrenceItemId;
}

void T__NonEmptyArrayOfBaseItemIdsType::setRecurringMasterItemId( const QList<T__RecurringMasterItemIdType>& recurringMasterItemId )
{
    d_ptr->mRecurringMasterItemId = recurringMasterItemId;
}

QList<T__RecurringMasterItemIdType> T__NonEmptyArrayOfBaseItemIdsType::recurringMasterItemId() const
{
    return d_ptr->mRecurringMasterItemId;
}

KDSoapValue T__NonEmptyArrayOfBaseItemIdsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfBaseItemIdsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mItemId.count(); ++i) {
        KDSoapValue _valueItemId(d_ptr->mItemId.at(i).serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueItemId.setQualified(true);
        if (!_valueItemId.isNil())
        args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mOccurrenceItemId.count(); ++i) {
        KDSoapValue _valueOccurrenceItemId(d_ptr->mOccurrenceItemId.at(i).serialize(QString::fromLatin1("OccurrenceItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueOccurrenceItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueOccurrenceItemId.setQualified(true);
        if (!_valueOccurrenceItemId.isNil())
        args.append(_valueOccurrenceItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    for (int i = 0; i < d_ptr->mRecurringMasterItemId.count(); ++i) {
        KDSoapValue _valueRecurringMasterItemId(d_ptr->mRecurringMasterItemId.at(i).serialize(QString::fromLatin1("RecurringMasterItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueRecurringMasterItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueRecurringMasterItemId.setQualified(true);
        if (!_valueRecurringMasterItemId.isNil())
        args.append(_valueRecurringMasterItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfBaseItemIdsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ItemIdType mItemIdTemp;
            mItemIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mItemId.append(mItemIdTemp);
        }
        else if (name == QLatin1String("OccurrenceItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__OccurrenceItemIdType mOccurrenceItemIdTemp;
            mOccurrenceItemIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mOccurrenceItemId.append(mOccurrenceItemIdTemp);
        }
        else if (name == QLatin1String("RecurringMasterItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__RecurringMasterItemIdType mRecurringMasterItemIdTemp;
            mRecurringMasterItemIdTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mRecurringMasterItemId.append(mRecurringMasterItemIdTemp);
        }
    }
}

T__NonEmptyArrayOfBaseItemIdsType::T__NonEmptyArrayOfBaseItemIdsType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfBaseItemIdsType::~T__NonEmptyArrayOfBaseItemIdsType()
{
}

T__NonEmptyArrayOfBaseItemIdsType::T__NonEmptyArrayOfBaseItemIdsType( const T__NonEmptyArrayOfBaseItemIdsType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfBaseItemIdsType&  T__NonEmptyArrayOfBaseItemIdsType::operator=( const T__NonEmptyArrayOfBaseItemIdsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__RequestServerVersion::PrivateDPtr : public QSharedData
{
public:
    T__ExchangeVersionType mVersion;
    KDSoapValue mAnyAttribute;
};

void T__RequestServerVersion::setVersion( const T__ExchangeVersionType& version )
{
    d_ptr->mVersion = version;
}

T__ExchangeVersionType T__RequestServerVersion::version() const
{
    return d_ptr->mVersion;
}

void T__RequestServerVersion::setAnyAttribute( const KDSoapValue& anyAttribute )
{
    d_ptr->mAnyAttribute = anyAttribute;
}

KDSoapValue T__RequestServerVersion::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue T__RequestServerVersion::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RequestServerVersion"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList attribs;
    KDSoapValue _valueVersion(QString::fromLatin1("Version"), d_ptr->mVersion.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExchangeVersionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueVersion.isNil())
    attribs.append(_valueVersion);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:199
    }
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__RequestServerVersion::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Version")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mVersion.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("anyAttribute")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAnyAttribute = val;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:251
        }
    }
}

T__RequestServerVersion::T__RequestServerVersion()
    : d_ptr(new PrivateDPtr)
{
}

T__RequestServerVersion::~T__RequestServerVersion()
{
}

T__RequestServerVersion::T__RequestServerVersion( const T__RequestServerVersion& other )
    : d_ptr( other.d_ptr )
{
}

T__RequestServerVersion&  T__RequestServerVersion::operator=( const T__RequestServerVersion& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__RecurrenceType::PrivateDPtr : public QSharedData
{
public:
    T__RelativeYearlyRecurrencePatternType mRelativeYearlyRecurrence;
    T__AbsoluteYearlyRecurrencePatternType mAbsoluteYearlyRecurrence;
    T__RelativeMonthlyRecurrencePatternType mRelativeMonthlyRecurrence;
    T__AbsoluteMonthlyRecurrencePatternType mAbsoluteMonthlyRecurrence;
    T__WeeklyRecurrencePatternType mWeeklyRecurrence;
    T__DailyRecurrencePatternType mDailyRecurrence;
    T__NoEndRecurrenceRangeType mNoEndRecurrence;
    T__EndDateRecurrenceRangeType mEndDateRecurrence;
    T__NumberedRecurrenceRangeType mNumberedRecurrence;
};

void T__RecurrenceType::setRelativeYearlyRecurrence( const T__RelativeYearlyRecurrencePatternType& relativeYearlyRecurrence )
{
    d_ptr->mRelativeYearlyRecurrence = relativeYearlyRecurrence;
}

T__RelativeYearlyRecurrencePatternType T__RecurrenceType::relativeYearlyRecurrence() const
{
    return d_ptr->mRelativeYearlyRecurrence;
}

void T__RecurrenceType::setAbsoluteYearlyRecurrence( const T__AbsoluteYearlyRecurrencePatternType& absoluteYearlyRecurrence )
{
    d_ptr->mAbsoluteYearlyRecurrence = absoluteYearlyRecurrence;
}

T__AbsoluteYearlyRecurrencePatternType T__RecurrenceType::absoluteYearlyRecurrence() const
{
    return d_ptr->mAbsoluteYearlyRecurrence;
}

void T__RecurrenceType::setRelativeMonthlyRecurrence( const T__RelativeMonthlyRecurrencePatternType& relativeMonthlyRecurrence )
{
    d_ptr->mRelativeMonthlyRecurrence = relativeMonthlyRecurrence;
}

T__RelativeMonthlyRecurrencePatternType T__RecurrenceType::relativeMonthlyRecurrence() const
{
    return d_ptr->mRelativeMonthlyRecurrence;
}

void T__RecurrenceType::setAbsoluteMonthlyRecurrence( const T__AbsoluteMonthlyRecurrencePatternType& absoluteMonthlyRecurrence )
{
    d_ptr->mAbsoluteMonthlyRecurrence = absoluteMonthlyRecurrence;
}

T__AbsoluteMonthlyRecurrencePatternType T__RecurrenceType::absoluteMonthlyRecurrence() const
{
    return d_ptr->mAbsoluteMonthlyRecurrence;
}

void T__RecurrenceType::setWeeklyRecurrence( const T__WeeklyRecurrencePatternType& weeklyRecurrence )
{
    d_ptr->mWeeklyRecurrence = weeklyRecurrence;
}

T__WeeklyRecurrencePatternType T__RecurrenceType::weeklyRecurrence() const
{
    return d_ptr->mWeeklyRecurrence;
}

void T__RecurrenceType::setDailyRecurrence( const T__DailyRecurrencePatternType& dailyRecurrence )
{
    d_ptr->mDailyRecurrence = dailyRecurrence;
}

T__DailyRecurrencePatternType T__RecurrenceType::dailyRecurrence() const
{
    return d_ptr->mDailyRecurrence;
}

void T__RecurrenceType::setNoEndRecurrence( const T__NoEndRecurrenceRangeType& noEndRecurrence )
{
    d_ptr->mNoEndRecurrence = noEndRecurrence;
}

T__NoEndRecurrenceRangeType T__RecurrenceType::noEndRecurrence() const
{
    return d_ptr->mNoEndRecurrence;
}

void T__RecurrenceType::setEndDateRecurrence( const T__EndDateRecurrenceRangeType& endDateRecurrence )
{
    d_ptr->mEndDateRecurrence = endDateRecurrence;
}

T__EndDateRecurrenceRangeType T__RecurrenceType::endDateRecurrence() const
{
    return d_ptr->mEndDateRecurrence;
}

void T__RecurrenceType::setNumberedRecurrence( const T__NumberedRecurrenceRangeType& numberedRecurrence )
{
    d_ptr->mNumberedRecurrence = numberedRecurrence;
}

T__NumberedRecurrenceRangeType T__RecurrenceType::numberedRecurrence() const
{
    return d_ptr->mNumberedRecurrence;
}

KDSoapValue T__RecurrenceType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RecurrenceType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueRelativeYearlyRecurrence(d_ptr->mRelativeYearlyRecurrence.serialize(QString::fromLatin1("RelativeYearlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRelativeYearlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRelativeYearlyRecurrence.setQualified(true);
    if (!_valueRelativeYearlyRecurrence.isNil())
    args.append(_valueRelativeYearlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAbsoluteYearlyRecurrence(d_ptr->mAbsoluteYearlyRecurrence.serialize(QString::fromLatin1("AbsoluteYearlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAbsoluteYearlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAbsoluteYearlyRecurrence.setQualified(true);
    if (!_valueAbsoluteYearlyRecurrence.isNil())
    args.append(_valueAbsoluteYearlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRelativeMonthlyRecurrence(d_ptr->mRelativeMonthlyRecurrence.serialize(QString::fromLatin1("RelativeMonthlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRelativeMonthlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRelativeMonthlyRecurrence.setQualified(true);
    if (!_valueRelativeMonthlyRecurrence.isNil())
    args.append(_valueRelativeMonthlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAbsoluteMonthlyRecurrence(d_ptr->mAbsoluteMonthlyRecurrence.serialize(QString::fromLatin1("AbsoluteMonthlyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAbsoluteMonthlyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAbsoluteMonthlyRecurrence.setQualified(true);
    if (!_valueAbsoluteMonthlyRecurrence.isNil())
    args.append(_valueAbsoluteMonthlyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWeeklyRecurrence(d_ptr->mWeeklyRecurrence.serialize(QString::fromLatin1("WeeklyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueWeeklyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWeeklyRecurrence.setQualified(true);
    if (!_valueWeeklyRecurrence.isNil())
    args.append(_valueWeeklyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDailyRecurrence(d_ptr->mDailyRecurrence.serialize(QString::fromLatin1("DailyRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDailyRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDailyRecurrence.setQualified(true);
    if (!_valueDailyRecurrence.isNil())
    args.append(_valueDailyRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNoEndRecurrence(d_ptr->mNoEndRecurrence.serialize(QString::fromLatin1("NoEndRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueNoEndRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNoEndRecurrence.setQualified(true);
    if (!_valueNoEndRecurrence.isNil())
    args.append(_valueNoEndRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEndDateRecurrence(d_ptr->mEndDateRecurrence.serialize(QString::fromLatin1("EndDateRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueEndDateRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEndDateRecurrence.setQualified(true);
    if (!_valueEndDateRecurrence.isNil())
    args.append(_valueEndDateRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNumberedRecurrence(d_ptr->mNumberedRecurrence.serialize(QString::fromLatin1("NumberedRecurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueNumberedRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNumberedRecurrence.setQualified(true);
    if (!_valueNumberedRecurrence.isNil())
    args.append(_valueNumberedRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__RecurrenceType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("RelativeYearlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRelativeYearlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AbsoluteYearlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAbsoluteYearlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("RelativeMonthlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRelativeMonthlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AbsoluteMonthlyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAbsoluteMonthlyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("WeeklyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWeeklyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DailyRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDailyRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("NoEndRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNoEndRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("EndDateRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEndDateRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("NumberedRecurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNumberedRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__RecurrenceType::T__RecurrenceType()
    : d_ptr(new PrivateDPtr)
{
}

T__RecurrenceType::~T__RecurrenceType()
{
}

T__RecurrenceType::T__RecurrenceType( const T__RecurrenceType& other )
    : d_ptr( other.d_ptr )
{
}

T__RecurrenceType&  T__RecurrenceType::operator=( const T__RecurrenceType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__AttendeeType::PrivateDPtr : public QSharedData
{
public:
    T__EmailAddressType mMailbox;
    T__ResponseTypeType mResponseType;
    KDDateTime mLastResponseTime;
};

void T__AttendeeType::setMailbox( const T__EmailAddressType& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddressType T__AttendeeType::mailbox() const
{
    return d_ptr->mMailbox;
}

void T__AttendeeType::setResponseType( const T__ResponseTypeType& responseType )
{
    d_ptr->mResponseType = responseType;
}

T__ResponseTypeType T__AttendeeType::responseType() const
{
    return d_ptr->mResponseType;
}

void T__AttendeeType::setLastResponseTime( const KDDateTime& lastResponseTime )
{
    d_ptr->mLastResponseTime = lastResponseTime;
}

KDDateTime T__AttendeeType::lastResponseTime() const
{
    return d_ptr->mLastResponseTime;
}

KDSoapValue T__AttendeeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AttendeeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueResponseType(QString::fromLatin1("ResponseType"), d_ptr->mResponseType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResponseTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueResponseType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueResponseType.setQualified(true);
    if (!_valueResponseType.isNil())
    args.append(_valueResponseType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLastResponseTime(QString::fromLatin1("LastResponseTime"), d_ptr->mLastResponseTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueLastResponseTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLastResponseTime.setQualified(true);
    if (!_valueLastResponseTime.isNil())
    args.append(_valueLastResponseTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__AttendeeType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ResponseType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("LastResponseTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLastResponseTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__AttendeeType::T__AttendeeType()
    : d_ptr(new PrivateDPtr)
{
}

T__AttendeeType::~T__AttendeeType()
{
}

T__AttendeeType::T__AttendeeType( const T__AttendeeType& other )
    : d_ptr( other.d_ptr )
{
}

T__AttendeeType&  T__AttendeeType::operator=( const T__AttendeeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__ArrayOfWorkingPeriod::PrivateDPtr : public QSharedData
{
public:
    QList<T__WorkingPeriod> mWorkingPeriod;
};

void T__ArrayOfWorkingPeriod::setWorkingPeriod( const QList<T__WorkingPeriod>& workingPeriod )
{
    d_ptr->mWorkingPeriod = workingPeriod;
}

QList<T__WorkingPeriod> T__ArrayOfWorkingPeriod::workingPeriod() const
{
    return d_ptr->mWorkingPeriod;
}

KDSoapValue T__ArrayOfWorkingPeriod::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ArrayOfWorkingPeriod"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mWorkingPeriod.count(); ++i) {
        KDSoapValue _valueWorkingPeriod(d_ptr->mWorkingPeriod.at(i).serialize(QString::fromLatin1("WorkingPeriod")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueWorkingPeriod.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueWorkingPeriod.setQualified(true);
        if (!_valueWorkingPeriod.isNil())
        args.append(_valueWorkingPeriod);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__ArrayOfWorkingPeriod::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("WorkingPeriod")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__WorkingPeriod mWorkingPeriodTemp;
            mWorkingPeriodTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mWorkingPeriod.append(mWorkingPeriodTemp);
        }
    }
}

T__ArrayOfWorkingPeriod::T__ArrayOfWorkingPeriod()
    : d_ptr(new PrivateDPtr)
{
}

T__ArrayOfWorkingPeriod::~T__ArrayOfWorkingPeriod()
{
}

T__ArrayOfWorkingPeriod::T__ArrayOfWorkingPeriod( const T__ArrayOfWorkingPeriod& other )
    : d_ptr( other.d_ptr )
{
}

T__ArrayOfWorkingPeriod&  T__ArrayOfWorkingPeriod::operator=( const T__ArrayOfWorkingPeriod& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfGroupIdentifiersType::PrivateDPtr : public QSharedData
{
public:
    QList<T__SidAndAttributesType> mGroupIdentifier;
};

void T__NonEmptyArrayOfGroupIdentifiersType::setGroupIdentifier( const QList<T__SidAndAttributesType>& groupIdentifier )
{
    d_ptr->mGroupIdentifier = groupIdentifier;
}

QList<T__SidAndAttributesType> T__NonEmptyArrayOfGroupIdentifiersType::groupIdentifier() const
{
    return d_ptr->mGroupIdentifier;
}

KDSoapValue T__NonEmptyArrayOfGroupIdentifiersType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfGroupIdentifiersType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mGroupIdentifier.count(); ++i) {
        KDSoapValue _valueGroupIdentifier(d_ptr->mGroupIdentifier.at(i).serialize(QString::fromLatin1("GroupIdentifier")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueGroupIdentifier.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueGroupIdentifier.setQualified(true);
        if (!_valueGroupIdentifier.isNil())
        args.append(_valueGroupIdentifier);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__NonEmptyArrayOfGroupIdentifiersType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GroupIdentifier")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SidAndAttributesType mGroupIdentifierTemp;
            mGroupIdentifierTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mGroupIdentifier.append(mGroupIdentifierTemp);
        }
    }
}

T__NonEmptyArrayOfGroupIdentifiersType::T__NonEmptyArrayOfGroupIdentifiersType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfGroupIdentifiersType::~T__NonEmptyArrayOfGroupIdentifiersType()
{
}

T__NonEmptyArrayOfGroupIdentifiersType::T__NonEmptyArrayOfGroupIdentifiersType( const T__NonEmptyArrayOfGroupIdentifiersType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfGroupIdentifiersType&  T__NonEmptyArrayOfGroupIdentifiersType::operator=( const T__NonEmptyArrayOfGroupIdentifiersType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__BaseFolderType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__FolderIdType mFolderId;
    T__FolderIdType mParentFolderId;
    QString mFolderClass;
    QString mDisplayName;
    int mTotalCount;
    int mChildFolderCount;
    QList<T__ExtendedPropertyType> mExtendedProperty;
    T__ManagedFolderInformationType mManagedFolderInformation;
    T__EffectiveRightsType mEffectiveRights;
};

T__BaseFolderType::PrivateDPtr::PrivateDPtr()
    : mTotalCount(0), mChildFolderCount(0)
{
}


void T__BaseFolderType::setFolderId( const T__FolderIdType& folderId )
{
    d_ptr->mFolderId = folderId;
}

T__FolderIdType T__BaseFolderType::folderId() const
{
    return d_ptr->mFolderId;
}

void T__BaseFolderType::setParentFolderId( const T__FolderIdType& parentFolderId )
{
    d_ptr->mParentFolderId = parentFolderId;
}

T__FolderIdType T__BaseFolderType::parentFolderId() const
{
    return d_ptr->mParentFolderId;
}

void T__BaseFolderType::setFolderClass( const QString& folderClass )
{
    d_ptr->mFolderClass = folderClass;
}

QString T__BaseFolderType::folderClass() const
{
    return d_ptr->mFolderClass;
}

void T__BaseFolderType::setDisplayName( const QString& displayName )
{
    d_ptr->mDisplayName = displayName;
}

QString T__BaseFolderType::displayName() const
{
    return d_ptr->mDisplayName;
}

void T__BaseFolderType::setTotalCount( int totalCount )
{
    d_ptr->mTotalCount = totalCount;
}

int T__BaseFolderType::totalCount() const
{
    return d_ptr->mTotalCount;
}

void T__BaseFolderType::setChildFolderCount( int childFolderCount )
{
    d_ptr->mChildFolderCount = childFolderCount;
}

int T__BaseFolderType::childFolderCount() const
{
    return d_ptr->mChildFolderCount;
}

void T__BaseFolderType::setExtendedProperty( const QList<T__ExtendedPropertyType>& extendedProperty )
{
    d_ptr->mExtendedProperty = extendedProperty;
}

QList<T__ExtendedPropertyType> T__BaseFolderType::extendedProperty() const
{
    return d_ptr->mExtendedProperty;
}

void T__BaseFolderType::setManagedFolderInformation( const T__ManagedFolderInformationType& managedFolderInformation )
{
    d_ptr->mManagedFolderInformation = managedFolderInformation;
}

T__ManagedFolderInformationType T__BaseFolderType::managedFolderInformation() const
{
    return d_ptr->mManagedFolderInformation;
}

void T__BaseFolderType::setEffectiveRights( const T__EffectiveRightsType& effectiveRights )
{
    d_ptr->mEffectiveRights = effectiveRights;
}

T__EffectiveRightsType T__BaseFolderType::effectiveRights() const
{
    return d_ptr->mEffectiveRights;
}

KDSoapValue T__BaseFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BaseFolderType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderId(d_ptr->mFolderId.serialize(QString::fromLatin1("FolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolderId.setQualified(true);
    if (!_valueFolderId.isNil())
    args.append(_valueFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueParentFolderId(d_ptr->mParentFolderId.serialize(QString::fromLatin1("ParentFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueParentFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueParentFolderId.setQualified(true);
    if (!_valueParentFolderId.isNil())
    args.append(_valueParentFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFolderClass(QString::fromLatin1("FolderClass"), QVariant::fromValue(d_ptr->mFolderClass), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFolderClass.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolderClass.setQualified(true);
    if (!_valueFolderClass.isNil())
    args.append(_valueFolderClass);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDisplayName(QString::fromLatin1("DisplayName"), QVariant::fromValue(d_ptr->mDisplayName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDisplayName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDisplayName.setQualified(true);
    if (!_valueDisplayName.isNil())
    args.append(_valueDisplayName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTotalCount(QString::fromLatin1("TotalCount"), QVariant::fromValue(d_ptr->mTotalCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTotalCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTotalCount.setQualified(true);
    if (!_valueTotalCount.isNil())
    args.append(_valueTotalCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChildFolderCount(QString::fromLatin1("ChildFolderCount"), QVariant::fromValue(d_ptr->mChildFolderCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueChildFolderCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueChildFolderCount.setQualified(true);
    if (!_valueChildFolderCount.isNil())
    args.append(_valueChildFolderCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    for (int i = 0; i < d_ptr->mExtendedProperty.count(); ++i) {
        KDSoapValue _valueExtendedProperty(d_ptr->mExtendedProperty.at(i).serialize(QString::fromLatin1("ExtendedProperty")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueExtendedProperty.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueExtendedProperty.setQualified(true);
        if (!_valueExtendedProperty.isNil())
        args.append(_valueExtendedProperty);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    KDSoapValue _valueManagedFolderInformation(d_ptr->mManagedFolderInformation.serialize(QString::fromLatin1("ManagedFolderInformation")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueManagedFolderInformation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueManagedFolderInformation.setQualified(true);
    if (!_valueManagedFolderInformation.isNil())
    args.append(_valueManagedFolderInformation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEffectiveRights(d_ptr->mEffectiveRights.serialize(QString::fromLatin1("EffectiveRights")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueEffectiveRights.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEffectiveRights.setQualified(true);
    if (!_valueEffectiveRights.isNil())
    args.append(_valueEffectiveRights);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__BaseFolderType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ParentFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mParentFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FolderClass")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderClass = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DisplayName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDisplayName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("TotalCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTotalCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ChildFolderCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChildFolderCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ExtendedProperty")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__ExtendedPropertyType mExtendedPropertyTemp;
            mExtendedPropertyTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mExtendedProperty.append(mExtendedPropertyTemp);
        }
        else if (name == QLatin1String("ManagedFolderInformation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mManagedFolderInformation.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("EffectiveRights")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEffectiveRights.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__BaseFolderType::T__BaseFolderType()
    : d_ptr(new PrivateDPtr)
{
}

T__BaseFolderType::~T__BaseFolderType()
{
}

T__BaseFolderType::T__BaseFolderType( const T__BaseFolderType& other )
    : d_ptr( other.d_ptr )
{
}

T__BaseFolderType&  T__BaseFolderType::operator=( const T__BaseFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__UserIdType::PrivateDPtr : public QSharedData
{
public:
    QString mSID;
    QString mPrimarySmtpAddress;
    QString mDisplayName;
    T__DistinguishedUserType mDistinguishedUser;
};

void T__UserIdType::setSID( const QString& sID )
{
    d_ptr->mSID = sID;
}

QString T__UserIdType::sID() const
{
    return d_ptr->mSID;
}

void T__UserIdType::setPrimarySmtpAddress( const QString& primarySmtpAddress )
{
    d_ptr->mPrimarySmtpAddress = primarySmtpAddress;
}

QString T__UserIdType::primarySmtpAddress() const
{
    return d_ptr->mPrimarySmtpAddress;
}

void T__UserIdType::setDisplayName( const QString& displayName )
{
    d_ptr->mDisplayName = displayName;
}

QString T__UserIdType::displayName() const
{
    return d_ptr->mDisplayName;
}

void T__UserIdType::setDistinguishedUser( const T__DistinguishedUserType& distinguishedUser )
{
    d_ptr->mDistinguishedUser = distinguishedUser;
}

T__DistinguishedUserType T__UserIdType::distinguishedUser() const
{
    return d_ptr->mDistinguishedUser;
}

KDSoapValue T__UserIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("UserIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSID(QString::fromLatin1("SID"), QVariant::fromValue(d_ptr->mSID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSID.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSID.setQualified(true);
    if (!_valueSID.isNil())
    args.append(_valueSID);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePrimarySmtpAddress(QString::fromLatin1("PrimarySmtpAddress"), QVariant::fromValue(d_ptr->mPrimarySmtpAddress), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePrimarySmtpAddress.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePrimarySmtpAddress.setQualified(true);
    if (!_valuePrimarySmtpAddress.isNil())
    args.append(_valuePrimarySmtpAddress);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDisplayName(QString::fromLatin1("DisplayName"), QVariant::fromValue(d_ptr->mDisplayName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDisplayName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDisplayName.setQualified(true);
    if (!_valueDisplayName.isNil())
    args.append(_valueDisplayName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDistinguishedUser(QString::fromLatin1("DistinguishedUser"), d_ptr->mDistinguishedUser.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DistinguishedUserType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDistinguishedUser.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDistinguishedUser.setQualified(true);
    if (!_valueDistinguishedUser.isNil())
    args.append(_valueDistinguishedUser);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__UserIdType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SID")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSID = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("PrimarySmtpAddress")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPrimarySmtpAddress = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DisplayName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDisplayName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DistinguishedUser")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDistinguishedUser.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__UserIdType::T__UserIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__UserIdType::~T__UserIdType()
{
}

T__UserIdType::T__UserIdType( const T__UserIdType& other )
    : d_ptr( other.d_ptr )
{
}

T__UserIdType&  T__UserIdType::operator=( const T__UserIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SingleRecipientType::PrivateDPtr : public QSharedData
{
public:
    T__EmailAddressType mMailbox;
};

void T__SingleRecipientType::setMailbox( const T__EmailAddressType& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddressType T__SingleRecipientType::mailbox() const
{
    return d_ptr->mMailbox;
}

KDSoapValue T__SingleRecipientType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SingleRecipientType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SingleRecipientType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SingleRecipientType::T__SingleRecipientType()
    : d_ptr(new PrivateDPtr)
{
}

T__SingleRecipientType::~T__SingleRecipientType()
{
}

T__SingleRecipientType::T__SingleRecipientType( const T__SingleRecipientType& other )
    : d_ptr( other.d_ptr )
{
}

T__SingleRecipientType&  T__SingleRecipientType::operator=( const T__SingleRecipientType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__NonEmptyArrayOfPropertyValuesType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
};

void T__NonEmptyArrayOfPropertyValuesType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString T__NonEmptyArrayOfPropertyValuesType::value() const
{
    return d_ptr->mValue;
}

KDSoapValue T__NonEmptyArrayOfPropertyValuesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyArrayOfPropertyValuesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueValue(QString::fromLatin1("Value"), QVariant::fromValue(d_ptr->mValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueValue.setQualified(true);
    if (!_valueValue.isNil())
    args.append(_valueValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__NonEmptyArrayOfPropertyValuesType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Value")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mValue = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__NonEmptyArrayOfPropertyValuesType::T__NonEmptyArrayOfPropertyValuesType()
    : d_ptr(new PrivateDPtr)
{
}

T__NonEmptyArrayOfPropertyValuesType::~T__NonEmptyArrayOfPropertyValuesType()
{
}

T__NonEmptyArrayOfPropertyValuesType::T__NonEmptyArrayOfPropertyValuesType( const T__NonEmptyArrayOfPropertyValuesType& other )
    : d_ptr( other.d_ptr )
{
}

T__NonEmptyArrayOfPropertyValuesType&  T__NonEmptyArrayOfPropertyValuesType::operator=( const T__NonEmptyArrayOfPropertyValuesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__PhysicalAddressDictionaryType::PrivateDPtr : public QSharedData
{
public:
    QList<T__PhysicalAddressDictionaryEntryType> mEntry;
};

void T__PhysicalAddressDictionaryType::setEntry( const QList<T__PhysicalAddressDictionaryEntryType>& entry )
{
    d_ptr->mEntry = entry;
}

QList<T__PhysicalAddressDictionaryEntryType> T__PhysicalAddressDictionaryType::entry() const
{
    return d_ptr->mEntry;
}

KDSoapValue T__PhysicalAddressDictionaryType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PhysicalAddressDictionaryType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mEntry.count(); ++i) {
        KDSoapValue _valueEntry(d_ptr->mEntry.at(i).serialize(QString::fromLatin1("Entry")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueEntry.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueEntry.setQualified(true);
        if (!_valueEntry.isNil())
        args.append(_valueEntry);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__PhysicalAddressDictionaryType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Entry")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__PhysicalAddressDictionaryEntryType mEntryTemp;
            mEntryTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mEntry.append(mEntryTemp);
        }
    }
}

T__PhysicalAddressDictionaryType::T__PhysicalAddressDictionaryType()
    : d_ptr(new PrivateDPtr)
{
}

T__PhysicalAddressDictionaryType::~T__PhysicalAddressDictionaryType()
{
}

T__PhysicalAddressDictionaryType::T__PhysicalAddressDictionaryType( const T__PhysicalAddressDictionaryType& other )
    : d_ptr( other.d_ptr )
{
}

T__PhysicalAddressDictionaryType&  T__PhysicalAddressDictionaryType::operator=( const T__PhysicalAddressDictionaryType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__SuggestionsResponseType::PrivateDPtr : public QSharedData
{
public:
    TNS__ResponseMessageType mResponseMessage;
    T__ArrayOfSuggestionDayResult mSuggestionDayResultArray;
};

void TNS__SuggestionsResponseType::setResponseMessage( const TNS__ResponseMessageType& responseMessage )
{
    d_ptr->mResponseMessage = responseMessage;
}

TNS__ResponseMessageType TNS__SuggestionsResponseType::responseMessage() const
{
    return d_ptr->mResponseMessage;
}

void TNS__SuggestionsResponseType::setSuggestionDayResultArray( const T__ArrayOfSuggestionDayResult& suggestionDayResultArray )
{
    d_ptr->mSuggestionDayResultArray = suggestionDayResultArray;
}

T__ArrayOfSuggestionDayResult TNS__SuggestionsResponseType::suggestionDayResultArray() const
{
    return d_ptr->mSuggestionDayResultArray;
}

KDSoapValue TNS__SuggestionsResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SuggestionsResponseType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueResponseMessage(d_ptr->mResponseMessage.serialize(QString::fromLatin1("ResponseMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResponseMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResponseMessage.setQualified(true);
    if (!_valueResponseMessage.isNil())
    args.append(_valueResponseMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSuggestionDayResultArray(d_ptr->mSuggestionDayResultArray.serialize(QString::fromLatin1("SuggestionDayResultArray")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSuggestionDayResultArray.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSuggestionDayResultArray.setQualified(true);
    if (!_valueSuggestionDayResultArray.isNil())
    args.append(_valueSuggestionDayResultArray);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SuggestionsResponseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ResponseMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SuggestionDayResultArray")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSuggestionDayResultArray.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__SuggestionsResponseType::TNS__SuggestionsResponseType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SuggestionsResponseType::~TNS__SuggestionsResponseType()
{
}

TNS__SuggestionsResponseType::TNS__SuggestionsResponseType( const TNS__SuggestionsResponseType& other )
    : d_ptr( other.d_ptr )
{
}

TNS__SuggestionsResponseType&  TNS__SuggestionsResponseType::operator=( const TNS__SuggestionsResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue T__BaseFolderIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BaseFolderIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    return mainValue;
}

void T__BaseFolderIdType::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__BaseFolderIdType::T__BaseFolderIdType()
{
}

T__BaseFolderIdType::~T__BaseFolderIdType()
{
}


KDSoapValue TNS__BaseRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("BaseRequestType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    return mainValue;
}

void TNS__BaseRequestType::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__BaseRequestType::TNS__BaseRequestType()
{
}

TNS__BaseRequestType::~TNS__BaseRequestType()
{
}


class T__FindFolderParentType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfFoldersType mFolders;
};

void T__FindFolderParentType::setFolders( const T__ArrayOfFoldersType& folders )
{
    d_ptr->mFolders = folders;
}

T__ArrayOfFoldersType T__FindFolderParentType::folders() const
{
    return d_ptr->mFolders;
}

KDSoapValue T__FindFolderParentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FindFolderParentType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolders(d_ptr->mFolders.serialize(QString::fromLatin1("Folders")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolders.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolders.setQualified(true);
    if (!_valueFolders.isNil())
    args.append(_valueFolders);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FindFolderParentType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Folders")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolders.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__FindFolderParentType::T__FindFolderParentType()
    : d_ptr(new PrivateDPtr)
{
}

T__FindFolderParentType::~T__FindFolderParentType()
{
}

T__FindFolderParentType::T__FindFolderParentType( const T__FindFolderParentType& other )
    : d_ptr( other.d_ptr )
{
}

T__FindFolderParentType&  T__FindFolderParentType::operator=( const T__FindFolderParentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class T__SyncFolderItemsCreateOrUpdateType::PrivateDPtr : public QSharedData
{
public:
    T__ItemType mItem;
    T__MessageType mMessage;
    T__CalendarItemType mCalendarItem;
    T__ContactItemType mContact;
    T__DistributionListType mDistributionList;
    T__MeetingMessageType mMeetingMessage;
    T__MeetingRequestMessageType mMeetingRequest;
    T__MeetingResponseMessageType mMeetingResponse;
    T__MeetingCancellationMessageType mMeetingCancellation;
    T__TaskType mTask;
    T__PostItemType mPostItem;
};

void T__SyncFolderItemsCreateOrUpdateType::setItem( const T__ItemType& item )
{
    d_ptr->mItem = item;
}

T__ItemType T__SyncFolderItemsCreateOrUpdateType::item() const
{
    return d_ptr->mItem;
}

void T__SyncFolderItemsCreateOrUpdateType::setMessage( const T__MessageType& message )
{
    d_ptr->mMessage = message;
}

T__MessageType T__SyncFolderItemsCreateOrUpdateType::message() const
{
    return d_ptr->mMessage;
}

void T__SyncFolderItemsCreateOrUpdateType::setCalendarItem( const T__CalendarItemType& calendarItem )
{
    d_ptr->mCalendarItem = calendarItem;
}

T__CalendarItemType T__SyncFolderItemsCreateOrUpdateType::calendarItem() const
{
    return d_ptr->mCalendarItem;
}

void T__SyncFolderItemsCreateOrUpdateType::setContact( const T__ContactItemType& contact )
{
    d_ptr->mContact = contact;
}

T__ContactItemType T__SyncFolderItemsCreateOrUpdateType::contact() const
{
    return d_ptr->mContact;
}

void T__SyncFolderItemsCreateOrUpdateType::setDistributionList( const T__DistributionListType& distributionList )
{
    d_ptr->mDistributionList = distributionList;
}

T__DistributionListType T__SyncFolderItemsCreateOrUpdateType::distributionList() const
{
    return d_ptr->mDistributionList;
}

void T__SyncFolderItemsCreateOrUpdateType::setMeetingMessage( const T__MeetingMessageType& meetingMessage )
{
    d_ptr->mMeetingMessage = meetingMessage;
}

T__MeetingMessageType T__SyncFolderItemsCreateOrUpdateType::meetingMessage() const
{
    return d_ptr->mMeetingMessage;
}

void T__SyncFolderItemsCreateOrUpdateType::setMeetingRequest( const T__MeetingRequestMessageType& meetingRequest )
{
    d_ptr->mMeetingRequest = meetingRequest;
}

T__MeetingRequestMessageType T__SyncFolderItemsCreateOrUpdateType::meetingRequest() const
{
    return d_ptr->mMeetingRequest;
}

void T__SyncFolderItemsCreateOrUpdateType::setMeetingResponse( const T__MeetingResponseMessageType& meetingResponse )
{
    d_ptr->mMeetingResponse = meetingResponse;
}

T__MeetingResponseMessageType T__SyncFolderItemsCreateOrUpdateType::meetingResponse() const
{
    return d_ptr->mMeetingResponse;
}

void T__SyncFolderItemsCreateOrUpdateType::setMeetingCancellation( const T__MeetingCancellationMessageType& meetingCancellation )
{
    d_ptr->mMeetingCancellation = meetingCancellation;
}

T__MeetingCancellationMessageType T__SyncFolderItemsCreateOrUpdateType::meetingCancellation() const
{
    return d_ptr->mMeetingCancellation;
}

void T__SyncFolderItemsCreateOrUpdateType::setTask( const T__TaskType& task )
{
    d_ptr->mTask = task;
}

T__TaskType T__SyncFolderItemsCreateOrUpdateType::task() const
{
    return d_ptr->mTask;
}

void T__SyncFolderItemsCreateOrUpdateType::setPostItem( const T__PostItemType& postItem )
{
    d_ptr->mPostItem = postItem;
}

T__PostItemType T__SyncFolderItemsCreateOrUpdateType::postItem() const
{
    return d_ptr->mPostItem;
}

KDSoapValue T__SyncFolderItemsCreateOrUpdateType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SyncFolderItemsCreateOrUpdateType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:328
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItem(d_ptr->mItem.serialize(QString::fromLatin1("Item")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItem.setQualified(true);
    if (!_valueItem.isNil())
    args.append(_valueItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMessage(d_ptr->mMessage.serialize(QString::fromLatin1("Message")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMessage.setQualified(true);
    if (!_valueMessage.isNil())
    args.append(_valueMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarItem(d_ptr->mCalendarItem.serialize(QString::fromLatin1("CalendarItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarItem.setQualified(true);
    if (!_valueCalendarItem.isNil())
    args.append(_valueCalendarItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContact(d_ptr->mContact.serialize(QString::fromLatin1("Contact")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContact.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContact.setQualified(true);
    if (!_valueContact.isNil())
    args.append(_valueContact);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDistributionList(d_ptr->mDistributionList.serialize(QString::fromLatin1("DistributionList")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDistributionList.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDistributionList.setQualified(true);
    if (!_valueDistributionList.isNil())
    args.append(_valueDistributionList);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingMessage(d_ptr->mMeetingMessage.serialize(QString::fromLatin1("MeetingMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingMessage.setQualified(true);
    if (!_valueMeetingMessage.isNil())
    args.append(_valueMeetingMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingRequest(d_ptr->mMeetingRequest.serialize(QString::fromLatin1("MeetingRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingRequest.setQualified(true);
    if (!_valueMeetingRequest.isNil())
    args.append(_valueMeetingRequest);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingResponse(d_ptr->mMeetingResponse.serialize(QString::fromLatin1("MeetingResponse")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingResponse.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingResponse.setQualified(true);
    if (!_valueMeetingResponse.isNil())
    args.append(_valueMeetingResponse);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingCancellation(d_ptr->mMeetingCancellation.serialize(QString::fromLatin1("MeetingCancellation")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingCancellation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingCancellation.setQualified(true);
    if (!_valueMeetingCancellation.isNil())
    args.append(_valueMeetingCancellation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTask(d_ptr->mTask.serialize(QString::fromLatin1("Task")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTask.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTask.setQualified(true);
    if (!_valueTask.isNil())
    args.append(_valueTask);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePostItem(d_ptr->mPostItem.serialize(QString::fromLatin1("PostItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePostItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePostItem.setQualified(true);
    if (!_valuePostItem.isNil())
    args.append(_valuePostItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SyncFolderItemsCreateOrUpdateType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Item")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Message")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CalendarItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Contact")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContact.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DistributionList")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDistributionList.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingRequest")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingRequest.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingResponse")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingResponse.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingCancellation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingCancellation.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Task")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTask.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("PostItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPostItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SyncFolderItemsCreateOrUpdateType::T__SyncFolderItemsCreateOrUpdateType()
    : d_ptr(new PrivateDPtr)
{
}

T__SyncFolderItemsCreateOrUpdateType::~T__SyncFolderItemsCreateOrUpdateType()
{
}

T__SyncFolderItemsCreateOrUpdateType::T__SyncFolderItemsCreateOrUpdateType( const T__SyncFolderItemsCreateOrUpdateType& other )
    : d_ptr( other.d_ptr )
{
}

T__SyncFolderItemsCreateOrUpdateType&  T__SyncFolderItemsCreateOrUpdateType::operator=( const T__SyncFolderItemsCreateOrUpdateType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


void T__WatermarkType::setValue( const T__NonEmptyStringType& value )
{
    mValue = value;
}

T__NonEmptyStringType T__WatermarkType::value() const
{
    return mValue;
}

T__WatermarkType::T__WatermarkType( const T__NonEmptyStringType& value )
{
    setValue(value);
}

T__WatermarkType::T__WatermarkType( const QString& value )
{
    setValue(T__NonEmptyStringType(value));
}

T__WatermarkType::operator T__NonEmptyStringType() const
{
    return mValue;
}

QVariant T__WatermarkType::serialize() const
{
    return mValue.serialize();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:366
}

void T__WatermarkType::deserialize( const QVariant& value )
{
    mValue.deserialize( value );// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:367
}

T__WatermarkType::T__WatermarkType()
{
}

T__WatermarkType::~T__WatermarkType()
{
}


void T__SubscriptionIdType::setValue( const T__NonEmptyStringType& value )
{
    mValue = value;
}

T__NonEmptyStringType T__SubscriptionIdType::value() const
{
    return mValue;
}

T__SubscriptionIdType::T__SubscriptionIdType( const T__NonEmptyStringType& value )
{
    setValue(value);
}

T__SubscriptionIdType::T__SubscriptionIdType( const QString& value )
{
    setValue(T__NonEmptyStringType(value));
}

T__SubscriptionIdType::operator T__NonEmptyStringType() const
{
    return mValue;
}

QVariant T__SubscriptionIdType::serialize() const
{
    return mValue.serialize();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:366
}

void T__SubscriptionIdType::deserialize( const QVariant& value )
{
    mValue.deserialize( value );// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_simpletype.cpp:367
}

T__SubscriptionIdType::T__SubscriptionIdType()
{
}

T__SubscriptionIdType::~T__SubscriptionIdType()
{
}


class T__AlternatePublicFolderIdType::PrivateDPtr : public QSharedData
{
public:
    QString mFolderId;
};

void T__AlternatePublicFolderIdType::setFolderId( const QString& folderId )
{
    d_ptr->mFolderId = folderId;
}

QString T__AlternatePublicFolderIdType::folderId() const
{
    return d_ptr->mFolderId;
}

KDSoapValue T__AlternatePublicFolderIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AlternateIdBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AlternatePublicFolderIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueFolderId(QString::fromLatin1("FolderId"), QVariant::fromValue(d_ptr->mFolderId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueFolderId.isNil())
    attribs.append(_valueFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__AlternatePublicFolderIdType::deserialize( const KDSoapValue& mainValue )
{
    T__AlternateIdBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__AlternatePublicFolderIdType::T__AlternatePublicFolderIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__AlternatePublicFolderIdType::~T__AlternatePublicFolderIdType()
{
}

T__AlternatePublicFolderIdType::T__AlternatePublicFolderIdType( const T__AlternatePublicFolderIdType& other )
    : T__AlternateIdBaseType( other ), d_ptr( other.d_ptr )
{
}

T__AlternatePublicFolderIdType&  T__AlternatePublicFolderIdType::operator=( const T__AlternatePublicFolderIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__AlternateIdBaseType *>(this) = other;

    return *this;
}


KDSoapValue TNS__MoveFolderResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("MoveFolderResponseType"));
    return mainValue;
}

void TNS__MoveFolderResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__MoveFolderResponseType::TNS__MoveFolderResponseType()
{
}

TNS__MoveFolderResponseType::~TNS__MoveFolderResponseType()
{
}


class T__AlternateIdType::PrivateDPtr : public QSharedData
{
public:
    QString mId;
    T__NonEmptyStringType mMailbox;
};

void T__AlternateIdType::setId( const QString& id )
{
    d_ptr->mId = id;
}

QString T__AlternateIdType::id() const
{
    return d_ptr->mId;
}

void T__AlternateIdType::setMailbox( const T__NonEmptyStringType& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__NonEmptyStringType T__AlternateIdType::mailbox() const
{
    return d_ptr->mMailbox;
}

KDSoapValue T__AlternateIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AlternateIdBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AlternateIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueId(QString::fromLatin1("Id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueId.isNil())
    attribs.append(_valueId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMailbox(QString::fromLatin1("Mailbox"), d_ptr->mMailbox.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyStringType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueMailbox.isNil())
    attribs.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__AlternateIdType::deserialize( const KDSoapValue& mainValue )
{
    T__AlternateIdBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Id")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__AlternateIdType::T__AlternateIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__AlternateIdType::~T__AlternateIdType()
{
}

T__AlternateIdType::T__AlternateIdType( const T__AlternateIdType& other )
    : T__AlternateIdBaseType( other ), d_ptr( other.d_ptr )
{
}

T__AlternateIdType&  T__AlternateIdType::operator=( const T__AlternateIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__AlternateIdBaseType *>(this) = other;

    return *this;
}


KDSoapValue TNS__CreateFolderResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CreateFolderResponseType"));
    return mainValue;
}

void TNS__CreateFolderResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__CreateFolderResponseType::TNS__CreateFolderResponseType()
{
}

TNS__CreateFolderResponseType::~TNS__CreateFolderResponseType()
{
}


class TNS__ResolveNamesType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__NonEmptyArrayOfBaseFolderIdsType mParentFolderIds;
    T__NonEmptyStringType mUnresolvedEntry;
    bool mReturnFullContactData;
    T__ResolveNamesSearchScopeType mSearchScope;
};

TNS__ResolveNamesType::PrivateDPtr::PrivateDPtr()
    : mReturnFullContactData(false)
{
}


void TNS__ResolveNamesType::setParentFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& parentFolderIds )
{
    d_ptr->mParentFolderIds = parentFolderIds;
}

T__NonEmptyArrayOfBaseFolderIdsType TNS__ResolveNamesType::parentFolderIds() const
{
    return d_ptr->mParentFolderIds;
}

void TNS__ResolveNamesType::setUnresolvedEntry( const T__NonEmptyStringType& unresolvedEntry )
{
    d_ptr->mUnresolvedEntry = unresolvedEntry;
}

T__NonEmptyStringType TNS__ResolveNamesType::unresolvedEntry() const
{
    return d_ptr->mUnresolvedEntry;
}

void TNS__ResolveNamesType::setReturnFullContactData( bool returnFullContactData )
{
    d_ptr->mReturnFullContactData = returnFullContactData;
}

bool TNS__ResolveNamesType::returnFullContactData() const
{
    return d_ptr->mReturnFullContactData;
}

void TNS__ResolveNamesType::setSearchScope( const T__ResolveNamesSearchScopeType& searchScope )
{
    d_ptr->mSearchScope = searchScope;
}

T__ResolveNamesSearchScopeType TNS__ResolveNamesType::searchScope() const
{
    return d_ptr->mSearchScope;
}

KDSoapValue TNS__ResolveNamesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ResolveNamesType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueParentFolderIds(d_ptr->mParentFolderIds.serialize(QString::fromLatin1("ParentFolderIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueParentFolderIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueParentFolderIds.setQualified(true);
    if (!_valueParentFolderIds.isNil())
    args.append(_valueParentFolderIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueUnresolvedEntry(QString::fromLatin1("UnresolvedEntry"), d_ptr->mUnresolvedEntry.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyStringType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueUnresolvedEntry.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUnresolvedEntry.setQualified(true);
    if (!_valueUnresolvedEntry.isNil())
    args.append(_valueUnresolvedEntry);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueReturnFullContactData(QString::fromLatin1("ReturnFullContactData"), QVariant::fromValue(d_ptr->mReturnFullContactData), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueReturnFullContactData.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueReturnFullContactData.isNil())
    attribs.append(_valueReturnFullContactData);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSearchScope(QString::fromLatin1("SearchScope"), d_ptr->mSearchScope.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResolveNamesSearchScopeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSearchScope.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueSearchScope.isNil())
    attribs.append(_valueSearchScope);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__ResolveNamesType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ParentFolderIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mParentFolderIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("UnresolvedEntry")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUnresolvedEntry.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ReturnFullContactData")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReturnFullContactData = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("SearchScope")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSearchScope.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__ResolveNamesType::TNS__ResolveNamesType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ResolveNamesType::~TNS__ResolveNamesType()
{
}

TNS__ResolveNamesType::TNS__ResolveNamesType( const TNS__ResolveNamesType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__ResolveNamesType&  TNS__ResolveNamesType::operator=( const TNS__ResolveNamesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__FindFolderType::PrivateDPtr : public QSharedData
{
public:
    T__FolderResponseShapeType mFolderShape;
    T__IndexedPageViewType mIndexedPageFolderView;
    T__FractionalPageViewType mFractionalPageFolderView;
    T__RestrictionType mRestriction;
    T__NonEmptyArrayOfBaseFolderIdsType mParentFolderIds;
    T__FolderQueryTraversalType mTraversal;
};

void TNS__FindFolderType::setFolderShape( const T__FolderResponseShapeType& folderShape )
{
    d_ptr->mFolderShape = folderShape;
}

T__FolderResponseShapeType TNS__FindFolderType::folderShape() const
{
    return d_ptr->mFolderShape;
}

void TNS__FindFolderType::setIndexedPageFolderView( const T__IndexedPageViewType& indexedPageFolderView )
{
    d_ptr->mIndexedPageFolderView = indexedPageFolderView;
}

T__IndexedPageViewType TNS__FindFolderType::indexedPageFolderView() const
{
    return d_ptr->mIndexedPageFolderView;
}

void TNS__FindFolderType::setFractionalPageFolderView( const T__FractionalPageViewType& fractionalPageFolderView )
{
    d_ptr->mFractionalPageFolderView = fractionalPageFolderView;
}

T__FractionalPageViewType TNS__FindFolderType::fractionalPageFolderView() const
{
    return d_ptr->mFractionalPageFolderView;
}

void TNS__FindFolderType::setRestriction( const T__RestrictionType& restriction )
{
    d_ptr->mRestriction = restriction;
}

T__RestrictionType TNS__FindFolderType::restriction() const
{
    return d_ptr->mRestriction;
}

void TNS__FindFolderType::setParentFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& parentFolderIds )
{
    d_ptr->mParentFolderIds = parentFolderIds;
}

T__NonEmptyArrayOfBaseFolderIdsType TNS__FindFolderType::parentFolderIds() const
{
    return d_ptr->mParentFolderIds;
}

void TNS__FindFolderType::setTraversal( const T__FolderQueryTraversalType& traversal )
{
    d_ptr->mTraversal = traversal;
}

T__FolderQueryTraversalType TNS__FindFolderType::traversal() const
{
    return d_ptr->mTraversal;
}

KDSoapValue TNS__FindFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("FindFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderShape(d_ptr->mFolderShape.serialize(QString::fromLatin1("FolderShape")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolderShape.setQualified(true);
    if (!_valueFolderShape.isNil())
    args.append(_valueFolderShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIndexedPageFolderView(d_ptr->mIndexedPageFolderView.serialize(QString::fromLatin1("IndexedPageFolderView")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueIndexedPageFolderView.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueIndexedPageFolderView.setQualified(true);
    if (!_valueIndexedPageFolderView.isNil())
    args.append(_valueIndexedPageFolderView);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFractionalPageFolderView(d_ptr->mFractionalPageFolderView.serialize(QString::fromLatin1("FractionalPageFolderView")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFractionalPageFolderView.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFractionalPageFolderView.setQualified(true);
    if (!_valueFractionalPageFolderView.isNil())
    args.append(_valueFractionalPageFolderView);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRestriction(d_ptr->mRestriction.serialize(QString::fromLatin1("Restriction")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRestriction.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueRestriction.setQualified(true);
    if (!_valueRestriction.isNil())
    args.append(_valueRestriction);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueParentFolderIds(d_ptr->mParentFolderIds.serialize(QString::fromLatin1("ParentFolderIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueParentFolderIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueParentFolderIds.setQualified(true);
    if (!_valueParentFolderIds.isNil())
    args.append(_valueParentFolderIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueTraversal(QString::fromLatin1("Traversal"), d_ptr->mTraversal.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FolderQueryTraversalType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueTraversal.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueTraversal.isNil())
    attribs.append(_valueTraversal);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__FindFolderType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderShape.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IndexedPageFolderView")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIndexedPageFolderView.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FractionalPageFolderView")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFractionalPageFolderView.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Restriction")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRestriction.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ParentFolderIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mParentFolderIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Traversal")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTraversal.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__FindFolderType::TNS__FindFolderType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__FindFolderType::~TNS__FindFolderType()
{
}

TNS__FindFolderType::TNS__FindFolderType( const TNS__FindFolderType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__FindFolderType&  TNS__FindFolderType::operator=( const TNS__FindFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue T__TooBigGroupAttendeeConflictData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AttendeeConflictData::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TooBigGroupAttendeeConflictData"));
    return mainValue;
}

void T__TooBigGroupAttendeeConflictData::deserialize( const KDSoapValue& mainValue )
{
    T__AttendeeConflictData::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__TooBigGroupAttendeeConflictData::T__TooBigGroupAttendeeConflictData()
{
}

T__TooBigGroupAttendeeConflictData::~T__TooBigGroupAttendeeConflictData()
{
}


class TNS__SyncFolderItemsResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mSyncState;
    bool mIncludesLastItemInRange;
    T__SyncFolderItemsChangesType mChanges;
};

TNS__SyncFolderItemsResponseMessageType::PrivateDPtr::PrivateDPtr()
    : mIncludesLastItemInRange(false)
{
}


void TNS__SyncFolderItemsResponseMessageType::setSyncState( const QString& syncState )
{
    d_ptr->mSyncState = syncState;
}

QString TNS__SyncFolderItemsResponseMessageType::syncState() const
{
    return d_ptr->mSyncState;
}

void TNS__SyncFolderItemsResponseMessageType::setIncludesLastItemInRange( bool includesLastItemInRange )
{
    d_ptr->mIncludesLastItemInRange = includesLastItemInRange;
}

bool TNS__SyncFolderItemsResponseMessageType::includesLastItemInRange() const
{
    return d_ptr->mIncludesLastItemInRange;
}

void TNS__SyncFolderItemsResponseMessageType::setChanges( const T__SyncFolderItemsChangesType& changes )
{
    d_ptr->mChanges = changes;
}

T__SyncFolderItemsChangesType TNS__SyncFolderItemsResponseMessageType::changes() const
{
    return d_ptr->mChanges;
}

KDSoapValue TNS__SyncFolderItemsResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SyncFolderItemsResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSyncState(QString::fromLatin1("SyncState"), QVariant::fromValue(d_ptr->mSyncState), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSyncState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncState.setQualified(true);
    if (!_valueSyncState.isNil())
    args.append(_valueSyncState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIncludesLastItemInRange(QString::fromLatin1("IncludesLastItemInRange"), QVariant::fromValue(d_ptr->mIncludesLastItemInRange), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIncludesLastItemInRange.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueIncludesLastItemInRange.setQualified(true);
    if (!_valueIncludesLastItemInRange.isNil())
    args.append(_valueIncludesLastItemInRange);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChanges(d_ptr->mChanges.serialize(QString::fromLatin1("Changes")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueChanges.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueChanges.setQualified(true);
    if (!_valueChanges.isNil())
    args.append(_valueChanges);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SyncFolderItemsResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SyncState")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSyncState = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IncludesLastItemInRange")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIncludesLastItemInRange = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Changes")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChanges.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__SyncFolderItemsResponseMessageType::TNS__SyncFolderItemsResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SyncFolderItemsResponseMessageType::~TNS__SyncFolderItemsResponseMessageType()
{
}

TNS__SyncFolderItemsResponseMessageType::TNS__SyncFolderItemsResponseMessageType( const TNS__SyncFolderItemsResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__SyncFolderItemsResponseMessageType&  TNS__SyncFolderItemsResponseMessageType::operator=( const TNS__SyncFolderItemsResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


KDSoapValue TNS__UpdateItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UpdateItemResponseType"));
    return mainValue;
}

void TNS__UpdateItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__UpdateItemResponseType::TNS__UpdateItemResponseType()
{
}

TNS__UpdateItemResponseType::~TNS__UpdateItemResponseType()
{
}


class TNS__DeleteAttachmentResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__RootItemIdType mRootItemId;
};

void TNS__DeleteAttachmentResponseMessageType::setRootItemId( const T__RootItemIdType& rootItemId )
{
    d_ptr->mRootItemId = rootItemId;
}

T__RootItemIdType TNS__DeleteAttachmentResponseMessageType::rootItemId() const
{
    return d_ptr->mRootItemId;
}

KDSoapValue TNS__DeleteAttachmentResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("DeleteAttachmentResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueRootItemId(d_ptr->mRootItemId.serialize(QString::fromLatin1("RootItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRootItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueRootItemId.setQualified(true);
    if (!_valueRootItemId.isNil())
    args.append(_valueRootItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__DeleteAttachmentResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("RootItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRootItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__DeleteAttachmentResponseMessageType::TNS__DeleteAttachmentResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__DeleteAttachmentResponseMessageType::~TNS__DeleteAttachmentResponseMessageType()
{
}

TNS__DeleteAttachmentResponseMessageType::TNS__DeleteAttachmentResponseMessageType( const TNS__DeleteAttachmentResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__DeleteAttachmentResponseMessageType&  TNS__DeleteAttachmentResponseMessageType::operator=( const TNS__DeleteAttachmentResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class T__TaskType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mActualWork;
    KDDateTime mAssignedTime;
    QString mBillingInformation;
    int mChangeCount;
    T__ArrayOfStringsType mCompanies;
    KDDateTime mCompleteDate;
    T__ArrayOfStringsType mContacts;
    T__TaskDelegateStateType mDelegationState;
    QString mDelegator;
    KDDateTime mDueDate;
    int mIsAssignmentEditable;
    bool mIsComplete;
    bool mIsRecurring;
    bool mIsTeamTask;
    QString mMileage;
    QString mOwner;
    double mPercentComplete;
    T__TaskRecurrenceType mRecurrence;
    KDDateTime mStartDate;
    T__TaskStatusType mStatus;
    QString mStatusDescription;
    int mTotalWork;
};

T__TaskType::PrivateDPtr::PrivateDPtr()
    : mActualWork(0), mChangeCount(0), mIsAssignmentEditable(0), mIsComplete(false), mIsRecurring(false), mIsTeamTask(false), mPercentComplete(0), mTotalWork(0)
{
}


void T__TaskType::setActualWork( int actualWork )
{
    d_ptr->mActualWork = actualWork;
}

int T__TaskType::actualWork() const
{
    return d_ptr->mActualWork;
}

void T__TaskType::setAssignedTime( const KDDateTime& assignedTime )
{
    d_ptr->mAssignedTime = assignedTime;
}

KDDateTime T__TaskType::assignedTime() const
{
    return d_ptr->mAssignedTime;
}

void T__TaskType::setBillingInformation( const QString& billingInformation )
{
    d_ptr->mBillingInformation = billingInformation;
}

QString T__TaskType::billingInformation() const
{
    return d_ptr->mBillingInformation;
}

void T__TaskType::setChangeCount( int changeCount )
{
    d_ptr->mChangeCount = changeCount;
}

int T__TaskType::changeCount() const
{
    return d_ptr->mChangeCount;
}

void T__TaskType::setCompanies( const T__ArrayOfStringsType& companies )
{
    d_ptr->mCompanies = companies;
}

T__ArrayOfStringsType T__TaskType::companies() const
{
    return d_ptr->mCompanies;
}

void T__TaskType::setCompleteDate( const KDDateTime& completeDate )
{
    d_ptr->mCompleteDate = completeDate;
}

KDDateTime T__TaskType::completeDate() const
{
    return d_ptr->mCompleteDate;
}

void T__TaskType::setContacts( const T__ArrayOfStringsType& contacts )
{
    d_ptr->mContacts = contacts;
}

T__ArrayOfStringsType T__TaskType::contacts() const
{
    return d_ptr->mContacts;
}

void T__TaskType::setDelegationState( const T__TaskDelegateStateType& delegationState )
{
    d_ptr->mDelegationState = delegationState;
}

T__TaskDelegateStateType T__TaskType::delegationState() const
{
    return d_ptr->mDelegationState;
}

void T__TaskType::setDelegator( const QString& delegator )
{
    d_ptr->mDelegator = delegator;
}

QString T__TaskType::delegator() const
{
    return d_ptr->mDelegator;
}

void T__TaskType::setDueDate( const KDDateTime& dueDate )
{
    d_ptr->mDueDate = dueDate;
}

KDDateTime T__TaskType::dueDate() const
{
    return d_ptr->mDueDate;
}

void T__TaskType::setIsAssignmentEditable( int isAssignmentEditable )
{
    d_ptr->mIsAssignmentEditable = isAssignmentEditable;
}

int T__TaskType::isAssignmentEditable() const
{
    return d_ptr->mIsAssignmentEditable;
}

void T__TaskType::setIsComplete( bool isComplete )
{
    d_ptr->mIsComplete = isComplete;
}

bool T__TaskType::isComplete() const
{
    return d_ptr->mIsComplete;
}

void T__TaskType::setIsRecurring( bool isRecurring )
{
    d_ptr->mIsRecurring = isRecurring;
}

bool T__TaskType::isRecurring() const
{
    return d_ptr->mIsRecurring;
}

void T__TaskType::setIsTeamTask( bool isTeamTask )
{
    d_ptr->mIsTeamTask = isTeamTask;
}

bool T__TaskType::isTeamTask() const
{
    return d_ptr->mIsTeamTask;
}

void T__TaskType::setMileage( const QString& mileage )
{
    d_ptr->mMileage = mileage;
}

QString T__TaskType::mileage() const
{
    return d_ptr->mMileage;
}

void T__TaskType::setOwner( const QString& owner )
{
    d_ptr->mOwner = owner;
}

QString T__TaskType::owner() const
{
    return d_ptr->mOwner;
}

void T__TaskType::setPercentComplete( double percentComplete )
{
    d_ptr->mPercentComplete = percentComplete;
}

double T__TaskType::percentComplete() const
{
    return d_ptr->mPercentComplete;
}

void T__TaskType::setRecurrence( const T__TaskRecurrenceType& recurrence )
{
    d_ptr->mRecurrence = recurrence;
}

T__TaskRecurrenceType T__TaskType::recurrence() const
{
    return d_ptr->mRecurrence;
}

void T__TaskType::setStartDate( const KDDateTime& startDate )
{
    d_ptr->mStartDate = startDate;
}

KDDateTime T__TaskType::startDate() const
{
    return d_ptr->mStartDate;
}

void T__TaskType::setStatus( const T__TaskStatusType& status )
{
    d_ptr->mStatus = status;
}

T__TaskStatusType T__TaskType::status() const
{
    return d_ptr->mStatus;
}

void T__TaskType::setStatusDescription( const QString& statusDescription )
{
    d_ptr->mStatusDescription = statusDescription;
}

QString T__TaskType::statusDescription() const
{
    return d_ptr->mStatusDescription;
}

void T__TaskType::setTotalWork( int totalWork )
{
    d_ptr->mTotalWork = totalWork;
}

int T__TaskType::totalWork() const
{
    return d_ptr->mTotalWork;
}

KDSoapValue T__TaskType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TaskType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueActualWork(QString::fromLatin1("ActualWork"), QVariant::fromValue(d_ptr->mActualWork), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueActualWork.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueActualWork.setQualified(true);
    if (!_valueActualWork.isNil())
    args.append(_valueActualWork);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAssignedTime(QString::fromLatin1("AssignedTime"), d_ptr->mAssignedTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAssignedTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAssignedTime.setQualified(true);
    if (!_valueAssignedTime.isNil())
    args.append(_valueAssignedTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBillingInformation(QString::fromLatin1("BillingInformation"), QVariant::fromValue(d_ptr->mBillingInformation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueBillingInformation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBillingInformation.setQualified(true);
    if (!_valueBillingInformation.isNil())
    args.append(_valueBillingInformation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChangeCount(QString::fromLatin1("ChangeCount"), QVariant::fromValue(d_ptr->mChangeCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueChangeCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueChangeCount.setQualified(true);
    if (!_valueChangeCount.isNil())
    args.append(_valueChangeCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCompanies(d_ptr->mCompanies.serialize(QString::fromLatin1("Companies")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCompanies.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCompanies.setQualified(true);
    if (!_valueCompanies.isNil())
    args.append(_valueCompanies);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCompleteDate(QString::fromLatin1("CompleteDate"), d_ptr->mCompleteDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCompleteDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCompleteDate.setQualified(true);
    if (!_valueCompleteDate.isNil())
    args.append(_valueCompleteDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContacts(d_ptr->mContacts.serialize(QString::fromLatin1("Contacts")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContacts.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContacts.setQualified(true);
    if (!_valueContacts.isNil())
    args.append(_valueContacts);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDelegationState(QString::fromLatin1("DelegationState"), d_ptr->mDelegationState.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TaskDelegateStateType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDelegationState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDelegationState.setQualified(true);
    if (!_valueDelegationState.isNil())
    args.append(_valueDelegationState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDelegator(QString::fromLatin1("Delegator"), QVariant::fromValue(d_ptr->mDelegator), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDelegator.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDelegator.setQualified(true);
    if (!_valueDelegator.isNil())
    args.append(_valueDelegator);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDueDate(QString::fromLatin1("DueDate"), d_ptr->mDueDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDueDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDueDate.setQualified(true);
    if (!_valueDueDate.isNil())
    args.append(_valueDueDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsAssignmentEditable(QString::fromLatin1("IsAssignmentEditable"), QVariant::fromValue(d_ptr->mIsAssignmentEditable), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsAssignmentEditable.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsAssignmentEditable.setQualified(true);
    if (!_valueIsAssignmentEditable.isNil())
    args.append(_valueIsAssignmentEditable);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsComplete(QString::fromLatin1("IsComplete"), QVariant::fromValue(d_ptr->mIsComplete), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsComplete.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsComplete.setQualified(true);
    if (!_valueIsComplete.isNil())
    args.append(_valueIsComplete);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsRecurring(QString::fromLatin1("IsRecurring"), QVariant::fromValue(d_ptr->mIsRecurring), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsRecurring.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsRecurring.setQualified(true);
    if (!_valueIsRecurring.isNil())
    args.append(_valueIsRecurring);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsTeamTask(QString::fromLatin1("IsTeamTask"), QVariant::fromValue(d_ptr->mIsTeamTask), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsTeamTask.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsTeamTask.setQualified(true);
    if (!_valueIsTeamTask.isNil())
    args.append(_valueIsTeamTask);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMileage(QString::fromLatin1("Mileage"), QVariant::fromValue(d_ptr->mMileage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMileage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMileage.setQualified(true);
    if (!_valueMileage.isNil())
    args.append(_valueMileage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOwner(QString::fromLatin1("Owner"), QVariant::fromValue(d_ptr->mOwner), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueOwner.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOwner.setQualified(true);
    if (!_valueOwner.isNil())
    args.append(_valueOwner);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePercentComplete(QString::fromLatin1("PercentComplete"), QVariant::fromValue(d_ptr->mPercentComplete), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("double"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePercentComplete.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePercentComplete.setQualified(true);
    if (!_valuePercentComplete.isNil())
    args.append(_valuePercentComplete);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRecurrence(d_ptr->mRecurrence.serialize(QString::fromLatin1("Recurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRecurrence.setQualified(true);
    if (!_valueRecurrence.isNil())
    args.append(_valueRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStartDate(QString::fromLatin1("StartDate"), d_ptr->mStartDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStartDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStartDate.setQualified(true);
    if (!_valueStartDate.isNil())
    args.append(_valueStartDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStatus(QString::fromLatin1("Status"), d_ptr->mStatus.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TaskStatusType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueStatus.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStatus.setQualified(true);
    if (!_valueStatus.isNil())
    args.append(_valueStatus);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStatusDescription(QString::fromLatin1("StatusDescription"), QVariant::fromValue(d_ptr->mStatusDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStatusDescription.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStatusDescription.setQualified(true);
    if (!_valueStatusDescription.isNil())
    args.append(_valueStatusDescription);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTotalWork(QString::fromLatin1("TotalWork"), QVariant::fromValue(d_ptr->mTotalWork), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTotalWork.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTotalWork.setQualified(true);
    if (!_valueTotalWork.isNil())
    args.append(_valueTotalWork);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__TaskType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ActualWork")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mActualWork = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AssignedTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAssignedTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("BillingInformation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBillingInformation = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ChangeCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChangeCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Companies")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCompanies.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CompleteDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCompleteDate = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Contacts")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContacts.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DelegationState")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDelegationState.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Delegator")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDelegator = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DueDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDueDate = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsAssignmentEditable")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsAssignmentEditable = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsComplete")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsComplete = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsRecurring")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsRecurring = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsTeamTask")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsTeamTask = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Mileage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMileage = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Owner")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOwner = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("PercentComplete")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPercentComplete = val.value().value<double>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Recurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("StartDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStartDate = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Status")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStatus.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("StatusDescription")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStatusDescription = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("TotalWork")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTotalWork = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__TaskType::T__TaskType()
    : d_ptr(new PrivateDPtr)
{
}

T__TaskType::~T__TaskType()
{
}

T__TaskType::T__TaskType( const T__TaskType& other )
    : T__ItemType( other ), d_ptr( other.d_ptr )
{
}

T__TaskType&  T__TaskType::operator=( const T__TaskType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ItemType *>(this) = other;

    return *this;
}


class T__MessageType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__SingleRecipientType mSender;
    T__ArrayOfRecipientsType mToRecipients;
    T__ArrayOfRecipientsType mCcRecipients;
    T__ArrayOfRecipientsType mBccRecipients;
    bool mIsReadReceiptRequested;
    bool mIsDeliveryReceiptRequested;
    QByteArray mConversationIndex;
    QString mConversationTopic;
    T__SingleRecipientType mFrom;
    QString mInternetMessageId;
    bool mIsRead;
    bool mIsResponseRequested;
    QString mReferences;
    T__ArrayOfRecipientsType mReplyTo;
    T__SingleRecipientType mReceivedBy;
    T__SingleRecipientType mReceivedRepresenting;
};

T__MessageType::PrivateDPtr::PrivateDPtr()
    : mIsReadReceiptRequested(false), mIsDeliveryReceiptRequested(false), mIsRead(false), mIsResponseRequested(false)
{
}


void T__MessageType::setSender( const T__SingleRecipientType& sender )
{
    d_ptr->mSender = sender;
}

T__SingleRecipientType T__MessageType::sender() const
{
    return d_ptr->mSender;
}

void T__MessageType::setToRecipients( const T__ArrayOfRecipientsType& toRecipients )
{
    d_ptr->mToRecipients = toRecipients;
}

T__ArrayOfRecipientsType T__MessageType::toRecipients() const
{
    return d_ptr->mToRecipients;
}

void T__MessageType::setCcRecipients( const T__ArrayOfRecipientsType& ccRecipients )
{
    d_ptr->mCcRecipients = ccRecipients;
}

T__ArrayOfRecipientsType T__MessageType::ccRecipients() const
{
    return d_ptr->mCcRecipients;
}

void T__MessageType::setBccRecipients( const T__ArrayOfRecipientsType& bccRecipients )
{
    d_ptr->mBccRecipients = bccRecipients;
}

T__ArrayOfRecipientsType T__MessageType::bccRecipients() const
{
    return d_ptr->mBccRecipients;
}

void T__MessageType::setIsReadReceiptRequested( bool isReadReceiptRequested )
{
    d_ptr->mIsReadReceiptRequested = isReadReceiptRequested;
}

bool T__MessageType::isReadReceiptRequested() const
{
    return d_ptr->mIsReadReceiptRequested;
}

void T__MessageType::setIsDeliveryReceiptRequested( bool isDeliveryReceiptRequested )
{
    d_ptr->mIsDeliveryReceiptRequested = isDeliveryReceiptRequested;
}

bool T__MessageType::isDeliveryReceiptRequested() const
{
    return d_ptr->mIsDeliveryReceiptRequested;
}

void T__MessageType::setConversationIndex( const QByteArray& conversationIndex )
{
    d_ptr->mConversationIndex = conversationIndex;
}

QByteArray T__MessageType::conversationIndex() const
{
    return d_ptr->mConversationIndex;
}

void T__MessageType::setConversationTopic( const QString& conversationTopic )
{
    d_ptr->mConversationTopic = conversationTopic;
}

QString T__MessageType::conversationTopic() const
{
    return d_ptr->mConversationTopic;
}

void T__MessageType::setFrom( const T__SingleRecipientType& from )
{
    d_ptr->mFrom = from;
}

T__SingleRecipientType T__MessageType::from() const
{
    return d_ptr->mFrom;
}

void T__MessageType::setInternetMessageId( const QString& internetMessageId )
{
    d_ptr->mInternetMessageId = internetMessageId;
}

QString T__MessageType::internetMessageId() const
{
    return d_ptr->mInternetMessageId;
}

void T__MessageType::setIsRead( bool isRead )
{
    d_ptr->mIsRead = isRead;
}

bool T__MessageType::isRead() const
{
    return d_ptr->mIsRead;
}

void T__MessageType::setIsResponseRequested( bool isResponseRequested )
{
    d_ptr->mIsResponseRequested = isResponseRequested;
}

bool T__MessageType::isResponseRequested() const
{
    return d_ptr->mIsResponseRequested;
}

void T__MessageType::setReferences( const QString& references )
{
    d_ptr->mReferences = references;
}

QString T__MessageType::references() const
{
    return d_ptr->mReferences;
}

void T__MessageType::setReplyTo( const T__ArrayOfRecipientsType& replyTo )
{
    d_ptr->mReplyTo = replyTo;
}

T__ArrayOfRecipientsType T__MessageType::replyTo() const
{
    return d_ptr->mReplyTo;
}

void T__MessageType::setReceivedBy( const T__SingleRecipientType& receivedBy )
{
    d_ptr->mReceivedBy = receivedBy;
}

T__SingleRecipientType T__MessageType::receivedBy() const
{
    return d_ptr->mReceivedBy;
}

void T__MessageType::setReceivedRepresenting( const T__SingleRecipientType& receivedRepresenting )
{
    d_ptr->mReceivedRepresenting = receivedRepresenting;
}

T__SingleRecipientType T__MessageType::receivedRepresenting() const
{
    return d_ptr->mReceivedRepresenting;
}

KDSoapValue T__MessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSender(d_ptr->mSender.serialize(QString::fromLatin1("Sender")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSender.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSender.setQualified(true);
    if (!_valueSender.isNil())
    args.append(_valueSender);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueToRecipients(d_ptr->mToRecipients.serialize(QString::fromLatin1("ToRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueToRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueToRecipients.setQualified(true);
    if (!_valueToRecipients.isNil())
    args.append(_valueToRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCcRecipients(d_ptr->mCcRecipients.serialize(QString::fromLatin1("CcRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCcRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCcRecipients.setQualified(true);
    if (!_valueCcRecipients.isNil())
    args.append(_valueCcRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBccRecipients(d_ptr->mBccRecipients.serialize(QString::fromLatin1("BccRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBccRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBccRecipients.setQualified(true);
    if (!_valueBccRecipients.isNil())
    args.append(_valueBccRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsReadReceiptRequested(QString::fromLatin1("IsReadReceiptRequested"), QVariant::fromValue(d_ptr->mIsReadReceiptRequested), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsReadReceiptRequested.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsReadReceiptRequested.setQualified(true);
    if (!_valueIsReadReceiptRequested.isNil())
    args.append(_valueIsReadReceiptRequested);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsDeliveryReceiptRequested(QString::fromLatin1("IsDeliveryReceiptRequested"), QVariant::fromValue(d_ptr->mIsDeliveryReceiptRequested), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsDeliveryReceiptRequested.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsDeliveryReceiptRequested.setQualified(true);
    if (!_valueIsDeliveryReceiptRequested.isNil())
    args.append(_valueIsDeliveryReceiptRequested);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConversationIndex(QString::fromLatin1("ConversationIndex"), QString::fromLatin1(d_ptr->mConversationIndex.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueConversationIndex.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConversationIndex.setQualified(true);
    if (!_valueConversationIndex.isNil())
    args.append(_valueConversationIndex);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConversationTopic(QString::fromLatin1("ConversationTopic"), QVariant::fromValue(d_ptr->mConversationTopic), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueConversationTopic.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConversationTopic.setQualified(true);
    if (!_valueConversationTopic.isNil())
    args.append(_valueConversationTopic);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFrom(d_ptr->mFrom.serialize(QString::fromLatin1("From")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFrom.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFrom.setQualified(true);
    if (!_valueFrom.isNil())
    args.append(_valueFrom);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInternetMessageId(QString::fromLatin1("InternetMessageId"), QVariant::fromValue(d_ptr->mInternetMessageId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueInternetMessageId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInternetMessageId.setQualified(true);
    if (!_valueInternetMessageId.isNil())
    args.append(_valueInternetMessageId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsRead(QString::fromLatin1("IsRead"), QVariant::fromValue(d_ptr->mIsRead), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsRead.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsRead.setQualified(true);
    if (!_valueIsRead.isNil())
    args.append(_valueIsRead);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsResponseRequested(QString::fromLatin1("IsResponseRequested"), QVariant::fromValue(d_ptr->mIsResponseRequested), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsResponseRequested.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsResponseRequested.setQualified(true);
    if (!_valueIsResponseRequested.isNil())
    args.append(_valueIsResponseRequested);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReferences(QString::fromLatin1("References"), QVariant::fromValue(d_ptr->mReferences), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueReferences.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReferences.setQualified(true);
    if (!_valueReferences.isNil())
    args.append(_valueReferences);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReplyTo(d_ptr->mReplyTo.serialize(QString::fromLatin1("ReplyTo")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueReplyTo.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReplyTo.setQualified(true);
    if (!_valueReplyTo.isNil())
    args.append(_valueReplyTo);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReceivedBy(d_ptr->mReceivedBy.serialize(QString::fromLatin1("ReceivedBy")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueReceivedBy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReceivedBy.setQualified(true);
    if (!_valueReceivedBy.isNil())
    args.append(_valueReceivedBy);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReceivedRepresenting(d_ptr->mReceivedRepresenting.serialize(QString::fromLatin1("ReceivedRepresenting")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueReceivedRepresenting.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReceivedRepresenting.setQualified(true);
    if (!_valueReceivedRepresenting.isNil())
    args.append(_valueReceivedRepresenting);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__MessageType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Sender")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSender.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ToRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mToRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CcRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCcRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("BccRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBccRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IsReadReceiptRequested")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsReadReceiptRequested = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsDeliveryReceiptRequested")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsDeliveryReceiptRequested = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ConversationIndex")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConversationIndex = QByteArray::fromBase64(val.value().toString().toLatin1());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ConversationTopic")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConversationTopic = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("From")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFrom.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("InternetMessageId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInternetMessageId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsRead")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsRead = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsResponseRequested")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsResponseRequested = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("References")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReferences = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ReplyTo")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReplyTo.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ReceivedBy")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReceivedBy.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ReceivedRepresenting")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReceivedRepresenting.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__MessageType::T__MessageType()
    : d_ptr(new PrivateDPtr)
{
}

T__MessageType::~T__MessageType()
{
}

T__MessageType::T__MessageType( const T__MessageType& other )
    : T__ItemType( other ), d_ptr( other.d_ptr )
{
}

T__MessageType&  T__MessageType::operator=( const T__MessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ItemType *>(this) = other;

    return *this;
}


class T__PermissionType::PrivateDPtr : public QSharedData
{
public:
    T__PermissionReadAccessType mReadItems;
    T__PermissionLevelType mPermissionLevel;
};

void T__PermissionType::setReadItems( const T__PermissionReadAccessType& readItems )
{
    d_ptr->mReadItems = readItems;
}

T__PermissionReadAccessType T__PermissionType::readItems() const
{
    return d_ptr->mReadItems;
}

void T__PermissionType::setPermissionLevel( const T__PermissionLevelType& permissionLevel )
{
    d_ptr->mPermissionLevel = permissionLevel;
}

T__PermissionLevelType T__PermissionType::permissionLevel() const
{
    return d_ptr->mPermissionLevel;
}

KDSoapValue T__PermissionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePermissionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PermissionType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueReadItems(QString::fromLatin1("ReadItems"), d_ptr->mReadItems.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PermissionReadAccessType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueReadItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReadItems.setQualified(true);
    if (!_valueReadItems.isNil())
    args.append(_valueReadItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePermissionLevel(QString::fromLatin1("PermissionLevel"), d_ptr->mPermissionLevel.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PermissionLevelType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valuePermissionLevel.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePermissionLevel.setQualified(true);
    if (!_valuePermissionLevel.isNil())
    args.append(_valuePermissionLevel);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__PermissionType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePermissionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ReadItems")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReadItems.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("PermissionLevel")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPermissionLevel.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__PermissionType::T__PermissionType()
    : d_ptr(new PrivateDPtr)
{
}

T__PermissionType::~T__PermissionType()
{
}

T__PermissionType::T__PermissionType( const T__PermissionType& other )
    : T__BasePermissionType( other ), d_ptr( other.d_ptr )
{
}

T__PermissionType&  T__PermissionType::operator=( const T__PermissionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePermissionType *>(this) = other;

    return *this;
}


class T__OccurrenceItemIdType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__DerivedItemIdType mRecurringMasterId;
    QString mChangeKey;
    int mInstanceIndex;
};

T__OccurrenceItemIdType::PrivateDPtr::PrivateDPtr()
    : mInstanceIndex(0)
{
}


void T__OccurrenceItemIdType::setRecurringMasterId( const T__DerivedItemIdType& recurringMasterId )
{
    d_ptr->mRecurringMasterId = recurringMasterId;
}

T__DerivedItemIdType T__OccurrenceItemIdType::recurringMasterId() const
{
    return d_ptr->mRecurringMasterId;
}

void T__OccurrenceItemIdType::setChangeKey( const QString& changeKey )
{
    d_ptr->mChangeKey = changeKey;
}

QString T__OccurrenceItemIdType::changeKey() const
{
    return d_ptr->mChangeKey;
}

void T__OccurrenceItemIdType::setInstanceIndex( int instanceIndex )
{
    d_ptr->mInstanceIndex = instanceIndex;
}

int T__OccurrenceItemIdType::instanceIndex() const
{
    return d_ptr->mInstanceIndex;
}

KDSoapValue T__OccurrenceItemIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseItemIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("OccurrenceItemIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueRecurringMasterId(QString::fromLatin1("RecurringMasterId"), d_ptr->mRecurringMasterId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DerivedItemIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueRecurringMasterId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueRecurringMasterId.isNil())
    attribs.append(_valueRecurringMasterId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChangeKey(QString::fromLatin1("ChangeKey"), QVariant::fromValue(d_ptr->mChangeKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueChangeKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueChangeKey.isNil())
    attribs.append(_valueChangeKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInstanceIndex(QString::fromLatin1("InstanceIndex"), QVariant::fromValue(d_ptr->mInstanceIndex), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueInstanceIndex.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueInstanceIndex.isNil())
    attribs.append(_valueInstanceIndex);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__OccurrenceItemIdType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseItemIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("RecurringMasterId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRecurringMasterId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("ChangeKey")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChangeKey = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("InstanceIndex")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInstanceIndex = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__OccurrenceItemIdType::T__OccurrenceItemIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__OccurrenceItemIdType::~T__OccurrenceItemIdType()
{
}

T__OccurrenceItemIdType::T__OccurrenceItemIdType( const T__OccurrenceItemIdType& other )
    : T__BaseItemIdType( other ), d_ptr( other.d_ptr )
{
}

T__OccurrenceItemIdType&  T__OccurrenceItemIdType::operator=( const T__OccurrenceItemIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseItemIdType *>(this) = other;

    return *this;
}


class T__CalendarFolderType::PrivateDPtr : public QSharedData
{
public:
    T__CalendarPermissionSetType mPermissionSet;
};

void T__CalendarFolderType::setPermissionSet( const T__CalendarPermissionSetType& permissionSet )
{
    d_ptr->mPermissionSet = permissionSet;
}

T__CalendarPermissionSetType T__CalendarFolderType::permissionSet() const
{
    return d_ptr->mPermissionSet;
}

KDSoapValue T__CalendarFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseFolderType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePermissionSet(d_ptr->mPermissionSet.serialize(QString::fromLatin1("PermissionSet")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePermissionSet.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePermissionSet.setQualified(true);
    if (!_valuePermissionSet.isNil())
    args.append(_valuePermissionSet);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__CalendarFolderType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseFolderType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("PermissionSet")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPermissionSet.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__CalendarFolderType::T__CalendarFolderType()
    : d_ptr(new PrivateDPtr)
{
}

T__CalendarFolderType::~T__CalendarFolderType()
{
}

T__CalendarFolderType::T__CalendarFolderType( const T__CalendarFolderType& other )
    : T__BaseFolderType( other ), d_ptr( other.d_ptr )
{
}

T__CalendarFolderType&  T__CalendarFolderType::operator=( const T__CalendarFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseFolderType *>(this) = other;

    return *this;
}


class T__BaseObjectChangedEventType::PrivateDPtr : public QSharedData
{
public:
    KDDateTime mTimeStamp;
    T__FolderIdType mFolderId;
    T__ItemIdType mItemId;
    T__FolderIdType mParentFolderId;
};

void T__BaseObjectChangedEventType::setTimeStamp( const KDDateTime& timeStamp )
{
    d_ptr->mTimeStamp = timeStamp;
}

KDDateTime T__BaseObjectChangedEventType::timeStamp() const
{
    return d_ptr->mTimeStamp;
}

void T__BaseObjectChangedEventType::setFolderId( const T__FolderIdType& folderId )
{
    d_ptr->mFolderId = folderId;
}

T__FolderIdType T__BaseObjectChangedEventType::folderId() const
{
    return d_ptr->mFolderId;
}

void T__BaseObjectChangedEventType::setItemId( const T__ItemIdType& itemId )
{
    d_ptr->mItemId = itemId;
}

T__ItemIdType T__BaseObjectChangedEventType::itemId() const
{
    return d_ptr->mItemId;
}

void T__BaseObjectChangedEventType::setParentFolderId( const T__FolderIdType& parentFolderId )
{
    d_ptr->mParentFolderId = parentFolderId;
}

T__FolderIdType T__BaseObjectChangedEventType::parentFolderId() const
{
    return d_ptr->mParentFolderId;
}

KDSoapValue T__BaseObjectChangedEventType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseNotificationEventType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("BaseObjectChangedEventType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueTimeStamp(QString::fromLatin1("TimeStamp"), d_ptr->mTimeStamp.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTimeStamp.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeStamp.setQualified(true);
    if (!_valueTimeStamp.isNil())
    args.append(_valueTimeStamp);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFolderId(d_ptr->mFolderId.serialize(QString::fromLatin1("FolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolderId.setQualified(true);
    if (!_valueFolderId.isNil())
    args.append(_valueFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItemId(d_ptr->mItemId.serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemId.setQualified(true);
    if (!_valueItemId.isNil())
    args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueParentFolderId(d_ptr->mParentFolderId.serialize(QString::fromLatin1("ParentFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueParentFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueParentFolderId.setQualified(true);
    if (!_valueParentFolderId.isNil())
    args.append(_valueParentFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__BaseObjectChangedEventType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseNotificationEventType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("TimeStamp")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeStamp = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("FolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ParentFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mParentFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__BaseObjectChangedEventType::T__BaseObjectChangedEventType()
    : d_ptr(new PrivateDPtr)
{
}

T__BaseObjectChangedEventType::~T__BaseObjectChangedEventType()
{
}

T__BaseObjectChangedEventType::T__BaseObjectChangedEventType( const T__BaseObjectChangedEventType& other )
    : T__BaseNotificationEventType( other ), d_ptr( other.d_ptr )
{
}

T__BaseObjectChangedEventType&  T__BaseObjectChangedEventType::operator=( const T__BaseObjectChangedEventType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseNotificationEventType *>(this) = other;

    return *this;
}


KDSoapValue TNS__FindFolderResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("FindFolderResponseType"));
    return mainValue;
}

void TNS__FindFolderResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__FindFolderResponseType::TNS__FindFolderResponseType()
{
}

TNS__FindFolderResponseType::~TNS__FindFolderResponseType()
{
}


class TNS__GetEventsResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__NotificationType mNotification;
};

void TNS__GetEventsResponseMessageType::setNotification( const T__NotificationType& notification )
{
    d_ptr->mNotification = notification;
}

T__NotificationType TNS__GetEventsResponseMessageType::notification() const
{
    return d_ptr->mNotification;
}

KDSoapValue TNS__GetEventsResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetEventsResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueNotification(d_ptr->mNotification.serialize(QString::fromLatin1("Notification")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueNotification.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueNotification.setQualified(true);
    if (!_valueNotification.isNil())
    args.append(_valueNotification);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetEventsResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Notification")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNotification.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__GetEventsResponseMessageType::TNS__GetEventsResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetEventsResponseMessageType::~TNS__GetEventsResponseMessageType()
{
}

TNS__GetEventsResponseMessageType::TNS__GetEventsResponseMessageType( const TNS__GetEventsResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetEventsResponseMessageType&  TNS__GetEventsResponseMessageType::operator=( const TNS__GetEventsResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


KDSoapValue TNS__MoveItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("MoveItemResponseType"));
    return mainValue;
}

void TNS__MoveItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__MoveItemResponseType::TNS__MoveItemResponseType()
{
}

TNS__MoveItemResponseType::~TNS__MoveItemResponseType()
{
}


KDSoapValue TNS__SendItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SendItemResponseType"));
    return mainValue;
}

void TNS__SendItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__SendItemResponseType::TNS__SendItemResponseType()
{
}

TNS__SendItemResponseType::~TNS__SendItemResponseType()
{
}


class T__MultipleOperandBooleanExpressionType::PrivateDPtr : public QSharedData
{
public:
    QList<T__SearchExpressionType> mSearchExpression;
};

void T__MultipleOperandBooleanExpressionType::setSearchExpression( const QList<T__SearchExpressionType>& searchExpression )
{
    d_ptr->mSearchExpression = searchExpression;
}

QList<T__SearchExpressionType> T__MultipleOperandBooleanExpressionType::searchExpression() const
{
    return d_ptr->mSearchExpression;
}

KDSoapValue T__MultipleOperandBooleanExpressionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SearchExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MultipleOperandBooleanExpressionType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    for (int i = 0; i < d_ptr->mSearchExpression.count(); ++i) {
        KDSoapValue _valueSearchExpression(d_ptr->mSearchExpression.at(i).serialize(QString::fromLatin1("SearchExpression")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
        _valueSearchExpression.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
        _valueSearchExpression.setQualified(true);
        if (!_valueSearchExpression.isNil())
        args.append(_valueSearchExpression);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    }
    return mainValue;
}

void T__MultipleOperandBooleanExpressionType::deserialize( const KDSoapValue& mainValue )
{
    T__SearchExpressionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SearchExpression")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            T__SearchExpressionType mSearchExpressionTemp;
            mSearchExpressionTemp.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
            d_ptr->mSearchExpression.append(mSearchExpressionTemp);
        }
    }
}

T__MultipleOperandBooleanExpressionType::T__MultipleOperandBooleanExpressionType()
    : d_ptr(new PrivateDPtr)
{
}

T__MultipleOperandBooleanExpressionType::~T__MultipleOperandBooleanExpressionType()
{
}

T__MultipleOperandBooleanExpressionType::T__MultipleOperandBooleanExpressionType( const T__MultipleOperandBooleanExpressionType& other )
    : T__SearchExpressionType( other ), d_ptr( other.d_ptr )
{
}

T__MultipleOperandBooleanExpressionType&  T__MultipleOperandBooleanExpressionType::operator=( const T__MultipleOperandBooleanExpressionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__SearchExpressionType *>(this) = other;

    return *this;
}


KDSoapValue TNS__CopyFolderResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CopyFolderResponseType"));
    return mainValue;
}

void TNS__CopyFolderResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__CopyFolderResponseType::TNS__CopyFolderResponseType()
{
}

TNS__CopyFolderResponseType::~TNS__CopyFolderResponseType()
{
}


class TNS__SubscribeResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__SubscriptionIdType mSubscriptionId;
    T__WatermarkType mWatermark;
};

void TNS__SubscribeResponseMessageType::setSubscriptionId( const T__SubscriptionIdType& subscriptionId )
{
    d_ptr->mSubscriptionId = subscriptionId;
}

T__SubscriptionIdType TNS__SubscribeResponseMessageType::subscriptionId() const
{
    return d_ptr->mSubscriptionId;
}

void TNS__SubscribeResponseMessageType::setWatermark( const T__WatermarkType& watermark )
{
    d_ptr->mWatermark = watermark;
}

T__WatermarkType TNS__SubscribeResponseMessageType::watermark() const
{
    return d_ptr->mWatermark;
}

KDSoapValue TNS__SubscribeResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SubscribeResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSubscriptionId(QString::fromLatin1("SubscriptionId"), d_ptr->mSubscriptionId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SubscriptionIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSubscriptionId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSubscriptionId.setQualified(true);
    if (!_valueSubscriptionId.isNil())
    args.append(_valueSubscriptionId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWatermark(QString::fromLatin1("Watermark"), d_ptr->mWatermark.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WatermarkType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueWatermark.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueWatermark.setQualified(true);
    if (!_valueWatermark.isNil())
    args.append(_valueWatermark);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SubscribeResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SubscriptionId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSubscriptionId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Watermark")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWatermark.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__SubscribeResponseMessageType::TNS__SubscribeResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SubscribeResponseMessageType::~TNS__SubscribeResponseMessageType()
{
}

TNS__SubscribeResponseMessageType::TNS__SubscribeResponseMessageType( const TNS__SubscribeResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__SubscribeResponseMessageType&  TNS__SubscribeResponseMessageType::operator=( const TNS__SubscribeResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class TNS__SyncFolderItemsType::PrivateDPtr : public QSharedData
{
public:
    T__ItemResponseShapeType mItemShape;
    T__TargetFolderIdType mSyncFolderId;
    QString mSyncState;
    T__ArrayOfBaseItemIdsType mIgnore;
    T__MaxSyncChangesReturnedType mMaxChangesReturned;
};

void TNS__SyncFolderItemsType::setItemShape( const T__ItemResponseShapeType& itemShape )
{
    d_ptr->mItemShape = itemShape;
}

T__ItemResponseShapeType TNS__SyncFolderItemsType::itemShape() const
{
    return d_ptr->mItemShape;
}

void TNS__SyncFolderItemsType::setSyncFolderId( const T__TargetFolderIdType& syncFolderId )
{
    d_ptr->mSyncFolderId = syncFolderId;
}

T__TargetFolderIdType TNS__SyncFolderItemsType::syncFolderId() const
{
    return d_ptr->mSyncFolderId;
}

void TNS__SyncFolderItemsType::setSyncState( const QString& syncState )
{
    d_ptr->mSyncState = syncState;
}

QString TNS__SyncFolderItemsType::syncState() const
{
    return d_ptr->mSyncState;
}

void TNS__SyncFolderItemsType::setIgnore( const T__ArrayOfBaseItemIdsType& ignore )
{
    d_ptr->mIgnore = ignore;
}

T__ArrayOfBaseItemIdsType TNS__SyncFolderItemsType::ignore() const
{
    return d_ptr->mIgnore;
}

void TNS__SyncFolderItemsType::setMaxChangesReturned( const T__MaxSyncChangesReturnedType& maxChangesReturned )
{
    d_ptr->mMaxChangesReturned = maxChangesReturned;
}

T__MaxSyncChangesReturnedType TNS__SyncFolderItemsType::maxChangesReturned() const
{
    return d_ptr->mMaxChangesReturned;
}

KDSoapValue TNS__SyncFolderItemsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SyncFolderItemsType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemShape(d_ptr->mItemShape.serialize(QString::fromLatin1("ItemShape")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItemShape.setQualified(true);
    if (!_valueItemShape.isNil())
    args.append(_valueItemShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSyncFolderId(d_ptr->mSyncFolderId.serialize(QString::fromLatin1("SyncFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSyncFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncFolderId.setQualified(true);
    if (!_valueSyncFolderId.isNil())
    args.append(_valueSyncFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSyncState(QString::fromLatin1("SyncState"), QVariant::fromValue(d_ptr->mSyncState), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSyncState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncState.setQualified(true);
    if (!_valueSyncState.isNil())
    args.append(_valueSyncState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIgnore(d_ptr->mIgnore.serialize(QString::fromLatin1("Ignore")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueIgnore.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueIgnore.setQualified(true);
    if (!_valueIgnore.isNil())
    args.append(_valueIgnore);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMaxChangesReturned(QString::fromLatin1("MaxChangesReturned"), d_ptr->mMaxChangesReturned.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MaxSyncChangesReturnedType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMaxChangesReturned.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMaxChangesReturned.setQualified(true);
    if (!_valueMaxChangesReturned.isNil())
    args.append(_valueMaxChangesReturned);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SyncFolderItemsType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemShape.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SyncFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSyncFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SyncState")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSyncState = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Ignore")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIgnore.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MaxChangesReturned")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMaxChangesReturned.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__SyncFolderItemsType::TNS__SyncFolderItemsType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SyncFolderItemsType::~TNS__SyncFolderItemsType()
{
}

TNS__SyncFolderItemsType::TNS__SyncFolderItemsType( const TNS__SyncFolderItemsType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__SyncFolderItemsType&  TNS__SyncFolderItemsType::operator=( const TNS__SyncFolderItemsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__DelegateUserResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__DelegateUserType mDelegateUser;
};

void TNS__DelegateUserResponseMessageType::setDelegateUser( const T__DelegateUserType& delegateUser )
{
    d_ptr->mDelegateUser = delegateUser;
}

T__DelegateUserType TNS__DelegateUserResponseMessageType::delegateUser() const
{
    return d_ptr->mDelegateUser;
}

KDSoapValue TNS__DelegateUserResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("DelegateUserResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDelegateUser(d_ptr->mDelegateUser.serialize(QString::fromLatin1("DelegateUser")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDelegateUser.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDelegateUser.setQualified(true);
    if (!_valueDelegateUser.isNil())
    args.append(_valueDelegateUser);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__DelegateUserResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DelegateUser")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDelegateUser.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__DelegateUserResponseMessageType::TNS__DelegateUserResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__DelegateUserResponseMessageType::~TNS__DelegateUserResponseMessageType()
{
}

TNS__DelegateUserResponseMessageType::TNS__DelegateUserResponseMessageType( const TNS__DelegateUserResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__DelegateUserResponseMessageType&  TNS__DelegateUserResponseMessageType::operator=( const TNS__DelegateUserResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


KDSoapValue T__NoEndRecurrenceRangeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RecurrenceRangeBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NoEndRecurrenceRangeType"));
    return mainValue;
}

void T__NoEndRecurrenceRangeType::deserialize( const KDSoapValue& mainValue )
{
    T__RecurrenceRangeBaseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__NoEndRecurrenceRangeType::T__NoEndRecurrenceRangeType()
{
}

T__NoEndRecurrenceRangeType::~T__NoEndRecurrenceRangeType()
{
}


class T__AlternatePublicFolderItemIdType::PrivateDPtr : public QSharedData
{
public:
    QString mItemId;
};

void T__AlternatePublicFolderItemIdType::setItemId( const QString& itemId )
{
    d_ptr->mItemId = itemId;
}

QString T__AlternatePublicFolderItemIdType::itemId() const
{
    return d_ptr->mItemId;
}

KDSoapValue T__AlternatePublicFolderItemIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AlternatePublicFolderIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AlternatePublicFolderItemIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueItemId(QString::fromLatin1("ItemId"), QVariant::fromValue(d_ptr->mItemId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueItemId.isNil())
    attribs.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__AlternatePublicFolderItemIdType::deserialize( const KDSoapValue& mainValue )
{
    T__AlternatePublicFolderIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__AlternatePublicFolderItemIdType::T__AlternatePublicFolderItemIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__AlternatePublicFolderItemIdType::~T__AlternatePublicFolderItemIdType()
{
}

T__AlternatePublicFolderItemIdType::T__AlternatePublicFolderItemIdType( const T__AlternatePublicFolderItemIdType& other )
    : T__AlternatePublicFolderIdType( other ), d_ptr( other.d_ptr )
{
}

T__AlternatePublicFolderItemIdType&  T__AlternatePublicFolderItemIdType::operator=( const T__AlternatePublicFolderItemIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__AlternatePublicFolderIdType *>(this) = other;

    return *this;
}


class T__DistinguishedFolderIdType::PrivateDPtr : public QSharedData
{
public:
    T__EmailAddressType mMailbox;
    T__DistinguishedFolderIdNameType mId;
    QString mChangeKey;
};

void T__DistinguishedFolderIdType::setMailbox( const T__EmailAddressType& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddressType T__DistinguishedFolderIdType::mailbox() const
{
    return d_ptr->mMailbox;
}

void T__DistinguishedFolderIdType::setId( const T__DistinguishedFolderIdNameType& id )
{
    d_ptr->mId = id;
}

T__DistinguishedFolderIdNameType T__DistinguishedFolderIdType::id() const
{
    return d_ptr->mId;
}

void T__DistinguishedFolderIdType::setChangeKey( const QString& changeKey )
{
    d_ptr->mChangeKey = changeKey;
}

QString T__DistinguishedFolderIdType::changeKey() const
{
    return d_ptr->mChangeKey;
}

KDSoapValue T__DistinguishedFolderIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseFolderIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DistinguishedFolderIdType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueId(QString::fromLatin1("Id"), d_ptr->mId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DistinguishedFolderIdNameType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueId.isNil())
    attribs.append(_valueId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChangeKey(QString::fromLatin1("ChangeKey"), QVariant::fromValue(d_ptr->mChangeKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueChangeKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueChangeKey.isNil())
    attribs.append(_valueChangeKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__DistinguishedFolderIdType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseFolderIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Id")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("ChangeKey")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChangeKey = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__DistinguishedFolderIdType::T__DistinguishedFolderIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__DistinguishedFolderIdType::~T__DistinguishedFolderIdType()
{
}

T__DistinguishedFolderIdType::T__DistinguishedFolderIdType( const T__DistinguishedFolderIdType& other )
    : T__BaseFolderIdType( other ), d_ptr( other.d_ptr )
{
}

T__DistinguishedFolderIdType&  T__DistinguishedFolderIdType::operator=( const T__DistinguishedFolderIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseFolderIdType *>(this) = other;

    return *this;
}


KDSoapValue T__UnknownAttendeeConflictData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AttendeeConflictData::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("UnknownAttendeeConflictData"));
    return mainValue;
}

void T__UnknownAttendeeConflictData::deserialize( const KDSoapValue& mainValue )
{
    T__AttendeeConflictData::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__UnknownAttendeeConflictData::T__UnknownAttendeeConflictData()
{
}

T__UnknownAttendeeConflictData::~T__UnknownAttendeeConflictData()
{
}


class T__NotType::PrivateDPtr : public QSharedData
{
public:
    T__SearchExpressionType mSearchExpression;
};

void T__NotType::setSearchExpression( const T__SearchExpressionType& searchExpression )
{
    d_ptr->mSearchExpression = searchExpression;
}

T__SearchExpressionType T__NotType::searchExpression() const
{
    return d_ptr->mSearchExpression;
}

KDSoapValue T__NotType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SearchExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NotType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSearchExpression(d_ptr->mSearchExpression.serialize(QString::fromLatin1("SearchExpression")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSearchExpression.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSearchExpression.setQualified(true);
    if (!_valueSearchExpression.isNil())
    args.append(_valueSearchExpression);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__NotType::deserialize( const KDSoapValue& mainValue )
{
    T__SearchExpressionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SearchExpression")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSearchExpression.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__NotType::T__NotType()
    : d_ptr(new PrivateDPtr)
{
}

T__NotType::~T__NotType()
{
}

T__NotType::T__NotType( const T__NotType& other )
    : T__SearchExpressionType( other ), d_ptr( other.d_ptr )
{
}

T__NotType&  T__NotType::operator=( const T__NotType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__SearchExpressionType *>(this) = other;

    return *this;
}


class T__FractionalPageViewType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mNumerator;
    int mDenominator;
};

T__FractionalPageViewType::PrivateDPtr::PrivateDPtr()
    : mNumerator(0), mDenominator(0)
{
}


void T__FractionalPageViewType::setNumerator( int numerator )
{
    d_ptr->mNumerator = numerator;
}

int T__FractionalPageViewType::numerator() const
{
    return d_ptr->mNumerator;
}

void T__FractionalPageViewType::setDenominator( int denominator )
{
    d_ptr->mDenominator = denominator;
}

int T__FractionalPageViewType::denominator() const
{
    return d_ptr->mDenominator;
}

KDSoapValue T__FractionalPageViewType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePagingType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FractionalPageViewType"));
    KDSoapValueList attribs;
    KDSoapValue _valueNumerator(QString::fromLatin1("Numerator"), QVariant::fromValue(d_ptr->mNumerator), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNumerator.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueNumerator.isNil())
    attribs.append(_valueNumerator);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDenominator(QString::fromLatin1("Denominator"), QVariant::fromValue(d_ptr->mDenominator), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDenominator.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueDenominator.isNil())
    attribs.append(_valueDenominator);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__FractionalPageViewType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePagingType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Numerator")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNumerator = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Denominator")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDenominator = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__FractionalPageViewType::T__FractionalPageViewType()
    : d_ptr(new PrivateDPtr)
{
}

T__FractionalPageViewType::~T__FractionalPageViewType()
{
}

T__FractionalPageViewType::T__FractionalPageViewType( const T__FractionalPageViewType& other )
    : T__BasePagingType( other ), d_ptr( other.d_ptr )
{
}

T__FractionalPageViewType&  T__FractionalPageViewType::operator=( const T__FractionalPageViewType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePagingType *>(this) = other;

    return *this;
}


KDSoapValue TNS__FindItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("FindItemResponseType"));
    return mainValue;
}

void TNS__FindItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__FindItemResponseType::TNS__FindItemResponseType()
{
}

TNS__FindItemResponseType::~TNS__FindItemResponseType()
{
}


class TNS__CreateFolderType::PrivateDPtr : public QSharedData
{
public:
    T__TargetFolderIdType mParentFolderId;
    T__NonEmptyArrayOfFoldersType mFolders;
};

void TNS__CreateFolderType::setParentFolderId( const T__TargetFolderIdType& parentFolderId )
{
    d_ptr->mParentFolderId = parentFolderId;
}

T__TargetFolderIdType TNS__CreateFolderType::parentFolderId() const
{
    return d_ptr->mParentFolderId;
}

void TNS__CreateFolderType::setFolders( const T__NonEmptyArrayOfFoldersType& folders )
{
    d_ptr->mFolders = folders;
}

T__NonEmptyArrayOfFoldersType TNS__CreateFolderType::folders() const
{
    return d_ptr->mFolders;
}

KDSoapValue TNS__CreateFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CreateFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueParentFolderId(d_ptr->mParentFolderId.serialize(QString::fromLatin1("ParentFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueParentFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueParentFolderId.setQualified(true);
    if (!_valueParentFolderId.isNil())
    args.append(_valueParentFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFolders(d_ptr->mFolders.serialize(QString::fromLatin1("Folders")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolders.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolders.setQualified(true);
    if (!_valueFolders.isNil())
    args.append(_valueFolders);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__CreateFolderType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ParentFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mParentFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Folders")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolders.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__CreateFolderType::TNS__CreateFolderType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CreateFolderType::~TNS__CreateFolderType()
{
}

TNS__CreateFolderType::TNS__CreateFolderType( const TNS__CreateFolderType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__CreateFolderType&  TNS__CreateFolderType::operator=( const TNS__CreateFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__FindFolderResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__FindFolderParentType mRootFolder;
};

void TNS__FindFolderResponseMessageType::setRootFolder( const T__FindFolderParentType& rootFolder )
{
    d_ptr->mRootFolder = rootFolder;
}

T__FindFolderParentType TNS__FindFolderResponseMessageType::rootFolder() const
{
    return d_ptr->mRootFolder;
}

KDSoapValue TNS__FindFolderResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("FindFolderResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueRootFolder(d_ptr->mRootFolder.serialize(QString::fromLatin1("RootFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRootFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueRootFolder.setQualified(true);
    if (!_valueRootFolder.isNil())
    args.append(_valueRootFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__FindFolderResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("RootFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRootFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__FindFolderResponseMessageType::TNS__FindFolderResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__FindFolderResponseMessageType::~TNS__FindFolderResponseMessageType()
{
}

TNS__FindFolderResponseMessageType::TNS__FindFolderResponseMessageType( const TNS__FindFolderResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__FindFolderResponseMessageType&  TNS__FindFolderResponseMessageType::operator=( const TNS__FindFolderResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class TNS__GetItemType::PrivateDPtr : public QSharedData
{
public:
    T__ItemResponseShapeType mItemShape;
    T__NonEmptyArrayOfBaseItemIdsType mItemIds;
};

void TNS__GetItemType::setItemShape( const T__ItemResponseShapeType& itemShape )
{
    d_ptr->mItemShape = itemShape;
}

T__ItemResponseShapeType TNS__GetItemType::itemShape() const
{
    return d_ptr->mItemShape;
}

void TNS__GetItemType::setItemIds( const T__NonEmptyArrayOfBaseItemIdsType& itemIds )
{
    d_ptr->mItemIds = itemIds;
}

T__NonEmptyArrayOfBaseItemIdsType TNS__GetItemType::itemIds() const
{
    return d_ptr->mItemIds;
}

KDSoapValue TNS__GetItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemShape(d_ptr->mItemShape.serialize(QString::fromLatin1("ItemShape")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItemShape.setQualified(true);
    if (!_valueItemShape.isNil())
    args.append(_valueItemShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItemIds(d_ptr->mItemIds.serialize(QString::fromLatin1("ItemIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItemIds.setQualified(true);
    if (!_valueItemIds.isNil())
    args.append(_valueItemIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemShape.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ItemIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__GetItemType::TNS__GetItemType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetItemType::~TNS__GetItemType()
{
}

TNS__GetItemType::TNS__GetItemType( const TNS__GetItemType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetItemType&  TNS__GetItemType::operator=( const TNS__GetItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__FileAttachmentType::PrivateDPtr : public QSharedData
{
public:
    QByteArray mContent;
};

void T__FileAttachmentType::setContent( const QByteArray& content )
{
    d_ptr->mContent = content;
}

QByteArray T__FileAttachmentType::content() const
{
    return d_ptr->mContent;
}

KDSoapValue T__FileAttachmentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AttachmentType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FileAttachmentType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueContent(QString::fromLatin1("Content"), QString::fromLatin1(d_ptr->mContent.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueContent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContent.setQualified(true);
    if (!_valueContent.isNil())
    args.append(_valueContent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FileAttachmentType::deserialize( const KDSoapValue& mainValue )
{
    T__AttachmentType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Content")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContent = QByteArray::fromBase64(val.value().toString().toLatin1());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__FileAttachmentType::T__FileAttachmentType()
    : d_ptr(new PrivateDPtr)
{
}

T__FileAttachmentType::~T__FileAttachmentType()
{
}

T__FileAttachmentType::T__FileAttachmentType( const T__FileAttachmentType& other )
    : T__AttachmentType( other ), d_ptr( other.d_ptr )
{
}

T__FileAttachmentType&  T__FileAttachmentType::operator=( const T__FileAttachmentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__AttachmentType *>(this) = other;

    return *this;
}


class T__ModifiedEventType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mUnreadCount;
};

T__ModifiedEventType::PrivateDPtr::PrivateDPtr()
    : mUnreadCount(0)
{
}


void T__ModifiedEventType::setUnreadCount( int unreadCount )
{
    d_ptr->mUnreadCount = unreadCount;
}

int T__ModifiedEventType::unreadCount() const
{
    return d_ptr->mUnreadCount;
}

KDSoapValue T__ModifiedEventType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseObjectChangedEventType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ModifiedEventType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueUnreadCount(QString::fromLatin1("UnreadCount"), QVariant::fromValue(d_ptr->mUnreadCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueUnreadCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUnreadCount.setQualified(true);
    if (!_valueUnreadCount.isNil())
    args.append(_valueUnreadCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ModifiedEventType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseObjectChangedEventType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UnreadCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUnreadCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ModifiedEventType::T__ModifiedEventType()
    : d_ptr(new PrivateDPtr)
{
}

T__ModifiedEventType::~T__ModifiedEventType()
{
}

T__ModifiedEventType::T__ModifiedEventType( const T__ModifiedEventType& other )
    : T__BaseObjectChangedEventType( other ), d_ptr( other.d_ptr )
{
}

T__ModifiedEventType&  T__ModifiedEventType::operator=( const T__ModifiedEventType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseObjectChangedEventType *>(this) = other;

    return *this;
}


class T__PathToExceptionFieldType::PrivateDPtr : public QSharedData
{
public:
    T__ExceptionPropertyURIType mFieldURI;
};

void T__PathToExceptionFieldType::setFieldURI( const T__ExceptionPropertyURIType& fieldURI )
{
    d_ptr->mFieldURI = fieldURI;
}

T__ExceptionPropertyURIType T__PathToExceptionFieldType::fieldURI() const
{
    return d_ptr->mFieldURI;
}

KDSoapValue T__PathToExceptionFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePathToElementType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PathToExceptionFieldType"));
    KDSoapValueList attribs;
    KDSoapValue _valueFieldURI(QString::fromLatin1("FieldURI"), d_ptr->mFieldURI.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExceptionPropertyURIType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueFieldURI.isNil())
    attribs.append(_valueFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__PathToExceptionFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePathToElementType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("FieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFieldURI.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__PathToExceptionFieldType::T__PathToExceptionFieldType()
    : d_ptr(new PrivateDPtr)
{
}

T__PathToExceptionFieldType::~T__PathToExceptionFieldType()
{
}

T__PathToExceptionFieldType::T__PathToExceptionFieldType( const T__PathToExceptionFieldType& other )
    : T__BasePathToElementType( other ), d_ptr( other.d_ptr )
{
}

T__PathToExceptionFieldType&  T__PathToExceptionFieldType::operator=( const T__PathToExceptionFieldType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePathToElementType *>(this) = other;

    return *this;
}


class TNS__ResolveNamesResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfResolutionType mResolutionSet;
};

void TNS__ResolveNamesResponseMessageType::setResolutionSet( const T__ArrayOfResolutionType& resolutionSet )
{
    d_ptr->mResolutionSet = resolutionSet;
}

T__ArrayOfResolutionType TNS__ResolveNamesResponseMessageType::resolutionSet() const
{
    return d_ptr->mResolutionSet;
}

KDSoapValue TNS__ResolveNamesResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ResolveNamesResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueResolutionSet(d_ptr->mResolutionSet.serialize(QString::fromLatin1("ResolutionSet")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResolutionSet.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResolutionSet.setQualified(true);
    if (!_valueResolutionSet.isNil())
    args.append(_valueResolutionSet);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__ResolveNamesResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ResolutionSet")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResolutionSet.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__ResolveNamesResponseMessageType::TNS__ResolveNamesResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ResolveNamesResponseMessageType::~TNS__ResolveNamesResponseMessageType()
{
}

TNS__ResolveNamesResponseMessageType::TNS__ResolveNamesResponseMessageType( const TNS__ResolveNamesResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__ResolveNamesResponseMessageType&  TNS__ResolveNamesResponseMessageType::operator=( const TNS__ResolveNamesResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


KDSoapValue TNS__UpdateFolderResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UpdateFolderResponseType"));
    return mainValue;
}

void TNS__UpdateFolderResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__UpdateFolderResponseType::TNS__UpdateFolderResponseType()
{
}

TNS__UpdateFolderResponseType::~TNS__UpdateFolderResponseType()
{
}


class TNS__SubscribeType::PrivateDPtr : public QSharedData
{
public:
    T__PullSubscriptionRequestType mPullSubscriptionRequest;
    T__PushSubscriptionRequestType mPushSubscriptionRequest;
};

void TNS__SubscribeType::setPullSubscriptionRequest( const T__PullSubscriptionRequestType& pullSubscriptionRequest )
{
    d_ptr->mPullSubscriptionRequest = pullSubscriptionRequest;
}

T__PullSubscriptionRequestType TNS__SubscribeType::pullSubscriptionRequest() const
{
    return d_ptr->mPullSubscriptionRequest;
}

void TNS__SubscribeType::setPushSubscriptionRequest( const T__PushSubscriptionRequestType& pushSubscriptionRequest )
{
    d_ptr->mPushSubscriptionRequest = pushSubscriptionRequest;
}

T__PushSubscriptionRequestType TNS__SubscribeType::pushSubscriptionRequest() const
{
    return d_ptr->mPushSubscriptionRequest;
}

KDSoapValue TNS__SubscribeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SubscribeType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePullSubscriptionRequest(d_ptr->mPullSubscriptionRequest.serialize(QString::fromLatin1("PullSubscriptionRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePullSubscriptionRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valuePullSubscriptionRequest.setQualified(true);
    if (!_valuePullSubscriptionRequest.isNil())
    args.append(_valuePullSubscriptionRequest);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePushSubscriptionRequest(d_ptr->mPushSubscriptionRequest.serialize(QString::fromLatin1("PushSubscriptionRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePushSubscriptionRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valuePushSubscriptionRequest.setQualified(true);
    if (!_valuePushSubscriptionRequest.isNil())
    args.append(_valuePushSubscriptionRequest);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SubscribeType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("PullSubscriptionRequest")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPullSubscriptionRequest.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("PushSubscriptionRequest")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPushSubscriptionRequest.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__SubscribeType::TNS__SubscribeType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SubscribeType::~TNS__SubscribeType()
{
}

TNS__SubscribeType::TNS__SubscribeType( const TNS__SubscribeType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__SubscribeType&  TNS__SubscribeType::operator=( const TNS__SubscribeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__CalendarViewType::PrivateDPtr : public QSharedData
{
public:
    KDDateTime mStartDate;
    KDDateTime mEndDate;
};

void T__CalendarViewType::setStartDate( const KDDateTime& startDate )
{
    d_ptr->mStartDate = startDate;
}

KDDateTime T__CalendarViewType::startDate() const
{
    return d_ptr->mStartDate;
}

void T__CalendarViewType::setEndDate( const KDDateTime& endDate )
{
    d_ptr->mEndDate = endDate;
}

KDDateTime T__CalendarViewType::endDate() const
{
    return d_ptr->mEndDate;
}

KDSoapValue T__CalendarViewType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePagingType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarViewType"));
    KDSoapValueList attribs;
    KDSoapValue _valueStartDate(QString::fromLatin1("StartDate"), d_ptr->mStartDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStartDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueStartDate.isNil())
    attribs.append(_valueStartDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEndDate(QString::fromLatin1("EndDate"), d_ptr->mEndDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueEndDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueEndDate.isNil())
    attribs.append(_valueEndDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__CalendarViewType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePagingType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("StartDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStartDate = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("EndDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEndDate = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__CalendarViewType::T__CalendarViewType()
    : d_ptr(new PrivateDPtr)
{
}

T__CalendarViewType::~T__CalendarViewType()
{
}

T__CalendarViewType::T__CalendarViewType( const T__CalendarViewType& other )
    : T__BasePagingType( other ), d_ptr( other.d_ptr )
{
}

T__CalendarViewType&  T__CalendarViewType::operator=( const T__CalendarViewType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePagingType *>(this) = other;

    return *this;
}


class TNS__SendItemType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__NonEmptyArrayOfBaseItemIdsType mItemIds;
    T__TargetFolderIdType mSavedItemFolderId;
    bool mSaveItemToFolder;
};

TNS__SendItemType::PrivateDPtr::PrivateDPtr()
    : mSaveItemToFolder(false)
{
}


void TNS__SendItemType::setItemIds( const T__NonEmptyArrayOfBaseItemIdsType& itemIds )
{
    d_ptr->mItemIds = itemIds;
}

T__NonEmptyArrayOfBaseItemIdsType TNS__SendItemType::itemIds() const
{
    return d_ptr->mItemIds;
}

void TNS__SendItemType::setSavedItemFolderId( const T__TargetFolderIdType& savedItemFolderId )
{
    d_ptr->mSavedItemFolderId = savedItemFolderId;
}

T__TargetFolderIdType TNS__SendItemType::savedItemFolderId() const
{
    return d_ptr->mSavedItemFolderId;
}

void TNS__SendItemType::setSaveItemToFolder( bool saveItemToFolder )
{
    d_ptr->mSaveItemToFolder = saveItemToFolder;
}

bool TNS__SendItemType::saveItemToFolder() const
{
    return d_ptr->mSaveItemToFolder;
}

KDSoapValue TNS__SendItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SendItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemIds(d_ptr->mItemIds.serialize(QString::fromLatin1("ItemIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItemIds.setQualified(true);
    if (!_valueItemIds.isNil())
    args.append(_valueItemIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSavedItemFolderId(d_ptr->mSavedItemFolderId.serialize(QString::fromLatin1("SavedItemFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSavedItemFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSavedItemFolderId.setQualified(true);
    if (!_valueSavedItemFolderId.isNil())
    args.append(_valueSavedItemFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueSaveItemToFolder(QString::fromLatin1("SaveItemToFolder"), QVariant::fromValue(d_ptr->mSaveItemToFolder), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSaveItemToFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueSaveItemToFolder.isNil())
    attribs.append(_valueSaveItemToFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__SendItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SavedItemFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSavedItemFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("SaveItemToFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSaveItemToFolder = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

TNS__SendItemType::TNS__SendItemType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SendItemType::~TNS__SendItemType()
{
}

TNS__SendItemType::TNS__SendItemType( const TNS__SendItemType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__SendItemType&  TNS__SendItemType::operator=( const TNS__SendItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__ContainsExpressionType::PrivateDPtr : public QSharedData
{
public:
    T__BasePathToElementType mPath;
    T__ConstantValueType mConstant;
    T__ContainmentModeType mContainmentMode;
    T__ContainmentComparisonType mContainmentComparison;
};

void T__ContainsExpressionType::setPath( const T__BasePathToElementType& path )
{
    d_ptr->mPath = path;
}

T__BasePathToElementType T__ContainsExpressionType::path() const
{
    return d_ptr->mPath;
}

void T__ContainsExpressionType::setConstant( const T__ConstantValueType& constant )
{
    d_ptr->mConstant = constant;
}

T__ConstantValueType T__ContainsExpressionType::constant() const
{
    return d_ptr->mConstant;
}

void T__ContainsExpressionType::setContainmentMode( const T__ContainmentModeType& containmentMode )
{
    d_ptr->mContainmentMode = containmentMode;
}

T__ContainmentModeType T__ContainsExpressionType::containmentMode() const
{
    return d_ptr->mContainmentMode;
}

void T__ContainsExpressionType::setContainmentComparison( const T__ContainmentComparisonType& containmentComparison )
{
    d_ptr->mContainmentComparison = containmentComparison;
}

T__ContainmentComparisonType T__ContainsExpressionType::containmentComparison() const
{
    return d_ptr->mContainmentComparison;
}

KDSoapValue T__ContainsExpressionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SearchExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ContainsExpressionType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePath(d_ptr->mPath.serialize(QString::fromLatin1("Path")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePath.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePath.setQualified(true);
    if (!_valuePath.isNil())
    args.append(_valuePath);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConstant(d_ptr->mConstant.serialize(QString::fromLatin1("Constant")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConstant.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConstant.setQualified(true);
    if (!_valueConstant.isNil())
    args.append(_valueConstant);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueContainmentMode(QString::fromLatin1("ContainmentMode"), d_ptr->mContainmentMode.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ContainmentModeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueContainmentMode.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueContainmentMode.isNil())
    attribs.append(_valueContainmentMode);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContainmentComparison(QString::fromLatin1("ContainmentComparison"), d_ptr->mContainmentComparison.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ContainmentComparisonType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueContainmentComparison.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueContainmentComparison.isNil())
    attribs.append(_valueContainmentComparison);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ContainsExpressionType::deserialize( const KDSoapValue& mainValue )
{
    T__SearchExpressionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Path")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPath.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Constant")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConstant.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ContainmentMode")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContainmentMode.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("ContainmentComparison")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContainmentComparison.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__ContainsExpressionType::T__ContainsExpressionType()
    : d_ptr(new PrivateDPtr)
{
}

T__ContainsExpressionType::~T__ContainsExpressionType()
{
}

T__ContainsExpressionType::T__ContainsExpressionType( const T__ContainsExpressionType& other )
    : T__SearchExpressionType( other ), d_ptr( other.d_ptr )
{
}

T__ContainsExpressionType&  T__ContainsExpressionType::operator=( const T__ContainsExpressionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__SearchExpressionType *>(this) = other;

    return *this;
}


KDSoapValue TNS__CreateItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CreateItemResponseType"));
    return mainValue;
}

void TNS__CreateItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__CreateItemResponseType::TNS__CreateItemResponseType()
{
}

TNS__CreateItemResponseType::~TNS__CreateItemResponseType()
{
}


class TNS__SetUserOofSettingsRequest::PrivateDPtr : public QSharedData
{
public:
    T__EmailAddress mMailbox;
    T__UserOofSettings mUserOofSettings;
};

void TNS__SetUserOofSettingsRequest::setMailbox( const T__EmailAddress& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddress TNS__SetUserOofSettingsRequest::mailbox() const
{
    return d_ptr->mMailbox;
}

void TNS__SetUserOofSettingsRequest::setUserOofSettings( const T__UserOofSettings& userOofSettings )
{
    d_ptr->mUserOofSettings = userOofSettings;
}

T__UserOofSettings TNS__SetUserOofSettingsRequest::userOofSettings() const
{
    return d_ptr->mUserOofSettings;
}

KDSoapValue TNS__SetUserOofSettingsRequest::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SetUserOofSettingsRequest"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueUserOofSettings(d_ptr->mUserOofSettings.serialize(QString::fromLatin1("UserOofSettings")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUserOofSettings.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUserOofSettings.setQualified(true);
    if (!_valueUserOofSettings.isNil())
    args.append(_valueUserOofSettings);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SetUserOofSettingsRequest::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("UserOofSettings")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUserOofSettings.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__SetUserOofSettingsRequest::TNS__SetUserOofSettingsRequest()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SetUserOofSettingsRequest::~TNS__SetUserOofSettingsRequest()
{
}

TNS__SetUserOofSettingsRequest::TNS__SetUserOofSettingsRequest( const TNS__SetUserOofSettingsRequest& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__SetUserOofSettingsRequest&  TNS__SetUserOofSettingsRequest::operator=( const TNS__SetUserOofSettingsRequest& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__CreateItemType::PrivateDPtr : public QSharedData
{
public:
    T__TargetFolderIdType mSavedItemFolderId;
    T__NonEmptyArrayOfAllItemsType mItems;
    T__MessageDispositionType mMessageDisposition;
    T__CalendarItemCreateOrDeleteOperationType mSendMeetingInvitations;
};

void TNS__CreateItemType::setSavedItemFolderId( const T__TargetFolderIdType& savedItemFolderId )
{
    d_ptr->mSavedItemFolderId = savedItemFolderId;
}

T__TargetFolderIdType TNS__CreateItemType::savedItemFolderId() const
{
    return d_ptr->mSavedItemFolderId;
}

void TNS__CreateItemType::setItems( const T__NonEmptyArrayOfAllItemsType& items )
{
    d_ptr->mItems = items;
}

T__NonEmptyArrayOfAllItemsType TNS__CreateItemType::items() const
{
    return d_ptr->mItems;
}

void TNS__CreateItemType::setMessageDisposition( const T__MessageDispositionType& messageDisposition )
{
    d_ptr->mMessageDisposition = messageDisposition;
}

T__MessageDispositionType TNS__CreateItemType::messageDisposition() const
{
    return d_ptr->mMessageDisposition;
}

void TNS__CreateItemType::setSendMeetingInvitations( const T__CalendarItemCreateOrDeleteOperationType& sendMeetingInvitations )
{
    d_ptr->mSendMeetingInvitations = sendMeetingInvitations;
}

T__CalendarItemCreateOrDeleteOperationType TNS__CreateItemType::sendMeetingInvitations() const
{
    return d_ptr->mSendMeetingInvitations;
}

KDSoapValue TNS__CreateItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CreateItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSavedItemFolderId(d_ptr->mSavedItemFolderId.serialize(QString::fromLatin1("SavedItemFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSavedItemFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSavedItemFolderId.setQualified(true);
    if (!_valueSavedItemFolderId.isNil())
    args.append(_valueSavedItemFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItems(d_ptr->mItems.serialize(QString::fromLatin1("Items")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItems.setQualified(true);
    if (!_valueItems.isNil())
    args.append(_valueItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueMessageDisposition(QString::fromLatin1("MessageDisposition"), d_ptr->mMessageDisposition.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MessageDispositionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMessageDisposition.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueMessageDisposition.isNil())
    attribs.append(_valueMessageDisposition);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSendMeetingInvitations(QString::fromLatin1("SendMeetingInvitations"), d_ptr->mSendMeetingInvitations.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarItemCreateOrDeleteOperationType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSendMeetingInvitations.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueSendMeetingInvitations.isNil())
    attribs.append(_valueSendMeetingInvitations);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__CreateItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SavedItemFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSavedItemFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Items")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItems.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("MessageDisposition")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessageDisposition.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("SendMeetingInvitations")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSendMeetingInvitations.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__CreateItemType::TNS__CreateItemType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CreateItemType::~TNS__CreateItemType()
{
}

TNS__CreateItemType::TNS__CreateItemType( const TNS__CreateItemType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__CreateItemType&  TNS__CreateItemType::operator=( const TNS__CreateItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue T__ItemChangeDescriptionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ChangeDescriptionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemChangeDescriptionType"));
    return mainValue;
}

void T__ItemChangeDescriptionType::deserialize( const KDSoapValue& mainValue )
{
    T__ChangeDescriptionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__ItemChangeDescriptionType::T__ItemChangeDescriptionType()
{
}

T__ItemChangeDescriptionType::~T__ItemChangeDescriptionType()
{
}


class T__PathToIndexedFieldType::PrivateDPtr : public QSharedData
{
public:
    T__DictionaryURIType mFieldURI;
    QString mFieldIndex;
};

void T__PathToIndexedFieldType::setFieldURI( const T__DictionaryURIType& fieldURI )
{
    d_ptr->mFieldURI = fieldURI;
}

T__DictionaryURIType T__PathToIndexedFieldType::fieldURI() const
{
    return d_ptr->mFieldURI;
}

void T__PathToIndexedFieldType::setFieldIndex( const QString& fieldIndex )
{
    d_ptr->mFieldIndex = fieldIndex;
}

QString T__PathToIndexedFieldType::fieldIndex() const
{
    return d_ptr->mFieldIndex;
}

KDSoapValue T__PathToIndexedFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePathToElementType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PathToIndexedFieldType"));
    KDSoapValueList attribs;
    KDSoapValue _valueFieldURI(QString::fromLatin1("FieldURI"), d_ptr->mFieldURI.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DictionaryURIType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueFieldURI.isNil())
    attribs.append(_valueFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFieldIndex(QString::fromLatin1("FieldIndex"), QVariant::fromValue(d_ptr->mFieldIndex), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFieldIndex.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueFieldIndex.isNil())
    attribs.append(_valueFieldIndex);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__PathToIndexedFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePathToElementType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("FieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFieldURI.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("FieldIndex")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFieldIndex = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__PathToIndexedFieldType::T__PathToIndexedFieldType()
    : d_ptr(new PrivateDPtr)
{
}

T__PathToIndexedFieldType::~T__PathToIndexedFieldType()
{
}

T__PathToIndexedFieldType::T__PathToIndexedFieldType( const T__PathToIndexedFieldType& other )
    : T__BasePathToElementType( other ), d_ptr( other.d_ptr )
{
}

T__PathToIndexedFieldType&  T__PathToIndexedFieldType::operator=( const T__PathToIndexedFieldType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePathToElementType *>(this) = other;

    return *this;
}


class TNS__UpdateFolderType::PrivateDPtr : public QSharedData
{
public:
    T__NonEmptyArrayOfFolderChangesType mFolderChanges;
};

void TNS__UpdateFolderType::setFolderChanges( const T__NonEmptyArrayOfFolderChangesType& folderChanges )
{
    d_ptr->mFolderChanges = folderChanges;
}

T__NonEmptyArrayOfFolderChangesType TNS__UpdateFolderType::folderChanges() const
{
    return d_ptr->mFolderChanges;
}

KDSoapValue TNS__UpdateFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UpdateFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderChanges(d_ptr->mFolderChanges.serialize(QString::fromLatin1("FolderChanges")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderChanges.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolderChanges.setQualified(true);
    if (!_valueFolderChanges.isNil())
    args.append(_valueFolderChanges);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__UpdateFolderType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderChanges")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderChanges.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__UpdateFolderType::TNS__UpdateFolderType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__UpdateFolderType::~TNS__UpdateFolderType()
{
}

TNS__UpdateFolderType::TNS__UpdateFolderType( const TNS__UpdateFolderType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__UpdateFolderType&  TNS__UpdateFolderType::operator=( const TNS__UpdateFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__GetUserAvailabilityRequestType::PrivateDPtr : public QSharedData
{
public:
    T__SerializableTimeZone mTimeZone;
    T__ArrayOfMailboxData mMailboxDataArray;
    T__FreeBusyViewOptionsType mFreeBusyViewOptions;
    T__SuggestionsViewOptionsType mSuggestionsViewOptions;
};

void TNS__GetUserAvailabilityRequestType::setTimeZone( const T__SerializableTimeZone& timeZone )
{
    d_ptr->mTimeZone = timeZone;
}

T__SerializableTimeZone TNS__GetUserAvailabilityRequestType::timeZone() const
{
    return d_ptr->mTimeZone;
}

void TNS__GetUserAvailabilityRequestType::setMailboxDataArray( const T__ArrayOfMailboxData& mailboxDataArray )
{
    d_ptr->mMailboxDataArray = mailboxDataArray;
}

T__ArrayOfMailboxData TNS__GetUserAvailabilityRequestType::mailboxDataArray() const
{
    return d_ptr->mMailboxDataArray;
}

void TNS__GetUserAvailabilityRequestType::setFreeBusyViewOptions( const T__FreeBusyViewOptionsType& freeBusyViewOptions )
{
    d_ptr->mFreeBusyViewOptions = freeBusyViewOptions;
}

T__FreeBusyViewOptionsType TNS__GetUserAvailabilityRequestType::freeBusyViewOptions() const
{
    return d_ptr->mFreeBusyViewOptions;
}

void TNS__GetUserAvailabilityRequestType::setSuggestionsViewOptions( const T__SuggestionsViewOptionsType& suggestionsViewOptions )
{
    d_ptr->mSuggestionsViewOptions = suggestionsViewOptions;
}

T__SuggestionsViewOptionsType TNS__GetUserAvailabilityRequestType::suggestionsViewOptions() const
{
    return d_ptr->mSuggestionsViewOptions;
}

KDSoapValue TNS__GetUserAvailabilityRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetUserAvailabilityRequestType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueTimeZone(d_ptr->mTimeZone.serialize(QString::fromLatin1("TimeZone")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTimeZone.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeZone.setQualified(true);
    if (!_valueTimeZone.isNil())
    args.append(_valueTimeZone);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMailboxDataArray(d_ptr->mMailboxDataArray.serialize(QString::fromLatin1("MailboxDataArray")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailboxDataArray.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMailboxDataArray.setQualified(true);
    if (!_valueMailboxDataArray.isNil())
    args.append(_valueMailboxDataArray);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFreeBusyViewOptions(d_ptr->mFreeBusyViewOptions.serialize(QString::fromLatin1("FreeBusyViewOptions")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFreeBusyViewOptions.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFreeBusyViewOptions.setQualified(true);
    if (!_valueFreeBusyViewOptions.isNil())
    args.append(_valueFreeBusyViewOptions);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSuggestionsViewOptions(d_ptr->mSuggestionsViewOptions.serialize(QString::fromLatin1("SuggestionsViewOptions")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSuggestionsViewOptions.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSuggestionsViewOptions.setQualified(true);
    if (!_valueSuggestionsViewOptions.isNil())
    args.append(_valueSuggestionsViewOptions);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetUserAvailabilityRequestType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("TimeZone")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeZone.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MailboxDataArray")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailboxDataArray.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FreeBusyViewOptions")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFreeBusyViewOptions.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SuggestionsViewOptions")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSuggestionsViewOptions.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__GetUserAvailabilityRequestType::TNS__GetUserAvailabilityRequestType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetUserAvailabilityRequestType::~TNS__GetUserAvailabilityRequestType()
{
}

TNS__GetUserAvailabilityRequestType::TNS__GetUserAvailabilityRequestType( const TNS__GetUserAvailabilityRequestType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetUserAvailabilityRequestType&  TNS__GetUserAvailabilityRequestType::operator=( const TNS__GetUserAvailabilityRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__MovedCopiedEventType::PrivateDPtr : public QSharedData
{
public:
    T__FolderIdType mOldFolderId;
    T__ItemIdType mOldItemId;
    T__FolderIdType mOldParentFolderId;
};

void T__MovedCopiedEventType::setOldFolderId( const T__FolderIdType& oldFolderId )
{
    d_ptr->mOldFolderId = oldFolderId;
}

T__FolderIdType T__MovedCopiedEventType::oldFolderId() const
{
    return d_ptr->mOldFolderId;
}

void T__MovedCopiedEventType::setOldItemId( const T__ItemIdType& oldItemId )
{
    d_ptr->mOldItemId = oldItemId;
}

T__ItemIdType T__MovedCopiedEventType::oldItemId() const
{
    return d_ptr->mOldItemId;
}

void T__MovedCopiedEventType::setOldParentFolderId( const T__FolderIdType& oldParentFolderId )
{
    d_ptr->mOldParentFolderId = oldParentFolderId;
}

T__FolderIdType T__MovedCopiedEventType::oldParentFolderId() const
{
    return d_ptr->mOldParentFolderId;
}

KDSoapValue T__MovedCopiedEventType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseObjectChangedEventType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MovedCopiedEventType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueOldFolderId(d_ptr->mOldFolderId.serialize(QString::fromLatin1("OldFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOldFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOldFolderId.setQualified(true);
    if (!_valueOldFolderId.isNil())
    args.append(_valueOldFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOldItemId(d_ptr->mOldItemId.serialize(QString::fromLatin1("OldItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOldItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOldItemId.setQualified(true);
    if (!_valueOldItemId.isNil())
    args.append(_valueOldItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOldParentFolderId(d_ptr->mOldParentFolderId.serialize(QString::fromLatin1("OldParentFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOldParentFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOldParentFolderId.setQualified(true);
    if (!_valueOldParentFolderId.isNil())
    args.append(_valueOldParentFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__MovedCopiedEventType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseObjectChangedEventType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("OldFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOldFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("OldItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOldItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("OldParentFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOldParentFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__MovedCopiedEventType::T__MovedCopiedEventType()
    : d_ptr(new PrivateDPtr)
{
}

T__MovedCopiedEventType::~T__MovedCopiedEventType()
{
}

T__MovedCopiedEventType::T__MovedCopiedEventType( const T__MovedCopiedEventType& other )
    : T__BaseObjectChangedEventType( other ), d_ptr( other.d_ptr )
{
}

T__MovedCopiedEventType&  T__MovedCopiedEventType::operator=( const T__MovedCopiedEventType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseObjectChangedEventType *>(this) = other;

    return *this;
}


class T__EndDateRecurrenceRangeType::PrivateDPtr : public QSharedData
{
public:
    QDate mEndDate;
};

void T__EndDateRecurrenceRangeType::setEndDate( const QDate& endDate )
{
    d_ptr->mEndDate = endDate;
}

QDate T__EndDateRecurrenceRangeType::endDate() const
{
    return d_ptr->mEndDate;
}

KDSoapValue T__EndDateRecurrenceRangeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RecurrenceRangeBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("EndDateRecurrenceRangeType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueEndDate(QString::fromLatin1("EndDate"), QVariant::fromValue(d_ptr->mEndDate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("date"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueEndDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEndDate.setQualified(true);
    if (!_valueEndDate.isNil())
    args.append(_valueEndDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__EndDateRecurrenceRangeType::deserialize( const KDSoapValue& mainValue )
{
    T__RecurrenceRangeBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("EndDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEndDate = val.value().value<QDate>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__EndDateRecurrenceRangeType::T__EndDateRecurrenceRangeType()
    : d_ptr(new PrivateDPtr)
{
}

T__EndDateRecurrenceRangeType::~T__EndDateRecurrenceRangeType()
{
}

T__EndDateRecurrenceRangeType::T__EndDateRecurrenceRangeType( const T__EndDateRecurrenceRangeType& other )
    : T__RecurrenceRangeBaseType( other ), d_ptr( other.d_ptr )
{
}

T__EndDateRecurrenceRangeType&  T__EndDateRecurrenceRangeType::operator=( const T__EndDateRecurrenceRangeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__RecurrenceRangeBaseType *>(this) = other;

    return *this;
}


class T__ResponseObjectCoreType::PrivateDPtr : public QSharedData
{
public:
    T__ItemIdType mReferenceItemId;
};

void T__ResponseObjectCoreType::setReferenceItemId( const T__ItemIdType& referenceItemId )
{
    d_ptr->mReferenceItemId = referenceItemId;
}

T__ItemIdType T__ResponseObjectCoreType::referenceItemId() const
{
    return d_ptr->mReferenceItemId;
}

KDSoapValue T__ResponseObjectCoreType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__MessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResponseObjectCoreType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueReferenceItemId(d_ptr->mReferenceItemId.serialize(QString::fromLatin1("ReferenceItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueReferenceItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReferenceItemId.setQualified(true);
    if (!_valueReferenceItemId.isNil())
    args.append(_valueReferenceItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ResponseObjectCoreType::deserialize( const KDSoapValue& mainValue )
{
    T__MessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ReferenceItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReferenceItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ResponseObjectCoreType::T__ResponseObjectCoreType()
    : d_ptr(new PrivateDPtr)
{
}

T__ResponseObjectCoreType::~T__ResponseObjectCoreType()
{
}

T__ResponseObjectCoreType::T__ResponseObjectCoreType( const T__ResponseObjectCoreType& other )
    : T__MessageType( other ), d_ptr( other.d_ptr )
{
}

T__ResponseObjectCoreType&  T__ResponseObjectCoreType::operator=( const T__ResponseObjectCoreType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__MessageType *>(this) = other;

    return *this;
}


class TNS__ExpandDLType::PrivateDPtr : public QSharedData
{
public:
    T__EmailAddressType mMailbox;
};

void TNS__ExpandDLType::setMailbox( const T__EmailAddressType& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddressType TNS__ExpandDLType::mailbox() const
{
    return d_ptr->mMailbox;
}

KDSoapValue TNS__ExpandDLType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ExpandDLType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__ExpandDLType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__ExpandDLType::TNS__ExpandDLType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ExpandDLType::~TNS__ExpandDLType()
{
}

TNS__ExpandDLType::TNS__ExpandDLType( const TNS__ExpandDLType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__ExpandDLType&  TNS__ExpandDLType::operator=( const TNS__ExpandDLType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__MeetingMessageType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__ItemIdType mAssociatedCalendarItemId;
    bool mIsDelegated;
    bool mIsOutOfDate;
    bool mHasBeenProcessed;
    T__ResponseTypeType mResponseType;
    QString mUID;
    KDDateTime mRecurrenceId;
    KDDateTime mDateTimeStamp;
};

T__MeetingMessageType::PrivateDPtr::PrivateDPtr()
    : mIsDelegated(false), mIsOutOfDate(false), mHasBeenProcessed(false)
{
}


void T__MeetingMessageType::setAssociatedCalendarItemId( const T__ItemIdType& associatedCalendarItemId )
{
    d_ptr->mAssociatedCalendarItemId = associatedCalendarItemId;
}

T__ItemIdType T__MeetingMessageType::associatedCalendarItemId() const
{
    return d_ptr->mAssociatedCalendarItemId;
}

void T__MeetingMessageType::setIsDelegated( bool isDelegated )
{
    d_ptr->mIsDelegated = isDelegated;
}

bool T__MeetingMessageType::isDelegated() const
{
    return d_ptr->mIsDelegated;
}

void T__MeetingMessageType::setIsOutOfDate( bool isOutOfDate )
{
    d_ptr->mIsOutOfDate = isOutOfDate;
}

bool T__MeetingMessageType::isOutOfDate() const
{
    return d_ptr->mIsOutOfDate;
}

void T__MeetingMessageType::setHasBeenProcessed( bool hasBeenProcessed )
{
    d_ptr->mHasBeenProcessed = hasBeenProcessed;
}

bool T__MeetingMessageType::hasBeenProcessed() const
{
    return d_ptr->mHasBeenProcessed;
}

void T__MeetingMessageType::setResponseType( const T__ResponseTypeType& responseType )
{
    d_ptr->mResponseType = responseType;
}

T__ResponseTypeType T__MeetingMessageType::responseType() const
{
    return d_ptr->mResponseType;
}

void T__MeetingMessageType::setUID( const QString& uID )
{
    d_ptr->mUID = uID;
}

QString T__MeetingMessageType::uID() const
{
    return d_ptr->mUID;
}

void T__MeetingMessageType::setRecurrenceId( const KDDateTime& recurrenceId )
{
    d_ptr->mRecurrenceId = recurrenceId;
}

KDDateTime T__MeetingMessageType::recurrenceId() const
{
    return d_ptr->mRecurrenceId;
}

void T__MeetingMessageType::setDateTimeStamp( const KDDateTime& dateTimeStamp )
{
    d_ptr->mDateTimeStamp = dateTimeStamp;
}

KDDateTime T__MeetingMessageType::dateTimeStamp() const
{
    return d_ptr->mDateTimeStamp;
}

KDSoapValue T__MeetingMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__MessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MeetingMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueAssociatedCalendarItemId(d_ptr->mAssociatedCalendarItemId.serialize(QString::fromLatin1("AssociatedCalendarItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAssociatedCalendarItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAssociatedCalendarItemId.setQualified(true);
    if (!_valueAssociatedCalendarItemId.isNil())
    args.append(_valueAssociatedCalendarItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsDelegated(QString::fromLatin1("IsDelegated"), QVariant::fromValue(d_ptr->mIsDelegated), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsDelegated.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsDelegated.setQualified(true);
    if (!_valueIsDelegated.isNil())
    args.append(_valueIsDelegated);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsOutOfDate(QString::fromLatin1("IsOutOfDate"), QVariant::fromValue(d_ptr->mIsOutOfDate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsOutOfDate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsOutOfDate.setQualified(true);
    if (!_valueIsOutOfDate.isNil())
    args.append(_valueIsOutOfDate);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueHasBeenProcessed(QString::fromLatin1("HasBeenProcessed"), QVariant::fromValue(d_ptr->mHasBeenProcessed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueHasBeenProcessed.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueHasBeenProcessed.setQualified(true);
    if (!_valueHasBeenProcessed.isNil())
    args.append(_valueHasBeenProcessed);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueResponseType(QString::fromLatin1("ResponseType"), d_ptr->mResponseType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResponseTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueResponseType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueResponseType.setQualified(true);
    if (!_valueResponseType.isNil())
    args.append(_valueResponseType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueUID(QString::fromLatin1("UID"), QVariant::fromValue(d_ptr->mUID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueUID.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUID.setQualified(true);
    if (!_valueUID.isNil())
    args.append(_valueUID);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRecurrenceId(QString::fromLatin1("RecurrenceId"), d_ptr->mRecurrenceId.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueRecurrenceId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRecurrenceId.setQualified(true);
    if (!_valueRecurrenceId.isNil())
    args.append(_valueRecurrenceId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDateTimeStamp(QString::fromLatin1("DateTimeStamp"), d_ptr->mDateTimeStamp.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDateTimeStamp.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDateTimeStamp.setQualified(true);
    if (!_valueDateTimeStamp.isNil())
    args.append(_valueDateTimeStamp);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__MeetingMessageType::deserialize( const KDSoapValue& mainValue )
{
    T__MessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AssociatedCalendarItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAssociatedCalendarItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IsDelegated")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsDelegated = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsOutOfDate")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsOutOfDate = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("HasBeenProcessed")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mHasBeenProcessed = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ResponseType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("UID")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUID = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("RecurrenceId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRecurrenceId = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DateTimeStamp")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDateTimeStamp = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__MeetingMessageType::T__MeetingMessageType()
    : d_ptr(new PrivateDPtr)
{
}

T__MeetingMessageType::~T__MeetingMessageType()
{
}

T__MeetingMessageType::T__MeetingMessageType( const T__MeetingMessageType& other )
    : T__MessageType( other ), d_ptr( other.d_ptr )
{
}

T__MeetingMessageType&  T__MeetingMessageType::operator=( const T__MeetingMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__MessageType *>(this) = other;

    return *this;
}


class T__ResponseObjectType::PrivateDPtr : public QSharedData
{
public:
    QString mObjectName;
};

void T__ResponseObjectType::setObjectName( const QString& objectName )
{
    d_ptr->mObjectName = objectName;
}

QString T__ResponseObjectType::objectName() const
{
    return d_ptr->mObjectName;
}

KDSoapValue T__ResponseObjectType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ResponseObjectCoreType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResponseObjectType"));
    KDSoapValueList attribs;
    KDSoapValue _valueObjectName(QString::fromLatin1("ObjectName"), QVariant::fromValue(d_ptr->mObjectName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueObjectName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueObjectName.isNil())
    attribs.append(_valueObjectName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ResponseObjectType::deserialize( const KDSoapValue& mainValue )
{
    T__ResponseObjectCoreType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ObjectName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mObjectName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ResponseObjectType::T__ResponseObjectType()
    : d_ptr(new PrivateDPtr)
{
}

T__ResponseObjectType::~T__ResponseObjectType()
{
}

T__ResponseObjectType::T__ResponseObjectType( const T__ResponseObjectType& other )
    : T__ResponseObjectCoreType( other ), d_ptr( other.d_ptr )
{
}

T__ResponseObjectType&  T__ResponseObjectType::operator=( const T__ResponseObjectType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ResponseObjectCoreType *>(this) = other;

    return *this;
}


class T__RelativeYearlyRecurrencePatternType::PrivateDPtr : public QSharedData
{
public:
    T__DayOfWeekType mDaysOfWeek;
    T__DayOfWeekIndexType mDayOfWeekIndex;
    T__MonthNamesType mMonth;
};

void T__RelativeYearlyRecurrencePatternType::setDaysOfWeek( const T__DayOfWeekType& daysOfWeek )
{
    d_ptr->mDaysOfWeek = daysOfWeek;
}

T__DayOfWeekType T__RelativeYearlyRecurrencePatternType::daysOfWeek() const
{
    return d_ptr->mDaysOfWeek;
}

void T__RelativeYearlyRecurrencePatternType::setDayOfWeekIndex( const T__DayOfWeekIndexType& dayOfWeekIndex )
{
    d_ptr->mDayOfWeekIndex = dayOfWeekIndex;
}

T__DayOfWeekIndexType T__RelativeYearlyRecurrencePatternType::dayOfWeekIndex() const
{
    return d_ptr->mDayOfWeekIndex;
}

void T__RelativeYearlyRecurrencePatternType::setMonth( const T__MonthNamesType& month )
{
    d_ptr->mMonth = month;
}

T__MonthNamesType T__RelativeYearlyRecurrencePatternType::month() const
{
    return d_ptr->mMonth;
}

KDSoapValue T__RelativeYearlyRecurrencePatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RecurrencePatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RelativeYearlyRecurrencePatternType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDaysOfWeek(QString::fromLatin1("DaysOfWeek"), d_ptr->mDaysOfWeek.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DayOfWeekType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDaysOfWeek.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDaysOfWeek.setQualified(true);
    if (!_valueDaysOfWeek.isNil())
    args.append(_valueDaysOfWeek);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDayOfWeekIndex(QString::fromLatin1("DayOfWeekIndex"), d_ptr->mDayOfWeekIndex.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DayOfWeekIndexType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDayOfWeekIndex.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDayOfWeekIndex.setQualified(true);
    if (!_valueDayOfWeekIndex.isNil())
    args.append(_valueDayOfWeekIndex);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMonth(QString::fromLatin1("Month"), d_ptr->mMonth.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MonthNamesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMonth.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMonth.setQualified(true);
    if (!_valueMonth.isNil())
    args.append(_valueMonth);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__RelativeYearlyRecurrencePatternType::deserialize( const KDSoapValue& mainValue )
{
    T__RecurrencePatternBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DaysOfWeek")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDaysOfWeek.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("DayOfWeekIndex")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDayOfWeekIndex.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Month")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMonth.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__RelativeYearlyRecurrencePatternType::T__RelativeYearlyRecurrencePatternType()
    : d_ptr(new PrivateDPtr)
{
}

T__RelativeYearlyRecurrencePatternType::~T__RelativeYearlyRecurrencePatternType()
{
}

T__RelativeYearlyRecurrencePatternType::T__RelativeYearlyRecurrencePatternType( const T__RelativeYearlyRecurrencePatternType& other )
    : T__RecurrencePatternBaseType( other ), d_ptr( other.d_ptr )
{
}

T__RelativeYearlyRecurrencePatternType&  T__RelativeYearlyRecurrencePatternType::operator=( const T__RelativeYearlyRecurrencePatternType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__RecurrencePatternBaseType *>(this) = other;

    return *this;
}


class T__RootItemIdType::PrivateDPtr : public QSharedData
{
public:
    QString mRootItemId;
    QString mRootItemChangeKey;
};

void T__RootItemIdType::setRootItemId( const QString& rootItemId )
{
    d_ptr->mRootItemId = rootItemId;
}

QString T__RootItemIdType::rootItemId() const
{
    return d_ptr->mRootItemId;
}

void T__RootItemIdType::setRootItemChangeKey( const QString& rootItemChangeKey )
{
    d_ptr->mRootItemChangeKey = rootItemChangeKey;
}

QString T__RootItemIdType::rootItemChangeKey() const
{
    return d_ptr->mRootItemChangeKey;
}

KDSoapValue T__RootItemIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseItemIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RootItemIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueRootItemId(QString::fromLatin1("RootItemId"), QVariant::fromValue(d_ptr->mRootItemId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueRootItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueRootItemId.isNil())
    attribs.append(_valueRootItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRootItemChangeKey(QString::fromLatin1("RootItemChangeKey"), QVariant::fromValue(d_ptr->mRootItemChangeKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueRootItemChangeKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueRootItemChangeKey.isNil())
    attribs.append(_valueRootItemChangeKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__RootItemIdType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseItemIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("RootItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRootItemId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("RootItemChangeKey")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRootItemChangeKey = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__RootItemIdType::T__RootItemIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__RootItemIdType::~T__RootItemIdType()
{
}

T__RootItemIdType::T__RootItemIdType( const T__RootItemIdType& other )
    : T__BaseItemIdType( other ), d_ptr( other.d_ptr )
{
}

T__RootItemIdType&  T__RootItemIdType::operator=( const T__RootItemIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseItemIdType *>(this) = other;

    return *this;
}


class T__PushSubscriptionRequestType::PrivateDPtr : public QSharedData
{
public:
    T__SubscriptionStatusFrequencyType mStatusFrequency;
    QString mURL;
};

void T__PushSubscriptionRequestType::setStatusFrequency( const T__SubscriptionStatusFrequencyType& statusFrequency )
{
    d_ptr->mStatusFrequency = statusFrequency;
}

T__SubscriptionStatusFrequencyType T__PushSubscriptionRequestType::statusFrequency() const
{
    return d_ptr->mStatusFrequency;
}

void T__PushSubscriptionRequestType::setURL( const QString& uRL )
{
    d_ptr->mURL = uRL;
}

QString T__PushSubscriptionRequestType::uRL() const
{
    return d_ptr->mURL;
}

KDSoapValue T__PushSubscriptionRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseSubscriptionRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PushSubscriptionRequestType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueStatusFrequency(QString::fromLatin1("StatusFrequency"), d_ptr->mStatusFrequency.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SubscriptionStatusFrequencyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueStatusFrequency.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStatusFrequency.setQualified(true);
    if (!_valueStatusFrequency.isNil())
    args.append(_valueStatusFrequency);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueURL(QString::fromLatin1("URL"), QVariant::fromValue(d_ptr->mURL), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueURL.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueURL.setQualified(true);
    if (!_valueURL.isNil())
    args.append(_valueURL);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__PushSubscriptionRequestType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseSubscriptionRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("StatusFrequency")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStatusFrequency.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("URL")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mURL = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__PushSubscriptionRequestType::T__PushSubscriptionRequestType()
    : d_ptr(new PrivateDPtr)
{
}

T__PushSubscriptionRequestType::~T__PushSubscriptionRequestType()
{
}

T__PushSubscriptionRequestType::T__PushSubscriptionRequestType( const T__PushSubscriptionRequestType& other )
    : T__BaseSubscriptionRequestType( other ), d_ptr( other.d_ptr )
{
}

T__PushSubscriptionRequestType&  T__PushSubscriptionRequestType::operator=( const T__PushSubscriptionRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseSubscriptionRequestType *>(this) = other;

    return *this;
}


class TNS__BaseDelegateResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    TNS__ArrayOfDelegateUserResponseMessageType mResponseMessages;
};

void TNS__BaseDelegateResponseMessageType::setResponseMessages( const TNS__ArrayOfDelegateUserResponseMessageType& responseMessages )
{
    d_ptr->mResponseMessages = responseMessages;
}

TNS__ArrayOfDelegateUserResponseMessageType TNS__BaseDelegateResponseMessageType::responseMessages() const
{
    return d_ptr->mResponseMessages;
}

KDSoapValue TNS__BaseDelegateResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("BaseDelegateResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueResponseMessages(d_ptr->mResponseMessages.serialize(QString::fromLatin1("ResponseMessages")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResponseMessages.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResponseMessages.setQualified(true);
    if (!_valueResponseMessages.isNil())
    args.append(_valueResponseMessages);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__BaseDelegateResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ResponseMessages")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResponseMessages.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__BaseDelegateResponseMessageType::TNS__BaseDelegateResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__BaseDelegateResponseMessageType::~TNS__BaseDelegateResponseMessageType()
{
}

TNS__BaseDelegateResponseMessageType::TNS__BaseDelegateResponseMessageType( const TNS__BaseDelegateResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__BaseDelegateResponseMessageType&  TNS__BaseDelegateResponseMessageType::operator=( const TNS__BaseDelegateResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class T__ItemIdType::PrivateDPtr : public QSharedData
{
public:
    QString mId;
    QString mChangeKey;
};

void T__ItemIdType::setId( const QString& id )
{
    d_ptr->mId = id;
}

QString T__ItemIdType::id() const
{
    return d_ptr->mId;
}

void T__ItemIdType::setChangeKey( const QString& changeKey )
{
    d_ptr->mChangeKey = changeKey;
}

QString T__ItemIdType::changeKey() const
{
    return d_ptr->mChangeKey;
}

KDSoapValue T__ItemIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseItemIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueId(QString::fromLatin1("Id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueId.isNil())
    attribs.append(_valueId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChangeKey(QString::fromLatin1("ChangeKey"), QVariant::fromValue(d_ptr->mChangeKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueChangeKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueChangeKey.isNil())
    attribs.append(_valueChangeKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ItemIdType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseItemIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Id")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ChangeKey")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChangeKey = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ItemIdType::T__ItemIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__ItemIdType::~T__ItemIdType()
{
}

T__ItemIdType::T__ItemIdType( const T__ItemIdType& other )
    : T__BaseItemIdType( other ), d_ptr( other.d_ptr )
{
}

T__ItemIdType&  T__ItemIdType::operator=( const T__ItemIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseItemIdType *>(this) = other;

    return *this;
}


class TNS__GetAttachmentType::PrivateDPtr : public QSharedData
{
public:
    T__AttachmentResponseShapeType mAttachmentShape;
    T__NonEmptyArrayOfRequestAttachmentIdsType mAttachmentIds;
};

void TNS__GetAttachmentType::setAttachmentShape( const T__AttachmentResponseShapeType& attachmentShape )
{
    d_ptr->mAttachmentShape = attachmentShape;
}

T__AttachmentResponseShapeType TNS__GetAttachmentType::attachmentShape() const
{
    return d_ptr->mAttachmentShape;
}

void TNS__GetAttachmentType::setAttachmentIds( const T__NonEmptyArrayOfRequestAttachmentIdsType& attachmentIds )
{
    d_ptr->mAttachmentIds = attachmentIds;
}

T__NonEmptyArrayOfRequestAttachmentIdsType TNS__GetAttachmentType::attachmentIds() const
{
    return d_ptr->mAttachmentIds;
}

KDSoapValue TNS__GetAttachmentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetAttachmentType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueAttachmentShape(d_ptr->mAttachmentShape.serialize(QString::fromLatin1("AttachmentShape")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttachmentShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAttachmentShape.setQualified(true);
    if (!_valueAttachmentShape.isNil())
    args.append(_valueAttachmentShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAttachmentIds(d_ptr->mAttachmentIds.serialize(QString::fromLatin1("AttachmentIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttachmentIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAttachmentIds.setQualified(true);
    if (!_valueAttachmentIds.isNil())
    args.append(_valueAttachmentIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetAttachmentType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AttachmentShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttachmentShape.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AttachmentIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttachmentIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__GetAttachmentType::TNS__GetAttachmentType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetAttachmentType::~TNS__GetAttachmentType()
{
}

TNS__GetAttachmentType::TNS__GetAttachmentType( const TNS__GetAttachmentType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetAttachmentType&  TNS__GetAttachmentType::operator=( const TNS__GetAttachmentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__BaseDelegateType::PrivateDPtr : public QSharedData
{
public:
    T__EmailAddressType mMailbox;
};

void TNS__BaseDelegateType::setMailbox( const T__EmailAddressType& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddressType TNS__BaseDelegateType::mailbox() const
{
    return d_ptr->mMailbox;
}

KDSoapValue TNS__BaseDelegateType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("BaseDelegateType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__BaseDelegateType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__BaseDelegateType::TNS__BaseDelegateType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__BaseDelegateType::~TNS__BaseDelegateType()
{
}

TNS__BaseDelegateType::TNS__BaseDelegateType( const TNS__BaseDelegateType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__BaseDelegateType&  TNS__BaseDelegateType::operator=( const TNS__BaseDelegateType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue T__OrType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__MultipleOperandBooleanExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("OrType"));
    return mainValue;
}

void T__OrType::deserialize( const KDSoapValue& mainValue )
{
    T__MultipleOperandBooleanExpressionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__OrType::T__OrType()
{
}

T__OrType::~T__OrType()
{
}


class T__ContactItemType::PrivateDPtr : public QSharedData
{
public:
    QString mFileAs;
    T__FileAsMappingType mFileAsMapping;
    QString mDisplayName;
    QString mGivenName;
    QString mInitials;
    QString mMiddleName;
    QString mNickname;
    T__CompleteNameType mCompleteName;
    QString mCompanyName;
    T__EmailAddressDictionaryType mEmailAddresses;
    T__PhysicalAddressDictionaryType mPhysicalAddresses;
    T__PhoneNumberDictionaryType mPhoneNumbers;
    QString mAssistantName;
    KDDateTime mBirthday;
    QString mBusinessHomePage;
    T__ArrayOfStringsType mChildren;
    T__ArrayOfStringsType mCompanies;
    T__ContactSourceType mContactSource;
    QString mDepartment;
    QString mGeneration;
    T__ImAddressDictionaryType mImAddresses;
    QString mJobTitle;
    QString mManager;
    QString mMileage;
    QString mOfficeLocation;
    T__PhysicalAddressIndexType mPostalAddressIndex;
    QString mProfession;
    QString mSpouseName;
    QString mSurname;
    KDDateTime mWeddingAnniversary;
};

void T__ContactItemType::setFileAs( const QString& fileAs )
{
    d_ptr->mFileAs = fileAs;
}

QString T__ContactItemType::fileAs() const
{
    return d_ptr->mFileAs;
}

void T__ContactItemType::setFileAsMapping( const T__FileAsMappingType& fileAsMapping )
{
    d_ptr->mFileAsMapping = fileAsMapping;
}

T__FileAsMappingType T__ContactItemType::fileAsMapping() const
{
    return d_ptr->mFileAsMapping;
}

void T__ContactItemType::setDisplayName( const QString& displayName )
{
    d_ptr->mDisplayName = displayName;
}

QString T__ContactItemType::displayName() const
{
    return d_ptr->mDisplayName;
}

void T__ContactItemType::setGivenName( const QString& givenName )
{
    d_ptr->mGivenName = givenName;
}

QString T__ContactItemType::givenName() const
{
    return d_ptr->mGivenName;
}

void T__ContactItemType::setInitials( const QString& initials )
{
    d_ptr->mInitials = initials;
}

QString T__ContactItemType::initials() const
{
    return d_ptr->mInitials;
}

void T__ContactItemType::setMiddleName( const QString& middleName )
{
    d_ptr->mMiddleName = middleName;
}

QString T__ContactItemType::middleName() const
{
    return d_ptr->mMiddleName;
}

void T__ContactItemType::setNickname( const QString& nickname )
{
    d_ptr->mNickname = nickname;
}

QString T__ContactItemType::nickname() const
{
    return d_ptr->mNickname;
}

void T__ContactItemType::setCompleteName( const T__CompleteNameType& completeName )
{
    d_ptr->mCompleteName = completeName;
}

T__CompleteNameType T__ContactItemType::completeName() const
{
    return d_ptr->mCompleteName;
}

void T__ContactItemType::setCompanyName( const QString& companyName )
{
    d_ptr->mCompanyName = companyName;
}

QString T__ContactItemType::companyName() const
{
    return d_ptr->mCompanyName;
}

void T__ContactItemType::setEmailAddresses( const T__EmailAddressDictionaryType& emailAddresses )
{
    d_ptr->mEmailAddresses = emailAddresses;
}

T__EmailAddressDictionaryType T__ContactItemType::emailAddresses() const
{
    return d_ptr->mEmailAddresses;
}

void T__ContactItemType::setPhysicalAddresses( const T__PhysicalAddressDictionaryType& physicalAddresses )
{
    d_ptr->mPhysicalAddresses = physicalAddresses;
}

T__PhysicalAddressDictionaryType T__ContactItemType::physicalAddresses() const
{
    return d_ptr->mPhysicalAddresses;
}

void T__ContactItemType::setPhoneNumbers( const T__PhoneNumberDictionaryType& phoneNumbers )
{
    d_ptr->mPhoneNumbers = phoneNumbers;
}

T__PhoneNumberDictionaryType T__ContactItemType::phoneNumbers() const
{
    return d_ptr->mPhoneNumbers;
}

void T__ContactItemType::setAssistantName( const QString& assistantName )
{
    d_ptr->mAssistantName = assistantName;
}

QString T__ContactItemType::assistantName() const
{
    return d_ptr->mAssistantName;
}

void T__ContactItemType::setBirthday( const KDDateTime& birthday )
{
    d_ptr->mBirthday = birthday;
}

KDDateTime T__ContactItemType::birthday() const
{
    return d_ptr->mBirthday;
}

void T__ContactItemType::setBusinessHomePage( const QString& businessHomePage )
{
    d_ptr->mBusinessHomePage = businessHomePage;
}

QString T__ContactItemType::businessHomePage() const
{
    return d_ptr->mBusinessHomePage;
}

void T__ContactItemType::setChildren( const T__ArrayOfStringsType& children )
{
    d_ptr->mChildren = children;
}

T__ArrayOfStringsType T__ContactItemType::children() const
{
    return d_ptr->mChildren;
}

void T__ContactItemType::setCompanies( const T__ArrayOfStringsType& companies )
{
    d_ptr->mCompanies = companies;
}

T__ArrayOfStringsType T__ContactItemType::companies() const
{
    return d_ptr->mCompanies;
}

void T__ContactItemType::setContactSource( const T__ContactSourceType& contactSource )
{
    d_ptr->mContactSource = contactSource;
}

T__ContactSourceType T__ContactItemType::contactSource() const
{
    return d_ptr->mContactSource;
}

void T__ContactItemType::setDepartment( const QString& department )
{
    d_ptr->mDepartment = department;
}

QString T__ContactItemType::department() const
{
    return d_ptr->mDepartment;
}

void T__ContactItemType::setGeneration( const QString& generation )
{
    d_ptr->mGeneration = generation;
}

QString T__ContactItemType::generation() const
{
    return d_ptr->mGeneration;
}

void T__ContactItemType::setImAddresses( const T__ImAddressDictionaryType& imAddresses )
{
    d_ptr->mImAddresses = imAddresses;
}

T__ImAddressDictionaryType T__ContactItemType::imAddresses() const
{
    return d_ptr->mImAddresses;
}

void T__ContactItemType::setJobTitle( const QString& jobTitle )
{
    d_ptr->mJobTitle = jobTitle;
}

QString T__ContactItemType::jobTitle() const
{
    return d_ptr->mJobTitle;
}

void T__ContactItemType::setManager( const QString& manager )
{
    d_ptr->mManager = manager;
}

QString T__ContactItemType::manager() const
{
    return d_ptr->mManager;
}

void T__ContactItemType::setMileage( const QString& mileage )
{
    d_ptr->mMileage = mileage;
}

QString T__ContactItemType::mileage() const
{
    return d_ptr->mMileage;
}

void T__ContactItemType::setOfficeLocation( const QString& officeLocation )
{
    d_ptr->mOfficeLocation = officeLocation;
}

QString T__ContactItemType::officeLocation() const
{
    return d_ptr->mOfficeLocation;
}

void T__ContactItemType::setPostalAddressIndex( const T__PhysicalAddressIndexType& postalAddressIndex )
{
    d_ptr->mPostalAddressIndex = postalAddressIndex;
}

T__PhysicalAddressIndexType T__ContactItemType::postalAddressIndex() const
{
    return d_ptr->mPostalAddressIndex;
}

void T__ContactItemType::setProfession( const QString& profession )
{
    d_ptr->mProfession = profession;
}

QString T__ContactItemType::profession() const
{
    return d_ptr->mProfession;
}

void T__ContactItemType::setSpouseName( const QString& spouseName )
{
    d_ptr->mSpouseName = spouseName;
}

QString T__ContactItemType::spouseName() const
{
    return d_ptr->mSpouseName;
}

void T__ContactItemType::setSurname( const QString& surname )
{
    d_ptr->mSurname = surname;
}

QString T__ContactItemType::surname() const
{
    return d_ptr->mSurname;
}

void T__ContactItemType::setWeddingAnniversary( const KDDateTime& weddingAnniversary )
{
    d_ptr->mWeddingAnniversary = weddingAnniversary;
}

KDDateTime T__ContactItemType::weddingAnniversary() const
{
    return d_ptr->mWeddingAnniversary;
}

KDSoapValue T__ContactItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ContactItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFileAs(QString::fromLatin1("FileAs"), QVariant::fromValue(d_ptr->mFileAs), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFileAs.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFileAs.setQualified(true);
    if (!_valueFileAs.isNil())
    args.append(_valueFileAs);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFileAsMapping(QString::fromLatin1("FileAsMapping"), d_ptr->mFileAsMapping.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FileAsMappingType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueFileAsMapping.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFileAsMapping.setQualified(true);
    if (!_valueFileAsMapping.isNil())
    args.append(_valueFileAsMapping);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDisplayName(QString::fromLatin1("DisplayName"), QVariant::fromValue(d_ptr->mDisplayName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDisplayName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDisplayName.setQualified(true);
    if (!_valueDisplayName.isNil())
    args.append(_valueDisplayName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueGivenName(QString::fromLatin1("GivenName"), QVariant::fromValue(d_ptr->mGivenName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueGivenName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueGivenName.setQualified(true);
    if (!_valueGivenName.isNil())
    args.append(_valueGivenName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInitials(QString::fromLatin1("Initials"), QVariant::fromValue(d_ptr->mInitials), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueInitials.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInitials.setQualified(true);
    if (!_valueInitials.isNil())
    args.append(_valueInitials);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMiddleName(QString::fromLatin1("MiddleName"), QVariant::fromValue(d_ptr->mMiddleName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMiddleName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMiddleName.setQualified(true);
    if (!_valueMiddleName.isNil())
    args.append(_valueMiddleName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNickname(QString::fromLatin1("Nickname"), QVariant::fromValue(d_ptr->mNickname), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNickname.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNickname.setQualified(true);
    if (!_valueNickname.isNil())
    args.append(_valueNickname);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCompleteName(d_ptr->mCompleteName.serialize(QString::fromLatin1("CompleteName")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCompleteName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCompleteName.setQualified(true);
    if (!_valueCompleteName.isNil())
    args.append(_valueCompleteName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCompanyName(QString::fromLatin1("CompanyName"), QVariant::fromValue(d_ptr->mCompanyName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueCompanyName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCompanyName.setQualified(true);
    if (!_valueCompanyName.isNil())
    args.append(_valueCompanyName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEmailAddresses(d_ptr->mEmailAddresses.serialize(QString::fromLatin1("EmailAddresses")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueEmailAddresses.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEmailAddresses.setQualified(true);
    if (!_valueEmailAddresses.isNil())
    args.append(_valueEmailAddresses);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePhysicalAddresses(d_ptr->mPhysicalAddresses.serialize(QString::fromLatin1("PhysicalAddresses")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePhysicalAddresses.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePhysicalAddresses.setQualified(true);
    if (!_valuePhysicalAddresses.isNil())
    args.append(_valuePhysicalAddresses);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePhoneNumbers(d_ptr->mPhoneNumbers.serialize(QString::fromLatin1("PhoneNumbers")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePhoneNumbers.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePhoneNumbers.setQualified(true);
    if (!_valuePhoneNumbers.isNil())
    args.append(_valuePhoneNumbers);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAssistantName(QString::fromLatin1("AssistantName"), QVariant::fromValue(d_ptr->mAssistantName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAssistantName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAssistantName.setQualified(true);
    if (!_valueAssistantName.isNil())
    args.append(_valueAssistantName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBirthday(QString::fromLatin1("Birthday"), d_ptr->mBirthday.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueBirthday.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBirthday.setQualified(true);
    if (!_valueBirthday.isNil())
    args.append(_valueBirthday);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBusinessHomePage(QString::fromLatin1("BusinessHomePage"), QVariant::fromValue(d_ptr->mBusinessHomePage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueBusinessHomePage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBusinessHomePage.setQualified(true);
    if (!_valueBusinessHomePage.isNil())
    args.append(_valueBusinessHomePage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChildren(d_ptr->mChildren.serialize(QString::fromLatin1("Children")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueChildren.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueChildren.setQualified(true);
    if (!_valueChildren.isNil())
    args.append(_valueChildren);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCompanies(d_ptr->mCompanies.serialize(QString::fromLatin1("Companies")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCompanies.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCompanies.setQualified(true);
    if (!_valueCompanies.isNil())
    args.append(_valueCompanies);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContactSource(QString::fromLatin1("ContactSource"), d_ptr->mContactSource.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ContactSourceType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueContactSource.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContactSource.setQualified(true);
    if (!_valueContactSource.isNil())
    args.append(_valueContactSource);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDepartment(QString::fromLatin1("Department"), QVariant::fromValue(d_ptr->mDepartment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDepartment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDepartment.setQualified(true);
    if (!_valueDepartment.isNil())
    args.append(_valueDepartment);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueGeneration(QString::fromLatin1("Generation"), QVariant::fromValue(d_ptr->mGeneration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueGeneration.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueGeneration.setQualified(true);
    if (!_valueGeneration.isNil())
    args.append(_valueGeneration);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueImAddresses(d_ptr->mImAddresses.serialize(QString::fromLatin1("ImAddresses")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueImAddresses.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueImAddresses.setQualified(true);
    if (!_valueImAddresses.isNil())
    args.append(_valueImAddresses);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueJobTitle(QString::fromLatin1("JobTitle"), QVariant::fromValue(d_ptr->mJobTitle), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueJobTitle.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueJobTitle.setQualified(true);
    if (!_valueJobTitle.isNil())
    args.append(_valueJobTitle);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueManager(QString::fromLatin1("Manager"), QVariant::fromValue(d_ptr->mManager), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueManager.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueManager.setQualified(true);
    if (!_valueManager.isNil())
    args.append(_valueManager);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMileage(QString::fromLatin1("Mileage"), QVariant::fromValue(d_ptr->mMileage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMileage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMileage.setQualified(true);
    if (!_valueMileage.isNil())
    args.append(_valueMileage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOfficeLocation(QString::fromLatin1("OfficeLocation"), QVariant::fromValue(d_ptr->mOfficeLocation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueOfficeLocation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOfficeLocation.setQualified(true);
    if (!_valueOfficeLocation.isNil())
    args.append(_valueOfficeLocation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePostalAddressIndex(QString::fromLatin1("PostalAddressIndex"), d_ptr->mPostalAddressIndex.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PhysicalAddressIndexType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valuePostalAddressIndex.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePostalAddressIndex.setQualified(true);
    if (!_valuePostalAddressIndex.isNil())
    args.append(_valuePostalAddressIndex);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueProfession(QString::fromLatin1("Profession"), QVariant::fromValue(d_ptr->mProfession), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueProfession.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueProfession.setQualified(true);
    if (!_valueProfession.isNil())
    args.append(_valueProfession);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSpouseName(QString::fromLatin1("SpouseName"), QVariant::fromValue(d_ptr->mSpouseName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSpouseName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSpouseName.setQualified(true);
    if (!_valueSpouseName.isNil())
    args.append(_valueSpouseName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSurname(QString::fromLatin1("Surname"), QVariant::fromValue(d_ptr->mSurname), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSurname.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSurname.setQualified(true);
    if (!_valueSurname.isNil())
    args.append(_valueSurname);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWeddingAnniversary(QString::fromLatin1("WeddingAnniversary"), d_ptr->mWeddingAnniversary.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueWeddingAnniversary.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWeddingAnniversary.setQualified(true);
    if (!_valueWeddingAnniversary.isNil())
    args.append(_valueWeddingAnniversary);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ContactItemType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FileAs")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFileAs = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("FileAsMapping")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFileAsMapping.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("DisplayName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDisplayName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("GivenName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGivenName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Initials")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInitials = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MiddleName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMiddleName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Nickname")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNickname = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CompleteName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCompleteName.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CompanyName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCompanyName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("EmailAddresses")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEmailAddresses.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("PhysicalAddresses")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPhysicalAddresses.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("PhoneNumbers")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPhoneNumbers.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AssistantName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAssistantName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Birthday")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBirthday = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("BusinessHomePage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBusinessHomePage = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Children")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChildren.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Companies")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCompanies.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ContactSource")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContactSource.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Department")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDepartment = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Generation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGeneration = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ImAddresses")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mImAddresses.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("JobTitle")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mJobTitle = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Manager")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mManager = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Mileage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMileage = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("OfficeLocation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOfficeLocation = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("PostalAddressIndex")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPostalAddressIndex.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Profession")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mProfession = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("SpouseName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSpouseName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Surname")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSurname = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("WeddingAnniversary")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWeddingAnniversary = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ContactItemType::T__ContactItemType()
    : d_ptr(new PrivateDPtr)
{
}

T__ContactItemType::~T__ContactItemType()
{
}

T__ContactItemType::T__ContactItemType( const T__ContactItemType& other )
    : T__ItemType( other ), d_ptr( other.d_ptr )
{
}

T__ContactItemType&  T__ContactItemType::operator=( const T__ContactItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ItemType *>(this) = other;

    return *this;
}


class TNS__BaseMoveCopyFolderType::PrivateDPtr : public QSharedData
{
public:
    T__TargetFolderIdType mToFolderId;
    T__NonEmptyArrayOfBaseFolderIdsType mFolderIds;
};

void TNS__BaseMoveCopyFolderType::setToFolderId( const T__TargetFolderIdType& toFolderId )
{
    d_ptr->mToFolderId = toFolderId;
}

T__TargetFolderIdType TNS__BaseMoveCopyFolderType::toFolderId() const
{
    return d_ptr->mToFolderId;
}

void TNS__BaseMoveCopyFolderType::setFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& folderIds )
{
    d_ptr->mFolderIds = folderIds;
}

T__NonEmptyArrayOfBaseFolderIdsType TNS__BaseMoveCopyFolderType::folderIds() const
{
    return d_ptr->mFolderIds;
}

KDSoapValue TNS__BaseMoveCopyFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("BaseMoveCopyFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueToFolderId(d_ptr->mToFolderId.serialize(QString::fromLatin1("ToFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueToFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueToFolderId.setQualified(true);
    if (!_valueToFolderId.isNil())
    args.append(_valueToFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFolderIds(d_ptr->mFolderIds.serialize(QString::fromLatin1("FolderIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolderIds.setQualified(true);
    if (!_valueFolderIds.isNil())
    args.append(_valueFolderIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__BaseMoveCopyFolderType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ToFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mToFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FolderIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__BaseMoveCopyFolderType::TNS__BaseMoveCopyFolderType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__BaseMoveCopyFolderType::~TNS__BaseMoveCopyFolderType()
{
}

TNS__BaseMoveCopyFolderType::TNS__BaseMoveCopyFolderType( const TNS__BaseMoveCopyFolderType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__BaseMoveCopyFolderType&  TNS__BaseMoveCopyFolderType::operator=( const TNS__BaseMoveCopyFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__SmartResponseBaseType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mSubject;
    T__BodyType mBody;
    T__ArrayOfRecipientsType mToRecipients;
    T__ArrayOfRecipientsType mCcRecipients;
    T__ArrayOfRecipientsType mBccRecipients;
    bool mIsReadReceiptRequested;
    bool mIsDeliveryReceiptRequested;
    T__SingleRecipientType mFrom;
    T__ItemIdType mReferenceItemId;
    QString mObjectName;
};

T__SmartResponseBaseType::PrivateDPtr::PrivateDPtr()
    : mIsReadReceiptRequested(false), mIsDeliveryReceiptRequested(false)
{
}


void T__SmartResponseBaseType::setSubject( const QString& subject )
{
    d_ptr->mSubject = subject;
}

QString T__SmartResponseBaseType::subject() const
{
    return d_ptr->mSubject;
}

void T__SmartResponseBaseType::setBody( const T__BodyType& body )
{
    d_ptr->mBody = body;
}

T__BodyType T__SmartResponseBaseType::body() const
{
    return d_ptr->mBody;
}

void T__SmartResponseBaseType::setToRecipients( const T__ArrayOfRecipientsType& toRecipients )
{
    d_ptr->mToRecipients = toRecipients;
}

T__ArrayOfRecipientsType T__SmartResponseBaseType::toRecipients() const
{
    return d_ptr->mToRecipients;
}

void T__SmartResponseBaseType::setCcRecipients( const T__ArrayOfRecipientsType& ccRecipients )
{
    d_ptr->mCcRecipients = ccRecipients;
}

T__ArrayOfRecipientsType T__SmartResponseBaseType::ccRecipients() const
{
    return d_ptr->mCcRecipients;
}

void T__SmartResponseBaseType::setBccRecipients( const T__ArrayOfRecipientsType& bccRecipients )
{
    d_ptr->mBccRecipients = bccRecipients;
}

T__ArrayOfRecipientsType T__SmartResponseBaseType::bccRecipients() const
{
    return d_ptr->mBccRecipients;
}

void T__SmartResponseBaseType::setIsReadReceiptRequested( bool isReadReceiptRequested )
{
    d_ptr->mIsReadReceiptRequested = isReadReceiptRequested;
}

bool T__SmartResponseBaseType::isReadReceiptRequested() const
{
    return d_ptr->mIsReadReceiptRequested;
}

void T__SmartResponseBaseType::setIsDeliveryReceiptRequested( bool isDeliveryReceiptRequested )
{
    d_ptr->mIsDeliveryReceiptRequested = isDeliveryReceiptRequested;
}

bool T__SmartResponseBaseType::isDeliveryReceiptRequested() const
{
    return d_ptr->mIsDeliveryReceiptRequested;
}

void T__SmartResponseBaseType::setFrom( const T__SingleRecipientType& from )
{
    d_ptr->mFrom = from;
}

T__SingleRecipientType T__SmartResponseBaseType::from() const
{
    return d_ptr->mFrom;
}

void T__SmartResponseBaseType::setReferenceItemId( const T__ItemIdType& referenceItemId )
{
    d_ptr->mReferenceItemId = referenceItemId;
}

T__ItemIdType T__SmartResponseBaseType::referenceItemId() const
{
    return d_ptr->mReferenceItemId;
}

void T__SmartResponseBaseType::setObjectName( const QString& objectName )
{
    d_ptr->mObjectName = objectName;
}

QString T__SmartResponseBaseType::objectName() const
{
    return d_ptr->mObjectName;
}

KDSoapValue T__SmartResponseBaseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ResponseObjectType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SmartResponseBaseType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSubject(QString::fromLatin1("Subject"), QVariant::fromValue(d_ptr->mSubject), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSubject.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSubject.setQualified(true);
    if (!_valueSubject.isNil())
    args.append(_valueSubject);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBody(d_ptr->mBody.serialize(QString::fromLatin1("Body")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBody.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBody.setQualified(true);
    if (!_valueBody.isNil())
    args.append(_valueBody);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueToRecipients(d_ptr->mToRecipients.serialize(QString::fromLatin1("ToRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueToRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueToRecipients.setQualified(true);
    if (!_valueToRecipients.isNil())
    args.append(_valueToRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCcRecipients(d_ptr->mCcRecipients.serialize(QString::fromLatin1("CcRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCcRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCcRecipients.setQualified(true);
    if (!_valueCcRecipients.isNil())
    args.append(_valueCcRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBccRecipients(d_ptr->mBccRecipients.serialize(QString::fromLatin1("BccRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBccRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBccRecipients.setQualified(true);
    if (!_valueBccRecipients.isNil())
    args.append(_valueBccRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsReadReceiptRequested(QString::fromLatin1("IsReadReceiptRequested"), QVariant::fromValue(d_ptr->mIsReadReceiptRequested), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsReadReceiptRequested.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsReadReceiptRequested.setQualified(true);
    if (!_valueIsReadReceiptRequested.isNil())
    args.append(_valueIsReadReceiptRequested);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsDeliveryReceiptRequested(QString::fromLatin1("IsDeliveryReceiptRequested"), QVariant::fromValue(d_ptr->mIsDeliveryReceiptRequested), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsDeliveryReceiptRequested.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsDeliveryReceiptRequested.setQualified(true);
    if (!_valueIsDeliveryReceiptRequested.isNil())
    args.append(_valueIsDeliveryReceiptRequested);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFrom(d_ptr->mFrom.serialize(QString::fromLatin1("From")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFrom.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFrom.setQualified(true);
    if (!_valueFrom.isNil())
    args.append(_valueFrom);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReferenceItemId(d_ptr->mReferenceItemId.serialize(QString::fromLatin1("ReferenceItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueReferenceItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReferenceItemId.setQualified(true);
    if (!_valueReferenceItemId.isNil())
    args.append(_valueReferenceItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueObjectName(QString::fromLatin1("ObjectName"), QVariant::fromValue(d_ptr->mObjectName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueObjectName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueObjectName.isNil())
    attribs.append(_valueObjectName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__SmartResponseBaseType::deserialize( const KDSoapValue& mainValue )
{
    T__ResponseObjectType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Subject")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSubject = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Body")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBody.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ToRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mToRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CcRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCcRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("BccRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBccRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IsReadReceiptRequested")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsReadReceiptRequested = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsDeliveryReceiptRequested")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsDeliveryReceiptRequested = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("From")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFrom.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ReferenceItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReferenceItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ObjectName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mObjectName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__SmartResponseBaseType::T__SmartResponseBaseType()
    : d_ptr(new PrivateDPtr)
{
}

T__SmartResponseBaseType::~T__SmartResponseBaseType()
{
}

T__SmartResponseBaseType::T__SmartResponseBaseType( const T__SmartResponseBaseType& other )
    : T__ResponseObjectType( other ), d_ptr( other.d_ptr )
{
}

T__SmartResponseBaseType&  T__SmartResponseBaseType::operator=( const T__SmartResponseBaseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ResponseObjectType *>(this) = other;

    return *this;
}


class T__FolderIdType::PrivateDPtr : public QSharedData
{
public:
    QString mId;
    QString mChangeKey;
};

void T__FolderIdType::setId( const QString& id )
{
    d_ptr->mId = id;
}

QString T__FolderIdType::id() const
{
    return d_ptr->mId;
}

void T__FolderIdType::setChangeKey( const QString& changeKey )
{
    d_ptr->mChangeKey = changeKey;
}

QString T__FolderIdType::changeKey() const
{
    return d_ptr->mChangeKey;
}

KDSoapValue T__FolderIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseFolderIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FolderIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueId(QString::fromLatin1("Id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueId.isNil())
    attribs.append(_valueId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChangeKey(QString::fromLatin1("ChangeKey"), QVariant::fromValue(d_ptr->mChangeKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueChangeKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueChangeKey.isNil())
    attribs.append(_valueChangeKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__FolderIdType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseFolderIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Id")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ChangeKey")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChangeKey = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__FolderIdType::T__FolderIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__FolderIdType::~T__FolderIdType()
{
}

T__FolderIdType::T__FolderIdType( const T__FolderIdType& other )
    : T__BaseFolderIdType( other ), d_ptr( other.d_ptr )
{
}

T__FolderIdType&  T__FolderIdType::operator=( const T__FolderIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseFolderIdType *>(this) = other;

    return *this;
}


class TNS__UpdateItemType::PrivateDPtr : public QSharedData
{
public:
    T__TargetFolderIdType mSavedItemFolderId;
    T__NonEmptyArrayOfItemChangesType mItemChanges;
    T__ConflictResolutionType mConflictResolution;
    T__MessageDispositionType mMessageDisposition;
    T__CalendarItemUpdateOperationType mSendMeetingInvitationsOrCancellations;
};

void TNS__UpdateItemType::setSavedItemFolderId( const T__TargetFolderIdType& savedItemFolderId )
{
    d_ptr->mSavedItemFolderId = savedItemFolderId;
}

T__TargetFolderIdType TNS__UpdateItemType::savedItemFolderId() const
{
    return d_ptr->mSavedItemFolderId;
}

void TNS__UpdateItemType::setItemChanges( const T__NonEmptyArrayOfItemChangesType& itemChanges )
{
    d_ptr->mItemChanges = itemChanges;
}

T__NonEmptyArrayOfItemChangesType TNS__UpdateItemType::itemChanges() const
{
    return d_ptr->mItemChanges;
}

void TNS__UpdateItemType::setConflictResolution( const T__ConflictResolutionType& conflictResolution )
{
    d_ptr->mConflictResolution = conflictResolution;
}

T__ConflictResolutionType TNS__UpdateItemType::conflictResolution() const
{
    return d_ptr->mConflictResolution;
}

void TNS__UpdateItemType::setMessageDisposition( const T__MessageDispositionType& messageDisposition )
{
    d_ptr->mMessageDisposition = messageDisposition;
}

T__MessageDispositionType TNS__UpdateItemType::messageDisposition() const
{
    return d_ptr->mMessageDisposition;
}

void TNS__UpdateItemType::setSendMeetingInvitationsOrCancellations( const T__CalendarItemUpdateOperationType& sendMeetingInvitationsOrCancellations )
{
    d_ptr->mSendMeetingInvitationsOrCancellations = sendMeetingInvitationsOrCancellations;
}

T__CalendarItemUpdateOperationType TNS__UpdateItemType::sendMeetingInvitationsOrCancellations() const
{
    return d_ptr->mSendMeetingInvitationsOrCancellations;
}

KDSoapValue TNS__UpdateItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UpdateItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSavedItemFolderId(d_ptr->mSavedItemFolderId.serialize(QString::fromLatin1("SavedItemFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSavedItemFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSavedItemFolderId.setQualified(true);
    if (!_valueSavedItemFolderId.isNil())
    args.append(_valueSavedItemFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItemChanges(d_ptr->mItemChanges.serialize(QString::fromLatin1("ItemChanges")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemChanges.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItemChanges.setQualified(true);
    if (!_valueItemChanges.isNil())
    args.append(_valueItemChanges);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueConflictResolution(QString::fromLatin1("ConflictResolution"), d_ptr->mConflictResolution.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ConflictResolutionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueConflictResolution.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueConflictResolution.isNil())
    attribs.append(_valueConflictResolution);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMessageDisposition(QString::fromLatin1("MessageDisposition"), d_ptr->mMessageDisposition.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MessageDispositionType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMessageDisposition.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueMessageDisposition.isNil())
    attribs.append(_valueMessageDisposition);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSendMeetingInvitationsOrCancellations(QString::fromLatin1("SendMeetingInvitationsOrCancellations"), d_ptr->mSendMeetingInvitationsOrCancellations.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarItemUpdateOperationType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSendMeetingInvitationsOrCancellations.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueSendMeetingInvitationsOrCancellations.isNil())
    attribs.append(_valueSendMeetingInvitationsOrCancellations);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__UpdateItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SavedItemFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSavedItemFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ItemChanges")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemChanges.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ConflictResolution")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConflictResolution.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("MessageDisposition")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessageDisposition.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("SendMeetingInvitationsOrCancellations")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSendMeetingInvitationsOrCancellations.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__UpdateItemType::TNS__UpdateItemType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__UpdateItemType::~TNS__UpdateItemType()
{
}

TNS__UpdateItemType::TNS__UpdateItemType( const TNS__UpdateItemType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__UpdateItemType&  TNS__UpdateItemType::operator=( const TNS__UpdateItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__IndexedPageViewType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mOffset;
    T__IndexBasePointType mBasePoint;
};

T__IndexedPageViewType::PrivateDPtr::PrivateDPtr()
    : mOffset(0)
{
}


void T__IndexedPageViewType::setOffset( int offset )
{
    d_ptr->mOffset = offset;
}

int T__IndexedPageViewType::offset() const
{
    return d_ptr->mOffset;
}

void T__IndexedPageViewType::setBasePoint( const T__IndexBasePointType& basePoint )
{
    d_ptr->mBasePoint = basePoint;
}

T__IndexBasePointType T__IndexedPageViewType::basePoint() const
{
    return d_ptr->mBasePoint;
}

KDSoapValue T__IndexedPageViewType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePagingType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IndexedPageViewType"));
    KDSoapValueList attribs;
    KDSoapValue _valueOffset(QString::fromLatin1("Offset"), QVariant::fromValue(d_ptr->mOffset), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueOffset.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueOffset.isNil())
    attribs.append(_valueOffset);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBasePoint(QString::fromLatin1("BasePoint"), d_ptr->mBasePoint.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IndexBasePointType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueBasePoint.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueBasePoint.isNil())
    attribs.append(_valueBasePoint);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__IndexedPageViewType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePagingType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Offset")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOffset = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("BasePoint")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBasePoint.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__IndexedPageViewType::T__IndexedPageViewType()
    : d_ptr(new PrivateDPtr)
{
}

T__IndexedPageViewType::~T__IndexedPageViewType()
{
}

T__IndexedPageViewType::T__IndexedPageViewType( const T__IndexedPageViewType& other )
    : T__BasePagingType( other ), d_ptr( other.d_ptr )
{
}

T__IndexedPageViewType&  T__IndexedPageViewType::operator=( const T__IndexedPageViewType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePagingType *>(this) = other;

    return *this;
}


KDSoapValue TNS__UnsubscribeResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UnsubscribeResponseType"));
    return mainValue;
}

void TNS__UnsubscribeResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__UnsubscribeResponseType::TNS__UnsubscribeResponseType()
{
}

TNS__UnsubscribeResponseType::~TNS__UnsubscribeResponseType()
{
}


class TNS__FindItemResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__FindItemParentType mRootFolder;
};

void TNS__FindItemResponseMessageType::setRootFolder( const T__FindItemParentType& rootFolder )
{
    d_ptr->mRootFolder = rootFolder;
}

T__FindItemParentType TNS__FindItemResponseMessageType::rootFolder() const
{
    return d_ptr->mRootFolder;
}

KDSoapValue TNS__FindItemResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("FindItemResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueRootFolder(d_ptr->mRootFolder.serialize(QString::fromLatin1("RootFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRootFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueRootFolder.setQualified(true);
    if (!_valueRootFolder.isNil())
    args.append(_valueRootFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__FindItemResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("RootFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRootFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__FindItemResponseMessageType::TNS__FindItemResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__FindItemResponseMessageType::~TNS__FindItemResponseMessageType()
{
}

TNS__FindItemResponseMessageType::TNS__FindItemResponseMessageType( const TNS__FindItemResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__FindItemResponseMessageType&  TNS__FindItemResponseMessageType::operator=( const TNS__FindItemResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


KDSoapValue T__DeleteItemFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemChangeDescriptionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DeleteItemFieldType"));
    return mainValue;
}

void T__DeleteItemFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemChangeDescriptionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__DeleteItemFieldType::T__DeleteItemFieldType()
{
}

T__DeleteItemFieldType::~T__DeleteItemFieldType()
{
}


KDSoapValue TNS__DeleteItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("DeleteItemResponseType"));
    return mainValue;
}

void TNS__DeleteItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__DeleteItemResponseType::TNS__DeleteItemResponseType()
{
}

TNS__DeleteItemResponseType::~TNS__DeleteItemResponseType()
{
}


KDSoapValue TNS__DeleteAttachmentResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("DeleteAttachmentResponseType"));
    return mainValue;
}

void TNS__DeleteAttachmentResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__DeleteAttachmentResponseType::TNS__DeleteAttachmentResponseType()
{
}

TNS__DeleteAttachmentResponseType::~TNS__DeleteAttachmentResponseType()
{
}


class TNS__ItemInfoResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfRealItemsType mItems;
};

void TNS__ItemInfoResponseMessageType::setItems( const T__ArrayOfRealItemsType& items )
{
    d_ptr->mItems = items;
}

T__ArrayOfRealItemsType TNS__ItemInfoResponseMessageType::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__ItemInfoResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ItemInfoResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItems(d_ptr->mItems.serialize(QString::fromLatin1("Items")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItems.setQualified(true);
    if (!_valueItems.isNil())
    args.append(_valueItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__ItemInfoResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Items")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItems.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__ItemInfoResponseMessageType::TNS__ItemInfoResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ItemInfoResponseMessageType::~TNS__ItemInfoResponseMessageType()
{
}

TNS__ItemInfoResponseMessageType::TNS__ItemInfoResponseMessageType( const TNS__ItemInfoResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__ItemInfoResponseMessageType&  TNS__ItemInfoResponseMessageType::operator=( const TNS__ItemInfoResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class T__TwoOperandExpressionType::PrivateDPtr : public QSharedData
{
public:
    T__BasePathToElementType mPath;
    T__FieldURIOrConstantType mFieldURIOrConstant;
};

void T__TwoOperandExpressionType::setPath( const T__BasePathToElementType& path )
{
    d_ptr->mPath = path;
}

T__BasePathToElementType T__TwoOperandExpressionType::path() const
{
    return d_ptr->mPath;
}

void T__TwoOperandExpressionType::setFieldURIOrConstant( const T__FieldURIOrConstantType& fieldURIOrConstant )
{
    d_ptr->mFieldURIOrConstant = fieldURIOrConstant;
}

T__FieldURIOrConstantType T__TwoOperandExpressionType::fieldURIOrConstant() const
{
    return d_ptr->mFieldURIOrConstant;
}

KDSoapValue T__TwoOperandExpressionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SearchExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TwoOperandExpressionType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePath(d_ptr->mPath.serialize(QString::fromLatin1("Path")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePath.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePath.setQualified(true);
    if (!_valuePath.isNil())
    args.append(_valuePath);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFieldURIOrConstant(d_ptr->mFieldURIOrConstant.serialize(QString::fromLatin1("FieldURIOrConstant")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFieldURIOrConstant.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFieldURIOrConstant.setQualified(true);
    if (!_valueFieldURIOrConstant.isNil())
    args.append(_valueFieldURIOrConstant);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__TwoOperandExpressionType::deserialize( const KDSoapValue& mainValue )
{
    T__SearchExpressionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Path")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPath.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FieldURIOrConstant")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFieldURIOrConstant.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__TwoOperandExpressionType::T__TwoOperandExpressionType()
    : d_ptr(new PrivateDPtr)
{
}

T__TwoOperandExpressionType::~T__TwoOperandExpressionType()
{
}

T__TwoOperandExpressionType::T__TwoOperandExpressionType( const T__TwoOperandExpressionType& other )
    : T__SearchExpressionType( other ), d_ptr( other.d_ptr )
{
}

T__TwoOperandExpressionType&  T__TwoOperandExpressionType::operator=( const T__TwoOperandExpressionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__SearchExpressionType *>(this) = other;

    return *this;
}


KDSoapValue T__RemoveItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ResponseObjectType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RemoveItemType"));
    return mainValue;
}

void T__RemoveItemType::deserialize( const KDSoapValue& mainValue )
{
    T__ResponseObjectType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__RemoveItemType::T__RemoveItemType()
{
}

T__RemoveItemType::~T__RemoveItemType()
{
}


class T__ExcludesType::PrivateDPtr : public QSharedData
{
public:
    T__BasePathToElementType mPath;
    T__ExcludesValueType mBitmask;
};

void T__ExcludesType::setPath( const T__BasePathToElementType& path )
{
    d_ptr->mPath = path;
}

T__BasePathToElementType T__ExcludesType::path() const
{
    return d_ptr->mPath;
}

void T__ExcludesType::setBitmask( const T__ExcludesValueType& bitmask )
{
    d_ptr->mBitmask = bitmask;
}

T__ExcludesValueType T__ExcludesType::bitmask() const
{
    return d_ptr->mBitmask;
}

KDSoapValue T__ExcludesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SearchExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExcludesType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePath(d_ptr->mPath.serialize(QString::fromLatin1("Path")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePath.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePath.setQualified(true);
    if (!_valuePath.isNil())
    args.append(_valuePath);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBitmask(d_ptr->mBitmask.serialize(QString::fromLatin1("Bitmask")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBitmask.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBitmask.setQualified(true);
    if (!_valueBitmask.isNil())
    args.append(_valueBitmask);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ExcludesType::deserialize( const KDSoapValue& mainValue )
{
    T__SearchExpressionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Path")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPath.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Bitmask")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBitmask.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ExcludesType::T__ExcludesType()
    : d_ptr(new PrivateDPtr)
{
}

T__ExcludesType::~T__ExcludesType()
{
}

T__ExcludesType::T__ExcludesType( const T__ExcludesType& other )
    : T__SearchExpressionType( other ), d_ptr( other.d_ptr )
{
}

T__ExcludesType&  T__ExcludesType::operator=( const T__ExcludesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__SearchExpressionType *>(this) = other;

    return *this;
}


KDSoapValue TNS__GetEventsResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetEventsResponseType"));
    return mainValue;
}

void TNS__GetEventsResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__GetEventsResponseType::TNS__GetEventsResponseType()
{
}

TNS__GetEventsResponseType::~TNS__GetEventsResponseType()
{
}


class TNS__SyncFolderHierarchyResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mSyncState;
    bool mIncludesLastFolderInRange;
    T__SyncFolderHierarchyChangesType mChanges;
};

TNS__SyncFolderHierarchyResponseMessageType::PrivateDPtr::PrivateDPtr()
    : mIncludesLastFolderInRange(false)
{
}


void TNS__SyncFolderHierarchyResponseMessageType::setSyncState( const QString& syncState )
{
    d_ptr->mSyncState = syncState;
}

QString TNS__SyncFolderHierarchyResponseMessageType::syncState() const
{
    return d_ptr->mSyncState;
}

void TNS__SyncFolderHierarchyResponseMessageType::setIncludesLastFolderInRange( bool includesLastFolderInRange )
{
    d_ptr->mIncludesLastFolderInRange = includesLastFolderInRange;
}

bool TNS__SyncFolderHierarchyResponseMessageType::includesLastFolderInRange() const
{
    return d_ptr->mIncludesLastFolderInRange;
}

void TNS__SyncFolderHierarchyResponseMessageType::setChanges( const T__SyncFolderHierarchyChangesType& changes )
{
    d_ptr->mChanges = changes;
}

T__SyncFolderHierarchyChangesType TNS__SyncFolderHierarchyResponseMessageType::changes() const
{
    return d_ptr->mChanges;
}

KDSoapValue TNS__SyncFolderHierarchyResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SyncFolderHierarchyResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSyncState(QString::fromLatin1("SyncState"), QVariant::fromValue(d_ptr->mSyncState), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSyncState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncState.setQualified(true);
    if (!_valueSyncState.isNil())
    args.append(_valueSyncState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIncludesLastFolderInRange(QString::fromLatin1("IncludesLastFolderInRange"), QVariant::fromValue(d_ptr->mIncludesLastFolderInRange), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIncludesLastFolderInRange.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueIncludesLastFolderInRange.setQualified(true);
    if (!_valueIncludesLastFolderInRange.isNil())
    args.append(_valueIncludesLastFolderInRange);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChanges(d_ptr->mChanges.serialize(QString::fromLatin1("Changes")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueChanges.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueChanges.setQualified(true);
    if (!_valueChanges.isNil())
    args.append(_valueChanges);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SyncFolderHierarchyResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SyncState")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSyncState = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IncludesLastFolderInRange")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIncludesLastFolderInRange = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Changes")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChanges.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__SyncFolderHierarchyResponseMessageType::TNS__SyncFolderHierarchyResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SyncFolderHierarchyResponseMessageType::~TNS__SyncFolderHierarchyResponseMessageType()
{
}

TNS__SyncFolderHierarchyResponseMessageType::TNS__SyncFolderHierarchyResponseMessageType( const TNS__SyncFolderHierarchyResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__SyncFolderHierarchyResponseMessageType&  TNS__SyncFolderHierarchyResponseMessageType::operator=( const TNS__SyncFolderHierarchyResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class TNS__SyncFolderHierarchyType::PrivateDPtr : public QSharedData
{
public:
    T__FolderResponseShapeType mFolderShape;
    T__TargetFolderIdType mSyncFolderId;
    QString mSyncState;
};

void TNS__SyncFolderHierarchyType::setFolderShape( const T__FolderResponseShapeType& folderShape )
{
    d_ptr->mFolderShape = folderShape;
}

T__FolderResponseShapeType TNS__SyncFolderHierarchyType::folderShape() const
{
    return d_ptr->mFolderShape;
}

void TNS__SyncFolderHierarchyType::setSyncFolderId( const T__TargetFolderIdType& syncFolderId )
{
    d_ptr->mSyncFolderId = syncFolderId;
}

T__TargetFolderIdType TNS__SyncFolderHierarchyType::syncFolderId() const
{
    return d_ptr->mSyncFolderId;
}

void TNS__SyncFolderHierarchyType::setSyncState( const QString& syncState )
{
    d_ptr->mSyncState = syncState;
}

QString TNS__SyncFolderHierarchyType::syncState() const
{
    return d_ptr->mSyncState;
}

KDSoapValue TNS__SyncFolderHierarchyType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SyncFolderHierarchyType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderShape(d_ptr->mFolderShape.serialize(QString::fromLatin1("FolderShape")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolderShape.setQualified(true);
    if (!_valueFolderShape.isNil())
    args.append(_valueFolderShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSyncFolderId(d_ptr->mSyncFolderId.serialize(QString::fromLatin1("SyncFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSyncFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncFolderId.setQualified(true);
    if (!_valueSyncFolderId.isNil())
    args.append(_valueSyncFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSyncState(QString::fromLatin1("SyncState"), QVariant::fromValue(d_ptr->mSyncState), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSyncState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncState.setQualified(true);
    if (!_valueSyncState.isNil())
    args.append(_valueSyncState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SyncFolderHierarchyType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderShape.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SyncFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSyncFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SyncState")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSyncState = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

TNS__SyncFolderHierarchyType::TNS__SyncFolderHierarchyType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SyncFolderHierarchyType::~TNS__SyncFolderHierarchyType()
{
}

TNS__SyncFolderHierarchyType::TNS__SyncFolderHierarchyType( const TNS__SyncFolderHierarchyType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__SyncFolderHierarchyType&  TNS__SyncFolderHierarchyType::operator=( const TNS__SyncFolderHierarchyType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue TNS__SyncFolderHierarchyResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SyncFolderHierarchyResponseType"));
    return mainValue;
}

void TNS__SyncFolderHierarchyResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__SyncFolderHierarchyResponseType::TNS__SyncFolderHierarchyResponseType()
{
}

TNS__SyncFolderHierarchyResponseType::~TNS__SyncFolderHierarchyResponseType()
{
}


KDSoapValue TNS__GetItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetItemResponseType"));
    return mainValue;
}

void TNS__GetItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__GetItemResponseType::TNS__GetItemResponseType()
{
}

TNS__GetItemResponseType::~TNS__GetItemResponseType()
{
}


class TNS__UnsubscribeType::PrivateDPtr : public QSharedData
{
public:
    T__SubscriptionIdType mSubscriptionId;
};

void TNS__UnsubscribeType::setSubscriptionId( const T__SubscriptionIdType& subscriptionId )
{
    d_ptr->mSubscriptionId = subscriptionId;
}

T__SubscriptionIdType TNS__UnsubscribeType::subscriptionId() const
{
    return d_ptr->mSubscriptionId;
}

KDSoapValue TNS__UnsubscribeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UnsubscribeType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSubscriptionId(QString::fromLatin1("SubscriptionId"), d_ptr->mSubscriptionId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SubscriptionIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSubscriptionId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSubscriptionId.setQualified(true);
    if (!_valueSubscriptionId.isNil())
    args.append(_valueSubscriptionId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__UnsubscribeType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SubscriptionId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSubscriptionId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__UnsubscribeType::TNS__UnsubscribeType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__UnsubscribeType::~TNS__UnsubscribeType()
{
}

TNS__UnsubscribeType::TNS__UnsubscribeType( const TNS__UnsubscribeType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__UnsubscribeType&  TNS__UnsubscribeType::operator=( const TNS__UnsubscribeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__PathToUnindexedFieldType::PrivateDPtr : public QSharedData
{
public:
    T__UnindexedFieldURIType mFieldURI;
};

void T__PathToUnindexedFieldType::setFieldURI( const T__UnindexedFieldURIType& fieldURI )
{
    d_ptr->mFieldURI = fieldURI;
}

T__UnindexedFieldURIType T__PathToUnindexedFieldType::fieldURI() const
{
    return d_ptr->mFieldURI;
}

KDSoapValue T__PathToUnindexedFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePathToElementType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PathToUnindexedFieldType"));
    KDSoapValueList attribs;
    KDSoapValue _valueFieldURI(QString::fromLatin1("FieldURI"), d_ptr->mFieldURI.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("UnindexedFieldURIType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueFieldURI.isNil())
    attribs.append(_valueFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__PathToUnindexedFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePathToElementType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("FieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFieldURI.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__PathToUnindexedFieldType::T__PathToUnindexedFieldType()
    : d_ptr(new PrivateDPtr)
{
}

T__PathToUnindexedFieldType::~T__PathToUnindexedFieldType()
{
}

T__PathToUnindexedFieldType::T__PathToUnindexedFieldType( const T__PathToUnindexedFieldType& other )
    : T__BasePathToElementType( other ), d_ptr( other.d_ptr )
{
}

T__PathToUnindexedFieldType&  T__PathToUnindexedFieldType::operator=( const T__PathToUnindexedFieldType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePathToElementType *>(this) = other;

    return *this;
}


class TNS__SendNotificationResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__NotificationType mNotification;
};

void TNS__SendNotificationResponseMessageType::setNotification( const T__NotificationType& notification )
{
    d_ptr->mNotification = notification;
}

T__NotificationType TNS__SendNotificationResponseMessageType::notification() const
{
    return d_ptr->mNotification;
}

KDSoapValue TNS__SendNotificationResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SendNotificationResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueNotification(d_ptr->mNotification.serialize(QString::fromLatin1("Notification")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueNotification.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueNotification.setQualified(true);
    if (!_valueNotification.isNil())
    args.append(_valueNotification);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__SendNotificationResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Notification")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNotification.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__SendNotificationResponseMessageType::TNS__SendNotificationResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SendNotificationResponseMessageType::~TNS__SendNotificationResponseMessageType()
{
}

TNS__SendNotificationResponseMessageType::TNS__SendNotificationResponseMessageType( const TNS__SendNotificationResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__SendNotificationResponseMessageType&  TNS__SendNotificationResponseMessageType::operator=( const TNS__SendNotificationResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class T__EmailAddressType::PrivateDPtr : public QSharedData
{
public:
    QString mName;
    T__NonEmptyStringType mEmailAddress;
    T__NonEmptyStringType mRoutingType;
    T__MailboxTypeType mMailboxType;
    T__ItemIdType mItemId;
};

void T__EmailAddressType::setName( const QString& name )
{
    d_ptr->mName = name;
}

QString T__EmailAddressType::name() const
{
    return d_ptr->mName;
}

void T__EmailAddressType::setEmailAddress( const T__NonEmptyStringType& emailAddress )
{
    d_ptr->mEmailAddress = emailAddress;
}

T__NonEmptyStringType T__EmailAddressType::emailAddress() const
{
    return d_ptr->mEmailAddress;
}

void T__EmailAddressType::setRoutingType( const T__NonEmptyStringType& routingType )
{
    d_ptr->mRoutingType = routingType;
}

T__NonEmptyStringType T__EmailAddressType::routingType() const
{
    return d_ptr->mRoutingType;
}

void T__EmailAddressType::setMailboxType( const T__MailboxTypeType& mailboxType )
{
    d_ptr->mMailboxType = mailboxType;
}

T__MailboxTypeType T__EmailAddressType::mailboxType() const
{
    return d_ptr->mMailboxType;
}

void T__EmailAddressType::setItemId( const T__ItemIdType& itemId )
{
    d_ptr->mItemId = itemId;
}

T__ItemIdType T__EmailAddressType::itemId() const
{
    return d_ptr->mItemId;
}

KDSoapValue T__EmailAddressType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseEmailAddressType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("EmailAddressType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueName.setQualified(true);
    if (!_valueName.isNil())
    args.append(_valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEmailAddress(QString::fromLatin1("EmailAddress"), d_ptr->mEmailAddress.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyStringType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueEmailAddress.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEmailAddress.setQualified(true);
    if (!_valueEmailAddress.isNil())
    args.append(_valueEmailAddress);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRoutingType(QString::fromLatin1("RoutingType"), d_ptr->mRoutingType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NonEmptyStringType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueRoutingType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRoutingType.setQualified(true);
    if (!_valueRoutingType.isNil())
    args.append(_valueRoutingType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMailboxType(QString::fromLatin1("MailboxType"), d_ptr->mMailboxType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MailboxTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMailboxType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMailboxType.setQualified(true);
    if (!_valueMailboxType.isNil())
    args.append(_valueMailboxType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItemId(d_ptr->mItemId.serialize(QString::fromLatin1("ItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemId.setQualified(true);
    if (!_valueItemId.isNil())
    args.append(_valueItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__EmailAddressType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseEmailAddressType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Name")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("EmailAddress")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEmailAddress.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("RoutingType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRoutingType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("MailboxType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailboxType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("ItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__EmailAddressType::T__EmailAddressType()
    : d_ptr(new PrivateDPtr)
{
}

T__EmailAddressType::~T__EmailAddressType()
{
}

T__EmailAddressType::T__EmailAddressType( const T__EmailAddressType& other )
    : T__BaseEmailAddressType( other ), d_ptr( other.d_ptr )
{
}

T__EmailAddressType&  T__EmailAddressType::operator=( const T__EmailAddressType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseEmailAddressType *>(this) = other;

    return *this;
}


KDSoapValue TNS__CreateManagedFolderResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CreateManagedFolderResponseType"));
    return mainValue;
}

void TNS__CreateManagedFolderResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__CreateManagedFolderResponseType::TNS__CreateManagedFolderResponseType()
{
}

TNS__CreateManagedFolderResponseType::~TNS__CreateManagedFolderResponseType()
{
}


class TNS__GetUserOofSettingsRequest::PrivateDPtr : public QSharedData
{
public:
    T__EmailAddress mMailbox;
};

void TNS__GetUserOofSettingsRequest::setMailbox( const T__EmailAddress& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddress TNS__GetUserOofSettingsRequest::mailbox() const
{
    return d_ptr->mMailbox;
}

KDSoapValue TNS__GetUserOofSettingsRequest::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetUserOofSettingsRequest"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetUserOofSettingsRequest::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__GetUserOofSettingsRequest::TNS__GetUserOofSettingsRequest()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetUserOofSettingsRequest::~TNS__GetUserOofSettingsRequest()
{
}

TNS__GetUserOofSettingsRequest::TNS__GetUserOofSettingsRequest( const TNS__GetUserOofSettingsRequest& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetUserOofSettingsRequest&  TNS__GetUserOofSettingsRequest::operator=( const TNS__GetUserOofSettingsRequest& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue T__FolderChangeDescriptionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ChangeDescriptionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FolderChangeDescriptionType"));
    return mainValue;
}

void T__FolderChangeDescriptionType::deserialize( const KDSoapValue& mainValue )
{
    T__ChangeDescriptionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__FolderChangeDescriptionType::T__FolderChangeDescriptionType()
{
}

T__FolderChangeDescriptionType::~T__FolderChangeDescriptionType()
{
}


class T__GroupAttendeeConflictData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mNumberOfMembers;
    int mNumberOfMembersAvailable;
    int mNumberOfMembersWithConflict;
    int mNumberOfMembersWithNoData;
};

T__GroupAttendeeConflictData::PrivateDPtr::PrivateDPtr()
    : mNumberOfMembers(0), mNumberOfMembersAvailable(0), mNumberOfMembersWithConflict(0), mNumberOfMembersWithNoData(0)
{
}


void T__GroupAttendeeConflictData::setNumberOfMembers( int numberOfMembers )
{
    d_ptr->mNumberOfMembers = numberOfMembers;
}

int T__GroupAttendeeConflictData::numberOfMembers() const
{
    return d_ptr->mNumberOfMembers;
}

void T__GroupAttendeeConflictData::setNumberOfMembersAvailable( int numberOfMembersAvailable )
{
    d_ptr->mNumberOfMembersAvailable = numberOfMembersAvailable;
}

int T__GroupAttendeeConflictData::numberOfMembersAvailable() const
{
    return d_ptr->mNumberOfMembersAvailable;
}

void T__GroupAttendeeConflictData::setNumberOfMembersWithConflict( int numberOfMembersWithConflict )
{
    d_ptr->mNumberOfMembersWithConflict = numberOfMembersWithConflict;
}

int T__GroupAttendeeConflictData::numberOfMembersWithConflict() const
{
    return d_ptr->mNumberOfMembersWithConflict;
}

void T__GroupAttendeeConflictData::setNumberOfMembersWithNoData( int numberOfMembersWithNoData )
{
    d_ptr->mNumberOfMembersWithNoData = numberOfMembersWithNoData;
}

int T__GroupAttendeeConflictData::numberOfMembersWithNoData() const
{
    return d_ptr->mNumberOfMembersWithNoData;
}

KDSoapValue T__GroupAttendeeConflictData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AttendeeConflictData::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("GroupAttendeeConflictData"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueNumberOfMembers(QString::fromLatin1("NumberOfMembers"), QVariant::fromValue(d_ptr->mNumberOfMembers), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNumberOfMembers.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNumberOfMembers.setQualified(true);
    if (!_valueNumberOfMembers.isNil())
    args.append(_valueNumberOfMembers);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNumberOfMembersAvailable(QString::fromLatin1("NumberOfMembersAvailable"), QVariant::fromValue(d_ptr->mNumberOfMembersAvailable), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNumberOfMembersAvailable.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNumberOfMembersAvailable.setQualified(true);
    if (!_valueNumberOfMembersAvailable.isNil())
    args.append(_valueNumberOfMembersAvailable);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNumberOfMembersWithConflict(QString::fromLatin1("NumberOfMembersWithConflict"), QVariant::fromValue(d_ptr->mNumberOfMembersWithConflict), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNumberOfMembersWithConflict.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNumberOfMembersWithConflict.setQualified(true);
    if (!_valueNumberOfMembersWithConflict.isNil())
    args.append(_valueNumberOfMembersWithConflict);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNumberOfMembersWithNoData(QString::fromLatin1("NumberOfMembersWithNoData"), QVariant::fromValue(d_ptr->mNumberOfMembersWithNoData), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNumberOfMembersWithNoData.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNumberOfMembersWithNoData.setQualified(true);
    if (!_valueNumberOfMembersWithNoData.isNil())
    args.append(_valueNumberOfMembersWithNoData);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__GroupAttendeeConflictData::deserialize( const KDSoapValue& mainValue )
{
    T__AttendeeConflictData::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("NumberOfMembers")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNumberOfMembers = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("NumberOfMembersAvailable")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNumberOfMembersAvailable = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("NumberOfMembersWithConflict")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNumberOfMembersWithConflict = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("NumberOfMembersWithNoData")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNumberOfMembersWithNoData = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__GroupAttendeeConflictData::T__GroupAttendeeConflictData()
    : d_ptr(new PrivateDPtr)
{
}

T__GroupAttendeeConflictData::~T__GroupAttendeeConflictData()
{
}

T__GroupAttendeeConflictData::T__GroupAttendeeConflictData( const T__GroupAttendeeConflictData& other )
    : T__AttendeeConflictData( other ), d_ptr( other.d_ptr )
{
}

T__GroupAttendeeConflictData&  T__GroupAttendeeConflictData::operator=( const T__GroupAttendeeConflictData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__AttendeeConflictData *>(this) = other;

    return *this;
}


KDSoapValue TNS__DeleteFolderResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("DeleteFolderResponseType"));
    return mainValue;
}

void TNS__DeleteFolderResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__DeleteFolderResponseType::TNS__DeleteFolderResponseType()
{
}

TNS__DeleteFolderResponseType::~TNS__DeleteFolderResponseType()
{
}


class T__ContactsViewType::PrivateDPtr : public QSharedData
{
public:
    QString mInitialName;
    QString mFinalName;
};

void T__ContactsViewType::setInitialName( const QString& initialName )
{
    d_ptr->mInitialName = initialName;
}

QString T__ContactsViewType::initialName() const
{
    return d_ptr->mInitialName;
}

void T__ContactsViewType::setFinalName( const QString& finalName )
{
    d_ptr->mFinalName = finalName;
}

QString T__ContactsViewType::finalName() const
{
    return d_ptr->mFinalName;
}

KDSoapValue T__ContactsViewType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePagingType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ContactsViewType"));
    KDSoapValueList attribs;
    KDSoapValue _valueInitialName(QString::fromLatin1("InitialName"), QVariant::fromValue(d_ptr->mInitialName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueInitialName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueInitialName.isNil())
    attribs.append(_valueInitialName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFinalName(QString::fromLatin1("FinalName"), QVariant::fromValue(d_ptr->mFinalName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFinalName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueFinalName.isNil())
    attribs.append(_valueFinalName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ContactsViewType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePagingType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("InitialName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInitialName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("FinalName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFinalName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ContactsViewType::T__ContactsViewType()
    : d_ptr(new PrivateDPtr)
{
}

T__ContactsViewType::~T__ContactsViewType()
{
}

T__ContactsViewType::T__ContactsViewType( const T__ContactsViewType& other )
    : T__BasePagingType( other ), d_ptr( other.d_ptr )
{
}

T__ContactsViewType&  T__ContactsViewType::operator=( const T__ContactsViewType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePagingType *>(this) = other;

    return *this;
}


class T__DistinguishedGroupByType::PrivateDPtr : public QSharedData
{
public:
    T__StandardGroupByType mStandardGroupBy;
};

void T__DistinguishedGroupByType::setStandardGroupBy( const T__StandardGroupByType& standardGroupBy )
{
    d_ptr->mStandardGroupBy = standardGroupBy;
}

T__StandardGroupByType T__DistinguishedGroupByType::standardGroupBy() const
{
    return d_ptr->mStandardGroupBy;
}

KDSoapValue T__DistinguishedGroupByType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseGroupByType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DistinguishedGroupByType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueStandardGroupBy(QString::fromLatin1("StandardGroupBy"), d_ptr->mStandardGroupBy.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("StandardGroupByType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueStandardGroupBy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStandardGroupBy.setQualified(true);
    if (!_valueStandardGroupBy.isNil())
    args.append(_valueStandardGroupBy);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__DistinguishedGroupByType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseGroupByType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("StandardGroupBy")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStandardGroupBy.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__DistinguishedGroupByType::T__DistinguishedGroupByType()
    : d_ptr(new PrivateDPtr)
{
}

T__DistinguishedGroupByType::~T__DistinguishedGroupByType()
{
}

T__DistinguishedGroupByType::T__DistinguishedGroupByType( const T__DistinguishedGroupByType& other )
    : T__BaseGroupByType( other ), d_ptr( other.d_ptr )
{
}

T__DistinguishedGroupByType&  T__DistinguishedGroupByType::operator=( const T__DistinguishedGroupByType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseGroupByType *>(this) = other;

    return *this;
}


class T__PullSubscriptionRequestType::PrivateDPtr : public QSharedData
{
public:
    T__SubscriptionTimeoutType mTimeout;
};

void T__PullSubscriptionRequestType::setTimeout( const T__SubscriptionTimeoutType& timeout )
{
    d_ptr->mTimeout = timeout;
}

T__SubscriptionTimeoutType T__PullSubscriptionRequestType::timeout() const
{
    return d_ptr->mTimeout;
}

KDSoapValue T__PullSubscriptionRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseSubscriptionRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PullSubscriptionRequestType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueTimeout(QString::fromLatin1("Timeout"), d_ptr->mTimeout.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SubscriptionTimeoutType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueTimeout.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeout.setQualified(true);
    if (!_valueTimeout.isNil())
    args.append(_valueTimeout);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__PullSubscriptionRequestType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseSubscriptionRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Timeout")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeout.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__PullSubscriptionRequestType::T__PullSubscriptionRequestType()
    : d_ptr(new PrivateDPtr)
{
}

T__PullSubscriptionRequestType::~T__PullSubscriptionRequestType()
{
}

T__PullSubscriptionRequestType::T__PullSubscriptionRequestType( const T__PullSubscriptionRequestType& other )
    : T__BaseSubscriptionRequestType( other ), d_ptr( other.d_ptr )
{
}

T__PullSubscriptionRequestType&  T__PullSubscriptionRequestType::operator=( const T__PullSubscriptionRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseSubscriptionRequestType *>(this) = other;

    return *this;
}


class T__CalendarItemType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mUID;
    KDDateTime mRecurrenceId;
    KDDateTime mDateTimeStamp;
    KDDateTime mStart;
    KDDateTime mEnd;
    KDDateTime mOriginalStart;
    bool mIsAllDayEvent;
    T__LegacyFreeBusyType mLegacyFreeBusyStatus;
    QString mLocation;
    QString mWhen;
    bool mIsMeeting;
    bool mIsCancelled;
    bool mIsRecurring;
    bool mMeetingRequestWasSent;
    bool mIsResponseRequested;
    T__CalendarItemTypeType mCalendarItemType;
    T__ResponseTypeType mMyResponseType;
    T__SingleRecipientType mOrganizer;
    T__NonEmptyArrayOfAttendeesType mRequiredAttendees;
    T__NonEmptyArrayOfAttendeesType mOptionalAttendees;
    T__NonEmptyArrayOfAttendeesType mResources;
    int mConflictingMeetingCount;
    int mAdjacentMeetingCount;
    T__NonEmptyArrayOfAllItemsType mConflictingMeetings;
    T__NonEmptyArrayOfAllItemsType mAdjacentMeetings;
    QString mDuration;
    QString mTimeZone;
    KDDateTime mAppointmentReplyTime;
    int mAppointmentSequenceNumber;
    int mAppointmentState;
    T__RecurrenceType mRecurrence;
    T__OccurrenceInfoType mFirstOccurrence;
    T__OccurrenceInfoType mLastOccurrence;
    T__NonEmptyArrayOfOccurrenceInfoType mModifiedOccurrences;
    T__NonEmptyArrayOfDeletedOccurrencesType mDeletedOccurrences;
    T__TimeZoneType mMeetingTimeZone;
    int mConferenceType;
    bool mAllowNewTimeProposal;
    bool mIsOnlineMeeting;
    QString mMeetingWorkspaceUrl;
    QString mNetShowUrl;
};

T__CalendarItemType::PrivateDPtr::PrivateDPtr()
    : mIsAllDayEvent(false), mIsMeeting(false), mIsCancelled(false), mIsRecurring(false), mMeetingRequestWasSent(false), mIsResponseRequested(false), mConflictingMeetingCount(0), mAdjacentMeetingCount(0), mAppointmentSequenceNumber(0), mAppointmentState(0), mConferenceType(0), mAllowNewTimeProposal(false), mIsOnlineMeeting(false)
{
}


void T__CalendarItemType::setUID( const QString& uID )
{
    d_ptr->mUID = uID;
}

QString T__CalendarItemType::uID() const
{
    return d_ptr->mUID;
}

void T__CalendarItemType::setRecurrenceId( const KDDateTime& recurrenceId )
{
    d_ptr->mRecurrenceId = recurrenceId;
}

KDDateTime T__CalendarItemType::recurrenceId() const
{
    return d_ptr->mRecurrenceId;
}

void T__CalendarItemType::setDateTimeStamp( const KDDateTime& dateTimeStamp )
{
    d_ptr->mDateTimeStamp = dateTimeStamp;
}

KDDateTime T__CalendarItemType::dateTimeStamp() const
{
    return d_ptr->mDateTimeStamp;
}

void T__CalendarItemType::setStart( const KDDateTime& start )
{
    d_ptr->mStart = start;
}

KDDateTime T__CalendarItemType::start() const
{
    return d_ptr->mStart;
}

void T__CalendarItemType::setEnd( const KDDateTime& end )
{
    d_ptr->mEnd = end;
}

KDDateTime T__CalendarItemType::end() const
{
    return d_ptr->mEnd;
}

void T__CalendarItemType::setOriginalStart( const KDDateTime& originalStart )
{
    d_ptr->mOriginalStart = originalStart;
}

KDDateTime T__CalendarItemType::originalStart() const
{
    return d_ptr->mOriginalStart;
}

void T__CalendarItemType::setIsAllDayEvent( bool isAllDayEvent )
{
    d_ptr->mIsAllDayEvent = isAllDayEvent;
}

bool T__CalendarItemType::isAllDayEvent() const
{
    return d_ptr->mIsAllDayEvent;
}

void T__CalendarItemType::setLegacyFreeBusyStatus( const T__LegacyFreeBusyType& legacyFreeBusyStatus )
{
    d_ptr->mLegacyFreeBusyStatus = legacyFreeBusyStatus;
}

T__LegacyFreeBusyType T__CalendarItemType::legacyFreeBusyStatus() const
{
    return d_ptr->mLegacyFreeBusyStatus;
}

void T__CalendarItemType::setLocation( const QString& location )
{
    d_ptr->mLocation = location;
}

QString T__CalendarItemType::location() const
{
    return d_ptr->mLocation;
}

void T__CalendarItemType::setWhen( const QString& when )
{
    d_ptr->mWhen = when;
}

QString T__CalendarItemType::when() const
{
    return d_ptr->mWhen;
}

void T__CalendarItemType::setIsMeeting( bool isMeeting )
{
    d_ptr->mIsMeeting = isMeeting;
}

bool T__CalendarItemType::isMeeting() const
{
    return d_ptr->mIsMeeting;
}

void T__CalendarItemType::setIsCancelled( bool isCancelled )
{
    d_ptr->mIsCancelled = isCancelled;
}

bool T__CalendarItemType::isCancelled() const
{
    return d_ptr->mIsCancelled;
}

void T__CalendarItemType::setIsRecurring( bool isRecurring )
{
    d_ptr->mIsRecurring = isRecurring;
}

bool T__CalendarItemType::isRecurring() const
{
    return d_ptr->mIsRecurring;
}

void T__CalendarItemType::setMeetingRequestWasSent( bool meetingRequestWasSent )
{
    d_ptr->mMeetingRequestWasSent = meetingRequestWasSent;
}

bool T__CalendarItemType::meetingRequestWasSent() const
{
    return d_ptr->mMeetingRequestWasSent;
}

void T__CalendarItemType::setIsResponseRequested( bool isResponseRequested )
{
    d_ptr->mIsResponseRequested = isResponseRequested;
}

bool T__CalendarItemType::isResponseRequested() const
{
    return d_ptr->mIsResponseRequested;
}

void T__CalendarItemType::setCalendarItemType( const T__CalendarItemTypeType& calendarItemType )
{
    d_ptr->mCalendarItemType = calendarItemType;
}

T__CalendarItemTypeType T__CalendarItemType::calendarItemType() const
{
    return d_ptr->mCalendarItemType;
}

void T__CalendarItemType::setMyResponseType( const T__ResponseTypeType& myResponseType )
{
    d_ptr->mMyResponseType = myResponseType;
}

T__ResponseTypeType T__CalendarItemType::myResponseType() const
{
    return d_ptr->mMyResponseType;
}

void T__CalendarItemType::setOrganizer( const T__SingleRecipientType& organizer )
{
    d_ptr->mOrganizer = organizer;
}

T__SingleRecipientType T__CalendarItemType::organizer() const
{
    return d_ptr->mOrganizer;
}

void T__CalendarItemType::setRequiredAttendees( const T__NonEmptyArrayOfAttendeesType& requiredAttendees )
{
    d_ptr->mRequiredAttendees = requiredAttendees;
}

T__NonEmptyArrayOfAttendeesType T__CalendarItemType::requiredAttendees() const
{
    return d_ptr->mRequiredAttendees;
}

void T__CalendarItemType::setOptionalAttendees( const T__NonEmptyArrayOfAttendeesType& optionalAttendees )
{
    d_ptr->mOptionalAttendees = optionalAttendees;
}

T__NonEmptyArrayOfAttendeesType T__CalendarItemType::optionalAttendees() const
{
    return d_ptr->mOptionalAttendees;
}

void T__CalendarItemType::setResources( const T__NonEmptyArrayOfAttendeesType& resources )
{
    d_ptr->mResources = resources;
}

T__NonEmptyArrayOfAttendeesType T__CalendarItemType::resources() const
{
    return d_ptr->mResources;
}

void T__CalendarItemType::setConflictingMeetingCount( int conflictingMeetingCount )
{
    d_ptr->mConflictingMeetingCount = conflictingMeetingCount;
}

int T__CalendarItemType::conflictingMeetingCount() const
{
    return d_ptr->mConflictingMeetingCount;
}

void T__CalendarItemType::setAdjacentMeetingCount( int adjacentMeetingCount )
{
    d_ptr->mAdjacentMeetingCount = adjacentMeetingCount;
}

int T__CalendarItemType::adjacentMeetingCount() const
{
    return d_ptr->mAdjacentMeetingCount;
}

void T__CalendarItemType::setConflictingMeetings( const T__NonEmptyArrayOfAllItemsType& conflictingMeetings )
{
    d_ptr->mConflictingMeetings = conflictingMeetings;
}

T__NonEmptyArrayOfAllItemsType T__CalendarItemType::conflictingMeetings() const
{
    return d_ptr->mConflictingMeetings;
}

void T__CalendarItemType::setAdjacentMeetings( const T__NonEmptyArrayOfAllItemsType& adjacentMeetings )
{
    d_ptr->mAdjacentMeetings = adjacentMeetings;
}

T__NonEmptyArrayOfAllItemsType T__CalendarItemType::adjacentMeetings() const
{
    return d_ptr->mAdjacentMeetings;
}

void T__CalendarItemType::setDuration( const QString& duration )
{
    d_ptr->mDuration = duration;
}

QString T__CalendarItemType::duration() const
{
    return d_ptr->mDuration;
}

void T__CalendarItemType::setTimeZone( const QString& timeZone )
{
    d_ptr->mTimeZone = timeZone;
}

QString T__CalendarItemType::timeZone() const
{
    return d_ptr->mTimeZone;
}

void T__CalendarItemType::setAppointmentReplyTime( const KDDateTime& appointmentReplyTime )
{
    d_ptr->mAppointmentReplyTime = appointmentReplyTime;
}

KDDateTime T__CalendarItemType::appointmentReplyTime() const
{
    return d_ptr->mAppointmentReplyTime;
}

void T__CalendarItemType::setAppointmentSequenceNumber( int appointmentSequenceNumber )
{
    d_ptr->mAppointmentSequenceNumber = appointmentSequenceNumber;
}

int T__CalendarItemType::appointmentSequenceNumber() const
{
    return d_ptr->mAppointmentSequenceNumber;
}

void T__CalendarItemType::setAppointmentState( int appointmentState )
{
    d_ptr->mAppointmentState = appointmentState;
}

int T__CalendarItemType::appointmentState() const
{
    return d_ptr->mAppointmentState;
}

void T__CalendarItemType::setRecurrence( const T__RecurrenceType& recurrence )
{
    d_ptr->mRecurrence = recurrence;
}

T__RecurrenceType T__CalendarItemType::recurrence() const
{
    return d_ptr->mRecurrence;
}

void T__CalendarItemType::setFirstOccurrence( const T__OccurrenceInfoType& firstOccurrence )
{
    d_ptr->mFirstOccurrence = firstOccurrence;
}

T__OccurrenceInfoType T__CalendarItemType::firstOccurrence() const
{
    return d_ptr->mFirstOccurrence;
}

void T__CalendarItemType::setLastOccurrence( const T__OccurrenceInfoType& lastOccurrence )
{
    d_ptr->mLastOccurrence = lastOccurrence;
}

T__OccurrenceInfoType T__CalendarItemType::lastOccurrence() const
{
    return d_ptr->mLastOccurrence;
}

void T__CalendarItemType::setModifiedOccurrences( const T__NonEmptyArrayOfOccurrenceInfoType& modifiedOccurrences )
{
    d_ptr->mModifiedOccurrences = modifiedOccurrences;
}

T__NonEmptyArrayOfOccurrenceInfoType T__CalendarItemType::modifiedOccurrences() const
{
    return d_ptr->mModifiedOccurrences;
}

void T__CalendarItemType::setDeletedOccurrences( const T__NonEmptyArrayOfDeletedOccurrencesType& deletedOccurrences )
{
    d_ptr->mDeletedOccurrences = deletedOccurrences;
}

T__NonEmptyArrayOfDeletedOccurrencesType T__CalendarItemType::deletedOccurrences() const
{
    return d_ptr->mDeletedOccurrences;
}

void T__CalendarItemType::setMeetingTimeZone( const T__TimeZoneType& meetingTimeZone )
{
    d_ptr->mMeetingTimeZone = meetingTimeZone;
}

T__TimeZoneType T__CalendarItemType::meetingTimeZone() const
{
    return d_ptr->mMeetingTimeZone;
}

void T__CalendarItemType::setConferenceType( int conferenceType )
{
    d_ptr->mConferenceType = conferenceType;
}

int T__CalendarItemType::conferenceType() const
{
    return d_ptr->mConferenceType;
}

void T__CalendarItemType::setAllowNewTimeProposal( bool allowNewTimeProposal )
{
    d_ptr->mAllowNewTimeProposal = allowNewTimeProposal;
}

bool T__CalendarItemType::allowNewTimeProposal() const
{
    return d_ptr->mAllowNewTimeProposal;
}

void T__CalendarItemType::setIsOnlineMeeting( bool isOnlineMeeting )
{
    d_ptr->mIsOnlineMeeting = isOnlineMeeting;
}

bool T__CalendarItemType::isOnlineMeeting() const
{
    return d_ptr->mIsOnlineMeeting;
}

void T__CalendarItemType::setMeetingWorkspaceUrl( const QString& meetingWorkspaceUrl )
{
    d_ptr->mMeetingWorkspaceUrl = meetingWorkspaceUrl;
}

QString T__CalendarItemType::meetingWorkspaceUrl() const
{
    return d_ptr->mMeetingWorkspaceUrl;
}

void T__CalendarItemType::setNetShowUrl( const QString& netShowUrl )
{
    d_ptr->mNetShowUrl = netShowUrl;
}

QString T__CalendarItemType::netShowUrl() const
{
    return d_ptr->mNetShowUrl;
}

KDSoapValue T__CalendarItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueUID(QString::fromLatin1("UID"), QVariant::fromValue(d_ptr->mUID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueUID.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUID.setQualified(true);
    if (!_valueUID.isNil())
    args.append(_valueUID);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRecurrenceId(QString::fromLatin1("RecurrenceId"), d_ptr->mRecurrenceId.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueRecurrenceId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRecurrenceId.setQualified(true);
    if (!_valueRecurrenceId.isNil())
    args.append(_valueRecurrenceId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDateTimeStamp(QString::fromLatin1("DateTimeStamp"), d_ptr->mDateTimeStamp.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDateTimeStamp.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDateTimeStamp.setQualified(true);
    if (!_valueDateTimeStamp.isNil())
    args.append(_valueDateTimeStamp);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStart(QString::fromLatin1("Start"), d_ptr->mStart.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStart.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStart.setQualified(true);
    if (!_valueStart.isNil())
    args.append(_valueStart);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEnd(QString::fromLatin1("End"), d_ptr->mEnd.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueEnd.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEnd.setQualified(true);
    if (!_valueEnd.isNil())
    args.append(_valueEnd);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOriginalStart(QString::fromLatin1("OriginalStart"), d_ptr->mOriginalStart.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueOriginalStart.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOriginalStart.setQualified(true);
    if (!_valueOriginalStart.isNil())
    args.append(_valueOriginalStart);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsAllDayEvent(QString::fromLatin1("IsAllDayEvent"), QVariant::fromValue(d_ptr->mIsAllDayEvent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsAllDayEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsAllDayEvent.setQualified(true);
    if (!_valueIsAllDayEvent.isNil())
    args.append(_valueIsAllDayEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLegacyFreeBusyStatus(QString::fromLatin1("LegacyFreeBusyStatus"), d_ptr->mLegacyFreeBusyStatus.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("LegacyFreeBusyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueLegacyFreeBusyStatus.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLegacyFreeBusyStatus.setQualified(true);
    if (!_valueLegacyFreeBusyStatus.isNil())
    args.append(_valueLegacyFreeBusyStatus);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLocation(QString::fromLatin1("Location"), QVariant::fromValue(d_ptr->mLocation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueLocation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLocation.setQualified(true);
    if (!_valueLocation.isNil())
    args.append(_valueLocation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWhen(QString::fromLatin1("When"), QVariant::fromValue(d_ptr->mWhen), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueWhen.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWhen.setQualified(true);
    if (!_valueWhen.isNil())
    args.append(_valueWhen);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsMeeting(QString::fromLatin1("IsMeeting"), QVariant::fromValue(d_ptr->mIsMeeting), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsMeeting.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsMeeting.setQualified(true);
    if (!_valueIsMeeting.isNil())
    args.append(_valueIsMeeting);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsCancelled(QString::fromLatin1("IsCancelled"), QVariant::fromValue(d_ptr->mIsCancelled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsCancelled.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsCancelled.setQualified(true);
    if (!_valueIsCancelled.isNil())
    args.append(_valueIsCancelled);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsRecurring(QString::fromLatin1("IsRecurring"), QVariant::fromValue(d_ptr->mIsRecurring), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsRecurring.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsRecurring.setQualified(true);
    if (!_valueIsRecurring.isNil())
    args.append(_valueIsRecurring);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingRequestWasSent(QString::fromLatin1("MeetingRequestWasSent"), QVariant::fromValue(d_ptr->mMeetingRequestWasSent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMeetingRequestWasSent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingRequestWasSent.setQualified(true);
    if (!_valueMeetingRequestWasSent.isNil())
    args.append(_valueMeetingRequestWasSent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsResponseRequested(QString::fromLatin1("IsResponseRequested"), QVariant::fromValue(d_ptr->mIsResponseRequested), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsResponseRequested.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsResponseRequested.setQualified(true);
    if (!_valueIsResponseRequested.isNil())
    args.append(_valueIsResponseRequested);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarItemType(QString::fromLatin1("CalendarItemType"), d_ptr->mCalendarItemType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarItemTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueCalendarItemType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarItemType.setQualified(true);
    if (!_valueCalendarItemType.isNil())
    args.append(_valueCalendarItemType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMyResponseType(QString::fromLatin1("MyResponseType"), d_ptr->mMyResponseType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResponseTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMyResponseType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMyResponseType.setQualified(true);
    if (!_valueMyResponseType.isNil())
    args.append(_valueMyResponseType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOrganizer(d_ptr->mOrganizer.serialize(QString::fromLatin1("Organizer")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOrganizer.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOrganizer.setQualified(true);
    if (!_valueOrganizer.isNil())
    args.append(_valueOrganizer);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRequiredAttendees(d_ptr->mRequiredAttendees.serialize(QString::fromLatin1("RequiredAttendees")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRequiredAttendees.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRequiredAttendees.setQualified(true);
    if (!_valueRequiredAttendees.isNil())
    args.append(_valueRequiredAttendees);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOptionalAttendees(d_ptr->mOptionalAttendees.serialize(QString::fromLatin1("OptionalAttendees")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOptionalAttendees.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOptionalAttendees.setQualified(true);
    if (!_valueOptionalAttendees.isNil())
    args.append(_valueOptionalAttendees);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueResources(d_ptr->mResources.serialize(QString::fromLatin1("Resources")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResources.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueResources.setQualified(true);
    if (!_valueResources.isNil())
    args.append(_valueResources);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConflictingMeetingCount(QString::fromLatin1("ConflictingMeetingCount"), QVariant::fromValue(d_ptr->mConflictingMeetingCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueConflictingMeetingCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConflictingMeetingCount.setQualified(true);
    if (!_valueConflictingMeetingCount.isNil())
    args.append(_valueConflictingMeetingCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAdjacentMeetingCount(QString::fromLatin1("AdjacentMeetingCount"), QVariant::fromValue(d_ptr->mAdjacentMeetingCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAdjacentMeetingCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAdjacentMeetingCount.setQualified(true);
    if (!_valueAdjacentMeetingCount.isNil())
    args.append(_valueAdjacentMeetingCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConflictingMeetings(d_ptr->mConflictingMeetings.serialize(QString::fromLatin1("ConflictingMeetings")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConflictingMeetings.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConflictingMeetings.setQualified(true);
    if (!_valueConflictingMeetings.isNil())
    args.append(_valueConflictingMeetings);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAdjacentMeetings(d_ptr->mAdjacentMeetings.serialize(QString::fromLatin1("AdjacentMeetings")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAdjacentMeetings.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAdjacentMeetings.setQualified(true);
    if (!_valueAdjacentMeetings.isNil())
    args.append(_valueAdjacentMeetings);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDuration(QString::fromLatin1("Duration"), QVariant::fromValue(d_ptr->mDuration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDuration.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDuration.setQualified(true);
    if (!_valueDuration.isNil())
    args.append(_valueDuration);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTimeZone(QString::fromLatin1("TimeZone"), QVariant::fromValue(d_ptr->mTimeZone), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTimeZone.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeZone.setQualified(true);
    if (!_valueTimeZone.isNil())
    args.append(_valueTimeZone);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAppointmentReplyTime(QString::fromLatin1("AppointmentReplyTime"), d_ptr->mAppointmentReplyTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAppointmentReplyTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAppointmentReplyTime.setQualified(true);
    if (!_valueAppointmentReplyTime.isNil())
    args.append(_valueAppointmentReplyTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAppointmentSequenceNumber(QString::fromLatin1("AppointmentSequenceNumber"), QVariant::fromValue(d_ptr->mAppointmentSequenceNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAppointmentSequenceNumber.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAppointmentSequenceNumber.setQualified(true);
    if (!_valueAppointmentSequenceNumber.isNil())
    args.append(_valueAppointmentSequenceNumber);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAppointmentState(QString::fromLatin1("AppointmentState"), QVariant::fromValue(d_ptr->mAppointmentState), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAppointmentState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAppointmentState.setQualified(true);
    if (!_valueAppointmentState.isNil())
    args.append(_valueAppointmentState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRecurrence(d_ptr->mRecurrence.serialize(QString::fromLatin1("Recurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRecurrence.setQualified(true);
    if (!_valueRecurrence.isNil())
    args.append(_valueRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFirstOccurrence(d_ptr->mFirstOccurrence.serialize(QString::fromLatin1("FirstOccurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFirstOccurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFirstOccurrence.setQualified(true);
    if (!_valueFirstOccurrence.isNil())
    args.append(_valueFirstOccurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLastOccurrence(d_ptr->mLastOccurrence.serialize(QString::fromLatin1("LastOccurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueLastOccurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLastOccurrence.setQualified(true);
    if (!_valueLastOccurrence.isNil())
    args.append(_valueLastOccurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueModifiedOccurrences(d_ptr->mModifiedOccurrences.serialize(QString::fromLatin1("ModifiedOccurrences")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueModifiedOccurrences.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueModifiedOccurrences.setQualified(true);
    if (!_valueModifiedOccurrences.isNil())
    args.append(_valueModifiedOccurrences);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDeletedOccurrences(d_ptr->mDeletedOccurrences.serialize(QString::fromLatin1("DeletedOccurrences")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeletedOccurrences.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDeletedOccurrences.setQualified(true);
    if (!_valueDeletedOccurrences.isNil())
    args.append(_valueDeletedOccurrences);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingTimeZone(d_ptr->mMeetingTimeZone.serialize(QString::fromLatin1("MeetingTimeZone")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingTimeZone.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingTimeZone.setQualified(true);
    if (!_valueMeetingTimeZone.isNil())
    args.append(_valueMeetingTimeZone);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConferenceType(QString::fromLatin1("ConferenceType"), QVariant::fromValue(d_ptr->mConferenceType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueConferenceType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConferenceType.setQualified(true);
    if (!_valueConferenceType.isNil())
    args.append(_valueConferenceType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAllowNewTimeProposal(QString::fromLatin1("AllowNewTimeProposal"), QVariant::fromValue(d_ptr->mAllowNewTimeProposal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAllowNewTimeProposal.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAllowNewTimeProposal.setQualified(true);
    if (!_valueAllowNewTimeProposal.isNil())
    args.append(_valueAllowNewTimeProposal);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsOnlineMeeting(QString::fromLatin1("IsOnlineMeeting"), QVariant::fromValue(d_ptr->mIsOnlineMeeting), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsOnlineMeeting.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsOnlineMeeting.setQualified(true);
    if (!_valueIsOnlineMeeting.isNil())
    args.append(_valueIsOnlineMeeting);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingWorkspaceUrl(QString::fromLatin1("MeetingWorkspaceUrl"), QVariant::fromValue(d_ptr->mMeetingWorkspaceUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMeetingWorkspaceUrl.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingWorkspaceUrl.setQualified(true);
    if (!_valueMeetingWorkspaceUrl.isNil())
    args.append(_valueMeetingWorkspaceUrl);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNetShowUrl(QString::fromLatin1("NetShowUrl"), QVariant::fromValue(d_ptr->mNetShowUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNetShowUrl.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNetShowUrl.setQualified(true);
    if (!_valueNetShowUrl.isNil())
    args.append(_valueNetShowUrl);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__CalendarItemType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UID")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUID = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("RecurrenceId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRecurrenceId = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("DateTimeStamp")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDateTimeStamp = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Start")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStart = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("End")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEnd = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("OriginalStart")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOriginalStart = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsAllDayEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsAllDayEvent = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("LegacyFreeBusyStatus")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLegacyFreeBusyStatus.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Location")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLocation = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("When")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWhen = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsMeeting")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsMeeting = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsCancelled")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsCancelled = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsRecurring")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsRecurring = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MeetingRequestWasSent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingRequestWasSent = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsResponseRequested")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsResponseRequested = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CalendarItemType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarItemType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("MyResponseType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMyResponseType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Organizer")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOrganizer.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("RequiredAttendees")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRequiredAttendees.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("OptionalAttendees")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOptionalAttendees.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Resources")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResources.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ConflictingMeetingCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConflictingMeetingCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AdjacentMeetingCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAdjacentMeetingCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ConflictingMeetings")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConflictingMeetings.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AdjacentMeetings")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAdjacentMeetings.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Duration")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDuration = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("TimeZone")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeZone = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AppointmentReplyTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAppointmentReplyTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AppointmentSequenceNumber")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAppointmentSequenceNumber = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AppointmentState")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAppointmentState = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Recurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FirstOccurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFirstOccurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("LastOccurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLastOccurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ModifiedOccurrences")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mModifiedOccurrences.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DeletedOccurrences")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDeletedOccurrences.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingTimeZone")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingTimeZone.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ConferenceType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConferenceType = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AllowNewTimeProposal")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAllowNewTimeProposal = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsOnlineMeeting")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsOnlineMeeting = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MeetingWorkspaceUrl")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingWorkspaceUrl = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("NetShowUrl")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNetShowUrl = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__CalendarItemType::T__CalendarItemType()
    : d_ptr(new PrivateDPtr)
{
}

T__CalendarItemType::~T__CalendarItemType()
{
}

T__CalendarItemType::T__CalendarItemType( const T__CalendarItemType& other )
    : T__ItemType( other ), d_ptr( other.d_ptr )
{
}

T__CalendarItemType&  T__CalendarItemType::operator=( const T__CalendarItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ItemType *>(this) = other;

    return *this;
}


class TNS__AddDelegateType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfDelegateUserType mDelegateUsers;
    T__DeliverMeetingRequestsType mDeliverMeetingRequests;
};

void TNS__AddDelegateType::setDelegateUsers( const T__ArrayOfDelegateUserType& delegateUsers )
{
    d_ptr->mDelegateUsers = delegateUsers;
}

T__ArrayOfDelegateUserType TNS__AddDelegateType::delegateUsers() const
{
    return d_ptr->mDelegateUsers;
}

void TNS__AddDelegateType::setDeliverMeetingRequests( const T__DeliverMeetingRequestsType& deliverMeetingRequests )
{
    d_ptr->mDeliverMeetingRequests = deliverMeetingRequests;
}

T__DeliverMeetingRequestsType TNS__AddDelegateType::deliverMeetingRequests() const
{
    return d_ptr->mDeliverMeetingRequests;
}

KDSoapValue TNS__AddDelegateType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseDelegateType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("AddDelegateType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDelegateUsers(d_ptr->mDelegateUsers.serialize(QString::fromLatin1("DelegateUsers")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDelegateUsers.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDelegateUsers.setQualified(true);
    if (!_valueDelegateUsers.isNil())
    args.append(_valueDelegateUsers);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDeliverMeetingRequests(QString::fromLatin1("DeliverMeetingRequests"), d_ptr->mDeliverMeetingRequests.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DeliverMeetingRequestsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDeliverMeetingRequests.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeliverMeetingRequests.setQualified(true);
    if (!_valueDeliverMeetingRequests.isNil())
    args.append(_valueDeliverMeetingRequests);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__AddDelegateType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseDelegateType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DelegateUsers")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDelegateUsers.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DeliverMeetingRequests")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDeliverMeetingRequests.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__AddDelegateType::TNS__AddDelegateType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__AddDelegateType::~TNS__AddDelegateType()
{
}

TNS__AddDelegateType::TNS__AddDelegateType( const TNS__AddDelegateType& other )
    : TNS__BaseDelegateType( other ), d_ptr( other.d_ptr )
{
}

TNS__AddDelegateType&  TNS__AddDelegateType::operator=( const TNS__AddDelegateType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseDelegateType *>(this) = other;

    return *this;
}


class TNS__DeleteItemType::PrivateDPtr : public QSharedData
{
public:
    T__NonEmptyArrayOfBaseItemIdsType mItemIds;
    T__DisposalType mDeleteType;
    T__CalendarItemCreateOrDeleteOperationType mSendMeetingCancellations;
    T__AffectedTaskOccurrencesType mAffectedTaskOccurrences;
};

void TNS__DeleteItemType::setItemIds( const T__NonEmptyArrayOfBaseItemIdsType& itemIds )
{
    d_ptr->mItemIds = itemIds;
}

T__NonEmptyArrayOfBaseItemIdsType TNS__DeleteItemType::itemIds() const
{
    return d_ptr->mItemIds;
}

void TNS__DeleteItemType::setDeleteType( const T__DisposalType& deleteType )
{
    d_ptr->mDeleteType = deleteType;
}

T__DisposalType TNS__DeleteItemType::deleteType() const
{
    return d_ptr->mDeleteType;
}

void TNS__DeleteItemType::setSendMeetingCancellations( const T__CalendarItemCreateOrDeleteOperationType& sendMeetingCancellations )
{
    d_ptr->mSendMeetingCancellations = sendMeetingCancellations;
}

T__CalendarItemCreateOrDeleteOperationType TNS__DeleteItemType::sendMeetingCancellations() const
{
    return d_ptr->mSendMeetingCancellations;
}

void TNS__DeleteItemType::setAffectedTaskOccurrences( const T__AffectedTaskOccurrencesType& affectedTaskOccurrences )
{
    d_ptr->mAffectedTaskOccurrences = affectedTaskOccurrences;
}

T__AffectedTaskOccurrencesType TNS__DeleteItemType::affectedTaskOccurrences() const
{
    return d_ptr->mAffectedTaskOccurrences;
}

KDSoapValue TNS__DeleteItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("DeleteItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemIds(d_ptr->mItemIds.serialize(QString::fromLatin1("ItemIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItemIds.setQualified(true);
    if (!_valueItemIds.isNil())
    args.append(_valueItemIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueDeleteType(QString::fromLatin1("DeleteType"), d_ptr->mDeleteType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DisposalType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDeleteType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueDeleteType.isNil())
    attribs.append(_valueDeleteType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSendMeetingCancellations(QString::fromLatin1("SendMeetingCancellations"), d_ptr->mSendMeetingCancellations.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarItemCreateOrDeleteOperationType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSendMeetingCancellations.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueSendMeetingCancellations.isNil())
    attribs.append(_valueSendMeetingCancellations);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAffectedTaskOccurrences(QString::fromLatin1("AffectedTaskOccurrences"), d_ptr->mAffectedTaskOccurrences.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AffectedTaskOccurrencesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueAffectedTaskOccurrences.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueAffectedTaskOccurrences.isNil())
    attribs.append(_valueAffectedTaskOccurrences);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__DeleteItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("DeleteType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDeleteType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("SendMeetingCancellations")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSendMeetingCancellations.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("AffectedTaskOccurrences")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAffectedTaskOccurrences.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__DeleteItemType::TNS__DeleteItemType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__DeleteItemType::~TNS__DeleteItemType()
{
}

TNS__DeleteItemType::TNS__DeleteItemType( const TNS__DeleteItemType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__DeleteItemType&  TNS__DeleteItemType::operator=( const TNS__DeleteItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue TNS__RemoveDelegateResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseDelegateResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("RemoveDelegateResponseMessageType"));
    return mainValue;
}

void TNS__RemoveDelegateResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseDelegateResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__RemoveDelegateResponseMessageType::TNS__RemoveDelegateResponseMessageType()
{
}

TNS__RemoveDelegateResponseMessageType::~TNS__RemoveDelegateResponseMessageType()
{
}


class TNS__RemoveDelegateType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfUserIdType mUserIds;
};

void TNS__RemoveDelegateType::setUserIds( const T__ArrayOfUserIdType& userIds )
{
    d_ptr->mUserIds = userIds;
}

T__ArrayOfUserIdType TNS__RemoveDelegateType::userIds() const
{
    return d_ptr->mUserIds;
}

KDSoapValue TNS__RemoveDelegateType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseDelegateType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("RemoveDelegateType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueUserIds(d_ptr->mUserIds.serialize(QString::fromLatin1("UserIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUserIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUserIds.setQualified(true);
    if (!_valueUserIds.isNil())
    args.append(_valueUserIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__RemoveDelegateType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseDelegateType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UserIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUserIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__RemoveDelegateType::TNS__RemoveDelegateType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__RemoveDelegateType::~TNS__RemoveDelegateType()
{
}

TNS__RemoveDelegateType::TNS__RemoveDelegateType( const TNS__RemoveDelegateType& other )
    : TNS__BaseDelegateType( other ), d_ptr( other.d_ptr )
{
}

TNS__RemoveDelegateType&  TNS__RemoveDelegateType::operator=( const TNS__RemoveDelegateType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseDelegateType *>(this) = other;

    return *this;
}


KDSoapValue T__AndType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__MultipleOperandBooleanExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AndType"));
    return mainValue;
}

void T__AndType::deserialize( const KDSoapValue& mainValue )
{
    T__MultipleOperandBooleanExpressionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__AndType::T__AndType()
{
}

T__AndType::~T__AndType()
{
}


class T__PathToExtendedFieldType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__DistinguishedPropertySetType mDistinguishedPropertySetId;
    T__GuidType mPropertySetId;
    T__PropertyTagType mPropertyTag;
    QString mPropertyName;
    int mPropertyId;
    T__MapiPropertyTypeType mPropertyType;
};

T__PathToExtendedFieldType::PrivateDPtr::PrivateDPtr()
    : mPropertyId(0)
{
}


void T__PathToExtendedFieldType::setDistinguishedPropertySetId( const T__DistinguishedPropertySetType& distinguishedPropertySetId )
{
    d_ptr->mDistinguishedPropertySetId = distinguishedPropertySetId;
}

T__DistinguishedPropertySetType T__PathToExtendedFieldType::distinguishedPropertySetId() const
{
    return d_ptr->mDistinguishedPropertySetId;
}

void T__PathToExtendedFieldType::setPropertySetId( const T__GuidType& propertySetId )
{
    d_ptr->mPropertySetId = propertySetId;
}

T__GuidType T__PathToExtendedFieldType::propertySetId() const
{
    return d_ptr->mPropertySetId;
}

void T__PathToExtendedFieldType::setPropertyTag( const T__PropertyTagType& propertyTag )
{
    d_ptr->mPropertyTag = propertyTag;
}

T__PropertyTagType T__PathToExtendedFieldType::propertyTag() const
{
    return d_ptr->mPropertyTag;
}

void T__PathToExtendedFieldType::setPropertyName( const QString& propertyName )
{
    d_ptr->mPropertyName = propertyName;
}

QString T__PathToExtendedFieldType::propertyName() const
{
    return d_ptr->mPropertyName;
}

void T__PathToExtendedFieldType::setPropertyId( int propertyId )
{
    d_ptr->mPropertyId = propertyId;
}

int T__PathToExtendedFieldType::propertyId() const
{
    return d_ptr->mPropertyId;
}

void T__PathToExtendedFieldType::setPropertyType( const T__MapiPropertyTypeType& propertyType )
{
    d_ptr->mPropertyType = propertyType;
}

T__MapiPropertyTypeType T__PathToExtendedFieldType::propertyType() const
{
    return d_ptr->mPropertyType;
}

KDSoapValue T__PathToExtendedFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePathToElementType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PathToExtendedFieldType"));
    KDSoapValueList attribs;
    KDSoapValue _valueDistinguishedPropertySetId(QString::fromLatin1("DistinguishedPropertySetId"), d_ptr->mDistinguishedPropertySetId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DistinguishedPropertySetType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDistinguishedPropertySetId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueDistinguishedPropertySetId.isNil())
    attribs.append(_valueDistinguishedPropertySetId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePropertySetId(QString::fromLatin1("PropertySetId"), d_ptr->mPropertySetId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("GuidType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valuePropertySetId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valuePropertySetId.isNil())
    attribs.append(_valuePropertySetId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePropertyTag(QString::fromLatin1("PropertyTag"), d_ptr->mPropertyTag.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PropertyTagType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valuePropertyTag.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valuePropertyTag.isNil())
    attribs.append(_valuePropertyTag);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePropertyName(QString::fromLatin1("PropertyName"), QVariant::fromValue(d_ptr->mPropertyName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePropertyName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valuePropertyName.isNil())
    attribs.append(_valuePropertyName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePropertyId(QString::fromLatin1("PropertyId"), QVariant::fromValue(d_ptr->mPropertyId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePropertyId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valuePropertyId.isNil())
    attribs.append(_valuePropertyId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePropertyType(QString::fromLatin1("PropertyType"), d_ptr->mPropertyType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MapiPropertyTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valuePropertyType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valuePropertyType.isNil())
    attribs.append(_valuePropertyType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__PathToExtendedFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePathToElementType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("DistinguishedPropertySetId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDistinguishedPropertySetId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("PropertySetId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPropertySetId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("PropertyTag")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPropertyTag.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("PropertyName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPropertyName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("PropertyId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPropertyId = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("PropertyType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPropertyType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__PathToExtendedFieldType::T__PathToExtendedFieldType()
    : d_ptr(new PrivateDPtr)
{
}

T__PathToExtendedFieldType::~T__PathToExtendedFieldType()
{
}

T__PathToExtendedFieldType::T__PathToExtendedFieldType( const T__PathToExtendedFieldType& other )
    : T__BasePathToElementType( other ), d_ptr( other.d_ptr )
{
}

T__PathToExtendedFieldType&  T__PathToExtendedFieldType::operator=( const T__PathToExtendedFieldType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePathToElementType *>(this) = other;

    return *this;
}


KDSoapValue TNS__SyncFolderItemsResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SyncFolderItemsResponseType"));
    return mainValue;
}

void TNS__SyncFolderItemsResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__SyncFolderItemsResponseType::TNS__SyncFolderItemsResponseType()
{
}

TNS__SyncFolderItemsResponseType::~TNS__SyncFolderItemsResponseType()
{
}


class TNS__AttachmentInfoResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfAttachmentsType mAttachments;
};

void TNS__AttachmentInfoResponseMessageType::setAttachments( const T__ArrayOfAttachmentsType& attachments )
{
    d_ptr->mAttachments = attachments;
}

T__ArrayOfAttachmentsType TNS__AttachmentInfoResponseMessageType::attachments() const
{
    return d_ptr->mAttachments;
}

KDSoapValue TNS__AttachmentInfoResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("AttachmentInfoResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueAttachments(d_ptr->mAttachments.serialize(QString::fromLatin1("Attachments")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttachments.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAttachments.setQualified(true);
    if (!_valueAttachments.isNil())
    args.append(_valueAttachments);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__AttachmentInfoResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Attachments")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttachments.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__AttachmentInfoResponseMessageType::TNS__AttachmentInfoResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__AttachmentInfoResponseMessageType::~TNS__AttachmentInfoResponseMessageType()
{
}

TNS__AttachmentInfoResponseMessageType::TNS__AttachmentInfoResponseMessageType( const TNS__AttachmentInfoResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__AttachmentInfoResponseMessageType&  TNS__AttachmentInfoResponseMessageType::operator=( const TNS__AttachmentInfoResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


KDSoapValue TNS__ExpandDLResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ExpandDLResponseType"));
    return mainValue;
}

void TNS__ExpandDLResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__ExpandDLResponseType::TNS__ExpandDLResponseType()
{
}

TNS__ExpandDLResponseType::~TNS__ExpandDLResponseType()
{
}


class T__RequestAttachmentIdType::PrivateDPtr : public QSharedData
{
public:
    QString mId;
};

void T__RequestAttachmentIdType::setId( const QString& id )
{
    d_ptr->mId = id;
}

QString T__RequestAttachmentIdType::id() const
{
    return d_ptr->mId;
}

KDSoapValue T__RequestAttachmentIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseItemIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RequestAttachmentIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueId(QString::fromLatin1("Id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueId.isNil())
    attribs.append(_valueId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__RequestAttachmentIdType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseItemIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Id")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__RequestAttachmentIdType::T__RequestAttachmentIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__RequestAttachmentIdType::~T__RequestAttachmentIdType()
{
}

T__RequestAttachmentIdType::T__RequestAttachmentIdType( const T__RequestAttachmentIdType& other )
    : T__BaseItemIdType( other ), d_ptr( other.d_ptr )
{
}

T__RequestAttachmentIdType&  T__RequestAttachmentIdType::operator=( const T__RequestAttachmentIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseItemIdType *>(this) = other;

    return *this;
}


class T__ContactsFolderType::PrivateDPtr : public QSharedData
{
public:
    T__PermissionSetType mPermissionSet;
};

void T__ContactsFolderType::setPermissionSet( const T__PermissionSetType& permissionSet )
{
    d_ptr->mPermissionSet = permissionSet;
}

T__PermissionSetType T__ContactsFolderType::permissionSet() const
{
    return d_ptr->mPermissionSet;
}

KDSoapValue T__ContactsFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseFolderType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ContactsFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePermissionSet(d_ptr->mPermissionSet.serialize(QString::fromLatin1("PermissionSet")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePermissionSet.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePermissionSet.setQualified(true);
    if (!_valuePermissionSet.isNil())
    args.append(_valuePermissionSet);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ContactsFolderType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseFolderType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("PermissionSet")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPermissionSet.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ContactsFolderType::T__ContactsFolderType()
    : d_ptr(new PrivateDPtr)
{
}

T__ContactsFolderType::~T__ContactsFolderType()
{
}

T__ContactsFolderType::T__ContactsFolderType( const T__ContactsFolderType& other )
    : T__BaseFolderType( other ), d_ptr( other.d_ptr )
{
}

T__ContactsFolderType&  T__ContactsFolderType::operator=( const T__ContactsFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseFolderType *>(this) = other;

    return *this;
}


class T__NumberedRecurrenceRangeType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mNumberOfOccurrences;
};

T__NumberedRecurrenceRangeType::PrivateDPtr::PrivateDPtr()
    : mNumberOfOccurrences(0)
{
}


void T__NumberedRecurrenceRangeType::setNumberOfOccurrences( int numberOfOccurrences )
{
    d_ptr->mNumberOfOccurrences = numberOfOccurrences;
}

int T__NumberedRecurrenceRangeType::numberOfOccurrences() const
{
    return d_ptr->mNumberOfOccurrences;
}

KDSoapValue T__NumberedRecurrenceRangeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RecurrenceRangeBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("NumberedRecurrenceRangeType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueNumberOfOccurrences(QString::fromLatin1("NumberOfOccurrences"), QVariant::fromValue(d_ptr->mNumberOfOccurrences), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNumberOfOccurrences.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNumberOfOccurrences.setQualified(true);
    if (!_valueNumberOfOccurrences.isNil())
    args.append(_valueNumberOfOccurrences);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__NumberedRecurrenceRangeType::deserialize( const KDSoapValue& mainValue )
{
    T__RecurrenceRangeBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("NumberOfOccurrences")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNumberOfOccurrences = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__NumberedRecurrenceRangeType::T__NumberedRecurrenceRangeType()
    : d_ptr(new PrivateDPtr)
{
}

T__NumberedRecurrenceRangeType::~T__NumberedRecurrenceRangeType()
{
}

T__NumberedRecurrenceRangeType::T__NumberedRecurrenceRangeType( const T__NumberedRecurrenceRangeType& other )
    : T__RecurrenceRangeBaseType( other ), d_ptr( other.d_ptr )
{
}

T__NumberedRecurrenceRangeType&  T__NumberedRecurrenceRangeType::operator=( const T__NumberedRecurrenceRangeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__RecurrenceRangeBaseType *>(this) = other;

    return *this;
}


KDSoapValue T__IsGreaterThanOrEqualToType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__TwoOperandExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IsGreaterThanOrEqualToType"));
    return mainValue;
}

void T__IsGreaterThanOrEqualToType::deserialize( const KDSoapValue& mainValue )
{
    T__TwoOperandExpressionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__IsGreaterThanOrEqualToType::T__IsGreaterThanOrEqualToType()
{
}

T__IsGreaterThanOrEqualToType::~T__IsGreaterThanOrEqualToType()
{
}


KDSoapValue TNS__ResolveNamesResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ResolveNamesResponseType"));
    return mainValue;
}

void TNS__ResolveNamesResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__ResolveNamesResponseType::TNS__ResolveNamesResponseType()
{
}

TNS__ResolveNamesResponseType::~TNS__ResolveNamesResponseType()
{
}


class TNS__FolderInfoResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfFoldersType mFolders;
};

void TNS__FolderInfoResponseMessageType::setFolders( const T__ArrayOfFoldersType& folders )
{
    d_ptr->mFolders = folders;
}

T__ArrayOfFoldersType TNS__FolderInfoResponseMessageType::folders() const
{
    return d_ptr->mFolders;
}

KDSoapValue TNS__FolderInfoResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("FolderInfoResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolders(d_ptr->mFolders.serialize(QString::fromLatin1("Folders")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolders.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolders.setQualified(true);
    if (!_valueFolders.isNil())
    args.append(_valueFolders);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__FolderInfoResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Folders")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolders.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__FolderInfoResponseMessageType::TNS__FolderInfoResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__FolderInfoResponseMessageType::~TNS__FolderInfoResponseMessageType()
{
}

TNS__FolderInfoResponseMessageType::TNS__FolderInfoResponseMessageType( const TNS__FolderInfoResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__FolderInfoResponseMessageType&  TNS__FolderInfoResponseMessageType::operator=( const TNS__FolderInfoResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class TNS__GetEventsType::PrivateDPtr : public QSharedData
{
public:
    T__SubscriptionIdType mSubscriptionId;
    T__WatermarkType mWatermark;
};

void TNS__GetEventsType::setSubscriptionId( const T__SubscriptionIdType& subscriptionId )
{
    d_ptr->mSubscriptionId = subscriptionId;
}

T__SubscriptionIdType TNS__GetEventsType::subscriptionId() const
{
    return d_ptr->mSubscriptionId;
}

void TNS__GetEventsType::setWatermark( const T__WatermarkType& watermark )
{
    d_ptr->mWatermark = watermark;
}

T__WatermarkType TNS__GetEventsType::watermark() const
{
    return d_ptr->mWatermark;
}

KDSoapValue TNS__GetEventsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetEventsType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSubscriptionId(QString::fromLatin1("SubscriptionId"), d_ptr->mSubscriptionId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SubscriptionIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSubscriptionId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSubscriptionId.setQualified(true);
    if (!_valueSubscriptionId.isNil())
    args.append(_valueSubscriptionId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWatermark(QString::fromLatin1("Watermark"), d_ptr->mWatermark.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WatermarkType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueWatermark.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueWatermark.setQualified(true);
    if (!_valueWatermark.isNil())
    args.append(_valueWatermark);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetEventsType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SubscriptionId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSubscriptionId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Watermark")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWatermark.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__GetEventsType::TNS__GetEventsType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetEventsType::~TNS__GetEventsType()
{
}

TNS__GetEventsType::TNS__GetEventsType( const TNS__GetEventsType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetEventsType&  TNS__GetEventsType::operator=( const TNS__GetEventsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue TNS__SubscribeResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SubscribeResponseType"));
    return mainValue;
}

void TNS__SubscribeResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__SubscribeResponseType::TNS__SubscribeResponseType()
{
}

TNS__SubscribeResponseType::~TNS__SubscribeResponseType()
{
}


KDSoapValue TNS__GetAttachmentResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetAttachmentResponseType"));
    return mainValue;
}

void TNS__GetAttachmentResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__GetAttachmentResponseType::TNS__GetAttachmentResponseType()
{
}

TNS__GetAttachmentResponseType::~TNS__GetAttachmentResponseType()
{
}


KDSoapValue TNS__CopyFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseMoveCopyFolderType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CopyFolderType"));
    return mainValue;
}

void TNS__CopyFolderType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseMoveCopyFolderType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__CopyFolderType::TNS__CopyFolderType()
{
}

TNS__CopyFolderType::~TNS__CopyFolderType()
{
}


class T__CalendarPermissionType::PrivateDPtr : public QSharedData
{
public:
    T__CalendarPermissionReadAccessType mReadItems;
    T__CalendarPermissionLevelType mCalendarPermissionLevel;
};

void T__CalendarPermissionType::setReadItems( const T__CalendarPermissionReadAccessType& readItems )
{
    d_ptr->mReadItems = readItems;
}

T__CalendarPermissionReadAccessType T__CalendarPermissionType::readItems() const
{
    return d_ptr->mReadItems;
}

void T__CalendarPermissionType::setCalendarPermissionLevel( const T__CalendarPermissionLevelType& calendarPermissionLevel )
{
    d_ptr->mCalendarPermissionLevel = calendarPermissionLevel;
}

T__CalendarPermissionLevelType T__CalendarPermissionType::calendarPermissionLevel() const
{
    return d_ptr->mCalendarPermissionLevel;
}

KDSoapValue T__CalendarPermissionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BasePermissionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarPermissionType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueReadItems(QString::fromLatin1("ReadItems"), d_ptr->mReadItems.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarPermissionReadAccessType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueReadItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReadItems.setQualified(true);
    if (!_valueReadItems.isNil())
    args.append(_valueReadItems);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarPermissionLevel(QString::fromLatin1("CalendarPermissionLevel"), d_ptr->mCalendarPermissionLevel.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarPermissionLevelType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueCalendarPermissionLevel.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarPermissionLevel.setQualified(true);
    if (!_valueCalendarPermissionLevel.isNil())
    args.append(_valueCalendarPermissionLevel);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__CalendarPermissionType::deserialize( const KDSoapValue& mainValue )
{
    T__BasePermissionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ReadItems")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReadItems.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("CalendarPermissionLevel")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarPermissionLevel.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__CalendarPermissionType::T__CalendarPermissionType()
    : d_ptr(new PrivateDPtr)
{
}

T__CalendarPermissionType::~T__CalendarPermissionType()
{
}

T__CalendarPermissionType::T__CalendarPermissionType( const T__CalendarPermissionType& other )
    : T__BasePermissionType( other ), d_ptr( other.d_ptr )
{
}

T__CalendarPermissionType&  T__CalendarPermissionType::operator=( const T__CalendarPermissionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BasePermissionType *>(this) = other;

    return *this;
}


class TNS__ConvertIdResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__AlternateIdBaseType mAlternateId;
};

void TNS__ConvertIdResponseMessageType::setAlternateId( const T__AlternateIdBaseType& alternateId )
{
    d_ptr->mAlternateId = alternateId;
}

T__AlternateIdBaseType TNS__ConvertIdResponseMessageType::alternateId() const
{
    return d_ptr->mAlternateId;
}

KDSoapValue TNS__ConvertIdResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ConvertIdResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueAlternateId(d_ptr->mAlternateId.serialize(QString::fromLatin1("AlternateId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAlternateId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAlternateId.setQualified(true);
    if (!_valueAlternateId.isNil())
    args.append(_valueAlternateId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__ConvertIdResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AlternateId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAlternateId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__ConvertIdResponseMessageType::TNS__ConvertIdResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ConvertIdResponseMessageType::~TNS__ConvertIdResponseMessageType()
{
}

TNS__ConvertIdResponseMessageType::TNS__ConvertIdResponseMessageType( const TNS__ConvertIdResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__ConvertIdResponseMessageType&  TNS__ConvertIdResponseMessageType::operator=( const TNS__ConvertIdResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class T__RecurringMasterItemIdType::PrivateDPtr : public QSharedData
{
public:
    T__DerivedItemIdType mOccurrenceId;
    QString mChangeKey;
};

void T__RecurringMasterItemIdType::setOccurrenceId( const T__DerivedItemIdType& occurrenceId )
{
    d_ptr->mOccurrenceId = occurrenceId;
}

T__DerivedItemIdType T__RecurringMasterItemIdType::occurrenceId() const
{
    return d_ptr->mOccurrenceId;
}

void T__RecurringMasterItemIdType::setChangeKey( const QString& changeKey )
{
    d_ptr->mChangeKey = changeKey;
}

QString T__RecurringMasterItemIdType::changeKey() const
{
    return d_ptr->mChangeKey;
}

KDSoapValue T__RecurringMasterItemIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseItemIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RecurringMasterItemIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueOccurrenceId(QString::fromLatin1("OccurrenceId"), d_ptr->mOccurrenceId.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DerivedItemIdType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueOccurrenceId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueOccurrenceId.isNil())
    attribs.append(_valueOccurrenceId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueChangeKey(QString::fromLatin1("ChangeKey"), QVariant::fromValue(d_ptr->mChangeKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueChangeKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueChangeKey.isNil())
    attribs.append(_valueChangeKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__RecurringMasterItemIdType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseItemIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("OccurrenceId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOccurrenceId.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("ChangeKey")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mChangeKey = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__RecurringMasterItemIdType::T__RecurringMasterItemIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__RecurringMasterItemIdType::~T__RecurringMasterItemIdType()
{
}

T__RecurringMasterItemIdType::T__RecurringMasterItemIdType( const T__RecurringMasterItemIdType& other )
    : T__BaseItemIdType( other ), d_ptr( other.d_ptr )
{
}

T__RecurringMasterItemIdType&  T__RecurringMasterItemIdType::operator=( const T__RecurringMasterItemIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseItemIdType *>(this) = other;

    return *this;
}


KDSoapValue TNS__CreateAttachmentResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CreateAttachmentResponseType"));
    return mainValue;
}

void TNS__CreateAttachmentResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__CreateAttachmentResponseType::TNS__CreateAttachmentResponseType()
{
}

TNS__CreateAttachmentResponseType::~TNS__CreateAttachmentResponseType()
{
}


class T__IntervalRecurrencePatternBaseType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mInterval;
};

T__IntervalRecurrencePatternBaseType::PrivateDPtr::PrivateDPtr()
    : mInterval(0)
{
}


void T__IntervalRecurrencePatternBaseType::setInterval( int interval )
{
    d_ptr->mInterval = interval;
}

int T__IntervalRecurrencePatternBaseType::interval() const
{
    return d_ptr->mInterval;
}

KDSoapValue T__IntervalRecurrencePatternBaseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RecurrencePatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IntervalRecurrencePatternBaseType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueInterval(QString::fromLatin1("Interval"), QVariant::fromValue(d_ptr->mInterval), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueInterval.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInterval.setQualified(true);
    if (!_valueInterval.isNil())
    args.append(_valueInterval);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__IntervalRecurrencePatternBaseType::deserialize( const KDSoapValue& mainValue )
{
    T__RecurrencePatternBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Interval")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInterval = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__IntervalRecurrencePatternBaseType::T__IntervalRecurrencePatternBaseType()
    : d_ptr(new PrivateDPtr)
{
}

T__IntervalRecurrencePatternBaseType::~T__IntervalRecurrencePatternBaseType()
{
}

T__IntervalRecurrencePatternBaseType::T__IntervalRecurrencePatternBaseType( const T__IntervalRecurrencePatternBaseType& other )
    : T__RecurrencePatternBaseType( other ), d_ptr( other.d_ptr )
{
}

T__IntervalRecurrencePatternBaseType&  T__IntervalRecurrencePatternBaseType::operator=( const T__IntervalRecurrencePatternBaseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__RecurrencePatternBaseType *>(this) = other;

    return *this;
}


class T__IndividualAttendeeConflictData::PrivateDPtr : public QSharedData
{
public:
    T__LegacyFreeBusyType mBusyType;
};

void T__IndividualAttendeeConflictData::setBusyType( const T__LegacyFreeBusyType& busyType )
{
    d_ptr->mBusyType = busyType;
}

T__LegacyFreeBusyType T__IndividualAttendeeConflictData::busyType() const
{
    return d_ptr->mBusyType;
}

KDSoapValue T__IndividualAttendeeConflictData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AttendeeConflictData::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IndividualAttendeeConflictData"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueBusyType(QString::fromLatin1("BusyType"), d_ptr->mBusyType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("LegacyFreeBusyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueBusyType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBusyType.setQualified(true);
    if (!_valueBusyType.isNil())
    args.append(_valueBusyType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__IndividualAttendeeConflictData::deserialize( const KDSoapValue& mainValue )
{
    T__AttendeeConflictData::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("BusyType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBusyType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__IndividualAttendeeConflictData::T__IndividualAttendeeConflictData()
    : d_ptr(new PrivateDPtr)
{
}

T__IndividualAttendeeConflictData::~T__IndividualAttendeeConflictData()
{
}

T__IndividualAttendeeConflictData::T__IndividualAttendeeConflictData( const T__IndividualAttendeeConflictData& other )
    : T__AttendeeConflictData( other ), d_ptr( other.d_ptr )
{
}

T__IndividualAttendeeConflictData&  T__IndividualAttendeeConflictData::operator=( const T__IndividualAttendeeConflictData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__AttendeeConflictData *>(this) = other;

    return *this;
}


class TNS__DeleteAttachmentType::PrivateDPtr : public QSharedData
{
public:
    T__NonEmptyArrayOfRequestAttachmentIdsType mAttachmentIds;
};

void TNS__DeleteAttachmentType::setAttachmentIds( const T__NonEmptyArrayOfRequestAttachmentIdsType& attachmentIds )
{
    d_ptr->mAttachmentIds = attachmentIds;
}

T__NonEmptyArrayOfRequestAttachmentIdsType TNS__DeleteAttachmentType::attachmentIds() const
{
    return d_ptr->mAttachmentIds;
}

KDSoapValue TNS__DeleteAttachmentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("DeleteAttachmentType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueAttachmentIds(d_ptr->mAttachmentIds.serialize(QString::fromLatin1("AttachmentIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttachmentIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAttachmentIds.setQualified(true);
    if (!_valueAttachmentIds.isNil())
    args.append(_valueAttachmentIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__DeleteAttachmentType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("AttachmentIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttachmentIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__DeleteAttachmentType::TNS__DeleteAttachmentType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__DeleteAttachmentType::~TNS__DeleteAttachmentType()
{
}

TNS__DeleteAttachmentType::TNS__DeleteAttachmentType( const TNS__DeleteAttachmentType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__DeleteAttachmentType&  TNS__DeleteAttachmentType::operator=( const TNS__DeleteAttachmentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue TNS__UpdateDelegateResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseDelegateResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UpdateDelegateResponseMessageType"));
    return mainValue;
}

void TNS__UpdateDelegateResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseDelegateResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__UpdateDelegateResponseMessageType::TNS__UpdateDelegateResponseMessageType()
{
}

TNS__UpdateDelegateResponseMessageType::~TNS__UpdateDelegateResponseMessageType()
{
}


KDSoapValue TNS__CopyItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CopyItemResponseType"));
    return mainValue;
}

void TNS__CopyItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__CopyItemResponseType::TNS__CopyItemResponseType()
{
}

TNS__CopyItemResponseType::~TNS__CopyItemResponseType()
{
}


class T__ItemAttachmentType::PrivateDPtr : public QSharedData
{
public:
    T__ItemType mItem;
    T__MessageType mMessage;
    T__CalendarItemType mCalendarItem;
    T__ContactItemType mContact;
    T__MeetingMessageType mMeetingMessage;
    T__MeetingRequestMessageType mMeetingRequest;
    T__MeetingResponseMessageType mMeetingResponse;
    T__MeetingCancellationMessageType mMeetingCancellation;
    T__TaskType mTask;
    T__PostItemType mPostItem;
};

void T__ItemAttachmentType::setItem( const T__ItemType& item )
{
    d_ptr->mItem = item;
}

T__ItemType T__ItemAttachmentType::item() const
{
    return d_ptr->mItem;
}

void T__ItemAttachmentType::setMessage( const T__MessageType& message )
{
    d_ptr->mMessage = message;
}

T__MessageType T__ItemAttachmentType::message() const
{
    return d_ptr->mMessage;
}

void T__ItemAttachmentType::setCalendarItem( const T__CalendarItemType& calendarItem )
{
    d_ptr->mCalendarItem = calendarItem;
}

T__CalendarItemType T__ItemAttachmentType::calendarItem() const
{
    return d_ptr->mCalendarItem;
}

void T__ItemAttachmentType::setContact( const T__ContactItemType& contact )
{
    d_ptr->mContact = contact;
}

T__ContactItemType T__ItemAttachmentType::contact() const
{
    return d_ptr->mContact;
}

void T__ItemAttachmentType::setMeetingMessage( const T__MeetingMessageType& meetingMessage )
{
    d_ptr->mMeetingMessage = meetingMessage;
}

T__MeetingMessageType T__ItemAttachmentType::meetingMessage() const
{
    return d_ptr->mMeetingMessage;
}

void T__ItemAttachmentType::setMeetingRequest( const T__MeetingRequestMessageType& meetingRequest )
{
    d_ptr->mMeetingRequest = meetingRequest;
}

T__MeetingRequestMessageType T__ItemAttachmentType::meetingRequest() const
{
    return d_ptr->mMeetingRequest;
}

void T__ItemAttachmentType::setMeetingResponse( const T__MeetingResponseMessageType& meetingResponse )
{
    d_ptr->mMeetingResponse = meetingResponse;
}

T__MeetingResponseMessageType T__ItemAttachmentType::meetingResponse() const
{
    return d_ptr->mMeetingResponse;
}

void T__ItemAttachmentType::setMeetingCancellation( const T__MeetingCancellationMessageType& meetingCancellation )
{
    d_ptr->mMeetingCancellation = meetingCancellation;
}

T__MeetingCancellationMessageType T__ItemAttachmentType::meetingCancellation() const
{
    return d_ptr->mMeetingCancellation;
}

void T__ItemAttachmentType::setTask( const T__TaskType& task )
{
    d_ptr->mTask = task;
}

T__TaskType T__ItemAttachmentType::task() const
{
    return d_ptr->mTask;
}

void T__ItemAttachmentType::setPostItem( const T__PostItemType& postItem )
{
    d_ptr->mPostItem = postItem;
}

T__PostItemType T__ItemAttachmentType::postItem() const
{
    return d_ptr->mPostItem;
}

KDSoapValue T__ItemAttachmentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__AttachmentType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemAttachmentType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItem(d_ptr->mItem.serialize(QString::fromLatin1("Item")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItem.setQualified(true);
    if (!_valueItem.isNil())
    args.append(_valueItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMessage(d_ptr->mMessage.serialize(QString::fromLatin1("Message")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMessage.setQualified(true);
    if (!_valueMessage.isNil())
    args.append(_valueMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarItem(d_ptr->mCalendarItem.serialize(QString::fromLatin1("CalendarItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarItem.setQualified(true);
    if (!_valueCalendarItem.isNil())
    args.append(_valueCalendarItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContact(d_ptr->mContact.serialize(QString::fromLatin1("Contact")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContact.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContact.setQualified(true);
    if (!_valueContact.isNil())
    args.append(_valueContact);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingMessage(d_ptr->mMeetingMessage.serialize(QString::fromLatin1("MeetingMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingMessage.setQualified(true);
    if (!_valueMeetingMessage.isNil())
    args.append(_valueMeetingMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingRequest(d_ptr->mMeetingRequest.serialize(QString::fromLatin1("MeetingRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingRequest.setQualified(true);
    if (!_valueMeetingRequest.isNil())
    args.append(_valueMeetingRequest);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingResponse(d_ptr->mMeetingResponse.serialize(QString::fromLatin1("MeetingResponse")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingResponse.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingResponse.setQualified(true);
    if (!_valueMeetingResponse.isNil())
    args.append(_valueMeetingResponse);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingCancellation(d_ptr->mMeetingCancellation.serialize(QString::fromLatin1("MeetingCancellation")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingCancellation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingCancellation.setQualified(true);
    if (!_valueMeetingCancellation.isNil())
    args.append(_valueMeetingCancellation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTask(d_ptr->mTask.serialize(QString::fromLatin1("Task")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTask.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTask.setQualified(true);
    if (!_valueTask.isNil())
    args.append(_valueTask);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePostItem(d_ptr->mPostItem.serialize(QString::fromLatin1("PostItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePostItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePostItem.setQualified(true);
    if (!_valuePostItem.isNil())
    args.append(_valuePostItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ItemAttachmentType::deserialize( const KDSoapValue& mainValue )
{
    T__AttachmentType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Item")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Message")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CalendarItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Contact")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContact.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingRequest")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingRequest.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingResponse")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingResponse.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingCancellation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingCancellation.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Task")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTask.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("PostItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPostItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ItemAttachmentType::T__ItemAttachmentType()
    : d_ptr(new PrivateDPtr)
{
}

T__ItemAttachmentType::~T__ItemAttachmentType()
{
}

T__ItemAttachmentType::T__ItemAttachmentType( const T__ItemAttachmentType& other )
    : T__AttachmentType( other ), d_ptr( other.d_ptr )
{
}

T__ItemAttachmentType&  T__ItemAttachmentType::operator=( const T__ItemAttachmentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__AttachmentType *>(this) = other;

    return *this;
}


class T__PostItemType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QByteArray mConversationIndex;
    QString mConversationTopic;
    T__SingleRecipientType mFrom;
    QString mInternetMessageId;
    bool mIsRead;
    KDDateTime mPostedTime;
    QString mReferences;
    T__SingleRecipientType mSender;
};

T__PostItemType::PrivateDPtr::PrivateDPtr()
    : mIsRead(false)
{
}


void T__PostItemType::setConversationIndex( const QByteArray& conversationIndex )
{
    d_ptr->mConversationIndex = conversationIndex;
}

QByteArray T__PostItemType::conversationIndex() const
{
    return d_ptr->mConversationIndex;
}

void T__PostItemType::setConversationTopic( const QString& conversationTopic )
{
    d_ptr->mConversationTopic = conversationTopic;
}

QString T__PostItemType::conversationTopic() const
{
    return d_ptr->mConversationTopic;
}

void T__PostItemType::setFrom( const T__SingleRecipientType& from )
{
    d_ptr->mFrom = from;
}

T__SingleRecipientType T__PostItemType::from() const
{
    return d_ptr->mFrom;
}

void T__PostItemType::setInternetMessageId( const QString& internetMessageId )
{
    d_ptr->mInternetMessageId = internetMessageId;
}

QString T__PostItemType::internetMessageId() const
{
    return d_ptr->mInternetMessageId;
}

void T__PostItemType::setIsRead( bool isRead )
{
    d_ptr->mIsRead = isRead;
}

bool T__PostItemType::isRead() const
{
    return d_ptr->mIsRead;
}

void T__PostItemType::setPostedTime( const KDDateTime& postedTime )
{
    d_ptr->mPostedTime = postedTime;
}

KDDateTime T__PostItemType::postedTime() const
{
    return d_ptr->mPostedTime;
}

void T__PostItemType::setReferences( const QString& references )
{
    d_ptr->mReferences = references;
}

QString T__PostItemType::references() const
{
    return d_ptr->mReferences;
}

void T__PostItemType::setSender( const T__SingleRecipientType& sender )
{
    d_ptr->mSender = sender;
}

T__SingleRecipientType T__PostItemType::sender() const
{
    return d_ptr->mSender;
}

KDSoapValue T__PostItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PostItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueConversationIndex(QString::fromLatin1("ConversationIndex"), QString::fromLatin1(d_ptr->mConversationIndex.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueConversationIndex.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConversationIndex.setQualified(true);
    if (!_valueConversationIndex.isNil())
    args.append(_valueConversationIndex);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConversationTopic(QString::fromLatin1("ConversationTopic"), QVariant::fromValue(d_ptr->mConversationTopic), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueConversationTopic.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConversationTopic.setQualified(true);
    if (!_valueConversationTopic.isNil())
    args.append(_valueConversationTopic);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFrom(d_ptr->mFrom.serialize(QString::fromLatin1("From")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFrom.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFrom.setQualified(true);
    if (!_valueFrom.isNil())
    args.append(_valueFrom);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInternetMessageId(QString::fromLatin1("InternetMessageId"), QVariant::fromValue(d_ptr->mInternetMessageId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueInternetMessageId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInternetMessageId.setQualified(true);
    if (!_valueInternetMessageId.isNil())
    args.append(_valueInternetMessageId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsRead(QString::fromLatin1("IsRead"), QVariant::fromValue(d_ptr->mIsRead), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsRead.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsRead.setQualified(true);
    if (!_valueIsRead.isNil())
    args.append(_valueIsRead);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePostedTime(QString::fromLatin1("PostedTime"), d_ptr->mPostedTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valuePostedTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePostedTime.setQualified(true);
    if (!_valuePostedTime.isNil())
    args.append(_valuePostedTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReferences(QString::fromLatin1("References"), QVariant::fromValue(d_ptr->mReferences), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueReferences.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReferences.setQualified(true);
    if (!_valueReferences.isNil())
    args.append(_valueReferences);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSender(d_ptr->mSender.serialize(QString::fromLatin1("Sender")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSender.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSender.setQualified(true);
    if (!_valueSender.isNil())
    args.append(_valueSender);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__PostItemType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ConversationIndex")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConversationIndex = QByteArray::fromBase64(val.value().toString().toLatin1());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ConversationTopic")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConversationTopic = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("From")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFrom.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("InternetMessageId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInternetMessageId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsRead")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsRead = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("PostedTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPostedTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("References")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReferences = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Sender")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSender.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__PostItemType::T__PostItemType()
    : d_ptr(new PrivateDPtr)
{
}

T__PostItemType::~T__PostItemType()
{
}

T__PostItemType::T__PostItemType( const T__PostItemType& other )
    : T__ItemType( other ), d_ptr( other.d_ptr )
{
}

T__PostItemType&  T__PostItemType::operator=( const T__PostItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ItemType *>(this) = other;

    return *this;
}


class TNS__FindItemType::PrivateDPtr : public QSharedData
{
public:
    T__ItemResponseShapeType mItemShape;
    T__IndexedPageViewType mIndexedPageItemView;
    T__FractionalPageViewType mFractionalPageItemView;
    T__CalendarViewType mCalendarView;
    T__ContactsViewType mContactsView;
    T__GroupByType mGroupBy;
    T__DistinguishedGroupByType mDistinguishedGroupBy;
    T__RestrictionType mRestriction;
    T__NonEmptyArrayOfFieldOrdersType mSortOrder;
    T__NonEmptyArrayOfBaseFolderIdsType mParentFolderIds;
    T__ItemQueryTraversalType mTraversal;
};

void TNS__FindItemType::setItemShape( const T__ItemResponseShapeType& itemShape )
{
    d_ptr->mItemShape = itemShape;
}

T__ItemResponseShapeType TNS__FindItemType::itemShape() const
{
    return d_ptr->mItemShape;
}

void TNS__FindItemType::setIndexedPageItemView( const T__IndexedPageViewType& indexedPageItemView )
{
    d_ptr->mIndexedPageItemView = indexedPageItemView;
}

T__IndexedPageViewType TNS__FindItemType::indexedPageItemView() const
{
    return d_ptr->mIndexedPageItemView;
}

void TNS__FindItemType::setFractionalPageItemView( const T__FractionalPageViewType& fractionalPageItemView )
{
    d_ptr->mFractionalPageItemView = fractionalPageItemView;
}

T__FractionalPageViewType TNS__FindItemType::fractionalPageItemView() const
{
    return d_ptr->mFractionalPageItemView;
}

void TNS__FindItemType::setCalendarView( const T__CalendarViewType& calendarView )
{
    d_ptr->mCalendarView = calendarView;
}

T__CalendarViewType TNS__FindItemType::calendarView() const
{
    return d_ptr->mCalendarView;
}

void TNS__FindItemType::setContactsView( const T__ContactsViewType& contactsView )
{
    d_ptr->mContactsView = contactsView;
}

T__ContactsViewType TNS__FindItemType::contactsView() const
{
    return d_ptr->mContactsView;
}

void TNS__FindItemType::setGroupBy( const T__GroupByType& groupBy )
{
    d_ptr->mGroupBy = groupBy;
}

T__GroupByType TNS__FindItemType::groupBy() const
{
    return d_ptr->mGroupBy;
}

void TNS__FindItemType::setDistinguishedGroupBy( const T__DistinguishedGroupByType& distinguishedGroupBy )
{
    d_ptr->mDistinguishedGroupBy = distinguishedGroupBy;
}

T__DistinguishedGroupByType TNS__FindItemType::distinguishedGroupBy() const
{
    return d_ptr->mDistinguishedGroupBy;
}

void TNS__FindItemType::setRestriction( const T__RestrictionType& restriction )
{
    d_ptr->mRestriction = restriction;
}

T__RestrictionType TNS__FindItemType::restriction() const
{
    return d_ptr->mRestriction;
}

void TNS__FindItemType::setSortOrder( const T__NonEmptyArrayOfFieldOrdersType& sortOrder )
{
    d_ptr->mSortOrder = sortOrder;
}

T__NonEmptyArrayOfFieldOrdersType TNS__FindItemType::sortOrder() const
{
    return d_ptr->mSortOrder;
}

void TNS__FindItemType::setParentFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& parentFolderIds )
{
    d_ptr->mParentFolderIds = parentFolderIds;
}

T__NonEmptyArrayOfBaseFolderIdsType TNS__FindItemType::parentFolderIds() const
{
    return d_ptr->mParentFolderIds;
}

void TNS__FindItemType::setTraversal( const T__ItemQueryTraversalType& traversal )
{
    d_ptr->mTraversal = traversal;
}

T__ItemQueryTraversalType TNS__FindItemType::traversal() const
{
    return d_ptr->mTraversal;
}

KDSoapValue TNS__FindItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("FindItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemShape(d_ptr->mItemShape.serialize(QString::fromLatin1("ItemShape")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItemShape.setQualified(true);
    if (!_valueItemShape.isNil())
    args.append(_valueItemShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIndexedPageItemView(d_ptr->mIndexedPageItemView.serialize(QString::fromLatin1("IndexedPageItemView")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueIndexedPageItemView.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueIndexedPageItemView.setQualified(true);
    if (!_valueIndexedPageItemView.isNil())
    args.append(_valueIndexedPageItemView);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFractionalPageItemView(d_ptr->mFractionalPageItemView.serialize(QString::fromLatin1("FractionalPageItemView")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFractionalPageItemView.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFractionalPageItemView.setQualified(true);
    if (!_valueFractionalPageItemView.isNil())
    args.append(_valueFractionalPageItemView);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarView(d_ptr->mCalendarView.serialize(QString::fromLatin1("CalendarView")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarView.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCalendarView.setQualified(true);
    if (!_valueCalendarView.isNil())
    args.append(_valueCalendarView);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContactsView(d_ptr->mContactsView.serialize(QString::fromLatin1("ContactsView")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContactsView.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueContactsView.setQualified(true);
    if (!_valueContactsView.isNil())
    args.append(_valueContactsView);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueGroupBy(d_ptr->mGroupBy.serialize(QString::fromLatin1("GroupBy")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGroupBy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGroupBy.setQualified(true);
    if (!_valueGroupBy.isNil())
    args.append(_valueGroupBy);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDistinguishedGroupBy(d_ptr->mDistinguishedGroupBy.serialize(QString::fromLatin1("DistinguishedGroupBy")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDistinguishedGroupBy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDistinguishedGroupBy.setQualified(true);
    if (!_valueDistinguishedGroupBy.isNil())
    args.append(_valueDistinguishedGroupBy);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRestriction(d_ptr->mRestriction.serialize(QString::fromLatin1("Restriction")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRestriction.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueRestriction.setQualified(true);
    if (!_valueRestriction.isNil())
    args.append(_valueRestriction);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSortOrder(d_ptr->mSortOrder.serialize(QString::fromLatin1("SortOrder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSortOrder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSortOrder.setQualified(true);
    if (!_valueSortOrder.isNil())
    args.append(_valueSortOrder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueParentFolderIds(d_ptr->mParentFolderIds.serialize(QString::fromLatin1("ParentFolderIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueParentFolderIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueParentFolderIds.setQualified(true);
    if (!_valueParentFolderIds.isNil())
    args.append(_valueParentFolderIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueTraversal(QString::fromLatin1("Traversal"), d_ptr->mTraversal.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemQueryTraversalType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueTraversal.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueTraversal.isNil())
    attribs.append(_valueTraversal);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__FindItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemShape.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IndexedPageItemView")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIndexedPageItemView.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FractionalPageItemView")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFractionalPageItemView.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CalendarView")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarView.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ContactsView")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContactsView.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("GroupBy")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mGroupBy.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DistinguishedGroupBy")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDistinguishedGroupBy.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Restriction")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRestriction.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SortOrder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSortOrder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ParentFolderIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mParentFolderIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("Traversal")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTraversal.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__FindItemType::TNS__FindItemType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__FindItemType::~TNS__FindItemType()
{
}

TNS__FindItemType::TNS__FindItemType( const TNS__FindItemType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__FindItemType&  TNS__FindItemType::operator=( const TNS__FindItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__ExpandDLResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfDLExpansionType mDLExpansion;
};

void TNS__ExpandDLResponseMessageType::setDLExpansion( const T__ArrayOfDLExpansionType& dLExpansion )
{
    d_ptr->mDLExpansion = dLExpansion;
}

T__ArrayOfDLExpansionType TNS__ExpandDLResponseMessageType::dLExpansion() const
{
    return d_ptr->mDLExpansion;
}

KDSoapValue TNS__ExpandDLResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ExpandDLResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDLExpansion(d_ptr->mDLExpansion.serialize(QString::fromLatin1("DLExpansion")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDLExpansion.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDLExpansion.setQualified(true);
    if (!_valueDLExpansion.isNil())
    args.append(_valueDLExpansion);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__ExpandDLResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DLExpansion")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDLExpansion.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__ExpandDLResponseMessageType::TNS__ExpandDLResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ExpandDLResponseMessageType::~TNS__ExpandDLResponseMessageType()
{
}

TNS__ExpandDLResponseMessageType::TNS__ExpandDLResponseMessageType( const TNS__ExpandDLResponseMessageType& other )
    : TNS__ResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__ExpandDLResponseMessageType&  TNS__ExpandDLResponseMessageType::operator=( const TNS__ExpandDLResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ResponseMessageType *>(this) = other;

    return *this;
}


class TNS__CreateManagedFolderRequestType::PrivateDPtr : public QSharedData
{
public:
    T__NonEmptyArrayOfFolderNamesType mFolderNames;
    T__EmailAddressType mMailbox;
};

void TNS__CreateManagedFolderRequestType::setFolderNames( const T__NonEmptyArrayOfFolderNamesType& folderNames )
{
    d_ptr->mFolderNames = folderNames;
}

T__NonEmptyArrayOfFolderNamesType TNS__CreateManagedFolderRequestType::folderNames() const
{
    return d_ptr->mFolderNames;
}

void TNS__CreateManagedFolderRequestType::setMailbox( const T__EmailAddressType& mailbox )
{
    d_ptr->mMailbox = mailbox;
}

T__EmailAddressType TNS__CreateManagedFolderRequestType::mailbox() const
{
    return d_ptr->mMailbox;
}

KDSoapValue TNS__CreateManagedFolderRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CreateManagedFolderRequestType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderNames(d_ptr->mFolderNames.serialize(QString::fromLatin1("FolderNames")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderNames.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolderNames.setQualified(true);
    if (!_valueFolderNames.isNil())
    args.append(_valueFolderNames);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMailbox(d_ptr->mMailbox.serialize(QString::fromLatin1("Mailbox")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMailbox.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMailbox.setQualified(true);
    if (!_valueMailbox.isNil())
    args.append(_valueMailbox);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__CreateManagedFolderRequestType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderNames")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderNames.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Mailbox")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMailbox.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__CreateManagedFolderRequestType::TNS__CreateManagedFolderRequestType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CreateManagedFolderRequestType::~TNS__CreateManagedFolderRequestType()
{
}

TNS__CreateManagedFolderRequestType::TNS__CreateManagedFolderRequestType( const TNS__CreateManagedFolderRequestType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__CreateManagedFolderRequestType&  TNS__CreateManagedFolderRequestType::operator=( const TNS__CreateManagedFolderRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__FolderType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__PermissionSetType mPermissionSet;
    int mUnreadCount;
};

T__FolderType::PrivateDPtr::PrivateDPtr()
    : mUnreadCount(0)
{
}


void T__FolderType::setPermissionSet( const T__PermissionSetType& permissionSet )
{
    d_ptr->mPermissionSet = permissionSet;
}

T__PermissionSetType T__FolderType::permissionSet() const
{
    return d_ptr->mPermissionSet;
}

void T__FolderType::setUnreadCount( int unreadCount )
{
    d_ptr->mUnreadCount = unreadCount;
}

int T__FolderType::unreadCount() const
{
    return d_ptr->mUnreadCount;
}

KDSoapValue T__FolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseFolderType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("FolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePermissionSet(d_ptr->mPermissionSet.serialize(QString::fromLatin1("PermissionSet")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePermissionSet.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePermissionSet.setQualified(true);
    if (!_valuePermissionSet.isNil())
    args.append(_valuePermissionSet);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueUnreadCount(QString::fromLatin1("UnreadCount"), QVariant::fromValue(d_ptr->mUnreadCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueUnreadCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueUnreadCount.setQualified(true);
    if (!_valueUnreadCount.isNil())
    args.append(_valueUnreadCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__FolderType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseFolderType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("PermissionSet")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPermissionSet.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("UnreadCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUnreadCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__FolderType::T__FolderType()
    : d_ptr(new PrivateDPtr)
{
}

T__FolderType::~T__FolderType()
{
}

T__FolderType::T__FolderType( const T__FolderType& other )
    : T__BaseFolderType( other ), d_ptr( other.d_ptr )
{
}

T__FolderType&  T__FolderType::operator=( const T__FolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseFolderType *>(this) = other;

    return *this;
}


class TNS__CreateAttachmentType::PrivateDPtr : public QSharedData
{
public:
    T__ItemIdType mParentItemId;
    T__NonEmptyArrayOfAttachmentsType mAttachments;
};

void TNS__CreateAttachmentType::setParentItemId( const T__ItemIdType& parentItemId )
{
    d_ptr->mParentItemId = parentItemId;
}

T__ItemIdType TNS__CreateAttachmentType::parentItemId() const
{
    return d_ptr->mParentItemId;
}

void TNS__CreateAttachmentType::setAttachments( const T__NonEmptyArrayOfAttachmentsType& attachments )
{
    d_ptr->mAttachments = attachments;
}

T__NonEmptyArrayOfAttachmentsType TNS__CreateAttachmentType::attachments() const
{
    return d_ptr->mAttachments;
}

KDSoapValue TNS__CreateAttachmentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CreateAttachmentType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueParentItemId(d_ptr->mParentItemId.serialize(QString::fromLatin1("ParentItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueParentItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueParentItemId.setQualified(true);
    if (!_valueParentItemId.isNil())
    args.append(_valueParentItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAttachments(d_ptr->mAttachments.serialize(QString::fromLatin1("Attachments")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttachments.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAttachments.setQualified(true);
    if (!_valueAttachments.isNil())
    args.append(_valueAttachments);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__CreateAttachmentType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ParentItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mParentItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Attachments")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttachments.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__CreateAttachmentType::TNS__CreateAttachmentType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CreateAttachmentType::~TNS__CreateAttachmentType()
{
}

TNS__CreateAttachmentType::TNS__CreateAttachmentType( const TNS__CreateAttachmentType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__CreateAttachmentType&  TNS__CreateAttachmentType::operator=( const TNS__CreateAttachmentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__ConvertIdType::PrivateDPtr : public QSharedData
{
public:
    T__NonEmptyArrayOfAlternateIdsType mSourceIds;
    T__IdFormatType mDestinationFormat;
};

void TNS__ConvertIdType::setSourceIds( const T__NonEmptyArrayOfAlternateIdsType& sourceIds )
{
    d_ptr->mSourceIds = sourceIds;
}

T__NonEmptyArrayOfAlternateIdsType TNS__ConvertIdType::sourceIds() const
{
    return d_ptr->mSourceIds;
}

void TNS__ConvertIdType::setDestinationFormat( const T__IdFormatType& destinationFormat )
{
    d_ptr->mDestinationFormat = destinationFormat;
}

T__IdFormatType TNS__ConvertIdType::destinationFormat() const
{
    return d_ptr->mDestinationFormat;
}

KDSoapValue TNS__ConvertIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ConvertIdType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSourceIds(d_ptr->mSourceIds.serialize(QString::fromLatin1("SourceIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSourceIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSourceIds.setQualified(true);
    if (!_valueSourceIds.isNil())
    args.append(_valueSourceIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueDestinationFormat(QString::fromLatin1("DestinationFormat"), d_ptr->mDestinationFormat.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IdFormatType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDestinationFormat.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueDestinationFormat.isNil())
    attribs.append(_valueDestinationFormat);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__ConvertIdType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SourceIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSourceIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("DestinationFormat")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDestinationFormat.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__ConvertIdType::TNS__ConvertIdType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ConvertIdType::~TNS__ConvertIdType()
{
}

TNS__ConvertIdType::TNS__ConvertIdType( const TNS__ConvertIdType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__ConvertIdType&  TNS__ConvertIdType::operator=( const TNS__ConvertIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__UpdateDelegateType::PrivateDPtr : public QSharedData
{
public:
    T__ArrayOfDelegateUserType mDelegateUsers;
    T__DeliverMeetingRequestsType mDeliverMeetingRequests;
};

void TNS__UpdateDelegateType::setDelegateUsers( const T__ArrayOfDelegateUserType& delegateUsers )
{
    d_ptr->mDelegateUsers = delegateUsers;
}

T__ArrayOfDelegateUserType TNS__UpdateDelegateType::delegateUsers() const
{
    return d_ptr->mDelegateUsers;
}

void TNS__UpdateDelegateType::setDeliverMeetingRequests( const T__DeliverMeetingRequestsType& deliverMeetingRequests )
{
    d_ptr->mDeliverMeetingRequests = deliverMeetingRequests;
}

T__DeliverMeetingRequestsType TNS__UpdateDelegateType::deliverMeetingRequests() const
{
    return d_ptr->mDeliverMeetingRequests;
}

KDSoapValue TNS__UpdateDelegateType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseDelegateType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UpdateDelegateType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDelegateUsers(d_ptr->mDelegateUsers.serialize(QString::fromLatin1("DelegateUsers")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDelegateUsers.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDelegateUsers.setQualified(true);
    if (!_valueDelegateUsers.isNil())
    args.append(_valueDelegateUsers);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDeliverMeetingRequests(QString::fromLatin1("DeliverMeetingRequests"), d_ptr->mDeliverMeetingRequests.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DeliverMeetingRequestsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDeliverMeetingRequests.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeliverMeetingRequests.setQualified(true);
    if (!_valueDeliverMeetingRequests.isNil())
    args.append(_valueDeliverMeetingRequests);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__UpdateDelegateType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseDelegateType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DelegateUsers")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDelegateUsers.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DeliverMeetingRequests")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDeliverMeetingRequests.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__UpdateDelegateType::TNS__UpdateDelegateType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__UpdateDelegateType::~TNS__UpdateDelegateType()
{
}

TNS__UpdateDelegateType::TNS__UpdateDelegateType( const TNS__UpdateDelegateType& other )
    : TNS__BaseDelegateType( other ), d_ptr( other.d_ptr )
{
}

TNS__UpdateDelegateType&  TNS__UpdateDelegateType::operator=( const TNS__UpdateDelegateType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseDelegateType *>(this) = other;

    return *this;
}


class TNS__DeleteFolderType::PrivateDPtr : public QSharedData
{
public:
    T__NonEmptyArrayOfBaseFolderIdsType mFolderIds;
    T__DisposalType mDeleteType;
};

void TNS__DeleteFolderType::setFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& folderIds )
{
    d_ptr->mFolderIds = folderIds;
}

T__NonEmptyArrayOfBaseFolderIdsType TNS__DeleteFolderType::folderIds() const
{
    return d_ptr->mFolderIds;
}

void TNS__DeleteFolderType::setDeleteType( const T__DisposalType& deleteType )
{
    d_ptr->mDeleteType = deleteType;
}

T__DisposalType TNS__DeleteFolderType::deleteType() const
{
    return d_ptr->mDeleteType;
}

KDSoapValue TNS__DeleteFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("DeleteFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderIds(d_ptr->mFolderIds.serialize(QString::fromLatin1("FolderIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolderIds.setQualified(true);
    if (!_valueFolderIds.isNil())
    args.append(_valueFolderIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueDeleteType(QString::fromLatin1("DeleteType"), d_ptr->mDeleteType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DisposalType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDeleteType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueDeleteType.isNil())
    attribs.append(_valueDeleteType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__DeleteFolderType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("DeleteType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDeleteType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__DeleteFolderType::TNS__DeleteFolderType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__DeleteFolderType::~TNS__DeleteFolderType()
{
}

TNS__DeleteFolderType::TNS__DeleteFolderType( const TNS__DeleteFolderType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__DeleteFolderType&  TNS__DeleteFolderType::operator=( const TNS__DeleteFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class T__SmartResponseType::PrivateDPtr : public QSharedData
{
public:
    T__BodyType mNewBodyContent;
};

void T__SmartResponseType::setNewBodyContent( const T__BodyType& newBodyContent )
{
    d_ptr->mNewBodyContent = newBodyContent;
}

T__BodyType T__SmartResponseType::newBodyContent() const
{
    return d_ptr->mNewBodyContent;
}

KDSoapValue T__SmartResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SmartResponseBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SmartResponseType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueNewBodyContent(d_ptr->mNewBodyContent.serialize(QString::fromLatin1("NewBodyContent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueNewBodyContent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNewBodyContent.setQualified(true);
    if (!_valueNewBodyContent.isNil())
    args.append(_valueNewBodyContent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SmartResponseType::deserialize( const KDSoapValue& mainValue )
{
    T__SmartResponseBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("NewBodyContent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNewBodyContent.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SmartResponseType::T__SmartResponseType()
    : d_ptr(new PrivateDPtr)
{
}

T__SmartResponseType::~T__SmartResponseType()
{
}

T__SmartResponseType::T__SmartResponseType( const T__SmartResponseType& other )
    : T__SmartResponseBaseType( other ), d_ptr( other.d_ptr )
{
}

T__SmartResponseType&  T__SmartResponseType::operator=( const T__SmartResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__SmartResponseBaseType *>(this) = other;

    return *this;
}


class TNS__BaseMoveCopyItemType::PrivateDPtr : public QSharedData
{
public:
    T__TargetFolderIdType mToFolderId;
    T__NonEmptyArrayOfBaseItemIdsType mItemIds;
};

void TNS__BaseMoveCopyItemType::setToFolderId( const T__TargetFolderIdType& toFolderId )
{
    d_ptr->mToFolderId = toFolderId;
}

T__TargetFolderIdType TNS__BaseMoveCopyItemType::toFolderId() const
{
    return d_ptr->mToFolderId;
}

void TNS__BaseMoveCopyItemType::setItemIds( const T__NonEmptyArrayOfBaseItemIdsType& itemIds )
{
    d_ptr->mItemIds = itemIds;
}

T__NonEmptyArrayOfBaseItemIdsType TNS__BaseMoveCopyItemType::itemIds() const
{
    return d_ptr->mItemIds;
}

KDSoapValue TNS__BaseMoveCopyItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("BaseMoveCopyItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueToFolderId(d_ptr->mToFolderId.serialize(QString::fromLatin1("ToFolderId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueToFolderId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueToFolderId.setQualified(true);
    if (!_valueToFolderId.isNil())
    args.append(_valueToFolderId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueItemIds(d_ptr->mItemIds.serialize(QString::fromLatin1("ItemIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItemIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueItemIds.setQualified(true);
    if (!_valueItemIds.isNil())
    args.append(_valueItemIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__BaseMoveCopyItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ToFolderId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mToFolderId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ItemIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__BaseMoveCopyItemType::TNS__BaseMoveCopyItemType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__BaseMoveCopyItemType::~TNS__BaseMoveCopyItemType()
{
}

TNS__BaseMoveCopyItemType::TNS__BaseMoveCopyItemType( const TNS__BaseMoveCopyItemType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__BaseMoveCopyItemType&  TNS__BaseMoveCopyItemType::operator=( const TNS__BaseMoveCopyItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


KDSoapValue TNS__GetFolderResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetFolderResponseType"));
    return mainValue;
}

void TNS__GetFolderResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__GetFolderResponseType::TNS__GetFolderResponseType()
{
}

TNS__GetFolderResponseType::~TNS__GetFolderResponseType()
{
}


class T__GroupByType::PrivateDPtr : public QSharedData
{
public:
    T__PathToUnindexedFieldType mFieldURI;
    T__PathToIndexedFieldType mIndexedFieldURI;
    T__PathToExtendedFieldType mExtendedFieldURI;
    T__AggregateOnType mAggregateOn;
};

void T__GroupByType::setFieldURI( const T__PathToUnindexedFieldType& fieldURI )
{
    d_ptr->mFieldURI = fieldURI;
}

T__PathToUnindexedFieldType T__GroupByType::fieldURI() const
{
    return d_ptr->mFieldURI;
}

void T__GroupByType::setIndexedFieldURI( const T__PathToIndexedFieldType& indexedFieldURI )
{
    d_ptr->mIndexedFieldURI = indexedFieldURI;
}

T__PathToIndexedFieldType T__GroupByType::indexedFieldURI() const
{
    return d_ptr->mIndexedFieldURI;
}

void T__GroupByType::setExtendedFieldURI( const T__PathToExtendedFieldType& extendedFieldURI )
{
    d_ptr->mExtendedFieldURI = extendedFieldURI;
}

T__PathToExtendedFieldType T__GroupByType::extendedFieldURI() const
{
    return d_ptr->mExtendedFieldURI;
}

void T__GroupByType::setAggregateOn( const T__AggregateOnType& aggregateOn )
{
    d_ptr->mAggregateOn = aggregateOn;
}

T__AggregateOnType T__GroupByType::aggregateOn() const
{
    return d_ptr->mAggregateOn;
}

KDSoapValue T__GroupByType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__BaseGroupByType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("GroupByType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFieldURI(d_ptr->mFieldURI.serialize(QString::fromLatin1("FieldURI")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFieldURI.setQualified(true);
    if (!_valueFieldURI.isNil())
    args.append(_valueFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIndexedFieldURI(d_ptr->mIndexedFieldURI.serialize(QString::fromLatin1("IndexedFieldURI")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueIndexedFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIndexedFieldURI.setQualified(true);
    if (!_valueIndexedFieldURI.isNil())
    args.append(_valueIndexedFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueExtendedFieldURI(d_ptr->mExtendedFieldURI.serialize(QString::fromLatin1("ExtendedFieldURI")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueExtendedFieldURI.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueExtendedFieldURI.setQualified(true);
    if (!_valueExtendedFieldURI.isNil())
    args.append(_valueExtendedFieldURI);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAggregateOn(d_ptr->mAggregateOn.serialize(QString::fromLatin1("AggregateOn")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAggregateOn.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAggregateOn.setQualified(true);
    if (!_valueAggregateOn.isNil())
    args.append(_valueAggregateOn);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__GroupByType::deserialize( const KDSoapValue& mainValue )
{
    T__BaseGroupByType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFieldURI.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IndexedFieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIndexedFieldURI.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ExtendedFieldURI")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mExtendedFieldURI.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AggregateOn")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAggregateOn.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__GroupByType::T__GroupByType()
    : d_ptr(new PrivateDPtr)
{
}

T__GroupByType::~T__GroupByType()
{
}

T__GroupByType::T__GroupByType( const T__GroupByType& other )
    : T__BaseGroupByType( other ), d_ptr( other.d_ptr )
{
}

T__GroupByType&  T__GroupByType::operator=( const T__GroupByType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__BaseGroupByType *>(this) = other;

    return *this;
}


KDSoapValue TNS__SendNotificationResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("SendNotificationResponseType"));
    return mainValue;
}

void TNS__SendNotificationResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__SendNotificationResponseType::TNS__SendNotificationResponseType()
{
}

TNS__SendNotificationResponseType::~TNS__SendNotificationResponseType()
{
}


class T__ExistsType::PrivateDPtr : public QSharedData
{
public:
    T__BasePathToElementType mPath;
};

void T__ExistsType::setPath( const T__BasePathToElementType& path )
{
    d_ptr->mPath = path;
}

T__BasePathToElementType T__ExistsType::path() const
{
    return d_ptr->mPath;
}

KDSoapValue T__ExistsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SearchExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ExistsType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valuePath(d_ptr->mPath.serialize(QString::fromLatin1("Path")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePath.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePath.setQualified(true);
    if (!_valuePath.isNil())
    args.append(_valuePath);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__ExistsType::deserialize( const KDSoapValue& mainValue )
{
    T__SearchExpressionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Path")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPath.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__ExistsType::T__ExistsType()
    : d_ptr(new PrivateDPtr)
{
}

T__ExistsType::~T__ExistsType()
{
}

T__ExistsType::T__ExistsType( const T__ExistsType& other )
    : T__SearchExpressionType( other ), d_ptr( other.d_ptr )
{
}

T__ExistsType&  T__ExistsType::operator=( const T__ExistsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__SearchExpressionType *>(this) = other;

    return *this;
}


class T__ReferenceItemResponseType::PrivateDPtr : public QSharedData
{
public:
    T__ItemIdType mReferenceItemId;
    QString mObjectName;
};

void T__ReferenceItemResponseType::setReferenceItemId( const T__ItemIdType& referenceItemId )
{
    d_ptr->mReferenceItemId = referenceItemId;
}

T__ItemIdType T__ReferenceItemResponseType::referenceItemId() const
{
    return d_ptr->mReferenceItemId;
}

void T__ReferenceItemResponseType::setObjectName( const QString& objectName )
{
    d_ptr->mObjectName = objectName;
}

QString T__ReferenceItemResponseType::objectName() const
{
    return d_ptr->mObjectName;
}

KDSoapValue T__ReferenceItemResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ResponseObjectType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ReferenceItemResponseType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueReferenceItemId(d_ptr->mReferenceItemId.serialize(QString::fromLatin1("ReferenceItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueReferenceItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReferenceItemId.setQualified(true);
    if (!_valueReferenceItemId.isNil())
    args.append(_valueReferenceItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueObjectName(QString::fromLatin1("ObjectName"), QVariant::fromValue(d_ptr->mObjectName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueObjectName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueObjectName.isNil())
    attribs.append(_valueObjectName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__ReferenceItemResponseType::deserialize( const KDSoapValue& mainValue )
{
    T__ResponseObjectType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ReferenceItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReferenceItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ObjectName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mObjectName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__ReferenceItemResponseType::T__ReferenceItemResponseType()
    : d_ptr(new PrivateDPtr)
{
}

T__ReferenceItemResponseType::~T__ReferenceItemResponseType()
{
}

T__ReferenceItemResponseType::T__ReferenceItemResponseType( const T__ReferenceItemResponseType& other )
    : T__ResponseObjectType( other ), d_ptr( other.d_ptr )
{
}

T__ReferenceItemResponseType&  T__ReferenceItemResponseType::operator=( const T__ReferenceItemResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ResponseObjectType *>(this) = other;

    return *this;
}


class T__RelativeMonthlyRecurrencePatternType::PrivateDPtr : public QSharedData
{
public:
    T__DayOfWeekType mDaysOfWeek;
    T__DayOfWeekIndexType mDayOfWeekIndex;
};

void T__RelativeMonthlyRecurrencePatternType::setDaysOfWeek( const T__DayOfWeekType& daysOfWeek )
{
    d_ptr->mDaysOfWeek = daysOfWeek;
}

T__DayOfWeekType T__RelativeMonthlyRecurrencePatternType::daysOfWeek() const
{
    return d_ptr->mDaysOfWeek;
}

void T__RelativeMonthlyRecurrencePatternType::setDayOfWeekIndex( const T__DayOfWeekIndexType& dayOfWeekIndex )
{
    d_ptr->mDayOfWeekIndex = dayOfWeekIndex;
}

T__DayOfWeekIndexType T__RelativeMonthlyRecurrencePatternType::dayOfWeekIndex() const
{
    return d_ptr->mDayOfWeekIndex;
}

KDSoapValue T__RelativeMonthlyRecurrencePatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__IntervalRecurrencePatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RelativeMonthlyRecurrencePatternType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDaysOfWeek(QString::fromLatin1("DaysOfWeek"), d_ptr->mDaysOfWeek.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DayOfWeekType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDaysOfWeek.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDaysOfWeek.setQualified(true);
    if (!_valueDaysOfWeek.isNil())
    args.append(_valueDaysOfWeek);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDayOfWeekIndex(QString::fromLatin1("DayOfWeekIndex"), d_ptr->mDayOfWeekIndex.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DayOfWeekIndexType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDayOfWeekIndex.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDayOfWeekIndex.setQualified(true);
    if (!_valueDayOfWeekIndex.isNil())
    args.append(_valueDayOfWeekIndex);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__RelativeMonthlyRecurrencePatternType::deserialize( const KDSoapValue& mainValue )
{
    T__IntervalRecurrencePatternBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DaysOfWeek")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDaysOfWeek.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("DayOfWeekIndex")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDayOfWeekIndex.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__RelativeMonthlyRecurrencePatternType::T__RelativeMonthlyRecurrencePatternType()
    : d_ptr(new PrivateDPtr)
{
}

T__RelativeMonthlyRecurrencePatternType::~T__RelativeMonthlyRecurrencePatternType()
{
}

T__RelativeMonthlyRecurrencePatternType::T__RelativeMonthlyRecurrencePatternType( const T__RelativeMonthlyRecurrencePatternType& other )
    : T__IntervalRecurrencePatternBaseType( other ), d_ptr( other.d_ptr )
{
}

T__RelativeMonthlyRecurrencePatternType&  T__RelativeMonthlyRecurrencePatternType::operator=( const T__RelativeMonthlyRecurrencePatternType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__IntervalRecurrencePatternBaseType *>(this) = other;

    return *this;
}


KDSoapValue T__IsGreaterThanType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__TwoOperandExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IsGreaterThanType"));
    return mainValue;
}

void T__IsGreaterThanType::deserialize( const KDSoapValue& mainValue )
{
    T__TwoOperandExpressionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__IsGreaterThanType::T__IsGreaterThanType()
{
}

T__IsGreaterThanType::~T__IsGreaterThanType()
{
}


class T__DistributionListType::PrivateDPtr : public QSharedData
{
public:
    QString mDisplayName;
    QString mFileAs;
    T__ContactSourceType mContactSource;
};

void T__DistributionListType::setDisplayName( const QString& displayName )
{
    d_ptr->mDisplayName = displayName;
}

QString T__DistributionListType::displayName() const
{
    return d_ptr->mDisplayName;
}

void T__DistributionListType::setFileAs( const QString& fileAs )
{
    d_ptr->mFileAs = fileAs;
}

QString T__DistributionListType::fileAs() const
{
    return d_ptr->mFileAs;
}

void T__DistributionListType::setContactSource( const T__ContactSourceType& contactSource )
{
    d_ptr->mContactSource = contactSource;
}

T__ContactSourceType T__DistributionListType::contactSource() const
{
    return d_ptr->mContactSource;
}

KDSoapValue T__DistributionListType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DistributionListType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDisplayName(QString::fromLatin1("DisplayName"), QVariant::fromValue(d_ptr->mDisplayName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDisplayName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDisplayName.setQualified(true);
    if (!_valueDisplayName.isNil())
    args.append(_valueDisplayName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFileAs(QString::fromLatin1("FileAs"), QVariant::fromValue(d_ptr->mFileAs), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueFileAs.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFileAs.setQualified(true);
    if (!_valueFileAs.isNil())
    args.append(_valueFileAs);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContactSource(QString::fromLatin1("ContactSource"), d_ptr->mContactSource.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ContactSourceType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueContactSource.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContactSource.setQualified(true);
    if (!_valueContactSource.isNil())
    args.append(_valueContactSource);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__DistributionListType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DisplayName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDisplayName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("FileAs")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFileAs = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ContactSource")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContactSource.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__DistributionListType::T__DistributionListType()
    : d_ptr(new PrivateDPtr)
{
}

T__DistributionListType::~T__DistributionListType()
{
}

T__DistributionListType::T__DistributionListType( const T__DistributionListType& other )
    : T__ItemType( other ), d_ptr( other.d_ptr )
{
}

T__DistributionListType&  T__DistributionListType::operator=( const T__DistributionListType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ItemType *>(this) = other;

    return *this;
}


class T__SetFolderFieldType::PrivateDPtr : public QSharedData
{
public:
    T__FolderType mFolder;
    T__CalendarFolderType mCalendarFolder;
    T__ContactsFolderType mContactsFolder;
    T__SearchFolderType mSearchFolder;
    T__TasksFolderType mTasksFolder;
};

void T__SetFolderFieldType::setFolder( const T__FolderType& folder )
{
    d_ptr->mFolder = folder;
}

T__FolderType T__SetFolderFieldType::folder() const
{
    return d_ptr->mFolder;
}

void T__SetFolderFieldType::setCalendarFolder( const T__CalendarFolderType& calendarFolder )
{
    d_ptr->mCalendarFolder = calendarFolder;
}

T__CalendarFolderType T__SetFolderFieldType::calendarFolder() const
{
    return d_ptr->mCalendarFolder;
}

void T__SetFolderFieldType::setContactsFolder( const T__ContactsFolderType& contactsFolder )
{
    d_ptr->mContactsFolder = contactsFolder;
}

T__ContactsFolderType T__SetFolderFieldType::contactsFolder() const
{
    return d_ptr->mContactsFolder;
}

void T__SetFolderFieldType::setSearchFolder( const T__SearchFolderType& searchFolder )
{
    d_ptr->mSearchFolder = searchFolder;
}

T__SearchFolderType T__SetFolderFieldType::searchFolder() const
{
    return d_ptr->mSearchFolder;
}

void T__SetFolderFieldType::setTasksFolder( const T__TasksFolderType& tasksFolder )
{
    d_ptr->mTasksFolder = tasksFolder;
}

T__TasksFolderType T__SetFolderFieldType::tasksFolder() const
{
    return d_ptr->mTasksFolder;
}

KDSoapValue T__SetFolderFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__FolderChangeDescriptionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SetFolderFieldType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolder(d_ptr->mFolder.serialize(QString::fromLatin1("Folder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolder.setQualified(true);
    if (!_valueFolder.isNil())
    args.append(_valueFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarFolder(d_ptr->mCalendarFolder.serialize(QString::fromLatin1("CalendarFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarFolder.setQualified(true);
    if (!_valueCalendarFolder.isNil())
    args.append(_valueCalendarFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContactsFolder(d_ptr->mContactsFolder.serialize(QString::fromLatin1("ContactsFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContactsFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContactsFolder.setQualified(true);
    if (!_valueContactsFolder.isNil())
    args.append(_valueContactsFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSearchFolder(d_ptr->mSearchFolder.serialize(QString::fromLatin1("SearchFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSearchFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSearchFolder.setQualified(true);
    if (!_valueSearchFolder.isNil())
    args.append(_valueSearchFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTasksFolder(d_ptr->mTasksFolder.serialize(QString::fromLatin1("TasksFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTasksFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTasksFolder.setQualified(true);
    if (!_valueTasksFolder.isNil())
    args.append(_valueTasksFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SetFolderFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__FolderChangeDescriptionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Folder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CalendarFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ContactsFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContactsFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SearchFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSearchFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("TasksFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTasksFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SetFolderFieldType::T__SetFolderFieldType()
    : d_ptr(new PrivateDPtr)
{
}

T__SetFolderFieldType::~T__SetFolderFieldType()
{
}

T__SetFolderFieldType::T__SetFolderFieldType( const T__SetFolderFieldType& other )
    : T__FolderChangeDescriptionType( other ), d_ptr( other.d_ptr )
{
}

T__SetFolderFieldType&  T__SetFolderFieldType::operator=( const T__SetFolderFieldType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__FolderChangeDescriptionType *>(this) = other;

    return *this;
}


class TNS__GetFolderType::PrivateDPtr : public QSharedData
{
public:
    T__FolderResponseShapeType mFolderShape;
    T__NonEmptyArrayOfBaseFolderIdsType mFolderIds;
};

void TNS__GetFolderType::setFolderShape( const T__FolderResponseShapeType& folderShape )
{
    d_ptr->mFolderShape = folderShape;
}

T__FolderResponseShapeType TNS__GetFolderType::folderShape() const
{
    return d_ptr->mFolderShape;
}

void TNS__GetFolderType::setFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& folderIds )
{
    d_ptr->mFolderIds = folderIds;
}

T__NonEmptyArrayOfBaseFolderIdsType TNS__GetFolderType::folderIds() const
{
    return d_ptr->mFolderIds;
}

KDSoapValue TNS__GetFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseRequestType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolderShape(d_ptr->mFolderShape.serialize(QString::fromLatin1("FolderShape")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderShape.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolderShape.setQualified(true);
    if (!_valueFolderShape.isNil())
    args.append(_valueFolderShape);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFolderIds(d_ptr->mFolderIds.serialize(QString::fromLatin1("FolderIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolderIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFolderIds.setQualified(true);
    if (!_valueFolderIds.isNil())
    args.append(_valueFolderIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetFolderType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("FolderShape")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderShape.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FolderIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolderIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__GetFolderType::TNS__GetFolderType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetFolderType::~TNS__GetFolderType()
{
}

TNS__GetFolderType::TNS__GetFolderType( const TNS__GetFolderType& other )
    : TNS__BaseRequestType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetFolderType&  TNS__GetFolderType::operator=( const TNS__GetFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseRequestType *>(this) = other;

    return *this;
}


class TNS__GetDelegateResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__DeliverMeetingRequestsType mDeliverMeetingRequests;
};

void TNS__GetDelegateResponseMessageType::setDeliverMeetingRequests( const T__DeliverMeetingRequestsType& deliverMeetingRequests )
{
    d_ptr->mDeliverMeetingRequests = deliverMeetingRequests;
}

T__DeliverMeetingRequestsType TNS__GetDelegateResponseMessageType::deliverMeetingRequests() const
{
    return d_ptr->mDeliverMeetingRequests;
}

KDSoapValue TNS__GetDelegateResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseDelegateResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetDelegateResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDeliverMeetingRequests(QString::fromLatin1("DeliverMeetingRequests"), d_ptr->mDeliverMeetingRequests.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DeliverMeetingRequestsType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDeliverMeetingRequests.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeliverMeetingRequests.setQualified(true);
    if (!_valueDeliverMeetingRequests.isNil())
    args.append(_valueDeliverMeetingRequests);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__GetDelegateResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseDelegateResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DeliverMeetingRequests")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDeliverMeetingRequests.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

TNS__GetDelegateResponseMessageType::TNS__GetDelegateResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetDelegateResponseMessageType::~TNS__GetDelegateResponseMessageType()
{
}

TNS__GetDelegateResponseMessageType::TNS__GetDelegateResponseMessageType( const TNS__GetDelegateResponseMessageType& other )
    : TNS__BaseDelegateResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetDelegateResponseMessageType&  TNS__GetDelegateResponseMessageType::operator=( const TNS__GetDelegateResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseDelegateResponseMessageType *>(this) = other;

    return *this;
}


class T__AttachmentIdType::PrivateDPtr : public QSharedData
{
public:
    QString mRootItemId;
    QString mRootItemChangeKey;
};

void T__AttachmentIdType::setRootItemId( const QString& rootItemId )
{
    d_ptr->mRootItemId = rootItemId;
}

QString T__AttachmentIdType::rootItemId() const
{
    return d_ptr->mRootItemId;
}

void T__AttachmentIdType::setRootItemChangeKey( const QString& rootItemChangeKey )
{
    d_ptr->mRootItemChangeKey = rootItemChangeKey;
}

QString T__AttachmentIdType::rootItemChangeKey() const
{
    return d_ptr->mRootItemChangeKey;
}

KDSoapValue T__AttachmentIdType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RequestAttachmentIdType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AttachmentIdType"));
    KDSoapValueList attribs;
    KDSoapValue _valueRootItemId(QString::fromLatin1("RootItemId"), QVariant::fromValue(d_ptr->mRootItemId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueRootItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueRootItemId.isNil())
    attribs.append(_valueRootItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRootItemChangeKey(QString::fromLatin1("RootItemChangeKey"), QVariant::fromValue(d_ptr->mRootItemChangeKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueRootItemChangeKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueRootItemChangeKey.isNil())
    attribs.append(_valueRootItemChangeKey);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__AttachmentIdType::deserialize( const KDSoapValue& mainValue )
{
    T__RequestAttachmentIdType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("RootItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRootItemId = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("RootItemChangeKey")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRootItemChangeKey = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__AttachmentIdType::T__AttachmentIdType()
    : d_ptr(new PrivateDPtr)
{
}

T__AttachmentIdType::~T__AttachmentIdType()
{
}

T__AttachmentIdType::T__AttachmentIdType( const T__AttachmentIdType& other )
    : T__RequestAttachmentIdType( other ), d_ptr( other.d_ptr )
{
}

T__AttachmentIdType&  T__AttachmentIdType::operator=( const T__AttachmentIdType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__RequestAttachmentIdType *>(this) = other;

    return *this;
}


KDSoapValue TNS__ConvertIdResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("ConvertIdResponseType"));
    return mainValue;
}

void TNS__ConvertIdResponseType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__ConvertIdResponseType::TNS__ConvertIdResponseType()
{
}

TNS__ConvertIdResponseType::~TNS__ConvertIdResponseType()
{
}


class T__AbsoluteYearlyRecurrencePatternType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mDayOfMonth;
    T__MonthNamesType mMonth;
};

T__AbsoluteYearlyRecurrencePatternType::PrivateDPtr::PrivateDPtr()
    : mDayOfMonth(0)
{
}


void T__AbsoluteYearlyRecurrencePatternType::setDayOfMonth( int dayOfMonth )
{
    d_ptr->mDayOfMonth = dayOfMonth;
}

int T__AbsoluteYearlyRecurrencePatternType::dayOfMonth() const
{
    return d_ptr->mDayOfMonth;
}

void T__AbsoluteYearlyRecurrencePatternType::setMonth( const T__MonthNamesType& month )
{
    d_ptr->mMonth = month;
}

T__MonthNamesType T__AbsoluteYearlyRecurrencePatternType::month() const
{
    return d_ptr->mMonth;
}

KDSoapValue T__AbsoluteYearlyRecurrencePatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RecurrencePatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AbsoluteYearlyRecurrencePatternType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDayOfMonth(QString::fromLatin1("DayOfMonth"), QVariant::fromValue(d_ptr->mDayOfMonth), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDayOfMonth.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDayOfMonth.setQualified(true);
    if (!_valueDayOfMonth.isNil())
    args.append(_valueDayOfMonth);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMonth(QString::fromLatin1("Month"), d_ptr->mMonth.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MonthNamesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMonth.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMonth.setQualified(true);
    if (!_valueMonth.isNil())
    args.append(_valueMonth);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__AbsoluteYearlyRecurrencePatternType::deserialize( const KDSoapValue& mainValue )
{
    T__RecurrencePatternBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DayOfMonth")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDayOfMonth = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Month")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMonth.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__AbsoluteYearlyRecurrencePatternType::T__AbsoluteYearlyRecurrencePatternType()
    : d_ptr(new PrivateDPtr)
{
}

T__AbsoluteYearlyRecurrencePatternType::~T__AbsoluteYearlyRecurrencePatternType()
{
}

T__AbsoluteYearlyRecurrencePatternType::T__AbsoluteYearlyRecurrencePatternType( const T__AbsoluteYearlyRecurrencePatternType& other )
    : T__RecurrencePatternBaseType( other ), d_ptr( other.d_ptr )
{
}

T__AbsoluteYearlyRecurrencePatternType&  T__AbsoluteYearlyRecurrencePatternType::operator=( const T__AbsoluteYearlyRecurrencePatternType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__RecurrencePatternBaseType *>(this) = other;

    return *this;
}


ResolveNamesJob::ResolveNamesJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultResolveNamesResult()
{
}

void ResolveNamesJob::setRequest( const TNS__ResolveNamesType& arg0 )
{
    mRequest = arg0;
}

TNS__ResolveNamesType ResolveNamesJob::request() const
{
    return mRequest;
}

void ResolveNamesJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ResolveNames");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueResolveNames(mRequest.serialize(QString::fromLatin1("ResolveNames")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResolveNames.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResolveNames.setQualified(true);
    message = _valueResolveNames;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("ResolveNames"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ResolveNamesResponseType ResolveNamesJob::resolveNamesResult() const
{
    return mResultResolveNamesResult;
}

T__ServerVersionInfo ResolveNamesJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void ResolveNamesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultResolveNamesResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


ExpandDLJob::ExpandDLJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultExpandDLResult()
{
}

void ExpandDLJob::setRequest( const TNS__ExpandDLType& arg0 )
{
    mRequest = arg0;
}

TNS__ExpandDLType ExpandDLJob::request() const
{
    return mRequest;
}

void ExpandDLJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ExpandDL");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueExpandDL(mRequest.serialize(QString::fromLatin1("ExpandDL")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueExpandDL.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueExpandDL.setQualified(true);
    message = _valueExpandDL;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("ExpandDL"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ExpandDLResponseType ExpandDLJob::expandDLResult() const
{
    return mResultExpandDLResult;
}

T__ServerVersionInfo ExpandDLJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void ExpandDLJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultExpandDLResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


FindFolderJob::FindFolderJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultFindFolderResult()
{
}

void FindFolderJob::setRequest( const TNS__FindFolderType& arg0 )
{
    mRequest = arg0;
}

TNS__FindFolderType FindFolderJob::request() const
{
    return mRequest;
}

void FindFolderJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/FindFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueFindFolder(mRequest.serialize(QString::fromLatin1("FindFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFindFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFindFolder.setQualified(true);
    message = _valueFindFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("FindFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__FindFolderResponseType FindFolderJob::findFolderResult() const
{
    return mResultFindFolderResult;
}

T__ServerVersionInfo FindFolderJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void FindFolderJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultFindFolderResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


FindItemJob::FindItemJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultFindItemResult()
{
}

void FindItemJob::setRequest( const TNS__FindItemType& arg0 )
{
    mRequest = arg0;
}

TNS__FindItemType FindItemJob::request() const
{
    return mRequest;
}

void FindItemJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/FindItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueFindItem(mRequest.serialize(QString::fromLatin1("FindItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFindItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFindItem.setQualified(true);
    message = _valueFindItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("FindItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__FindItemResponseType FindItemJob::findItemResult() const
{
    return mResultFindItemResult;
}

T__ServerVersionInfo FindItemJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void FindItemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultFindItemResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


GetFolderJob::GetFolderJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultGetFolderResult()
{
}

void GetFolderJob::setRequest( const TNS__GetFolderType& arg0 )
{
    mRequest = arg0;
}

TNS__GetFolderType GetFolderJob::request() const
{
    return mRequest;
}

void GetFolderJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetFolder(mRequest.serialize(QString::fromLatin1("GetFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetFolder.setQualified(true);
    message = _valueGetFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetFolderResponseType GetFolderJob::getFolderResult() const
{
    return mResultGetFolderResult;
}

T__ServerVersionInfo GetFolderJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void GetFolderJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultGetFolderResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


ConvertIdJob::ConvertIdJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultConvertIdResult()
{
}

void ConvertIdJob::setRequest( const TNS__ConvertIdType& arg0 )
{
    mRequest = arg0;
}

TNS__ConvertIdType ConvertIdJob::request() const
{
    return mRequest;
}

void ConvertIdJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ConvertId");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueConvertId(mRequest.serialize(QString::fromLatin1("ConvertId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConvertId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueConvertId.setQualified(true);
    message = _valueConvertId;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("ConvertId"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ConvertIdResponseType ConvertIdJob::convertIdResult() const
{
    return mResultConvertIdResult;
}

T__ServerVersionInfo ConvertIdJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void ConvertIdJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultConvertIdResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


CreateFolderJob::CreateFolderJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultCreateFolderResult()
{
}

void CreateFolderJob::setRequest( const TNS__CreateFolderType& arg0 )
{
    mRequest = arg0;
}

TNS__CreateFolderType CreateFolderJob::request() const
{
    return mRequest;
}

void CreateFolderJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateFolder(mRequest.serialize(QString::fromLatin1("CreateFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateFolder.setQualified(true);
    message = _valueCreateFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__CreateFolderResponseType CreateFolderJob::createFolderResult() const
{
    return mResultCreateFolderResult;
}

T__ServerVersionInfo CreateFolderJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void CreateFolderJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultCreateFolderResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


DeleteFolderJob::DeleteFolderJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultDeleteFolderResult()
{
}

void DeleteFolderJob::setRequest( const TNS__DeleteFolderType& arg0 )
{
    mRequest = arg0;
}

TNS__DeleteFolderType DeleteFolderJob::request() const
{
    return mRequest;
}

void DeleteFolderJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteFolder(mRequest.serialize(QString::fromLatin1("DeleteFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteFolder.setQualified(true);
    message = _valueDeleteFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("DeleteFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__DeleteFolderResponseType DeleteFolderJob::deleteFolderResult() const
{
    return mResultDeleteFolderResult;
}

T__ServerVersionInfo DeleteFolderJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void DeleteFolderJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultDeleteFolderResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


UpdateFolderJob::UpdateFolderJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultUpdateFolderResult()
{
}

void UpdateFolderJob::setRequest( const TNS__UpdateFolderType& arg0 )
{
    mRequest = arg0;
}

TNS__UpdateFolderType UpdateFolderJob::request() const
{
    return mRequest;
}

void UpdateFolderJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateFolder(mRequest.serialize(QString::fromLatin1("UpdateFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateFolder.setQualified(true);
    message = _valueUpdateFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("UpdateFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__UpdateFolderResponseType UpdateFolderJob::updateFolderResult() const
{
    return mResultUpdateFolderResult;
}

T__ServerVersionInfo UpdateFolderJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void UpdateFolderJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultUpdateFolderResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


CopyFolderJob::CopyFolderJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultCopyFolderResult()
{
}

void CopyFolderJob::setRequest( const TNS__CopyFolderType& arg0 )
{
    mRequest = arg0;
}

TNS__CopyFolderType CopyFolderJob::request() const
{
    return mRequest;
}

void CopyFolderJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CopyFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCopyFolder(mRequest.serialize(QString::fromLatin1("CopyFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCopyFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCopyFolder.setQualified(true);
    message = _valueCopyFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CopyFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__CopyFolderResponseType CopyFolderJob::copyFolderResult() const
{
    return mResultCopyFolderResult;
}

T__ServerVersionInfo CopyFolderJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void CopyFolderJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultCopyFolderResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


SubscribeJob::SubscribeJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultSubscribeResult()
{
}

void SubscribeJob::setRequest( const TNS__SubscribeType& arg0 )
{
    mRequest = arg0;
}

TNS__SubscribeType SubscribeJob::request() const
{
    return mRequest;
}

void SubscribeJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/Subscribe");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSubscribe(mRequest.serialize(QString::fromLatin1("Subscribe")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSubscribe.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSubscribe.setQualified(true);
    message = _valueSubscribe;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("Subscribe"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SubscribeResponseType SubscribeJob::subscribeResult() const
{
    return mResultSubscribeResult;
}

T__ServerVersionInfo SubscribeJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void SubscribeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultSubscribeResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


UnsubscribeJob::UnsubscribeJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultUnsubscribeResult()
{
}

void UnsubscribeJob::setRequest( const TNS__UnsubscribeType& arg0 )
{
    mRequest = arg0;
}

TNS__UnsubscribeType UnsubscribeJob::request() const
{
    return mRequest;
}

void UnsubscribeJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/Unsubscribe");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUnsubscribe(mRequest.serialize(QString::fromLatin1("Unsubscribe")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUnsubscribe.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUnsubscribe.setQualified(true);
    message = _valueUnsubscribe;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("Unsubscribe"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__UnsubscribeResponseType UnsubscribeJob::unsubscribeResult() const
{
    return mResultUnsubscribeResult;
}

T__ServerVersionInfo UnsubscribeJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void UnsubscribeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultUnsubscribeResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


GetEventsJob::GetEventsJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultGetEventsResult()
{
}

void GetEventsJob::setRequest( const TNS__GetEventsType& arg0 )
{
    mRequest = arg0;
}

TNS__GetEventsType GetEventsJob::request() const
{
    return mRequest;
}

void GetEventsJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetEvents");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetEvents(mRequest.serialize(QString::fromLatin1("GetEvents")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetEvents.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetEvents.setQualified(true);
    message = _valueGetEvents;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetEvents"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetEventsResponseType GetEventsJob::getEventsResult() const
{
    return mResultGetEventsResult;
}

T__ServerVersionInfo GetEventsJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void GetEventsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultGetEventsResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


SyncFolderHierarchyJob::SyncFolderHierarchyJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultSyncFolderHierarchyResult()
{
}

void SyncFolderHierarchyJob::setRequest( const TNS__SyncFolderHierarchyType& arg0 )
{
    mRequest = arg0;
}

TNS__SyncFolderHierarchyType SyncFolderHierarchyJob::request() const
{
    return mRequest;
}

void SyncFolderHierarchyJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderHierarchy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSyncFolderHierarchy(mRequest.serialize(QString::fromLatin1("SyncFolderHierarchy")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSyncFolderHierarchy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncFolderHierarchy.setQualified(true);
    message = _valueSyncFolderHierarchy;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SyncFolderHierarchy"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SyncFolderHierarchyResponseType SyncFolderHierarchyJob::syncFolderHierarchyResult() const
{
    return mResultSyncFolderHierarchyResult;
}

T__ServerVersionInfo SyncFolderHierarchyJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void SyncFolderHierarchyJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultSyncFolderHierarchyResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


SyncFolderItemsJob::SyncFolderItemsJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultSyncFolderItemsResult()
{
}

void SyncFolderItemsJob::setRequest( const TNS__SyncFolderItemsType& arg0 )
{
    mRequest = arg0;
}

TNS__SyncFolderItemsType SyncFolderItemsJob::request() const
{
    return mRequest;
}

void SyncFolderItemsJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderItems");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSyncFolderItems(mRequest.serialize(QString::fromLatin1("SyncFolderItems")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSyncFolderItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncFolderItems.setQualified(true);
    message = _valueSyncFolderItems;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SyncFolderItems"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SyncFolderItemsResponseType SyncFolderItemsJob::syncFolderItemsResult() const
{
    return mResultSyncFolderItemsResult;
}

T__ServerVersionInfo SyncFolderItemsJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void SyncFolderItemsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultSyncFolderItemsResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


CreateManagedFolderJob::CreateManagedFolderJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultCreateManagedFolderResult()
{
}

void CreateManagedFolderJob::setRequest( const TNS__CreateManagedFolderRequestType& arg0 )
{
    mRequest = arg0;
}

TNS__CreateManagedFolderRequestType CreateManagedFolderJob::request() const
{
    return mRequest;
}

void CreateManagedFolderJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateManagedFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateManagedFolder(mRequest.serialize(QString::fromLatin1("CreateManagedFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateManagedFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateManagedFolder.setQualified(true);
    message = _valueCreateManagedFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateManagedFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__CreateManagedFolderResponseType CreateManagedFolderJob::createManagedFolderResult() const
{
    return mResultCreateManagedFolderResult;
}

T__ServerVersionInfo CreateManagedFolderJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void CreateManagedFolderJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultCreateManagedFolderResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


GetItemJob::GetItemJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultGetItemResult()
{
}

void GetItemJob::setRequest( const TNS__GetItemType& arg0 )
{
    mRequest = arg0;
}

TNS__GetItemType GetItemJob::request() const
{
    return mRequest;
}

void GetItemJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetItem(mRequest.serialize(QString::fromLatin1("GetItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetItem.setQualified(true);
    message = _valueGetItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetItemResponseType GetItemJob::getItemResult() const
{
    return mResultGetItemResult;
}

T__ServerVersionInfo GetItemJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void GetItemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultGetItemResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


CreateItemJob::CreateItemJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultCreateItemResult()
{
}

void CreateItemJob::setRequest( const TNS__CreateItemType& arg0 )
{
    mRequest = arg0;
}

TNS__CreateItemType CreateItemJob::request() const
{
    return mRequest;
}

void CreateItemJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateItem(mRequest.serialize(QString::fromLatin1("CreateItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateItem.setQualified(true);
    message = _valueCreateItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__CreateItemResponseType CreateItemJob::createItemResult() const
{
    return mResultCreateItemResult;
}

T__ServerVersionInfo CreateItemJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void CreateItemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultCreateItemResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


DeleteItemJob::DeleteItemJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultDeleteItemResult()
{
}

void DeleteItemJob::setRequest( const TNS__DeleteItemType& arg0 )
{
    mRequest = arg0;
}

TNS__DeleteItemType DeleteItemJob::request() const
{
    return mRequest;
}

void DeleteItemJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteItem(mRequest.serialize(QString::fromLatin1("DeleteItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteItem.setQualified(true);
    message = _valueDeleteItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("DeleteItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__DeleteItemResponseType DeleteItemJob::deleteItemResult() const
{
    return mResultDeleteItemResult;
}

T__ServerVersionInfo DeleteItemJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void DeleteItemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultDeleteItemResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


UpdateItemJob::UpdateItemJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultUpdateItemResult()
{
}

void UpdateItemJob::setRequest( const TNS__UpdateItemType& arg0 )
{
    mRequest = arg0;
}

TNS__UpdateItemType UpdateItemJob::request() const
{
    return mRequest;
}

void UpdateItemJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateItem(mRequest.serialize(QString::fromLatin1("UpdateItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateItem.setQualified(true);
    message = _valueUpdateItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("UpdateItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__UpdateItemResponseType UpdateItemJob::updateItemResult() const
{
    return mResultUpdateItemResult;
}

T__ServerVersionInfo UpdateItemJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void UpdateItemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultUpdateItemResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


SendItemJob::SendItemJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultSendItemResult()
{
}

void SendItemJob::setRequest( const TNS__SendItemType& arg0 )
{
    mRequest = arg0;
}

TNS__SendItemType SendItemJob::request() const
{
    return mRequest;
}

void SendItemJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SendItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendItem(mRequest.serialize(QString::fromLatin1("SendItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSendItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSendItem.setQualified(true);
    message = _valueSendItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SendItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SendItemResponseType SendItemJob::sendItemResult() const
{
    return mResultSendItemResult;
}

T__ServerVersionInfo SendItemJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void SendItemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultSendItemResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


CreateAttachmentJob::CreateAttachmentJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultCreateAttachmentResult()
{
}

void CreateAttachmentJob::setRequest( const TNS__CreateAttachmentType& arg0 )
{
    mRequest = arg0;
}

TNS__CreateAttachmentType CreateAttachmentJob::request() const
{
    return mRequest;
}

void CreateAttachmentJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateAttachment(mRequest.serialize(QString::fromLatin1("CreateAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateAttachment.setQualified(true);
    message = _valueCreateAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateAttachment"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__CreateAttachmentResponseType CreateAttachmentJob::createAttachmentResult() const
{
    return mResultCreateAttachmentResult;
}

T__ServerVersionInfo CreateAttachmentJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void CreateAttachmentJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultCreateAttachmentResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


DeleteAttachmentJob::DeleteAttachmentJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultDeleteAttachmentResult()
{
}

void DeleteAttachmentJob::setRequest( const TNS__DeleteAttachmentType& arg0 )
{
    mRequest = arg0;
}

TNS__DeleteAttachmentType DeleteAttachmentJob::request() const
{
    return mRequest;
}

void DeleteAttachmentJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteAttachment(mRequest.serialize(QString::fromLatin1("DeleteAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteAttachment.setQualified(true);
    message = _valueDeleteAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("DeleteAttachment"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__DeleteAttachmentResponseType DeleteAttachmentJob::deleteAttachmentResult() const
{
    return mResultDeleteAttachmentResult;
}

T__ServerVersionInfo DeleteAttachmentJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void DeleteAttachmentJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultDeleteAttachmentResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


GetAttachmentJob::GetAttachmentJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultGetAttachmentResult()
{
}

void GetAttachmentJob::setRequest( const TNS__GetAttachmentType& arg0 )
{
    mRequest = arg0;
}

TNS__GetAttachmentType GetAttachmentJob::request() const
{
    return mRequest;
}

void GetAttachmentJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetAttachment(mRequest.serialize(QString::fromLatin1("GetAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetAttachment.setQualified(true);
    message = _valueGetAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetAttachment"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetAttachmentResponseType GetAttachmentJob::getAttachmentResult() const
{
    return mResultGetAttachmentResult;
}

T__ServerVersionInfo GetAttachmentJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void GetAttachmentJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultGetAttachmentResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


RemoveDelegateJob::RemoveDelegateJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultRemoveDelegateResult()
{
}

void RemoveDelegateJob::setRequest( const TNS__RemoveDelegateType& arg0 )
{
    mRequest = arg0;
}

TNS__RemoveDelegateType RemoveDelegateJob::request() const
{
    return mRequest;
}

void RemoveDelegateJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/RemoveDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveDelegate(mRequest.serialize(QString::fromLatin1("RemoveDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRemoveDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueRemoveDelegate.setQualified(true);
    message = _valueRemoveDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("RemoveDelegate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__RemoveDelegateResponseMessageType RemoveDelegateJob::removeDelegateResult() const
{
    return mResultRemoveDelegateResult;
}

T__ServerVersionInfo RemoveDelegateJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void RemoveDelegateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultRemoveDelegateResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


UpdateDelegateJob::UpdateDelegateJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultUpdateDelegateResult()
{
}

void UpdateDelegateJob::setRequest( const TNS__UpdateDelegateType& arg0 )
{
    mRequest = arg0;
}

TNS__UpdateDelegateType UpdateDelegateJob::request() const
{
    return mRequest;
}

void UpdateDelegateJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateDelegate(mRequest.serialize(QString::fromLatin1("UpdateDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateDelegate.setQualified(true);
    message = _valueUpdateDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("UpdateDelegate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__UpdateDelegateResponseMessageType UpdateDelegateJob::updateDelegateResult() const
{
    return mResultUpdateDelegateResult;
}

T__ServerVersionInfo UpdateDelegateJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void UpdateDelegateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultUpdateDelegateResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


GetUserAvailabilityJob::GetUserAvailabilityJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mGetUserAvailabilityRequest(), mResultGetUserAvailabilityResult()
{
}

void GetUserAvailabilityJob::setGetUserAvailabilityRequest( const TNS__GetUserAvailabilityRequestType& arg0 )
{
    mGetUserAvailabilityRequest = arg0;
}

TNS__GetUserAvailabilityRequestType GetUserAvailabilityJob::getUserAvailabilityRequest() const
{
    return mGetUserAvailabilityRequest;
}

void GetUserAvailabilityJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetUserAvailability");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUserAvailabilityRequest(mGetUserAvailabilityRequest.serialize(QString::fromLatin1("GetUserAvailabilityRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetUserAvailabilityRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetUserAvailabilityRequest.setQualified(true);
    message = _valueGetUserAvailabilityRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetUserAvailability"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetUserAvailabilityResponseType GetUserAvailabilityJob::getUserAvailabilityResult() const
{
    return mResultGetUserAvailabilityResult;
}

T__ServerVersionInfo GetUserAvailabilityJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void GetUserAvailabilityJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultGetUserAvailabilityResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


GetUserOofSettingsJob::GetUserOofSettingsJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mGetUserOofSettingsRequest(), mResultGetUserOofSettingsResult()
{
}

void GetUserOofSettingsJob::setGetUserOofSettingsRequest( const TNS__GetUserOofSettingsRequest& arg0 )
{
    mGetUserOofSettingsRequest = arg0;
}

TNS__GetUserOofSettingsRequest GetUserOofSettingsJob::getUserOofSettingsRequest() const
{
    return mGetUserOofSettingsRequest;
}

void GetUserOofSettingsJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetUserOofSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUserOofSettingsRequest(mGetUserOofSettingsRequest.serialize(QString::fromLatin1("GetUserOofSettingsRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetUserOofSettingsRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetUserOofSettingsRequest.setQualified(true);
    message = _valueGetUserOofSettingsRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetUserOofSettings"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetUserOofSettingsResponse GetUserOofSettingsJob::getUserOofSettingsResult() const
{
    return mResultGetUserOofSettingsResult;
}

T__ServerVersionInfo GetUserOofSettingsJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void GetUserOofSettingsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultGetUserOofSettingsResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


SetUserOofSettingsJob::SetUserOofSettingsJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mSetUserOofSettingsRequest(), mResultSetUserOofSettingsResult()
{
}

void SetUserOofSettingsJob::setSetUserOofSettingsRequest( const TNS__SetUserOofSettingsRequest& arg0 )
{
    mSetUserOofSettingsRequest = arg0;
}

TNS__SetUserOofSettingsRequest SetUserOofSettingsJob::setUserOofSettingsRequest() const
{
    return mSetUserOofSettingsRequest;
}

void SetUserOofSettingsJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SetUserOofSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetUserOofSettingsRequest(mSetUserOofSettingsRequest.serialize(QString::fromLatin1("SetUserOofSettingsRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSetUserOofSettingsRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSetUserOofSettingsRequest.setQualified(true);
    message = _valueSetUserOofSettingsRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetUserOofSettings"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SetUserOofSettingsResponse SetUserOofSettingsJob::setUserOofSettingsResult() const
{
    return mResultSetUserOofSettingsResult;
}

T__ServerVersionInfo SetUserOofSettingsJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void SetUserOofSettingsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultSetUserOofSettingsResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


KDSoapValue T__DeleteFolderFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__FolderChangeDescriptionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DeleteFolderFieldType"));
    return mainValue;
}

void T__DeleteFolderFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__FolderChangeDescriptionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__DeleteFolderFieldType::T__DeleteFolderFieldType()
{
}

T__DeleteFolderFieldType::~T__DeleteFolderFieldType()
{
}


class T__PostReplyItemBaseType::PrivateDPtr : public QSharedData
{
public:
    QString mSubject;
    T__BodyType mBody;
    T__ItemIdType mReferenceItemId;
    QString mObjectName;
};

void T__PostReplyItemBaseType::setSubject( const QString& subject )
{
    d_ptr->mSubject = subject;
}

QString T__PostReplyItemBaseType::subject() const
{
    return d_ptr->mSubject;
}

void T__PostReplyItemBaseType::setBody( const T__BodyType& body )
{
    d_ptr->mBody = body;
}

T__BodyType T__PostReplyItemBaseType::body() const
{
    return d_ptr->mBody;
}

void T__PostReplyItemBaseType::setReferenceItemId( const T__ItemIdType& referenceItemId )
{
    d_ptr->mReferenceItemId = referenceItemId;
}

T__ItemIdType T__PostReplyItemBaseType::referenceItemId() const
{
    return d_ptr->mReferenceItemId;
}

void T__PostReplyItemBaseType::setObjectName( const QString& objectName )
{
    d_ptr->mObjectName = objectName;
}

QString T__PostReplyItemBaseType::objectName() const
{
    return d_ptr->mObjectName;
}

KDSoapValue T__PostReplyItemBaseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ResponseObjectType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PostReplyItemBaseType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSubject(QString::fromLatin1("Subject"), QVariant::fromValue(d_ptr->mSubject), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueSubject.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSubject.setQualified(true);
    if (!_valueSubject.isNil())
    args.append(_valueSubject);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBody(d_ptr->mBody.serialize(QString::fromLatin1("Body")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBody.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBody.setQualified(true);
    if (!_valueBody.isNil())
    args.append(_valueBody);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReferenceItemId(d_ptr->mReferenceItemId.serialize(QString::fromLatin1("ReferenceItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueReferenceItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReferenceItemId.setQualified(true);
    if (!_valueReferenceItemId.isNil())
    args.append(_valueReferenceItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueObjectName(QString::fromLatin1("ObjectName"), QVariant::fromValue(d_ptr->mObjectName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueObjectName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueObjectName.isNil())
    attribs.append(_valueObjectName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__PostReplyItemBaseType::deserialize( const KDSoapValue& mainValue )
{
    T__ResponseObjectType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Subject")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSubject = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Body")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBody.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ReferenceItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReferenceItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ObjectName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mObjectName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__PostReplyItemBaseType::T__PostReplyItemBaseType()
    : d_ptr(new PrivateDPtr)
{
}

T__PostReplyItemBaseType::~T__PostReplyItemBaseType()
{
}

T__PostReplyItemBaseType::T__PostReplyItemBaseType( const T__PostReplyItemBaseType& other )
    : T__ResponseObjectType( other ), d_ptr( other.d_ptr )
{
}

T__PostReplyItemBaseType&  T__PostReplyItemBaseType::operator=( const T__PostReplyItemBaseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ResponseObjectType *>(this) = other;

    return *this;
}


KDSoapValue T__ForwardItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SmartResponseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ForwardItemType"));
    return mainValue;
}

void T__ForwardItemType::deserialize( const KDSoapValue& mainValue )
{
    T__SmartResponseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__ForwardItemType::T__ForwardItemType()
{
}

T__ForwardItemType::~T__ForwardItemType()
{
}


KDSoapValue T__DailyRecurrencePatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__IntervalRecurrencePatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DailyRecurrencePatternType"));
    return mainValue;
}

void T__DailyRecurrencePatternType::deserialize( const KDSoapValue& mainValue )
{
    T__IntervalRecurrencePatternBaseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__DailyRecurrencePatternType::T__DailyRecurrencePatternType()
{
}

T__DailyRecurrencePatternType::~T__DailyRecurrencePatternType()
{
}


class TNS__UpdateItemResponseMessageType::PrivateDPtr : public QSharedData
{
public:
    T__ConflictResultsType mConflictResults;
};

void TNS__UpdateItemResponseMessageType::setConflictResults( const T__ConflictResultsType& conflictResults )
{
    d_ptr->mConflictResults = conflictResults;
}

T__ConflictResultsType TNS__UpdateItemResponseMessageType::conflictResults() const
{
    return d_ptr->mConflictResults;
}

KDSoapValue TNS__UpdateItemResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__ItemInfoResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("UpdateItemResponseMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueConflictResults(d_ptr->mConflictResults.serialize(QString::fromLatin1("ConflictResults")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConflictResults.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueConflictResults.setQualified(true);
    if (!_valueConflictResults.isNil())
    args.append(_valueConflictResults);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void TNS__UpdateItemResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__ItemInfoResponseMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ConflictResults")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConflictResults.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

TNS__UpdateItemResponseMessageType::TNS__UpdateItemResponseMessageType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__UpdateItemResponseMessageType::~TNS__UpdateItemResponseMessageType()
{
}

TNS__UpdateItemResponseMessageType::TNS__UpdateItemResponseMessageType( const TNS__UpdateItemResponseMessageType& other )
    : TNS__ItemInfoResponseMessageType( other ), d_ptr( other.d_ptr )
{
}

TNS__UpdateItemResponseMessageType&  TNS__UpdateItemResponseMessageType::operator=( const TNS__UpdateItemResponseMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__ItemInfoResponseMessageType *>(this) = other;

    return *this;
}


class T__SearchFolderType::PrivateDPtr : public QSharedData
{
public:
    T__SearchParametersType mSearchParameters;
};

void T__SearchFolderType::setSearchParameters( const T__SearchParametersType& searchParameters )
{
    d_ptr->mSearchParameters = searchParameters;
}

T__SearchParametersType T__SearchFolderType::searchParameters() const
{
    return d_ptr->mSearchParameters;
}

KDSoapValue T__SearchFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__FolderType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SearchFolderType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueSearchParameters(d_ptr->mSearchParameters.serialize(QString::fromLatin1("SearchParameters")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSearchParameters.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSearchParameters.setQualified(true);
    if (!_valueSearchParameters.isNil())
    args.append(_valueSearchParameters);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SearchFolderType::deserialize( const KDSoapValue& mainValue )
{
    T__FolderType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SearchParameters")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSearchParameters.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SearchFolderType::T__SearchFolderType()
    : d_ptr(new PrivateDPtr)
{
}

T__SearchFolderType::~T__SearchFolderType()
{
}

T__SearchFolderType::T__SearchFolderType( const T__SearchFolderType& other )
    : T__FolderType( other ), d_ptr( other.d_ptr )
{
}

T__SearchFolderType&  T__SearchFolderType::operator=( const T__SearchFolderType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__FolderType *>(this) = other;

    return *this;
}


KDSoapValue TNS__MoveItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseMoveCopyItemType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("MoveItemType"));
    return mainValue;
}

void TNS__MoveItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseMoveCopyItemType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__MoveItemType::TNS__MoveItemType()
{
}

TNS__MoveItemType::~TNS__MoveItemType()
{
}


KDSoapValue T__RegeneratingPatternBaseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__IntervalRecurrencePatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("RegeneratingPatternBaseType"));
    return mainValue;
}

void T__RegeneratingPatternBaseType::deserialize( const KDSoapValue& mainValue )
{
    T__IntervalRecurrencePatternBaseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__RegeneratingPatternBaseType::T__RegeneratingPatternBaseType()
{
}

T__RegeneratingPatternBaseType::~T__RegeneratingPatternBaseType()
{
}


KDSoapValue TNS__AddDelegateResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseDelegateResponseMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("AddDelegateResponseMessageType"));
    return mainValue;
}

void TNS__AddDelegateResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseDelegateResponseMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__AddDelegateResponseMessageType::TNS__AddDelegateResponseMessageType()
{
}

TNS__AddDelegateResponseMessageType::~TNS__AddDelegateResponseMessageType()
{
}


KDSoapValue T__SuppressReadReceiptType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ReferenceItemResponseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SuppressReadReceiptType"));
    return mainValue;
}

void T__SuppressReadReceiptType::deserialize( const KDSoapValue& mainValue )
{
    T__ReferenceItemResponseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__SuppressReadReceiptType::T__SuppressReadReceiptType()
{
}

T__SuppressReadReceiptType::~T__SuppressReadReceiptType()
{
}


class T__SetItemFieldType::PrivateDPtr : public QSharedData
{
public:
    T__ItemType mItem;
    T__MessageType mMessage;
    T__CalendarItemType mCalendarItem;
    T__ContactItemType mContact;
    T__DistributionListType mDistributionList;
    T__MeetingMessageType mMeetingMessage;
    T__MeetingRequestMessageType mMeetingRequest;
    T__MeetingResponseMessageType mMeetingResponse;
    T__MeetingCancellationMessageType mMeetingCancellation;
    T__TaskType mTask;
    T__PostItemType mPostItem;
};

void T__SetItemFieldType::setItem( const T__ItemType& item )
{
    d_ptr->mItem = item;
}

T__ItemType T__SetItemFieldType::item() const
{
    return d_ptr->mItem;
}

void T__SetItemFieldType::setMessage( const T__MessageType& message )
{
    d_ptr->mMessage = message;
}

T__MessageType T__SetItemFieldType::message() const
{
    return d_ptr->mMessage;
}

void T__SetItemFieldType::setCalendarItem( const T__CalendarItemType& calendarItem )
{
    d_ptr->mCalendarItem = calendarItem;
}

T__CalendarItemType T__SetItemFieldType::calendarItem() const
{
    return d_ptr->mCalendarItem;
}

void T__SetItemFieldType::setContact( const T__ContactItemType& contact )
{
    d_ptr->mContact = contact;
}

T__ContactItemType T__SetItemFieldType::contact() const
{
    return d_ptr->mContact;
}

void T__SetItemFieldType::setDistributionList( const T__DistributionListType& distributionList )
{
    d_ptr->mDistributionList = distributionList;
}

T__DistributionListType T__SetItemFieldType::distributionList() const
{
    return d_ptr->mDistributionList;
}

void T__SetItemFieldType::setMeetingMessage( const T__MeetingMessageType& meetingMessage )
{
    d_ptr->mMeetingMessage = meetingMessage;
}

T__MeetingMessageType T__SetItemFieldType::meetingMessage() const
{
    return d_ptr->mMeetingMessage;
}

void T__SetItemFieldType::setMeetingRequest( const T__MeetingRequestMessageType& meetingRequest )
{
    d_ptr->mMeetingRequest = meetingRequest;
}

T__MeetingRequestMessageType T__SetItemFieldType::meetingRequest() const
{
    return d_ptr->mMeetingRequest;
}

void T__SetItemFieldType::setMeetingResponse( const T__MeetingResponseMessageType& meetingResponse )
{
    d_ptr->mMeetingResponse = meetingResponse;
}

T__MeetingResponseMessageType T__SetItemFieldType::meetingResponse() const
{
    return d_ptr->mMeetingResponse;
}

void T__SetItemFieldType::setMeetingCancellation( const T__MeetingCancellationMessageType& meetingCancellation )
{
    d_ptr->mMeetingCancellation = meetingCancellation;
}

T__MeetingCancellationMessageType T__SetItemFieldType::meetingCancellation() const
{
    return d_ptr->mMeetingCancellation;
}

void T__SetItemFieldType::setTask( const T__TaskType& task )
{
    d_ptr->mTask = task;
}

T__TaskType T__SetItemFieldType::task() const
{
    return d_ptr->mTask;
}

void T__SetItemFieldType::setPostItem( const T__PostItemType& postItem )
{
    d_ptr->mPostItem = postItem;
}

T__PostItemType T__SetItemFieldType::postItem() const
{
    return d_ptr->mPostItem;
}

KDSoapValue T__SetItemFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemChangeDescriptionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SetItemFieldType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItem(d_ptr->mItem.serialize(QString::fromLatin1("Item")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItem.setQualified(true);
    if (!_valueItem.isNil())
    args.append(_valueItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMessage(d_ptr->mMessage.serialize(QString::fromLatin1("Message")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMessage.setQualified(true);
    if (!_valueMessage.isNil())
    args.append(_valueMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarItem(d_ptr->mCalendarItem.serialize(QString::fromLatin1("CalendarItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarItem.setQualified(true);
    if (!_valueCalendarItem.isNil())
    args.append(_valueCalendarItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContact(d_ptr->mContact.serialize(QString::fromLatin1("Contact")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContact.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContact.setQualified(true);
    if (!_valueContact.isNil())
    args.append(_valueContact);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDistributionList(d_ptr->mDistributionList.serialize(QString::fromLatin1("DistributionList")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDistributionList.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDistributionList.setQualified(true);
    if (!_valueDistributionList.isNil())
    args.append(_valueDistributionList);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingMessage(d_ptr->mMeetingMessage.serialize(QString::fromLatin1("MeetingMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingMessage.setQualified(true);
    if (!_valueMeetingMessage.isNil())
    args.append(_valueMeetingMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingRequest(d_ptr->mMeetingRequest.serialize(QString::fromLatin1("MeetingRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingRequest.setQualified(true);
    if (!_valueMeetingRequest.isNil())
    args.append(_valueMeetingRequest);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingResponse(d_ptr->mMeetingResponse.serialize(QString::fromLatin1("MeetingResponse")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingResponse.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingResponse.setQualified(true);
    if (!_valueMeetingResponse.isNil())
    args.append(_valueMeetingResponse);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingCancellation(d_ptr->mMeetingCancellation.serialize(QString::fromLatin1("MeetingCancellation")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingCancellation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingCancellation.setQualified(true);
    if (!_valueMeetingCancellation.isNil())
    args.append(_valueMeetingCancellation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTask(d_ptr->mTask.serialize(QString::fromLatin1("Task")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTask.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTask.setQualified(true);
    if (!_valueTask.isNil())
    args.append(_valueTask);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePostItem(d_ptr->mPostItem.serialize(QString::fromLatin1("PostItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePostItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePostItem.setQualified(true);
    if (!_valuePostItem.isNil())
    args.append(_valuePostItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__SetItemFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemChangeDescriptionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Item")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Message")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CalendarItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Contact")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContact.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DistributionList")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDistributionList.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingRequest")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingRequest.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingResponse")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingResponse.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingCancellation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingCancellation.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Task")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTask.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("PostItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPostItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__SetItemFieldType::T__SetItemFieldType()
    : d_ptr(new PrivateDPtr)
{
}

T__SetItemFieldType::~T__SetItemFieldType()
{
}

T__SetItemFieldType::T__SetItemFieldType( const T__SetItemFieldType& other )
    : T__ItemChangeDescriptionType( other ), d_ptr( other.d_ptr )
{
}

T__SetItemFieldType&  T__SetItemFieldType::operator=( const T__SetItemFieldType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ItemChangeDescriptionType *>(this) = other;

    return *this;
}


class T__WellKnownResponseObjectType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__ItemClassType mItemClass;
    T__SensitivityChoicesType mSensitivity;
    T__BodyType mBody;
    T__NonEmptyArrayOfAttachmentsType mAttachments;
    T__NonEmptyArrayOfInternetHeadersType mInternetMessageHeaders;
    T__SingleRecipientType mSender;
    T__ArrayOfRecipientsType mToRecipients;
    T__ArrayOfRecipientsType mCcRecipients;
    T__ArrayOfRecipientsType mBccRecipients;
    bool mIsReadReceiptRequested;
    bool mIsDeliveryReceiptRequested;
    T__SingleRecipientType mFrom;
    T__ItemIdType mReferenceItemId;
    QString mObjectName;
};

T__WellKnownResponseObjectType::PrivateDPtr::PrivateDPtr()
    : mIsReadReceiptRequested(false), mIsDeliveryReceiptRequested(false)
{
}


void T__WellKnownResponseObjectType::setItemClass( const T__ItemClassType& itemClass )
{
    d_ptr->mItemClass = itemClass;
}

T__ItemClassType T__WellKnownResponseObjectType::itemClass() const
{
    return d_ptr->mItemClass;
}

void T__WellKnownResponseObjectType::setSensitivity( const T__SensitivityChoicesType& sensitivity )
{
    d_ptr->mSensitivity = sensitivity;
}

T__SensitivityChoicesType T__WellKnownResponseObjectType::sensitivity() const
{
    return d_ptr->mSensitivity;
}

void T__WellKnownResponseObjectType::setBody( const T__BodyType& body )
{
    d_ptr->mBody = body;
}

T__BodyType T__WellKnownResponseObjectType::body() const
{
    return d_ptr->mBody;
}

void T__WellKnownResponseObjectType::setAttachments( const T__NonEmptyArrayOfAttachmentsType& attachments )
{
    d_ptr->mAttachments = attachments;
}

T__NonEmptyArrayOfAttachmentsType T__WellKnownResponseObjectType::attachments() const
{
    return d_ptr->mAttachments;
}

void T__WellKnownResponseObjectType::setInternetMessageHeaders( const T__NonEmptyArrayOfInternetHeadersType& internetMessageHeaders )
{
    d_ptr->mInternetMessageHeaders = internetMessageHeaders;
}

T__NonEmptyArrayOfInternetHeadersType T__WellKnownResponseObjectType::internetMessageHeaders() const
{
    return d_ptr->mInternetMessageHeaders;
}

void T__WellKnownResponseObjectType::setSender( const T__SingleRecipientType& sender )
{
    d_ptr->mSender = sender;
}

T__SingleRecipientType T__WellKnownResponseObjectType::sender() const
{
    return d_ptr->mSender;
}

void T__WellKnownResponseObjectType::setToRecipients( const T__ArrayOfRecipientsType& toRecipients )
{
    d_ptr->mToRecipients = toRecipients;
}

T__ArrayOfRecipientsType T__WellKnownResponseObjectType::toRecipients() const
{
    return d_ptr->mToRecipients;
}

void T__WellKnownResponseObjectType::setCcRecipients( const T__ArrayOfRecipientsType& ccRecipients )
{
    d_ptr->mCcRecipients = ccRecipients;
}

T__ArrayOfRecipientsType T__WellKnownResponseObjectType::ccRecipients() const
{
    return d_ptr->mCcRecipients;
}

void T__WellKnownResponseObjectType::setBccRecipients( const T__ArrayOfRecipientsType& bccRecipients )
{
    d_ptr->mBccRecipients = bccRecipients;
}

T__ArrayOfRecipientsType T__WellKnownResponseObjectType::bccRecipients() const
{
    return d_ptr->mBccRecipients;
}

void T__WellKnownResponseObjectType::setIsReadReceiptRequested( bool isReadReceiptRequested )
{
    d_ptr->mIsReadReceiptRequested = isReadReceiptRequested;
}

bool T__WellKnownResponseObjectType::isReadReceiptRequested() const
{
    return d_ptr->mIsReadReceiptRequested;
}

void T__WellKnownResponseObjectType::setIsDeliveryReceiptRequested( bool isDeliveryReceiptRequested )
{
    d_ptr->mIsDeliveryReceiptRequested = isDeliveryReceiptRequested;
}

bool T__WellKnownResponseObjectType::isDeliveryReceiptRequested() const
{
    return d_ptr->mIsDeliveryReceiptRequested;
}

void T__WellKnownResponseObjectType::setFrom( const T__SingleRecipientType& from )
{
    d_ptr->mFrom = from;
}

T__SingleRecipientType T__WellKnownResponseObjectType::from() const
{
    return d_ptr->mFrom;
}

void T__WellKnownResponseObjectType::setReferenceItemId( const T__ItemIdType& referenceItemId )
{
    d_ptr->mReferenceItemId = referenceItemId;
}

T__ItemIdType T__WellKnownResponseObjectType::referenceItemId() const
{
    return d_ptr->mReferenceItemId;
}

void T__WellKnownResponseObjectType::setObjectName( const QString& objectName )
{
    d_ptr->mObjectName = objectName;
}

QString T__WellKnownResponseObjectType::objectName() const
{
    return d_ptr->mObjectName;
}

KDSoapValue T__WellKnownResponseObjectType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ResponseObjectType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WellKnownResponseObjectType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItemClass(QString::fromLatin1("ItemClass"), d_ptr->mItemClass.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ItemClassType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueItemClass.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItemClass.setQualified(true);
    if (!_valueItemClass.isNil())
    args.append(_valueItemClass);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSensitivity(QString::fromLatin1("Sensitivity"), d_ptr->mSensitivity.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("SensitivityChoicesType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueSensitivity.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSensitivity.setQualified(true);
    if (!_valueSensitivity.isNil())
    args.append(_valueSensitivity);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBody(d_ptr->mBody.serialize(QString::fromLatin1("Body")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBody.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBody.setQualified(true);
    if (!_valueBody.isNil())
    args.append(_valueBody);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAttachments(d_ptr->mAttachments.serialize(QString::fromLatin1("Attachments")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAttachments.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAttachments.setQualified(true);
    if (!_valueAttachments.isNil())
    args.append(_valueAttachments);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueInternetMessageHeaders(d_ptr->mInternetMessageHeaders.serialize(QString::fromLatin1("InternetMessageHeaders")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueInternetMessageHeaders.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueInternetMessageHeaders.setQualified(true);
    if (!_valueInternetMessageHeaders.isNil())
    args.append(_valueInternetMessageHeaders);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSender(d_ptr->mSender.serialize(QString::fromLatin1("Sender")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSender.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSender.setQualified(true);
    if (!_valueSender.isNil())
    args.append(_valueSender);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueToRecipients(d_ptr->mToRecipients.serialize(QString::fromLatin1("ToRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueToRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueToRecipients.setQualified(true);
    if (!_valueToRecipients.isNil())
    args.append(_valueToRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCcRecipients(d_ptr->mCcRecipients.serialize(QString::fromLatin1("CcRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCcRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCcRecipients.setQualified(true);
    if (!_valueCcRecipients.isNil())
    args.append(_valueCcRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueBccRecipients(d_ptr->mBccRecipients.serialize(QString::fromLatin1("BccRecipients")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueBccRecipients.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueBccRecipients.setQualified(true);
    if (!_valueBccRecipients.isNil())
    args.append(_valueBccRecipients);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsReadReceiptRequested(QString::fromLatin1("IsReadReceiptRequested"), QVariant::fromValue(d_ptr->mIsReadReceiptRequested), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsReadReceiptRequested.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsReadReceiptRequested.setQualified(true);
    if (!_valueIsReadReceiptRequested.isNil())
    args.append(_valueIsReadReceiptRequested);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsDeliveryReceiptRequested(QString::fromLatin1("IsDeliveryReceiptRequested"), QVariant::fromValue(d_ptr->mIsDeliveryReceiptRequested), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsDeliveryReceiptRequested.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsDeliveryReceiptRequested.setQualified(true);
    if (!_valueIsDeliveryReceiptRequested.isNil())
    args.append(_valueIsDeliveryReceiptRequested);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFrom(d_ptr->mFrom.serialize(QString::fromLatin1("From")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFrom.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFrom.setQualified(true);
    if (!_valueFrom.isNil())
    args.append(_valueFrom);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueReferenceItemId(d_ptr->mReferenceItemId.serialize(QString::fromLatin1("ReferenceItemId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueReferenceItemId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueReferenceItemId.setQualified(true);
    if (!_valueReferenceItemId.isNil())
    args.append(_valueReferenceItemId);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueObjectName(QString::fromLatin1("ObjectName"), QVariant::fromValue(d_ptr->mObjectName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueObjectName.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    if (!_valueObjectName.isNil())
    attribs.append(_valueObjectName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void T__WellKnownResponseObjectType::deserialize( const KDSoapValue& mainValue )
{
    T__ResponseObjectType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ItemClass")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItemClass.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Sensitivity")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSensitivity.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Body")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBody.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Attachments")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAttachments.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("InternetMessageHeaders")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mInternetMessageHeaders.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Sender")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSender.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ToRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mToRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CcRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCcRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("BccRecipients")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mBccRecipients.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("IsReadReceiptRequested")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsReadReceiptRequested = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsDeliveryReceiptRequested")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsDeliveryReceiptRequested = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("From")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFrom.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ReferenceItemId")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mReferenceItemId.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("ObjectName")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mObjectName = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__WellKnownResponseObjectType::T__WellKnownResponseObjectType()
    : d_ptr(new PrivateDPtr)
{
}

T__WellKnownResponseObjectType::~T__WellKnownResponseObjectType()
{
}

T__WellKnownResponseObjectType::T__WellKnownResponseObjectType( const T__WellKnownResponseObjectType& other )
    : T__ResponseObjectType( other ), d_ptr( other.d_ptr )
{
}

T__WellKnownResponseObjectType&  T__WellKnownResponseObjectType::operator=( const T__WellKnownResponseObjectType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ResponseObjectType *>(this) = other;

    return *this;
}


KDSoapValue T__IsNotEqualToType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__TwoOperandExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IsNotEqualToType"));
    return mainValue;
}

void T__IsNotEqualToType::deserialize( const KDSoapValue& mainValue )
{
    T__TwoOperandExpressionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__IsNotEqualToType::T__IsNotEqualToType()
{
}

T__IsNotEqualToType::~T__IsNotEqualToType()
{
}


class T__AbsoluteMonthlyRecurrencePatternType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mDayOfMonth;
};

T__AbsoluteMonthlyRecurrencePatternType::PrivateDPtr::PrivateDPtr()
    : mDayOfMonth(0)
{
}


void T__AbsoluteMonthlyRecurrencePatternType::setDayOfMonth( int dayOfMonth )
{
    d_ptr->mDayOfMonth = dayOfMonth;
}

int T__AbsoluteMonthlyRecurrencePatternType::dayOfMonth() const
{
    return d_ptr->mDayOfMonth;
}

KDSoapValue T__AbsoluteMonthlyRecurrencePatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__IntervalRecurrencePatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AbsoluteMonthlyRecurrencePatternType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDayOfMonth(QString::fromLatin1("DayOfMonth"), QVariant::fromValue(d_ptr->mDayOfMonth), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDayOfMonth.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDayOfMonth.setQualified(true);
    if (!_valueDayOfMonth.isNil())
    args.append(_valueDayOfMonth);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__AbsoluteMonthlyRecurrencePatternType::deserialize( const KDSoapValue& mainValue )
{
    T__IntervalRecurrencePatternBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DayOfMonth")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDayOfMonth = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__AbsoluteMonthlyRecurrencePatternType::T__AbsoluteMonthlyRecurrencePatternType()
    : d_ptr(new PrivateDPtr)
{
}

T__AbsoluteMonthlyRecurrencePatternType::~T__AbsoluteMonthlyRecurrencePatternType()
{
}

T__AbsoluteMonthlyRecurrencePatternType::T__AbsoluteMonthlyRecurrencePatternType( const T__AbsoluteMonthlyRecurrencePatternType& other )
    : T__IntervalRecurrencePatternBaseType( other ), d_ptr( other.d_ptr )
{
}

T__AbsoluteMonthlyRecurrencePatternType&  T__AbsoluteMonthlyRecurrencePatternType::operator=( const T__AbsoluteMonthlyRecurrencePatternType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__IntervalRecurrencePatternBaseType *>(this) = other;

    return *this;
}


KDSoapValue T__IsLessThanOrEqualToType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__TwoOperandExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IsLessThanOrEqualToType"));
    return mainValue;
}

void T__IsLessThanOrEqualToType::deserialize( const KDSoapValue& mainValue )
{
    T__TwoOperandExpressionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__IsLessThanOrEqualToType::T__IsLessThanOrEqualToType()
{
}

T__IsLessThanOrEqualToType::~T__IsLessThanOrEqualToType()
{
}


KDSoapValue T__WeeklyRegeneratingPatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RegeneratingPatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WeeklyRegeneratingPatternType"));
    return mainValue;
}

void T__WeeklyRegeneratingPatternType::deserialize( const KDSoapValue& mainValue )
{
    T__RegeneratingPatternBaseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__WeeklyRegeneratingPatternType::T__WeeklyRegeneratingPatternType()
{
}

T__WeeklyRegeneratingPatternType::~T__WeeklyRegeneratingPatternType()
{
}


KDSoapValue T__MeetingResponseMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__MeetingMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MeetingResponseMessageType"));
    return mainValue;
}

void T__MeetingResponseMessageType::deserialize( const KDSoapValue& mainValue )
{
    T__MeetingMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__MeetingResponseMessageType::T__MeetingResponseMessageType()
{
}

T__MeetingResponseMessageType::~T__MeetingResponseMessageType()
{
}


class T__WeeklyRecurrencePatternType::PrivateDPtr : public QSharedData
{
public:
    T__DaysOfWeekType mDaysOfWeek;
};

void T__WeeklyRecurrencePatternType::setDaysOfWeek( const T__DaysOfWeekType& daysOfWeek )
{
    d_ptr->mDaysOfWeek = daysOfWeek;
}

T__DaysOfWeekType T__WeeklyRecurrencePatternType::daysOfWeek() const
{
    return d_ptr->mDaysOfWeek;
}

KDSoapValue T__WeeklyRecurrencePatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__IntervalRecurrencePatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("WeeklyRecurrencePatternType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueDaysOfWeek(QString::fromLatin1("DaysOfWeek"), d_ptr->mDaysOfWeek.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DaysOfWeekType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueDaysOfWeek.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDaysOfWeek.setQualified(true);
    if (!_valueDaysOfWeek.isNil())
    args.append(_valueDaysOfWeek);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__WeeklyRecurrencePatternType::deserialize( const KDSoapValue& mainValue )
{
    T__IntervalRecurrencePatternBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DaysOfWeek")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDaysOfWeek.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
    }
}

T__WeeklyRecurrencePatternType::T__WeeklyRecurrencePatternType()
    : d_ptr(new PrivateDPtr)
{
}

T__WeeklyRecurrencePatternType::~T__WeeklyRecurrencePatternType()
{
}

T__WeeklyRecurrencePatternType::T__WeeklyRecurrencePatternType( const T__WeeklyRecurrencePatternType& other )
    : T__IntervalRecurrencePatternBaseType( other ), d_ptr( other.d_ptr )
{
}

T__WeeklyRecurrencePatternType&  T__WeeklyRecurrencePatternType::operator=( const T__WeeklyRecurrencePatternType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__IntervalRecurrencePatternBaseType *>(this) = other;

    return *this;
}


class T__AppendToItemFieldType::PrivateDPtr : public QSharedData
{
public:
    T__ItemType mItem;
    T__MessageType mMessage;
    T__CalendarItemType mCalendarItem;
    T__ContactItemType mContact;
    T__DistributionListType mDistributionList;
    T__MeetingMessageType mMeetingMessage;
    T__MeetingRequestMessageType mMeetingRequest;
    T__MeetingResponseMessageType mMeetingResponse;
    T__MeetingCancellationMessageType mMeetingCancellation;
    T__TaskType mTask;
    T__PostItemType mPostItem;
};

void T__AppendToItemFieldType::setItem( const T__ItemType& item )
{
    d_ptr->mItem = item;
}

T__ItemType T__AppendToItemFieldType::item() const
{
    return d_ptr->mItem;
}

void T__AppendToItemFieldType::setMessage( const T__MessageType& message )
{
    d_ptr->mMessage = message;
}

T__MessageType T__AppendToItemFieldType::message() const
{
    return d_ptr->mMessage;
}

void T__AppendToItemFieldType::setCalendarItem( const T__CalendarItemType& calendarItem )
{
    d_ptr->mCalendarItem = calendarItem;
}

T__CalendarItemType T__AppendToItemFieldType::calendarItem() const
{
    return d_ptr->mCalendarItem;
}

void T__AppendToItemFieldType::setContact( const T__ContactItemType& contact )
{
    d_ptr->mContact = contact;
}

T__ContactItemType T__AppendToItemFieldType::contact() const
{
    return d_ptr->mContact;
}

void T__AppendToItemFieldType::setDistributionList( const T__DistributionListType& distributionList )
{
    d_ptr->mDistributionList = distributionList;
}

T__DistributionListType T__AppendToItemFieldType::distributionList() const
{
    return d_ptr->mDistributionList;
}

void T__AppendToItemFieldType::setMeetingMessage( const T__MeetingMessageType& meetingMessage )
{
    d_ptr->mMeetingMessage = meetingMessage;
}

T__MeetingMessageType T__AppendToItemFieldType::meetingMessage() const
{
    return d_ptr->mMeetingMessage;
}

void T__AppendToItemFieldType::setMeetingRequest( const T__MeetingRequestMessageType& meetingRequest )
{
    d_ptr->mMeetingRequest = meetingRequest;
}

T__MeetingRequestMessageType T__AppendToItemFieldType::meetingRequest() const
{
    return d_ptr->mMeetingRequest;
}

void T__AppendToItemFieldType::setMeetingResponse( const T__MeetingResponseMessageType& meetingResponse )
{
    d_ptr->mMeetingResponse = meetingResponse;
}

T__MeetingResponseMessageType T__AppendToItemFieldType::meetingResponse() const
{
    return d_ptr->mMeetingResponse;
}

void T__AppendToItemFieldType::setMeetingCancellation( const T__MeetingCancellationMessageType& meetingCancellation )
{
    d_ptr->mMeetingCancellation = meetingCancellation;
}

T__MeetingCancellationMessageType T__AppendToItemFieldType::meetingCancellation() const
{
    return d_ptr->mMeetingCancellation;
}

void T__AppendToItemFieldType::setTask( const T__TaskType& task )
{
    d_ptr->mTask = task;
}

T__TaskType T__AppendToItemFieldType::task() const
{
    return d_ptr->mTask;
}

void T__AppendToItemFieldType::setPostItem( const T__PostItemType& postItem )
{
    d_ptr->mPostItem = postItem;
}

T__PostItemType T__AppendToItemFieldType::postItem() const
{
    return d_ptr->mPostItem;
}

KDSoapValue T__AppendToItemFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__ItemChangeDescriptionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AppendToItemFieldType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueItem(d_ptr->mItem.serialize(QString::fromLatin1("Item")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueItem.setQualified(true);
    if (!_valueItem.isNil())
    args.append(_valueItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMessage(d_ptr->mMessage.serialize(QString::fromLatin1("Message")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMessage.setQualified(true);
    if (!_valueMessage.isNil())
    args.append(_valueMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarItem(d_ptr->mCalendarItem.serialize(QString::fromLatin1("CalendarItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarItem.setQualified(true);
    if (!_valueCalendarItem.isNil())
    args.append(_valueCalendarItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContact(d_ptr->mContact.serialize(QString::fromLatin1("Contact")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContact.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContact.setQualified(true);
    if (!_valueContact.isNil())
    args.append(_valueContact);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDistributionList(d_ptr->mDistributionList.serialize(QString::fromLatin1("DistributionList")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDistributionList.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDistributionList.setQualified(true);
    if (!_valueDistributionList.isNil())
    args.append(_valueDistributionList);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingMessage(d_ptr->mMeetingMessage.serialize(QString::fromLatin1("MeetingMessage")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingMessage.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingMessage.setQualified(true);
    if (!_valueMeetingMessage.isNil())
    args.append(_valueMeetingMessage);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingRequest(d_ptr->mMeetingRequest.serialize(QString::fromLatin1("MeetingRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingRequest.setQualified(true);
    if (!_valueMeetingRequest.isNil())
    args.append(_valueMeetingRequest);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingResponse(d_ptr->mMeetingResponse.serialize(QString::fromLatin1("MeetingResponse")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingResponse.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingResponse.setQualified(true);
    if (!_valueMeetingResponse.isNil())
    args.append(_valueMeetingResponse);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingCancellation(d_ptr->mMeetingCancellation.serialize(QString::fromLatin1("MeetingCancellation")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingCancellation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingCancellation.setQualified(true);
    if (!_valueMeetingCancellation.isNil())
    args.append(_valueMeetingCancellation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTask(d_ptr->mTask.serialize(QString::fromLatin1("Task")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTask.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTask.setQualified(true);
    if (!_valueTask.isNil())
    args.append(_valueTask);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valuePostItem(d_ptr->mPostItem.serialize(QString::fromLatin1("PostItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valuePostItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valuePostItem.setQualified(true);
    if (!_valuePostItem.isNil())
    args.append(_valuePostItem);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__AppendToItemFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__ItemChangeDescriptionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Item")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Message")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CalendarItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Contact")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContact.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DistributionList")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDistributionList.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingMessage")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingMessage.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingRequest")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingRequest.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingResponse")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingResponse.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingCancellation")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingCancellation.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Task")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTask.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("PostItem")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mPostItem.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__AppendToItemFieldType::T__AppendToItemFieldType()
    : d_ptr(new PrivateDPtr)
{
}

T__AppendToItemFieldType::~T__AppendToItemFieldType()
{
}

T__AppendToItemFieldType::T__AppendToItemFieldType( const T__AppendToItemFieldType& other )
    : T__ItemChangeDescriptionType( other ), d_ptr( other.d_ptr )
{
}

T__AppendToItemFieldType&  T__AppendToItemFieldType::operator=( const T__AppendToItemFieldType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__ItemChangeDescriptionType *>(this) = other;

    return *this;
}


KDSoapValue T__IsLessThanType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__TwoOperandExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IsLessThanType"));
    return mainValue;
}

void T__IsLessThanType::deserialize( const KDSoapValue& mainValue )
{
    T__TwoOperandExpressionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__IsLessThanType::T__IsLessThanType()
{
}

T__IsLessThanType::~T__IsLessThanType()
{
}


KDSoapValue T__MeetingCancellationMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__MeetingMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MeetingCancellationMessageType"));
    return mainValue;
}

void T__MeetingCancellationMessageType::deserialize( const KDSoapValue& mainValue )
{
    T__MeetingMessageType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__MeetingCancellationMessageType::T__MeetingCancellationMessageType()
{
}

T__MeetingCancellationMessageType::~T__MeetingCancellationMessageType()
{
}


class T__MeetingRequestMessageType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__MeetingRequestTypeType mMeetingRequestType;
    T__LegacyFreeBusyType mIntendedFreeBusyStatus;
    KDDateTime mStart;
    KDDateTime mEnd;
    KDDateTime mOriginalStart;
    bool mIsAllDayEvent;
    T__LegacyFreeBusyType mLegacyFreeBusyStatus;
    QString mLocation;
    QString mWhen;
    bool mIsMeeting;
    bool mIsCancelled;
    bool mIsRecurring;
    bool mMeetingRequestWasSent;
    T__CalendarItemTypeType mCalendarItemType;
    T__ResponseTypeType mMyResponseType;
    T__SingleRecipientType mOrganizer;
    T__NonEmptyArrayOfAttendeesType mRequiredAttendees;
    T__NonEmptyArrayOfAttendeesType mOptionalAttendees;
    T__NonEmptyArrayOfAttendeesType mResources;
    int mConflictingMeetingCount;
    int mAdjacentMeetingCount;
    T__NonEmptyArrayOfAllItemsType mConflictingMeetings;
    T__NonEmptyArrayOfAllItemsType mAdjacentMeetings;
    QString mDuration;
    QString mTimeZone;
    KDDateTime mAppointmentReplyTime;
    int mAppointmentSequenceNumber;
    int mAppointmentState;
    T__RecurrenceType mRecurrence;
    T__OccurrenceInfoType mFirstOccurrence;
    T__OccurrenceInfoType mLastOccurrence;
    T__NonEmptyArrayOfOccurrenceInfoType mModifiedOccurrences;
    T__NonEmptyArrayOfDeletedOccurrencesType mDeletedOccurrences;
    T__TimeZoneType mMeetingTimeZone;
    int mConferenceType;
    bool mAllowNewTimeProposal;
    bool mIsOnlineMeeting;
    QString mMeetingWorkspaceUrl;
    QString mNetShowUrl;
};

T__MeetingRequestMessageType::PrivateDPtr::PrivateDPtr()
    : mIsAllDayEvent(false), mIsMeeting(false), mIsCancelled(false), mIsRecurring(false), mMeetingRequestWasSent(false), mConflictingMeetingCount(0), mAdjacentMeetingCount(0), mAppointmentSequenceNumber(0), mAppointmentState(0), mConferenceType(0), mAllowNewTimeProposal(false), mIsOnlineMeeting(false)
{
}


void T__MeetingRequestMessageType::setMeetingRequestType( const T__MeetingRequestTypeType& meetingRequestType )
{
    d_ptr->mMeetingRequestType = meetingRequestType;
}

T__MeetingRequestTypeType T__MeetingRequestMessageType::meetingRequestType() const
{
    return d_ptr->mMeetingRequestType;
}

void T__MeetingRequestMessageType::setIntendedFreeBusyStatus( const T__LegacyFreeBusyType& intendedFreeBusyStatus )
{
    d_ptr->mIntendedFreeBusyStatus = intendedFreeBusyStatus;
}

T__LegacyFreeBusyType T__MeetingRequestMessageType::intendedFreeBusyStatus() const
{
    return d_ptr->mIntendedFreeBusyStatus;
}

void T__MeetingRequestMessageType::setStart( const KDDateTime& start )
{
    d_ptr->mStart = start;
}

KDDateTime T__MeetingRequestMessageType::start() const
{
    return d_ptr->mStart;
}

void T__MeetingRequestMessageType::setEnd( const KDDateTime& end )
{
    d_ptr->mEnd = end;
}

KDDateTime T__MeetingRequestMessageType::end() const
{
    return d_ptr->mEnd;
}

void T__MeetingRequestMessageType::setOriginalStart( const KDDateTime& originalStart )
{
    d_ptr->mOriginalStart = originalStart;
}

KDDateTime T__MeetingRequestMessageType::originalStart() const
{
    return d_ptr->mOriginalStart;
}

void T__MeetingRequestMessageType::setIsAllDayEvent( bool isAllDayEvent )
{
    d_ptr->mIsAllDayEvent = isAllDayEvent;
}

bool T__MeetingRequestMessageType::isAllDayEvent() const
{
    return d_ptr->mIsAllDayEvent;
}

void T__MeetingRequestMessageType::setLegacyFreeBusyStatus( const T__LegacyFreeBusyType& legacyFreeBusyStatus )
{
    d_ptr->mLegacyFreeBusyStatus = legacyFreeBusyStatus;
}

T__LegacyFreeBusyType T__MeetingRequestMessageType::legacyFreeBusyStatus() const
{
    return d_ptr->mLegacyFreeBusyStatus;
}

void T__MeetingRequestMessageType::setLocation( const QString& location )
{
    d_ptr->mLocation = location;
}

QString T__MeetingRequestMessageType::location() const
{
    return d_ptr->mLocation;
}

void T__MeetingRequestMessageType::setWhen( const QString& when )
{
    d_ptr->mWhen = when;
}

QString T__MeetingRequestMessageType::when() const
{
    return d_ptr->mWhen;
}

void T__MeetingRequestMessageType::setIsMeeting( bool isMeeting )
{
    d_ptr->mIsMeeting = isMeeting;
}

bool T__MeetingRequestMessageType::isMeeting() const
{
    return d_ptr->mIsMeeting;
}

void T__MeetingRequestMessageType::setIsCancelled( bool isCancelled )
{
    d_ptr->mIsCancelled = isCancelled;
}

bool T__MeetingRequestMessageType::isCancelled() const
{
    return d_ptr->mIsCancelled;
}

void T__MeetingRequestMessageType::setIsRecurring( bool isRecurring )
{
    d_ptr->mIsRecurring = isRecurring;
}

bool T__MeetingRequestMessageType::isRecurring() const
{
    return d_ptr->mIsRecurring;
}

void T__MeetingRequestMessageType::setMeetingRequestWasSent( bool meetingRequestWasSent )
{
    d_ptr->mMeetingRequestWasSent = meetingRequestWasSent;
}

bool T__MeetingRequestMessageType::meetingRequestWasSent() const
{
    return d_ptr->mMeetingRequestWasSent;
}

void T__MeetingRequestMessageType::setCalendarItemType( const T__CalendarItemTypeType& calendarItemType )
{
    d_ptr->mCalendarItemType = calendarItemType;
}

T__CalendarItemTypeType T__MeetingRequestMessageType::calendarItemType() const
{
    return d_ptr->mCalendarItemType;
}

void T__MeetingRequestMessageType::setMyResponseType( const T__ResponseTypeType& myResponseType )
{
    d_ptr->mMyResponseType = myResponseType;
}

T__ResponseTypeType T__MeetingRequestMessageType::myResponseType() const
{
    return d_ptr->mMyResponseType;
}

void T__MeetingRequestMessageType::setOrganizer( const T__SingleRecipientType& organizer )
{
    d_ptr->mOrganizer = organizer;
}

T__SingleRecipientType T__MeetingRequestMessageType::organizer() const
{
    return d_ptr->mOrganizer;
}

void T__MeetingRequestMessageType::setRequiredAttendees( const T__NonEmptyArrayOfAttendeesType& requiredAttendees )
{
    d_ptr->mRequiredAttendees = requiredAttendees;
}

T__NonEmptyArrayOfAttendeesType T__MeetingRequestMessageType::requiredAttendees() const
{
    return d_ptr->mRequiredAttendees;
}

void T__MeetingRequestMessageType::setOptionalAttendees( const T__NonEmptyArrayOfAttendeesType& optionalAttendees )
{
    d_ptr->mOptionalAttendees = optionalAttendees;
}

T__NonEmptyArrayOfAttendeesType T__MeetingRequestMessageType::optionalAttendees() const
{
    return d_ptr->mOptionalAttendees;
}

void T__MeetingRequestMessageType::setResources( const T__NonEmptyArrayOfAttendeesType& resources )
{
    d_ptr->mResources = resources;
}

T__NonEmptyArrayOfAttendeesType T__MeetingRequestMessageType::resources() const
{
    return d_ptr->mResources;
}

void T__MeetingRequestMessageType::setConflictingMeetingCount( int conflictingMeetingCount )
{
    d_ptr->mConflictingMeetingCount = conflictingMeetingCount;
}

int T__MeetingRequestMessageType::conflictingMeetingCount() const
{
    return d_ptr->mConflictingMeetingCount;
}

void T__MeetingRequestMessageType::setAdjacentMeetingCount( int adjacentMeetingCount )
{
    d_ptr->mAdjacentMeetingCount = adjacentMeetingCount;
}

int T__MeetingRequestMessageType::adjacentMeetingCount() const
{
    return d_ptr->mAdjacentMeetingCount;
}

void T__MeetingRequestMessageType::setConflictingMeetings( const T__NonEmptyArrayOfAllItemsType& conflictingMeetings )
{
    d_ptr->mConflictingMeetings = conflictingMeetings;
}

T__NonEmptyArrayOfAllItemsType T__MeetingRequestMessageType::conflictingMeetings() const
{
    return d_ptr->mConflictingMeetings;
}

void T__MeetingRequestMessageType::setAdjacentMeetings( const T__NonEmptyArrayOfAllItemsType& adjacentMeetings )
{
    d_ptr->mAdjacentMeetings = adjacentMeetings;
}

T__NonEmptyArrayOfAllItemsType T__MeetingRequestMessageType::adjacentMeetings() const
{
    return d_ptr->mAdjacentMeetings;
}

void T__MeetingRequestMessageType::setDuration( const QString& duration )
{
    d_ptr->mDuration = duration;
}

QString T__MeetingRequestMessageType::duration() const
{
    return d_ptr->mDuration;
}

void T__MeetingRequestMessageType::setTimeZone( const QString& timeZone )
{
    d_ptr->mTimeZone = timeZone;
}

QString T__MeetingRequestMessageType::timeZone() const
{
    return d_ptr->mTimeZone;
}

void T__MeetingRequestMessageType::setAppointmentReplyTime( const KDDateTime& appointmentReplyTime )
{
    d_ptr->mAppointmentReplyTime = appointmentReplyTime;
}

KDDateTime T__MeetingRequestMessageType::appointmentReplyTime() const
{
    return d_ptr->mAppointmentReplyTime;
}

void T__MeetingRequestMessageType::setAppointmentSequenceNumber( int appointmentSequenceNumber )
{
    d_ptr->mAppointmentSequenceNumber = appointmentSequenceNumber;
}

int T__MeetingRequestMessageType::appointmentSequenceNumber() const
{
    return d_ptr->mAppointmentSequenceNumber;
}

void T__MeetingRequestMessageType::setAppointmentState( int appointmentState )
{
    d_ptr->mAppointmentState = appointmentState;
}

int T__MeetingRequestMessageType::appointmentState() const
{
    return d_ptr->mAppointmentState;
}

void T__MeetingRequestMessageType::setRecurrence( const T__RecurrenceType& recurrence )
{
    d_ptr->mRecurrence = recurrence;
}

T__RecurrenceType T__MeetingRequestMessageType::recurrence() const
{
    return d_ptr->mRecurrence;
}

void T__MeetingRequestMessageType::setFirstOccurrence( const T__OccurrenceInfoType& firstOccurrence )
{
    d_ptr->mFirstOccurrence = firstOccurrence;
}

T__OccurrenceInfoType T__MeetingRequestMessageType::firstOccurrence() const
{
    return d_ptr->mFirstOccurrence;
}

void T__MeetingRequestMessageType::setLastOccurrence( const T__OccurrenceInfoType& lastOccurrence )
{
    d_ptr->mLastOccurrence = lastOccurrence;
}

T__OccurrenceInfoType T__MeetingRequestMessageType::lastOccurrence() const
{
    return d_ptr->mLastOccurrence;
}

void T__MeetingRequestMessageType::setModifiedOccurrences( const T__NonEmptyArrayOfOccurrenceInfoType& modifiedOccurrences )
{
    d_ptr->mModifiedOccurrences = modifiedOccurrences;
}

T__NonEmptyArrayOfOccurrenceInfoType T__MeetingRequestMessageType::modifiedOccurrences() const
{
    return d_ptr->mModifiedOccurrences;
}

void T__MeetingRequestMessageType::setDeletedOccurrences( const T__NonEmptyArrayOfDeletedOccurrencesType& deletedOccurrences )
{
    d_ptr->mDeletedOccurrences = deletedOccurrences;
}

T__NonEmptyArrayOfDeletedOccurrencesType T__MeetingRequestMessageType::deletedOccurrences() const
{
    return d_ptr->mDeletedOccurrences;
}

void T__MeetingRequestMessageType::setMeetingTimeZone( const T__TimeZoneType& meetingTimeZone )
{
    d_ptr->mMeetingTimeZone = meetingTimeZone;
}

T__TimeZoneType T__MeetingRequestMessageType::meetingTimeZone() const
{
    return d_ptr->mMeetingTimeZone;
}

void T__MeetingRequestMessageType::setConferenceType( int conferenceType )
{
    d_ptr->mConferenceType = conferenceType;
}

int T__MeetingRequestMessageType::conferenceType() const
{
    return d_ptr->mConferenceType;
}

void T__MeetingRequestMessageType::setAllowNewTimeProposal( bool allowNewTimeProposal )
{
    d_ptr->mAllowNewTimeProposal = allowNewTimeProposal;
}

bool T__MeetingRequestMessageType::allowNewTimeProposal() const
{
    return d_ptr->mAllowNewTimeProposal;
}

void T__MeetingRequestMessageType::setIsOnlineMeeting( bool isOnlineMeeting )
{
    d_ptr->mIsOnlineMeeting = isOnlineMeeting;
}

bool T__MeetingRequestMessageType::isOnlineMeeting() const
{
    return d_ptr->mIsOnlineMeeting;
}

void T__MeetingRequestMessageType::setMeetingWorkspaceUrl( const QString& meetingWorkspaceUrl )
{
    d_ptr->mMeetingWorkspaceUrl = meetingWorkspaceUrl;
}

QString T__MeetingRequestMessageType::meetingWorkspaceUrl() const
{
    return d_ptr->mMeetingWorkspaceUrl;
}

void T__MeetingRequestMessageType::setNetShowUrl( const QString& netShowUrl )
{
    d_ptr->mNetShowUrl = netShowUrl;
}

QString T__MeetingRequestMessageType::netShowUrl() const
{
    return d_ptr->mNetShowUrl;
}

KDSoapValue T__MeetingRequestMessageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__MeetingMessageType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MeetingRequestMessageType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueMeetingRequestType(QString::fromLatin1("MeetingRequestType"), d_ptr->mMeetingRequestType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MeetingRequestTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMeetingRequestType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingRequestType.setQualified(true);
    if (!_valueMeetingRequestType.isNil())
    args.append(_valueMeetingRequestType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIntendedFreeBusyStatus(QString::fromLatin1("IntendedFreeBusyStatus"), d_ptr->mIntendedFreeBusyStatus.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("LegacyFreeBusyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueIntendedFreeBusyStatus.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIntendedFreeBusyStatus.setQualified(true);
    if (!_valueIntendedFreeBusyStatus.isNil())
    args.append(_valueIntendedFreeBusyStatus);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueStart(QString::fromLatin1("Start"), d_ptr->mStart.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueStart.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueStart.setQualified(true);
    if (!_valueStart.isNil())
    args.append(_valueStart);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueEnd(QString::fromLatin1("End"), d_ptr->mEnd.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueEnd.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueEnd.setQualified(true);
    if (!_valueEnd.isNil())
    args.append(_valueEnd);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOriginalStart(QString::fromLatin1("OriginalStart"), d_ptr->mOriginalStart.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueOriginalStart.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOriginalStart.setQualified(true);
    if (!_valueOriginalStart.isNil())
    args.append(_valueOriginalStart);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsAllDayEvent(QString::fromLatin1("IsAllDayEvent"), QVariant::fromValue(d_ptr->mIsAllDayEvent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsAllDayEvent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsAllDayEvent.setQualified(true);
    if (!_valueIsAllDayEvent.isNil())
    args.append(_valueIsAllDayEvent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLegacyFreeBusyStatus(QString::fromLatin1("LegacyFreeBusyStatus"), d_ptr->mLegacyFreeBusyStatus.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("LegacyFreeBusyType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueLegacyFreeBusyStatus.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLegacyFreeBusyStatus.setQualified(true);
    if (!_valueLegacyFreeBusyStatus.isNil())
    args.append(_valueLegacyFreeBusyStatus);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLocation(QString::fromLatin1("Location"), QVariant::fromValue(d_ptr->mLocation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueLocation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLocation.setQualified(true);
    if (!_valueLocation.isNil())
    args.append(_valueLocation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueWhen(QString::fromLatin1("When"), QVariant::fromValue(d_ptr->mWhen), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueWhen.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueWhen.setQualified(true);
    if (!_valueWhen.isNil())
    args.append(_valueWhen);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsMeeting(QString::fromLatin1("IsMeeting"), QVariant::fromValue(d_ptr->mIsMeeting), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsMeeting.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsMeeting.setQualified(true);
    if (!_valueIsMeeting.isNil())
    args.append(_valueIsMeeting);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsCancelled(QString::fromLatin1("IsCancelled"), QVariant::fromValue(d_ptr->mIsCancelled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsCancelled.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsCancelled.setQualified(true);
    if (!_valueIsCancelled.isNil())
    args.append(_valueIsCancelled);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsRecurring(QString::fromLatin1("IsRecurring"), QVariant::fromValue(d_ptr->mIsRecurring), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsRecurring.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsRecurring.setQualified(true);
    if (!_valueIsRecurring.isNil())
    args.append(_valueIsRecurring);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingRequestWasSent(QString::fromLatin1("MeetingRequestWasSent"), QVariant::fromValue(d_ptr->mMeetingRequestWasSent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMeetingRequestWasSent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingRequestWasSent.setQualified(true);
    if (!_valueMeetingRequestWasSent.isNil())
    args.append(_valueMeetingRequestWasSent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarItemType(QString::fromLatin1("CalendarItemType"), d_ptr->mCalendarItemType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CalendarItemTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueCalendarItemType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarItemType.setQualified(true);
    if (!_valueCalendarItemType.isNil())
    args.append(_valueCalendarItemType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMyResponseType(QString::fromLatin1("MyResponseType"), d_ptr->mMyResponseType.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ResponseTypeType"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueMyResponseType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMyResponseType.setQualified(true);
    if (!_valueMyResponseType.isNil())
    args.append(_valueMyResponseType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOrganizer(d_ptr->mOrganizer.serialize(QString::fromLatin1("Organizer")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOrganizer.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOrganizer.setQualified(true);
    if (!_valueOrganizer.isNil())
    args.append(_valueOrganizer);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRequiredAttendees(d_ptr->mRequiredAttendees.serialize(QString::fromLatin1("RequiredAttendees")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRequiredAttendees.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRequiredAttendees.setQualified(true);
    if (!_valueRequiredAttendees.isNil())
    args.append(_valueRequiredAttendees);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueOptionalAttendees(d_ptr->mOptionalAttendees.serialize(QString::fromLatin1("OptionalAttendees")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueOptionalAttendees.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueOptionalAttendees.setQualified(true);
    if (!_valueOptionalAttendees.isNil())
    args.append(_valueOptionalAttendees);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueResources(d_ptr->mResources.serialize(QString::fromLatin1("Resources")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResources.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueResources.setQualified(true);
    if (!_valueResources.isNil())
    args.append(_valueResources);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConflictingMeetingCount(QString::fromLatin1("ConflictingMeetingCount"), QVariant::fromValue(d_ptr->mConflictingMeetingCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueConflictingMeetingCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConflictingMeetingCount.setQualified(true);
    if (!_valueConflictingMeetingCount.isNil())
    args.append(_valueConflictingMeetingCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAdjacentMeetingCount(QString::fromLatin1("AdjacentMeetingCount"), QVariant::fromValue(d_ptr->mAdjacentMeetingCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAdjacentMeetingCount.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAdjacentMeetingCount.setQualified(true);
    if (!_valueAdjacentMeetingCount.isNil())
    args.append(_valueAdjacentMeetingCount);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConflictingMeetings(d_ptr->mConflictingMeetings.serialize(QString::fromLatin1("ConflictingMeetings")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConflictingMeetings.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConflictingMeetings.setQualified(true);
    if (!_valueConflictingMeetings.isNil())
    args.append(_valueConflictingMeetings);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAdjacentMeetings(d_ptr->mAdjacentMeetings.serialize(QString::fromLatin1("AdjacentMeetings")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAdjacentMeetings.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAdjacentMeetings.setQualified(true);
    if (!_valueAdjacentMeetings.isNil())
    args.append(_valueAdjacentMeetings);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDuration(QString::fromLatin1("Duration"), QVariant::fromValue(d_ptr->mDuration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueDuration.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDuration.setQualified(true);
    if (!_valueDuration.isNil())
    args.append(_valueDuration);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTimeZone(QString::fromLatin1("TimeZone"), QVariant::fromValue(d_ptr->mTimeZone), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueTimeZone.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeZone.setQualified(true);
    if (!_valueTimeZone.isNil())
    args.append(_valueTimeZone);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAppointmentReplyTime(QString::fromLatin1("AppointmentReplyTime"), d_ptr->mAppointmentReplyTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAppointmentReplyTime.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAppointmentReplyTime.setQualified(true);
    if (!_valueAppointmentReplyTime.isNil())
    args.append(_valueAppointmentReplyTime);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAppointmentSequenceNumber(QString::fromLatin1("AppointmentSequenceNumber"), QVariant::fromValue(d_ptr->mAppointmentSequenceNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAppointmentSequenceNumber.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAppointmentSequenceNumber.setQualified(true);
    if (!_valueAppointmentSequenceNumber.isNil())
    args.append(_valueAppointmentSequenceNumber);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAppointmentState(QString::fromLatin1("AppointmentState"), QVariant::fromValue(d_ptr->mAppointmentState), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAppointmentState.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAppointmentState.setQualified(true);
    if (!_valueAppointmentState.isNil())
    args.append(_valueAppointmentState);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueRecurrence(d_ptr->mRecurrence.serialize(QString::fromLatin1("Recurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRecurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRecurrence.setQualified(true);
    if (!_valueRecurrence.isNil())
    args.append(_valueRecurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueFirstOccurrence(d_ptr->mFirstOccurrence.serialize(QString::fromLatin1("FirstOccurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFirstOccurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFirstOccurrence.setQualified(true);
    if (!_valueFirstOccurrence.isNil())
    args.append(_valueFirstOccurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueLastOccurrence(d_ptr->mLastOccurrence.serialize(QString::fromLatin1("LastOccurrence")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueLastOccurrence.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueLastOccurrence.setQualified(true);
    if (!_valueLastOccurrence.isNil())
    args.append(_valueLastOccurrence);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueModifiedOccurrences(d_ptr->mModifiedOccurrences.serialize(QString::fromLatin1("ModifiedOccurrences")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueModifiedOccurrences.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueModifiedOccurrences.setQualified(true);
    if (!_valueModifiedOccurrences.isNil())
    args.append(_valueModifiedOccurrences);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueDeletedOccurrences(d_ptr->mDeletedOccurrences.serialize(QString::fromLatin1("DeletedOccurrences")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeletedOccurrences.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueDeletedOccurrences.setQualified(true);
    if (!_valueDeletedOccurrences.isNil())
    args.append(_valueDeletedOccurrences);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingTimeZone(d_ptr->mMeetingTimeZone.serialize(QString::fromLatin1("MeetingTimeZone")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMeetingTimeZone.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingTimeZone.setQualified(true);
    if (!_valueMeetingTimeZone.isNil())
    args.append(_valueMeetingTimeZone);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueConferenceType(QString::fromLatin1("ConferenceType"), QVariant::fromValue(d_ptr->mConferenceType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueConferenceType.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueConferenceType.setQualified(true);
    if (!_valueConferenceType.isNil())
    args.append(_valueConferenceType);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueAllowNewTimeProposal(QString::fromLatin1("AllowNewTimeProposal"), QVariant::fromValue(d_ptr->mAllowNewTimeProposal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueAllowNewTimeProposal.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueAllowNewTimeProposal.setQualified(true);
    if (!_valueAllowNewTimeProposal.isNil())
    args.append(_valueAllowNewTimeProposal);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueIsOnlineMeeting(QString::fromLatin1("IsOnlineMeeting"), QVariant::fromValue(d_ptr->mIsOnlineMeeting), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIsOnlineMeeting.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueIsOnlineMeeting.setQualified(true);
    if (!_valueIsOnlineMeeting.isNil())
    args.append(_valueIsOnlineMeeting);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueMeetingWorkspaceUrl(QString::fromLatin1("MeetingWorkspaceUrl"), QVariant::fromValue(d_ptr->mMeetingWorkspaceUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMeetingWorkspaceUrl.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMeetingWorkspaceUrl.setQualified(true);
    if (!_valueMeetingWorkspaceUrl.isNil())
    args.append(_valueMeetingWorkspaceUrl);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueNetShowUrl(QString::fromLatin1("NetShowUrl"), QVariant::fromValue(d_ptr->mNetShowUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueNetShowUrl.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNetShowUrl.setQualified(true);
    if (!_valueNetShowUrl.isNil())
    args.append(_valueNetShowUrl);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__MeetingRequestMessageType::deserialize( const KDSoapValue& mainValue )
{
    T__MeetingMessageType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("MeetingRequestType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingRequestType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("IntendedFreeBusyStatus")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIntendedFreeBusyStatus.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Start")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mStart = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("End")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mEnd = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("OriginalStart")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOriginalStart = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsAllDayEvent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsAllDayEvent = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("LegacyFreeBusyStatus")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLegacyFreeBusyStatus.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Location")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLocation = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("When")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mWhen = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsMeeting")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsMeeting = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsCancelled")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsCancelled = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsRecurring")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsRecurring = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MeetingRequestWasSent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingRequestWasSent = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("CalendarItemType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarItemType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("MyResponseType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMyResponseType.deserialize(val.value());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:257
        }
        else if (name == QLatin1String("Organizer")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOrganizer.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("RequiredAttendees")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRequiredAttendees.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("OptionalAttendees")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mOptionalAttendees.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Resources")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mResources.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ConflictingMeetingCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConflictingMeetingCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AdjacentMeetingCount")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAdjacentMeetingCount = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("ConflictingMeetings")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConflictingMeetings.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("AdjacentMeetings")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAdjacentMeetings.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("Duration")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDuration = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("TimeZone")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTimeZone = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AppointmentReplyTime")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAppointmentReplyTime = KDDateTime::fromDateString(val.value().toString());// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AppointmentSequenceNumber")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAppointmentSequenceNumber = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AppointmentState")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAppointmentState = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("Recurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mRecurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("FirstOccurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFirstOccurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("LastOccurrence")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mLastOccurrence.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ModifiedOccurrences")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mModifiedOccurrences.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("DeletedOccurrences")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mDeletedOccurrences.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("MeetingTimeZone")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingTimeZone.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ConferenceType")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mConferenceType = val.value().value<int>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("AllowNewTimeProposal")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mAllowNewTimeProposal = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("IsOnlineMeeting")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIsOnlineMeeting = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("MeetingWorkspaceUrl")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mMeetingWorkspaceUrl = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
        else if (name == QLatin1String("NetShowUrl")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNetShowUrl = val.value().value<QString>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

T__MeetingRequestMessageType::T__MeetingRequestMessageType()
    : d_ptr(new PrivateDPtr)
{
}

T__MeetingRequestMessageType::~T__MeetingRequestMessageType()
{
}

T__MeetingRequestMessageType::T__MeetingRequestMessageType( const T__MeetingRequestMessageType& other )
    : T__MeetingMessageType( other ), d_ptr( other.d_ptr )
{
}

T__MeetingRequestMessageType&  T__MeetingRequestMessageType::operator=( const T__MeetingRequestMessageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__MeetingMessageType *>(this) = other;

    return *this;
}


class TNS__GetDelegateType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    T__ArrayOfUserIdType mUserIds;
    bool mIncludePermissions;
};

TNS__GetDelegateType::PrivateDPtr::PrivateDPtr()
    : mIncludePermissions(false)
{
}


void TNS__GetDelegateType::setUserIds( const T__ArrayOfUserIdType& userIds )
{
    d_ptr->mUserIds = userIds;
}

T__ArrayOfUserIdType TNS__GetDelegateType::userIds() const
{
    return d_ptr->mUserIds;
}

void TNS__GetDelegateType::setIncludePermissions( bool includePermissions )
{
    d_ptr->mIncludePermissions = includePermissions;
}

bool TNS__GetDelegateType::includePermissions() const
{
    return d_ptr->mIncludePermissions;
}

KDSoapValue TNS__GetDelegateType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseDelegateType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("GetDelegateType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueUserIds(d_ptr->mUserIds.serialize(QString::fromLatin1("UserIds")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUserIds.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUserIds.setQualified(true);
    if (!_valueUserIds.isNil())
    args.append(_valueUserIds);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValueList attribs;
    KDSoapValue _valueIncludePermissions(QString::fromLatin1("IncludePermissions"), QVariant::fromValue(d_ptr->mIncludePermissions), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueIncludePermissions.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    if (!_valueIncludePermissions.isNil())
    attribs.append(_valueIncludePermissions);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    mainValue.childValues().attributes() += attribs;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:451
    return mainValue;
}

void TNS__GetDelegateType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseDelegateType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("UserIds")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mUserIds.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("IncludePermissions")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mIncludePermissions = val.value().value<bool>();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:253
        }
    }
}

TNS__GetDelegateType::TNS__GetDelegateType()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetDelegateType::~TNS__GetDelegateType()
{
}

TNS__GetDelegateType::TNS__GetDelegateType( const TNS__GetDelegateType& other )
    : TNS__BaseDelegateType( other ), d_ptr( other.d_ptr )
{
}

TNS__GetDelegateType&  TNS__GetDelegateType::operator=( const TNS__GetDelegateType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<TNS__BaseDelegateType *>(this) = other;

    return *this;
}


class T__PostReplyItemType::PrivateDPtr : public QSharedData
{
public:
    T__BodyType mNewBodyContent;
};

void T__PostReplyItemType::setNewBodyContent( const T__BodyType& newBodyContent )
{
    d_ptr->mNewBodyContent = newBodyContent;
}

T__BodyType T__PostReplyItemType::newBodyContent() const
{
    return d_ptr->mNewBodyContent;
}

KDSoapValue T__PostReplyItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__PostReplyItemBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("PostReplyItemType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueNewBodyContent(d_ptr->mNewBodyContent.serialize(QString::fromLatin1("NewBodyContent")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueNewBodyContent.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueNewBodyContent.setQualified(true);
    if (!_valueNewBodyContent.isNil())
    args.append(_valueNewBodyContent);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__PostReplyItemType::deserialize( const KDSoapValue& mainValue )
{
    T__PostReplyItemBaseType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("NewBodyContent")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mNewBodyContent.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__PostReplyItemType::T__PostReplyItemType()
    : d_ptr(new PrivateDPtr)
{
}

T__PostReplyItemType::~T__PostReplyItemType()
{
}

T__PostReplyItemType::T__PostReplyItemType( const T__PostReplyItemType& other )
    : T__PostReplyItemBaseType( other ), d_ptr( other.d_ptr )
{
}

T__PostReplyItemType&  T__PostReplyItemType::operator=( const T__PostReplyItemType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__PostReplyItemBaseType *>(this) = other;

    return *this;
}


KDSoapValue TNS__MoveFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseMoveCopyFolderType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("MoveFolderType"));
    return mainValue;
}

void TNS__MoveFolderType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseMoveCopyFolderType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__MoveFolderType::TNS__MoveFolderType()
{
}

TNS__MoveFolderType::~TNS__MoveFolderType()
{
}


class T__AppendToFolderFieldType::PrivateDPtr : public QSharedData
{
public:
    T__FolderType mFolder;
    T__CalendarFolderType mCalendarFolder;
    T__ContactsFolderType mContactsFolder;
    T__SearchFolderType mSearchFolder;
    T__TasksFolderType mTasksFolder;
};

void T__AppendToFolderFieldType::setFolder( const T__FolderType& folder )
{
    d_ptr->mFolder = folder;
}

T__FolderType T__AppendToFolderFieldType::folder() const
{
    return d_ptr->mFolder;
}

void T__AppendToFolderFieldType::setCalendarFolder( const T__CalendarFolderType& calendarFolder )
{
    d_ptr->mCalendarFolder = calendarFolder;
}

T__CalendarFolderType T__AppendToFolderFieldType::calendarFolder() const
{
    return d_ptr->mCalendarFolder;
}

void T__AppendToFolderFieldType::setContactsFolder( const T__ContactsFolderType& contactsFolder )
{
    d_ptr->mContactsFolder = contactsFolder;
}

T__ContactsFolderType T__AppendToFolderFieldType::contactsFolder() const
{
    return d_ptr->mContactsFolder;
}

void T__AppendToFolderFieldType::setSearchFolder( const T__SearchFolderType& searchFolder )
{
    d_ptr->mSearchFolder = searchFolder;
}

T__SearchFolderType T__AppendToFolderFieldType::searchFolder() const
{
    return d_ptr->mSearchFolder;
}

void T__AppendToFolderFieldType::setTasksFolder( const T__TasksFolderType& tasksFolder )
{
    d_ptr->mTasksFolder = tasksFolder;
}

T__TasksFolderType T__AppendToFolderFieldType::tasksFolder() const
{
    return d_ptr->mTasksFolder;
}

KDSoapValue T__AppendToFolderFieldType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__FolderChangeDescriptionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AppendToFolderFieldType"));
    KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:348
    mainValue.setQualified(true);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:350
    KDSoapValue _valueFolder(d_ptr->mFolder.serialize(QString::fromLatin1("Folder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueFolder.setQualified(true);
    if (!_valueFolder.isNil())
    args.append(_valueFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueCalendarFolder(d_ptr->mCalendarFolder.serialize(QString::fromLatin1("CalendarFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCalendarFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueCalendarFolder.setQualified(true);
    if (!_valueCalendarFolder.isNil())
    args.append(_valueCalendarFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueContactsFolder(d_ptr->mContactsFolder.serialize(QString::fromLatin1("ContactsFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueContactsFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueContactsFolder.setQualified(true);
    if (!_valueContactsFolder.isNil())
    args.append(_valueContactsFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueSearchFolder(d_ptr->mSearchFolder.serialize(QString::fromLatin1("SearchFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSearchFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSearchFolder.setQualified(true);
    if (!_valueSearchFolder.isNil())
    args.append(_valueSearchFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapValue _valueTasksFolder(d_ptr->mTasksFolder.serialize(QString::fromLatin1("TasksFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTasksFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTasksFolder.setQualified(true);
    if (!_valueTasksFolder.isNil())
    args.append(_valueTasksFolder);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    return mainValue;
}

void T__AppendToFolderFieldType::deserialize( const KDSoapValue& mainValue )
{
    T__FolderChangeDescriptionType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:344
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Folder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("CalendarFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mCalendarFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("ContactsFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mContactsFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("SearchFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mSearchFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
        else if (name == QLatin1String("TasksFolder")) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:240
            d_ptr->mTasksFolder.deserialize(val);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:255
        }
    }
}

T__AppendToFolderFieldType::T__AppendToFolderFieldType()
    : d_ptr(new PrivateDPtr)
{
}

T__AppendToFolderFieldType::~T__AppendToFolderFieldType()
{
}

T__AppendToFolderFieldType::T__AppendToFolderFieldType( const T__AppendToFolderFieldType& other )
    : T__FolderChangeDescriptionType( other ), d_ptr( other.d_ptr )
{
}

T__AppendToFolderFieldType&  T__AppendToFolderFieldType::operator=( const T__AppendToFolderFieldType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<T__FolderChangeDescriptionType *>(this) = other;

    return *this;
}


KDSoapValue T__IsEqualToType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__TwoOperandExpressionType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("IsEqualToType"));
    return mainValue;
}

void T__IsEqualToType::deserialize( const KDSoapValue& mainValue )
{
    T__TwoOperandExpressionType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__IsEqualToType::T__IsEqualToType()
{
}

T__IsEqualToType::~T__IsEqualToType()
{
}


KDSoapValue TNS__CopyItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = TNS__BaseMoveCopyItemType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"), QString::fromLatin1("CopyItemType"));
    return mainValue;
}

void TNS__CopyItemType::deserialize( const KDSoapValue& mainValue )
{
    TNS__BaseMoveCopyItemType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

TNS__CopyItemType::TNS__CopyItemType()
{
}

TNS__CopyItemType::~TNS__CopyItemType()
{
}


KDSoapValue T__CancelCalendarItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SmartResponseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("CancelCalendarItemType"));
    return mainValue;
}

void T__CancelCalendarItemType::deserialize( const KDSoapValue& mainValue )
{
    T__SmartResponseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__CancelCalendarItemType::T__CancelCalendarItemType()
{
}

T__CancelCalendarItemType::~T__CancelCalendarItemType()
{
}


KDSoapValue T__MonthlyRegeneratingPatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RegeneratingPatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MonthlyRegeneratingPatternType"));
    return mainValue;
}

void T__MonthlyRegeneratingPatternType::deserialize( const KDSoapValue& mainValue )
{
    T__RegeneratingPatternBaseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__MonthlyRegeneratingPatternType::T__MonthlyRegeneratingPatternType()
{
}

T__MonthlyRegeneratingPatternType::~T__MonthlyRegeneratingPatternType()
{
}


KDSoapValue T__YearlyRegeneratingPatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RegeneratingPatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("YearlyRegeneratingPatternType"));
    return mainValue;
}

void T__YearlyRegeneratingPatternType::deserialize( const KDSoapValue& mainValue )
{
    T__RegeneratingPatternBaseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__YearlyRegeneratingPatternType::T__YearlyRegeneratingPatternType()
{
}

T__YearlyRegeneratingPatternType::~T__YearlyRegeneratingPatternType()
{
}


KDSoapValue T__DailyRegeneratingPatternType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__RegeneratingPatternBaseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DailyRegeneratingPatternType"));
    return mainValue;
}

void T__DailyRegeneratingPatternType::deserialize( const KDSoapValue& mainValue )
{
    T__RegeneratingPatternBaseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__DailyRegeneratingPatternType::T__DailyRegeneratingPatternType()
{
}

T__DailyRegeneratingPatternType::~T__DailyRegeneratingPatternType()
{
}


KDSoapValue T__ReplyAllToItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SmartResponseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ReplyAllToItemType"));
    return mainValue;
}

void T__ReplyAllToItemType::deserialize( const KDSoapValue& mainValue )
{
    T__SmartResponseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__ReplyAllToItemType::T__ReplyAllToItemType()
{
}

T__ReplyAllToItemType::~T__ReplyAllToItemType()
{
}


KDSoapValue T__TasksFolderType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__FolderType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TasksFolderType"));
    return mainValue;
}

void T__TasksFolderType::deserialize( const KDSoapValue& mainValue )
{
    T__FolderType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__TasksFolderType::T__TasksFolderType()
{
}

T__TasksFolderType::~T__TasksFolderType()
{
}


KDSoapValue T__TentativelyAcceptItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__WellKnownResponseObjectType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("TentativelyAcceptItemType"));
    return mainValue;
}

void T__TentativelyAcceptItemType::deserialize( const KDSoapValue& mainValue )
{
    T__WellKnownResponseObjectType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__TentativelyAcceptItemType::T__TentativelyAcceptItemType()
{
}

T__TentativelyAcceptItemType::~T__TentativelyAcceptItemType()
{
}


KDSoapValue T__ReplyToItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__SmartResponseType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ReplyToItemType"));
    return mainValue;
}

void T__ReplyToItemType::deserialize( const KDSoapValue& mainValue )
{
    T__SmartResponseType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__ReplyToItemType::T__ReplyToItemType()
{
}

T__ReplyToItemType::~T__ReplyToItemType()
{
}


KDSoapValue T__DeclineItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__WellKnownResponseObjectType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("DeclineItemType"));
    return mainValue;
}

void T__DeclineItemType::deserialize( const KDSoapValue& mainValue )
{
    T__WellKnownResponseObjectType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__DeclineItemType::T__DeclineItemType()
{
}

T__DeclineItemType::~T__DeclineItemType()
{
}


KDSoapValue T__AcceptItemType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = T__WellKnownResponseObjectType::serialize(valueName);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:311
    mainValue.setType(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("AcceptItemType"));
    return mainValue;
}

void T__AcceptItemType::deserialize( const KDSoapValue& mainValue )
{
    T__WellKnownResponseObjectType::deserialize(mainValue);
    Q_UNUSED(mainValue);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:358
}

T__AcceptItemType::T__AcceptItemType()
{
}

T__AcceptItemType::~T__AcceptItemType()
{
}


MoveFolderJob::MoveFolderJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultMoveFolderResult()
{
}

void MoveFolderJob::setRequest( const TNS__MoveFolderType& arg0 )
{
    mRequest = arg0;
}

TNS__MoveFolderType MoveFolderJob::request() const
{
    return mRequest;
}

void MoveFolderJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/MoveFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueMoveFolder(mRequest.serialize(QString::fromLatin1("MoveFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMoveFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMoveFolder.setQualified(true);
    message = _valueMoveFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("MoveFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__MoveFolderResponseType MoveFolderJob::moveFolderResult() const
{
    return mResultMoveFolderResult;
}

T__ServerVersionInfo MoveFolderJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void MoveFolderJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultMoveFolderResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


MoveItemJob::MoveItemJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultMoveItemResult()
{
}

void MoveItemJob::setRequest( const TNS__MoveItemType& arg0 )
{
    mRequest = arg0;
}

TNS__MoveItemType MoveItemJob::request() const
{
    return mRequest;
}

void MoveItemJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/MoveItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueMoveItem(mRequest.serialize(QString::fromLatin1("MoveItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMoveItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMoveItem.setQualified(true);
    message = _valueMoveItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("MoveItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__MoveItemResponseType MoveItemJob::moveItemResult() const
{
    return mResultMoveItemResult;
}

T__ServerVersionInfo MoveItemJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void MoveItemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultMoveItemResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


CopyItemJob::CopyItemJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultCopyItemResult()
{
}

void CopyItemJob::setRequest( const TNS__CopyItemType& arg0 )
{
    mRequest = arg0;
}

TNS__CopyItemType CopyItemJob::request() const
{
    return mRequest;
}

void CopyItemJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CopyItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCopyItem(mRequest.serialize(QString::fromLatin1("CopyItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCopyItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCopyItem.setQualified(true);
    message = _valueCopyItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CopyItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__CopyItemResponseType CopyItemJob::copyItemResult() const
{
    return mResultCopyItemResult;
}

T__ServerVersionInfo CopyItemJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void CopyItemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultCopyItemResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


GetDelegateJob::GetDelegateJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultGetDelegateResult()
{
}

void GetDelegateJob::setRequest( const TNS__GetDelegateType& arg0 )
{
    mRequest = arg0;
}

TNS__GetDelegateType GetDelegateJob::request() const
{
    return mRequest;
}

void GetDelegateJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDelegate(mRequest.serialize(QString::fromLatin1("GetDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetDelegate.setQualified(true);
    message = _valueGetDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDelegate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetDelegateResponseMessageType GetDelegateJob::getDelegateResult() const
{
    return mResultGetDelegateResult;
}

T__ServerVersionInfo GetDelegateJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void GetDelegateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultGetDelegateResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


AddDelegateJob::AddDelegateJob( ExchangeServices* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mRequest(), mResultAddDelegateResult()
{
}

void AddDelegateJob::setRequest( const TNS__AddDelegateType& arg0 )
{
    mRequest = arg0;
}

TNS__AddDelegateType AddDelegateJob::request() const
{
    return mRequest;
}

void AddDelegateJob::doStart()
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/AddDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddDelegate(mRequest.serialize(QString::fromLatin1("AddDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAddDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAddDelegate.setQualified(true);
    message = _valueAddDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("AddDelegate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__AddDelegateResponseMessageType AddDelegateJob::addDelegateResult() const
{
    return mResultAddDelegateResult;
}

T__ServerVersionInfo AddDelegateJob::serverVersion() const
{
    return mResultHeaderServerVersion;
}

void AddDelegateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:378
        mResultAddDelegateResult.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        mResultHeaderServerVersion.deserialize(watcher->returnHeaders().header(QLatin1String("ServerVersionInfo"), QLatin1String("http://schemas.microsoft.com/exchange/services/2006/types")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


class ExchangeServices::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

ExchangeServices::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


ExchangeServices::ExchangeServices( QObject* parent )
    : QObject(parent), d_ptr(new PrivateDPtr)
{
}

ExchangeServices::~ExchangeServices()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void ExchangeServices::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void ExchangeServices::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void ExchangeServices::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString ExchangeServices::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *ExchangeServices::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("https://exchange.washington.edu/EWS/Exchange.asmx");
        const QString messageNamespace = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_1 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *ExchangeServices::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const ExchangeServices*>( this )->clientInterface() );
}

TNS__ResolveNamesResponseType ExchangeServices::resolveNames( const TNS__ResolveNamesType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ResolveNames");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueResolveNames(request.serialize(QString::fromLatin1("ResolveNames")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResolveNames.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResolveNames.setQualified(true);
    message = _valueResolveNames;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("ResolveNames"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ResolveNamesResponseType();
    TNS__ResolveNamesResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncResolveNames( const TNS__ResolveNamesType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ResolveNames");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueResolveNames(request.serialize(QString::fromLatin1("ResolveNames")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueResolveNames.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueResolveNames.setQualified(true);
    message = _valueResolveNames;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("ResolveNames"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotResolveNamesFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotResolveNamesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT resolveNamesError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("resolveNames"), reply);
    } else {
        TNS__ResolveNamesResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT resolveNamesDone( ret );
    }
    watcher->deleteLater();
}

TNS__ExpandDLResponseType ExchangeServices::expandDL( const TNS__ExpandDLType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ExpandDL");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueExpandDL(request.serialize(QString::fromLatin1("ExpandDL")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueExpandDL.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueExpandDL.setQualified(true);
    message = _valueExpandDL;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("ExpandDL"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ExpandDLResponseType();
    TNS__ExpandDLResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncExpandDL( const TNS__ExpandDLType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ExpandDL");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueExpandDL(request.serialize(QString::fromLatin1("ExpandDL")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueExpandDL.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueExpandDL.setQualified(true);
    message = _valueExpandDL;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("ExpandDL"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotExpandDLFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotExpandDLFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT expandDLError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("expandDL"), reply);
    } else {
        TNS__ExpandDLResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT expandDLDone( ret );
    }
    watcher->deleteLater();
}

TNS__FindFolderResponseType ExchangeServices::findFolder( const TNS__FindFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/FindFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueFindFolder(request.serialize(QString::fromLatin1("FindFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFindFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFindFolder.setQualified(true);
    message = _valueFindFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("FindFolder"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__FindFolderResponseType();
    TNS__FindFolderResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncFindFolder( const TNS__FindFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/FindFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueFindFolder(request.serialize(QString::fromLatin1("FindFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFindFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFindFolder.setQualified(true);
    message = _valueFindFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("FindFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotFindFolderFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotFindFolderFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT findFolderError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("findFolder"), reply);
    } else {
        TNS__FindFolderResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT findFolderDone( ret );
    }
    watcher->deleteLater();
}

TNS__FindItemResponseType ExchangeServices::findItem( const TNS__FindItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/FindItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueFindItem(request.serialize(QString::fromLatin1("FindItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFindItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFindItem.setQualified(true);
    message = _valueFindItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("FindItem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__FindItemResponseType();
    TNS__FindItemResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncFindItem( const TNS__FindItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/FindItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueFindItem(request.serialize(QString::fromLatin1("FindItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueFindItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueFindItem.setQualified(true);
    message = _valueFindItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("FindItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotFindItemFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotFindItemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT findItemError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("findItem"), reply);
    } else {
        TNS__FindItemResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT findItemDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetFolderResponseType ExchangeServices::getFolder( const TNS__GetFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetFolder(request.serialize(QString::fromLatin1("GetFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetFolder.setQualified(true);
    message = _valueGetFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetFolder"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetFolderResponseType();
    TNS__GetFolderResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncGetFolder( const TNS__GetFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetFolder(request.serialize(QString::fromLatin1("GetFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetFolder.setQualified(true);
    message = _valueGetFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetFolderFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotGetFolderFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getFolderError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getFolder"), reply);
    } else {
        TNS__GetFolderResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT getFolderDone( ret );
    }
    watcher->deleteLater();
}

TNS__ConvertIdResponseType ExchangeServices::convertId( const TNS__ConvertIdType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ConvertId");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueConvertId(request.serialize(QString::fromLatin1("ConvertId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConvertId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueConvertId.setQualified(true);
    message = _valueConvertId;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("ConvertId"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ConvertIdResponseType();
    TNS__ConvertIdResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncConvertId( const TNS__ConvertIdType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/ConvertId");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueConvertId(request.serialize(QString::fromLatin1("ConvertId")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueConvertId.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueConvertId.setQualified(true);
    message = _valueConvertId;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("ConvertId"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotConvertIdFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotConvertIdFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT convertIdError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("convertId"), reply);
    } else {
        TNS__ConvertIdResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT convertIdDone( ret );
    }
    watcher->deleteLater();
}

TNS__CreateFolderResponseType ExchangeServices::createFolder( const TNS__CreateFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateFolder(request.serialize(QString::fromLatin1("CreateFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateFolder.setQualified(true);
    message = _valueCreateFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateFolder"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CreateFolderResponseType();
    TNS__CreateFolderResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncCreateFolder( const TNS__CreateFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateFolder(request.serialize(QString::fromLatin1("CreateFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateFolder.setQualified(true);
    message = _valueCreateFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateFolderFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotCreateFolderFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createFolderError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("createFolder"), reply);
    } else {
        TNS__CreateFolderResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT createFolderDone( ret );
    }
    watcher->deleteLater();
}

TNS__DeleteFolderResponseType ExchangeServices::deleteFolder( const TNS__DeleteFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteFolder(request.serialize(QString::fromLatin1("DeleteFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteFolder.setQualified(true);
    message = _valueDeleteFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("DeleteFolder"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__DeleteFolderResponseType();
    TNS__DeleteFolderResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncDeleteFolder( const TNS__DeleteFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteFolder(request.serialize(QString::fromLatin1("DeleteFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteFolder.setQualified(true);
    message = _valueDeleteFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("DeleteFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotDeleteFolderFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotDeleteFolderFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT deleteFolderError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("deleteFolder"), reply);
    } else {
        TNS__DeleteFolderResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT deleteFolderDone( ret );
    }
    watcher->deleteLater();
}

TNS__UpdateFolderResponseType ExchangeServices::updateFolder( const TNS__UpdateFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateFolder(request.serialize(QString::fromLatin1("UpdateFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateFolder.setQualified(true);
    message = _valueUpdateFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("UpdateFolder"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__UpdateFolderResponseType();
    TNS__UpdateFolderResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncUpdateFolder( const TNS__UpdateFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateFolder(request.serialize(QString::fromLatin1("UpdateFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateFolder.setQualified(true);
    message = _valueUpdateFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("UpdateFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotUpdateFolderFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotUpdateFolderFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT updateFolderError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("updateFolder"), reply);
    } else {
        TNS__UpdateFolderResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT updateFolderDone( ret );
    }
    watcher->deleteLater();
}

TNS__MoveFolderResponseType ExchangeServices::moveFolder( const TNS__MoveFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/MoveFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueMoveFolder(request.serialize(QString::fromLatin1("MoveFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMoveFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMoveFolder.setQualified(true);
    message = _valueMoveFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("MoveFolder"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__MoveFolderResponseType();
    TNS__MoveFolderResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncMoveFolder( const TNS__MoveFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/MoveFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueMoveFolder(request.serialize(QString::fromLatin1("MoveFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMoveFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMoveFolder.setQualified(true);
    message = _valueMoveFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("MoveFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMoveFolderFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotMoveFolderFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT moveFolderError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("moveFolder"), reply);
    } else {
        TNS__MoveFolderResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT moveFolderDone( ret );
    }
    watcher->deleteLater();
}

TNS__CopyFolderResponseType ExchangeServices::copyFolder( const TNS__CopyFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CopyFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCopyFolder(request.serialize(QString::fromLatin1("CopyFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCopyFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCopyFolder.setQualified(true);
    message = _valueCopyFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CopyFolder"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CopyFolderResponseType();
    TNS__CopyFolderResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncCopyFolder( const TNS__CopyFolderType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CopyFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCopyFolder(request.serialize(QString::fromLatin1("CopyFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCopyFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCopyFolder.setQualified(true);
    message = _valueCopyFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CopyFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCopyFolderFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotCopyFolderFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT copyFolderError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("copyFolder"), reply);
    } else {
        TNS__CopyFolderResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT copyFolderDone( ret );
    }
    watcher->deleteLater();
}

TNS__SubscribeResponseType ExchangeServices::subscribe( const TNS__SubscribeType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/Subscribe");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSubscribe(request.serialize(QString::fromLatin1("Subscribe")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSubscribe.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSubscribe.setQualified(true);
    message = _valueSubscribe;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("Subscribe"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SubscribeResponseType();
    TNS__SubscribeResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncSubscribe( const TNS__SubscribeType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/Subscribe");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSubscribe(request.serialize(QString::fromLatin1("Subscribe")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSubscribe.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSubscribe.setQualified(true);
    message = _valueSubscribe;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("Subscribe"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSubscribeFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotSubscribeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT subscribeError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("subscribe"), reply);
    } else {
        TNS__SubscribeResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT subscribeDone( ret );
    }
    watcher->deleteLater();
}

TNS__UnsubscribeResponseType ExchangeServices::unsubscribe( const TNS__UnsubscribeType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/Unsubscribe");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUnsubscribe(request.serialize(QString::fromLatin1("Unsubscribe")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUnsubscribe.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUnsubscribe.setQualified(true);
    message = _valueUnsubscribe;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("Unsubscribe"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__UnsubscribeResponseType();
    TNS__UnsubscribeResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncUnsubscribe( const TNS__UnsubscribeType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/Unsubscribe");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUnsubscribe(request.serialize(QString::fromLatin1("Unsubscribe")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUnsubscribe.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUnsubscribe.setQualified(true);
    message = _valueUnsubscribe;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("Unsubscribe"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotUnsubscribeFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotUnsubscribeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT unsubscribeError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("unsubscribe"), reply);
    } else {
        TNS__UnsubscribeResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT unsubscribeDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetEventsResponseType ExchangeServices::getEvents( const TNS__GetEventsType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetEvents");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetEvents(request.serialize(QString::fromLatin1("GetEvents")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetEvents.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetEvents.setQualified(true);
    message = _valueGetEvents;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetEvents"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetEventsResponseType();
    TNS__GetEventsResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncGetEvents( const TNS__GetEventsType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetEvents");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetEvents(request.serialize(QString::fromLatin1("GetEvents")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetEvents.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetEvents.setQualified(true);
    message = _valueGetEvents;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetEvents"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetEventsFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotGetEventsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getEventsError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getEvents"), reply);
    } else {
        TNS__GetEventsResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT getEventsDone( ret );
    }
    watcher->deleteLater();
}

TNS__SyncFolderHierarchyResponseType ExchangeServices::syncFolderHierarchy( const TNS__SyncFolderHierarchyType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderHierarchy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSyncFolderHierarchy(request.serialize(QString::fromLatin1("SyncFolderHierarchy")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSyncFolderHierarchy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncFolderHierarchy.setQualified(true);
    message = _valueSyncFolderHierarchy;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SyncFolderHierarchy"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SyncFolderHierarchyResponseType();
    TNS__SyncFolderHierarchyResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncSyncFolderHierarchy( const TNS__SyncFolderHierarchyType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderHierarchy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSyncFolderHierarchy(request.serialize(QString::fromLatin1("SyncFolderHierarchy")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSyncFolderHierarchy.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncFolderHierarchy.setQualified(true);
    message = _valueSyncFolderHierarchy;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SyncFolderHierarchy"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSyncFolderHierarchyFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotSyncFolderHierarchyFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    qDebug() << reply;
    if (reply.isFault()) {
        Q_EMIT syncFolderHierarchyError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("syncFolderHierarchy"), reply);
    } else {
        TNS__SyncFolderHierarchyResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT syncFolderHierarchyDone( ret );
    }
    watcher->deleteLater();
}

TNS__SyncFolderItemsResponseType ExchangeServices::syncFolderItems( const TNS__SyncFolderItemsType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderItems");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSyncFolderItems(request.serialize(QString::fromLatin1("SyncFolderItems")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSyncFolderItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncFolderItems.setQualified(true);
    message = _valueSyncFolderItems;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SyncFolderItems"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SyncFolderItemsResponseType();
    TNS__SyncFolderItemsResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncSyncFolderItems( const TNS__SyncFolderItemsType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderItems");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSyncFolderItems(request.serialize(QString::fromLatin1("SyncFolderItems")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSyncFolderItems.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSyncFolderItems.setQualified(true);
    message = _valueSyncFolderItems;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SyncFolderItems"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSyncFolderItemsFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotSyncFolderItemsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT syncFolderItemsError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("syncFolderItems"), reply);
    } else {
        TNS__SyncFolderItemsResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT syncFolderItemsDone( ret );
    }
    watcher->deleteLater();
}

TNS__CreateManagedFolderResponseType ExchangeServices::createManagedFolder( const TNS__CreateManagedFolderRequestType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateManagedFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateManagedFolder(request.serialize(QString::fromLatin1("CreateManagedFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateManagedFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateManagedFolder.setQualified(true);
    message = _valueCreateManagedFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateManagedFolder"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CreateManagedFolderResponseType();
    TNS__CreateManagedFolderResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncCreateManagedFolder( const TNS__CreateManagedFolderRequestType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateManagedFolder");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateManagedFolder(request.serialize(QString::fromLatin1("CreateManagedFolder")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateManagedFolder.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateManagedFolder.setQualified(true);
    message = _valueCreateManagedFolder;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateManagedFolder"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateManagedFolderFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotCreateManagedFolderFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createManagedFolderError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("createManagedFolder"), reply);
    } else {
        TNS__CreateManagedFolderResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT createManagedFolderDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetItemResponseType ExchangeServices::getItem( const TNS__GetItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetItem(request.serialize(QString::fromLatin1("GetItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetItem.setQualified(true);
    message = _valueGetItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetItem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetItemResponseType();
    TNS__GetItemResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncGetItem( const TNS__GetItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetItem(request.serialize(QString::fromLatin1("GetItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetItem.setQualified(true);
    message = _valueGetItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetItemFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotGetItemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getItemError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getItem"), reply);
    } else {
        TNS__GetItemResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT getItemDone( ret );
    }
    watcher->deleteLater();
}

TNS__CreateItemResponseType ExchangeServices::createItem( const TNS__CreateItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateItem(request.serialize(QString::fromLatin1("CreateItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateItem.setQualified(true);
    message = _valueCreateItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateItem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CreateItemResponseType();
    TNS__CreateItemResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncCreateItem( const TNS__CreateItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateItem(request.serialize(QString::fromLatin1("CreateItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateItem.setQualified(true);
    message = _valueCreateItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateItemFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotCreateItemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createItemError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("createItem"), reply);
    } else {
        TNS__CreateItemResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT createItemDone( ret );
    }
    watcher->deleteLater();
}

TNS__DeleteItemResponseType ExchangeServices::deleteItem( const TNS__DeleteItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteItem(request.serialize(QString::fromLatin1("DeleteItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteItem.setQualified(true);
    message = _valueDeleteItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("DeleteItem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__DeleteItemResponseType();
    TNS__DeleteItemResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncDeleteItem( const TNS__DeleteItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteItem(request.serialize(QString::fromLatin1("DeleteItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteItem.setQualified(true);
    message = _valueDeleteItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("DeleteItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotDeleteItemFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotDeleteItemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT deleteItemError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("deleteItem"), reply);
    } else {
        TNS__DeleteItemResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT deleteItemDone( ret );
    }
    watcher->deleteLater();
}

TNS__UpdateItemResponseType ExchangeServices::updateItem( const TNS__UpdateItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateItem(request.serialize(QString::fromLatin1("UpdateItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateItem.setQualified(true);
    message = _valueUpdateItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("UpdateItem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__UpdateItemResponseType();
    TNS__UpdateItemResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncUpdateItem( const TNS__UpdateItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateItem(request.serialize(QString::fromLatin1("UpdateItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateItem.setQualified(true);
    message = _valueUpdateItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("UpdateItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotUpdateItemFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotUpdateItemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT updateItemError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("updateItem"), reply);
    } else {
        TNS__UpdateItemResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT updateItemDone( ret );
    }
    watcher->deleteLater();
}

TNS__SendItemResponseType ExchangeServices::sendItem( const TNS__SendItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SendItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendItem(request.serialize(QString::fromLatin1("SendItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSendItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSendItem.setQualified(true);
    message = _valueSendItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SendItem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SendItemResponseType();
    TNS__SendItemResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncSendItem( const TNS__SendItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SendItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendItem(request.serialize(QString::fromLatin1("SendItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSendItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSendItem.setQualified(true);
    message = _valueSendItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SendItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSendItemFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotSendItemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT sendItemError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("sendItem"), reply);
    } else {
        TNS__SendItemResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT sendItemDone( ret );
    }
    watcher->deleteLater();
}

TNS__MoveItemResponseType ExchangeServices::moveItem( const TNS__MoveItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/MoveItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueMoveItem(request.serialize(QString::fromLatin1("MoveItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMoveItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMoveItem.setQualified(true);
    message = _valueMoveItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("MoveItem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__MoveItemResponseType();
    TNS__MoveItemResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncMoveItem( const TNS__MoveItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/MoveItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueMoveItem(request.serialize(QString::fromLatin1("MoveItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueMoveItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueMoveItem.setQualified(true);
    message = _valueMoveItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("MoveItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMoveItemFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotMoveItemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT moveItemError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("moveItem"), reply);
    } else {
        TNS__MoveItemResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT moveItemDone( ret );
    }
    watcher->deleteLater();
}

TNS__CopyItemResponseType ExchangeServices::copyItem( const TNS__CopyItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CopyItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCopyItem(request.serialize(QString::fromLatin1("CopyItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCopyItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCopyItem.setQualified(true);
    message = _valueCopyItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CopyItem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CopyItemResponseType();
    TNS__CopyItemResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncCopyItem( const TNS__CopyItemType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CopyItem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCopyItem(request.serialize(QString::fromLatin1("CopyItem")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCopyItem.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCopyItem.setQualified(true);
    message = _valueCopyItem;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CopyItem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCopyItemFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotCopyItemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT copyItemError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("copyItem"), reply);
    } else {
        TNS__CopyItemResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT copyItemDone( ret );
    }
    watcher->deleteLater();
}

TNS__CreateAttachmentResponseType ExchangeServices::createAttachment( const TNS__CreateAttachmentType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateAttachment(request.serialize(QString::fromLatin1("CreateAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateAttachment.setQualified(true);
    message = _valueCreateAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateAttachment"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CreateAttachmentResponseType();
    TNS__CreateAttachmentResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncCreateAttachment( const TNS__CreateAttachmentType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/CreateAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateAttachment(request.serialize(QString::fromLatin1("CreateAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueCreateAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueCreateAttachment.setQualified(true);
    message = _valueCreateAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateAttachment"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateAttachmentFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotCreateAttachmentFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createAttachmentError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("createAttachment"), reply);
    } else {
        TNS__CreateAttachmentResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT createAttachmentDone( ret );
    }
    watcher->deleteLater();
}

TNS__DeleteAttachmentResponseType ExchangeServices::deleteAttachment( const TNS__DeleteAttachmentType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteAttachment(request.serialize(QString::fromLatin1("DeleteAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteAttachment.setQualified(true);
    message = _valueDeleteAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("DeleteAttachment"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__DeleteAttachmentResponseType();
    TNS__DeleteAttachmentResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncDeleteAttachment( const TNS__DeleteAttachmentType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/DeleteAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteAttachment(request.serialize(QString::fromLatin1("DeleteAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueDeleteAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueDeleteAttachment.setQualified(true);
    message = _valueDeleteAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("DeleteAttachment"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotDeleteAttachmentFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotDeleteAttachmentFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT deleteAttachmentError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("deleteAttachment"), reply);
    } else {
        TNS__DeleteAttachmentResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT deleteAttachmentDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetAttachmentResponseType ExchangeServices::getAttachment( const TNS__GetAttachmentType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetAttachment(request.serialize(QString::fromLatin1("GetAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetAttachment.setQualified(true);
    message = _valueGetAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetAttachment"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetAttachmentResponseType();
    TNS__GetAttachmentResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncGetAttachment( const TNS__GetAttachmentType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetAttachment");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetAttachment(request.serialize(QString::fromLatin1("GetAttachment")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetAttachment.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetAttachment.setQualified(true);
    message = _valueGetAttachment;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetAttachment"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetAttachmentFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotGetAttachmentFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getAttachmentError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getAttachment"), reply);
    } else {
        TNS__GetAttachmentResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT getAttachmentDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetDelegateResponseMessageType ExchangeServices::getDelegate( const TNS__GetDelegateType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDelegate(request.serialize(QString::fromLatin1("GetDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetDelegate.setQualified(true);
    message = _valueGetDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDelegate"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetDelegateResponseMessageType();
    TNS__GetDelegateResponseMessageType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncGetDelegate( const TNS__GetDelegateType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDelegate(request.serialize(QString::fromLatin1("GetDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetDelegate.setQualified(true);
    message = _valueGetDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDelegate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDelegateFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotGetDelegateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDelegateError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getDelegate"), reply);
    } else {
        TNS__GetDelegateResponseMessageType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT getDelegateDone( ret );
    }
    watcher->deleteLater();
}

TNS__AddDelegateResponseMessageType ExchangeServices::addDelegate( const TNS__AddDelegateType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/AddDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddDelegate(request.serialize(QString::fromLatin1("AddDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAddDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAddDelegate.setQualified(true);
    message = _valueAddDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("AddDelegate"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__AddDelegateResponseMessageType();
    TNS__AddDelegateResponseMessageType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncAddDelegate( const TNS__AddDelegateType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/AddDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddDelegate(request.serialize(QString::fromLatin1("AddDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueAddDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueAddDelegate.setQualified(true);
    message = _valueAddDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("AddDelegate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotAddDelegateFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotAddDelegateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT addDelegateError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("addDelegate"), reply);
    } else {
        TNS__AddDelegateResponseMessageType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT addDelegateDone( ret );
    }
    watcher->deleteLater();
}

TNS__RemoveDelegateResponseMessageType ExchangeServices::removeDelegate( const TNS__RemoveDelegateType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/RemoveDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveDelegate(request.serialize(QString::fromLatin1("RemoveDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRemoveDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueRemoveDelegate.setQualified(true);
    message = _valueRemoveDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("RemoveDelegate"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__RemoveDelegateResponseMessageType();
    TNS__RemoveDelegateResponseMessageType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncRemoveDelegate( const TNS__RemoveDelegateType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/RemoveDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveDelegate(request.serialize(QString::fromLatin1("RemoveDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRemoveDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueRemoveDelegate.setQualified(true);
    message = _valueRemoveDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("RemoveDelegate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotRemoveDelegateFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotRemoveDelegateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT removeDelegateError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("removeDelegate"), reply);
    } else {
        TNS__RemoveDelegateResponseMessageType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT removeDelegateDone( ret );
    }
    watcher->deleteLater();
}

TNS__UpdateDelegateResponseMessageType ExchangeServices::updateDelegate( const TNS__UpdateDelegateType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateDelegate(request.serialize(QString::fromLatin1("UpdateDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateDelegate.setQualified(true);
    message = _valueUpdateDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("UpdateDelegate"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__UpdateDelegateResponseMessageType();
    TNS__UpdateDelegateResponseMessageType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncUpdateDelegate( const TNS__UpdateDelegateType& request )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/UpdateDelegate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpdateDelegate(request.serialize(QString::fromLatin1("UpdateDelegate")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueUpdateDelegate.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueUpdateDelegate.setQualified(true);
    message = _valueUpdateDelegate;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("UpdateDelegate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotUpdateDelegateFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotUpdateDelegateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT updateDelegateError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("updateDelegate"), reply);
    } else {
        TNS__UpdateDelegateResponseMessageType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT updateDelegateDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetUserAvailabilityResponseType ExchangeServices::getUserAvailability( const TNS__GetUserAvailabilityRequestType& getUserAvailabilityRequest )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetUserAvailability");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUserAvailabilityRequest(getUserAvailabilityRequest.serialize(QString::fromLatin1("GetUserAvailabilityRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetUserAvailabilityRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetUserAvailabilityRequest.setQualified(true);
    message = _valueGetUserAvailabilityRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetUserAvailability"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetUserAvailabilityResponseType();
    TNS__GetUserAvailabilityResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncGetUserAvailability( const TNS__GetUserAvailabilityRequestType& getUserAvailabilityRequest )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetUserAvailability");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUserAvailabilityRequest(getUserAvailabilityRequest.serialize(QString::fromLatin1("GetUserAvailabilityRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetUserAvailabilityRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetUserAvailabilityRequest.setQualified(true);
    message = _valueGetUserAvailabilityRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetUserAvailability"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetUserAvailabilityFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotGetUserAvailabilityFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getUserAvailabilityError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getUserAvailability"), reply);
    } else {
        TNS__GetUserAvailabilityResponseType ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT getUserAvailabilityDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetUserOofSettingsResponse ExchangeServices::getUserOofSettings( const TNS__GetUserOofSettingsRequest& getUserOofSettingsRequest )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetUserOofSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUserOofSettingsRequest(getUserOofSettingsRequest.serialize(QString::fromLatin1("GetUserOofSettingsRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetUserOofSettingsRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetUserOofSettingsRequest.setQualified(true);
    message = _valueGetUserOofSettingsRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetUserOofSettings"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetUserOofSettingsResponse();
    TNS__GetUserOofSettingsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncGetUserOofSettings( const TNS__GetUserOofSettingsRequest& getUserOofSettingsRequest )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/GetUserOofSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUserOofSettingsRequest(getUserOofSettingsRequest.serialize(QString::fromLatin1("GetUserOofSettingsRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueGetUserOofSettingsRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueGetUserOofSettingsRequest.setQualified(true);
    message = _valueGetUserOofSettingsRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetUserOofSettings"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetUserOofSettingsFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotGetUserOofSettingsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getUserOofSettingsError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getUserOofSettings"), reply);
    } else {
        TNS__GetUserOofSettingsResponse ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT getUserOofSettingsDone( ret );
    }
    watcher->deleteLater();
}

TNS__SetUserOofSettingsResponse ExchangeServices::setUserOofSettings( const TNS__SetUserOofSettingsRequest& setUserOofSettingsRequest )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SetUserOofSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetUserOofSettingsRequest(setUserOofSettingsRequest.serialize(QString::fromLatin1("SetUserOofSettingsRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSetUserOofSettingsRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSetUserOofSettingsRequest.setQualified(true);
    message = _valueSetUserOofSettingsRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetUserOofSettings"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SetUserOofSettingsResponse();
    TNS__SetUserOofSettingsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
    return ret;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:587
}

void ExchangeServices::asyncSetUserOofSettings( const TNS__SetUserOofSettingsRequest& setUserOofSettingsRequest )
{
    const QString action = QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages/SetUserOofSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetUserOofSettingsRequest(setUserOofSettingsRequest.serialize(QString::fromLatin1("SetUserOofSettingsRequest")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSetUserOofSettingsRequest.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/messages"));
    _valueSetUserOofSettingsRequest.setQualified(true);
    message = _valueSetUserOofSettingsRequest;// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetUserOofSettings"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetUserOofSettingsFinished(KDSoapPendingCallWatcher*)));
}

void ExchangeServices::_kd_slotSetUserOofSettingsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setUserOofSettingsError(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("setUserOofSettings"), reply);
    } else {
        TNS__SetUserOofSettingsResponse ret;
        ret.deserialize(reply);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_clientstub.cpp:533
        Q_EMIT setUserOofSettingsDone( ret );
    }
    watcher->deleteLater();
}

void ExchangeServices::setImpersonationHeader( const T__ExchangeImpersonationType& impersonation )
{
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueExchangeImpersonation(impersonation.serialize(QString::fromLatin1("ExchangeImpersonation")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueExchangeImpersonation.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueExchangeImpersonation.setQualified(true);
    message.childValues().append(_valueExchangeImpersonation);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    clientInterface()->setHeader( QLatin1String("Impersonation"), message );
}

void ExchangeServices::clearImpersonationHeader()
{
    clientInterface()->setHeader( QLatin1String("Impersonation"), KDSoapMessage() );
}

void ExchangeServices::setS2SAuthHeader( const T__SerializedSecurityContextType& s2SAuth )
{
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSerializedSecurityContext(s2SAuth.serialize(QString::fromLatin1("SerializedSecurityContext")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSerializedSecurityContext.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSerializedSecurityContext.setQualified(true);
    message.childValues().append(_valueSerializedSecurityContext);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    clientInterface()->setHeader( QLatin1String("S2SAuth"), message );
}

void ExchangeServices::clearS2SAuthHeader()
{
    clientInterface()->setHeader( QLatin1String("S2SAuth"), KDSoapMessage() );
}

void ExchangeServices::setMailboxCultureHeader( const QString& mailboxCulture )
{
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueMailboxCulture(QString::fromLatin1("MailboxCulture"), QVariant::fromValue(mailboxCulture), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("MailboxCulture"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:215
    _valueMailboxCulture.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueMailboxCulture.setQualified(true);
    message.childValues().append(_valueMailboxCulture);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    clientInterface()->setHeader( QLatin1String("MailboxCulture"), message );
}

void ExchangeServices::clearMailboxCultureHeader()
{
    clientInterface()->setHeader( QLatin1String("MailboxCulture"), KDSoapMessage() );
}

void ExchangeServices::setRequestVersionHeader( const T__RequestServerVersion& requestVersion )
{
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRequestServerVersion(requestVersion.serialize(QString::fromLatin1("RequestServerVersion")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueRequestServerVersion.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueRequestServerVersion.setQualified(true);
    message.childValues().append(_valueRequestServerVersion);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    clientInterface()->setHeader( QLatin1String("RequestVersion"), message );
}

void ExchangeServices::clearRequestVersionHeader()
{
    clientInterface()->setHeader( QLatin1String("RequestVersion"), KDSoapMessage() );
}

void ExchangeServices::setTimeZoneContextHeader( const T__TimeZoneContextType& timeZoneContext )
{
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueTimeZoneContext(timeZoneContext.serialize(QString::fromLatin1("TimeZoneContext")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueTimeZoneContext.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueTimeZoneContext.setQualified(true);
    message.childValues().append(_valueTimeZoneContext);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    clientInterface()->setHeader( QLatin1String("TimeZoneContext"), message );
}

void ExchangeServices::clearTimeZoneContextHeader()
{
    clientInterface()->setHeader( QLatin1String("TimeZoneContext"), KDSoapMessage() );
}

void ExchangeServices::setSerializedSecurityContextHeader( const T__SerializedSecurityContextType& serializedSecurityContext )
{
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSerializedSecurityContext(serializedSecurityContext.serialize(QString::fromLatin1("SerializedSecurityContext")));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:209
    _valueSerializedSecurityContext.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueSerializedSecurityContext.setQualified(true);
    message.childValues().append(_valueSerializedSecurityContext);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    clientInterface()->setHeader( QLatin1String("SerializedSecurityContext"), message );
}

void ExchangeServices::clearSerializedSecurityContextHeader()
{
    clientInterface()->setHeader( QLatin1String("SerializedSecurityContext"), KDSoapMessage() );
}

void ExchangeServices::setProxyRequestTypeHeader( const T__AvailabilityProxyRequestType& proxyRequestTypeHeader )
{
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueProxyRequestTypeHeader(QString::fromLatin1("ProxyRequestTypeHeader"), proxyRequestTypeHeader.serialize(), QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"), QString::fromLatin1("ProxyRequestTypeHeader"));// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:217
    _valueProxyRequestTypeHeader.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/exchange/services/2006/types"));
    _valueProxyRequestTypeHeader.setQualified(true);
    message.childValues().append(_valueProxyRequestTypeHeader);// /home/daniel/code/KDSoap/kdwsdl2cpp/src/converter_complextype.cpp:228
    clientInterface()->setHeader( QLatin1String("ProxyRequestTypeHeader"), message );
}

void ExchangeServices::clearProxyRequestTypeHeader()
{
    clientInterface()->setHeader( QLatin1String("ProxyRequestTypeHeader"), KDSoapMessage() );
}


