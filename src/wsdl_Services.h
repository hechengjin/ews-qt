// This file is generated by KDAB's kdwsdl2cpp from Services.wsdl.
// All changes you do to this file will be lost.
#ifndef WSDL_SERVICES_H
#define WSDL_SERVICES_H

#include <QtCore/QString>
#include <QtCore/QList>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtCore/QSharedData>
#include <KDSoapClient/KDDateTime.h>
#include <QtCore/QTime>
#include <QtCore/QDate>
#include <KDSoapClient/KDSoapValue.h>
#include <QtCore/QByteArray>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapClient/KDSoapClientInterface.h>

class ExchangeServices;
class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
class TNS__ArrayOfDelegateUserResponseMessageType;
class TNS__ArrayOfFreeBusyResponse;
class TNS__ArrayOfResponseMessagesType;
class TNS__AttachmentInfoResponseMessageType;
class TNS__BaseDelegateResponseMessageType;
class TNS__BaseDelegateType;
class TNS__BaseMoveCopyFolderType;
class TNS__BaseMoveCopyItemType;
class TNS__BaseRequestType;
class TNS__BaseResponseMessageType;
class TNS__ConvertIdResponseMessageType;
class TNS__DelegateUserResponseMessageType;
class TNS__DeleteAttachmentResponseMessageType;
class TNS__ExpandDLResponseMessageType;
class TNS__FindFolderResponseMessageType;
class TNS__FindItemResponseMessageType;
class TNS__FolderInfoResponseMessageType;
class TNS__FreeBusyResponseType;
class TNS__GetEventsResponseMessageType;
class TNS__ItemInfoResponseMessageType;
class TNS__MessageXml;
class TNS__ResolveNamesResponseMessageType;
class TNS__ResponseCodeType;
class TNS__ResponseMessageType;
class TNS__SendNotificationResponseMessageType;
class TNS__SubscribeResponseMessageType;
class TNS__SuggestionsResponseType;
class TNS__SyncFolderHierarchyResponseMessageType;
class TNS__SyncFolderItemsResponseMessageType;
class TNS__UpdateItemResponseMessageType;
class T__AbsoluteMonthlyRecurrencePatternType;
class T__AbsoluteYearlyRecurrencePatternType;
class T__AcceptItemType;
class T__AffectedTaskOccurrencesType;
class T__AggregateOnType;
class T__AggregateType;
class T__AlternateIdBaseType;
class T__AlternateIdType;
class T__AlternatePublicFolderIdType;
class T__AlternatePublicFolderItemIdType;
class T__AppendToFolderFieldType;
class T__AppendToItemFieldType;
class T__ArrayOfAttachmentsType;
class T__ArrayOfAttendeeConflictData;
class T__ArrayOfBaseItemIdsType;
class T__ArrayOfCalendarEvent;
class T__ArrayOfCalendarPermissionsType;
class T__ArrayOfDLExpansionType;
class T__ArrayOfDelegateUserType;
class T__ArrayOfFoldersType;
class T__ArrayOfGroupedItemsType;
class T__ArrayOfMailboxData;
class T__ArrayOfPermissionsType;
class T__ArrayOfRealItemsType;
class T__ArrayOfRecipientsType;
class T__ArrayOfResolutionType;
class T__ArrayOfStringsType;
class T__ArrayOfSuggestion;
class T__ArrayOfSuggestionDayResult;
class T__ArrayOfUnknownEntriesType;
class T__ArrayOfUserIdType;
class T__ArrayOfWorkingPeriod;
class T__AttachmentIdType;
class T__AttachmentResponseShapeType;
class T__AttachmentType;
class T__AttendeeConflictData;
class T__AttendeeType;
class T__BaseEmailAddressType;
class T__BaseFolderIdType;
class T__BaseFolderType;
class T__BaseGroupByType;
class T__BaseItemIdType;
class T__BaseNotificationEventType;
class T__BaseObjectChangedEventType;
class T__BasePagingType;
class T__BasePathToElementType;
class T__BasePermissionType;
class T__BaseSubscriptionRequestType;
class T__BodyType;
class T__BodyTypeResponseType;
class T__BodyTypeType;
class T__CalendarEvent;
class T__CalendarEventDetails;
class T__CalendarFolderType;
class T__CalendarItemCreateOrDeleteOperationType;
class T__CalendarItemType;
class T__CalendarItemTypeType;
class T__CalendarItemUpdateOperationType;
class T__CalendarPermissionLevelType;
class T__CalendarPermissionReadAccessType;
class T__CalendarPermissionSetType;
class T__CalendarPermissionType;
class T__CalendarViewType;
class T__CancelCalendarItemType;
class T__ChangeDescriptionType;
class T__CompleteNameType;
class T__ConflictResolutionType;
class T__ConflictResultsType;
class T__ConnectingSIDType;
class T__ConstantValueType;
class T__ContactItemType;
class T__ContactSourceType;
class T__ContactsFolderType;
class T__ContactsViewType;
class T__ContainmentComparisonType;
class T__ContainmentModeType;
class T__DailyRecurrencePatternType;
class T__DailyRegeneratingPatternType;
class T__DayOfWeekIndexType;
class T__DayOfWeekType;
class T__DaysOfWeekType;
class T__DeclineItemType;
class T__DefaultShapeNamesType;
class T__DelegateFolderPermissionLevelType;
class T__DelegatePermissionsType;
class T__DelegateUserType;
class T__DeleteFolderFieldType;
class T__DeleteItemFieldType;
class T__DeletedOccurrenceInfoType;
class T__DeliverMeetingRequestsType;
class T__DerivedItemIdType;
class T__DictionaryURIType;
class T__DisposalType;
class T__DistinguishedFolderIdNameType;
class T__DistinguishedFolderIdType;
class T__DistinguishedGroupByType;
class T__DistinguishedPropertySetType;
class T__DistinguishedUserType;
class T__DistributionListType;
class T__Duration;
class T__EffectiveRightsType;
class T__EmailAddress;
class T__EmailAddressDictionaryEntryType;
class T__EmailAddressDictionaryType;
class T__EmailAddressKeyType;
class T__EmailAddressType;
class T__EndDateRecurrenceRangeType;
class T__ExceptionPropertyURIType;
class T__ExchangeVersionType;
class T__ExcludesAttributeType;
class T__ExcludesValueType;
class T__ExtendedPropertyType;
class T__ExternalAudience;
class T__FieldOrderType;
class T__FieldURIOrConstantType;
class T__FileAsMappingType;
class T__FileAttachmentType;
class T__FindFolderParentType;
class T__FindItemParentType;
class T__FolderChangeDescriptionType;
class T__FolderChangeType;
class T__FolderIdType;
class T__FolderQueryTraversalType;
class T__FolderResponseShapeType;
class T__FolderType;
class T__ForwardItemType;
class T__FractionalPageViewType;
class T__FreeBusyView;
class T__FreeBusyViewOptionsType;
class T__FreeBusyViewType;
class T__FreeBusyViewTypeListItem;
class T__GroupAttendeeConflictData;
class T__GroupByType;
class T__GroupedItemsType;
class T__GuidType;
class T__IdFormatType;
class T__ImAddressDictionaryEntryType;
class T__ImAddressDictionaryType;
class T__ImAddressKeyType;
class T__ImportanceChoicesType;
class T__IndexBasePointType;
class T__IndexedPageViewType;
class T__IndividualAttendeeConflictData;
class T__InternetHeaderType;
class T__IntervalRecurrencePatternBaseType;
class T__ItemAttachmentType;
class T__ItemChangeDescriptionType;
class T__ItemChangeType;
class T__ItemClassType;
class T__ItemIdType;
class T__ItemQueryTraversalType;
class T__ItemResponseShapeType;
class T__ItemType;
class T__LegacyFreeBusyType;
class T__MailboxData;
class T__MailboxTypeType;
class T__ManagedFolderInformationType;
class T__MapiPropertyTypeType;
class T__MaxSyncChangesReturnedType;
class T__MeetingAttendeeType;
class T__MeetingCancellationMessageType;
class T__MeetingMessageType;
class T__MeetingRequestMessageType;
class T__MeetingRequestTypeType;
class T__MeetingResponseMessageType;
class T__MessageDispositionType;
class T__MessageType;
class T__MimeContentType;
class T__ModifiedEventType;
class T__MonthNamesType;
class T__MonthlyRegeneratingPatternType;
class T__MovedCopiedEventType;
class T__MultipleOperandBooleanExpressionType;
class T__NoEndRecurrenceRangeType;
class T__NonEmptyArrayOfAllItemsType;
class T__NonEmptyArrayOfAlternateIdsType;
class T__NonEmptyArrayOfAttachmentsType;
class T__NonEmptyArrayOfAttendeesType;
class T__NonEmptyArrayOfBaseFolderIdsType;
class T__NonEmptyArrayOfBaseItemIdsType;
class T__NonEmptyArrayOfDeletedOccurrencesType;
class T__NonEmptyArrayOfFieldOrdersType;
class T__NonEmptyArrayOfFolderChangeDescriptionsType;
class T__NonEmptyArrayOfFolderChangesType;
class T__NonEmptyArrayOfFolderNamesType;
class T__NonEmptyArrayOfFoldersType;
class T__NonEmptyArrayOfGroupIdentifiersType;
class T__NonEmptyArrayOfInternetHeadersType;
class T__NonEmptyArrayOfItemChangeDescriptionsType;
class T__NonEmptyArrayOfItemChangesType;
class T__NonEmptyArrayOfNotificationEventTypesType;
class T__NonEmptyArrayOfOccurrenceInfoType;
class T__NonEmptyArrayOfPathsToElementType;
class T__NonEmptyArrayOfPropertyValuesType;
class T__NonEmptyArrayOfRequestAttachmentIdsType;
class T__NonEmptyArrayOfResponseObjectsType;
class T__NonEmptyArrayOfRestrictedGroupIdentifiersType;
class T__NonEmptyStringType;
class T__NotificationEventTypeType;
class T__NotificationType;
class T__NumberedRecurrenceRangeType;
class T__OccurrenceInfoType;
class T__OccurrenceItemIdType;
class T__OofState;
class T__PathToExtendedFieldType;
class T__PathToIndexedFieldType;
class T__PathToUnindexedFieldType;
class T__PermissionActionType;
class T__PermissionLevelType;
class T__PermissionReadAccessType;
class T__PermissionSetType;
class T__PermissionType;
class T__PhoneNumberDictionaryEntryType;
class T__PhoneNumberDictionaryType;
class T__PhoneNumberKeyType;
class T__PhysicalAddressDictionaryEntryType;
class T__PhysicalAddressDictionaryType;
class T__PhysicalAddressIndexType;
class T__PhysicalAddressKeyType;
class T__PostItemType;
class T__PostReplyItemBaseType;
class T__PostReplyItemType;
class T__PropertyTagType;
class T__PullSubscriptionRequestType;
class T__PushSubscriptionRequestType;
class T__RecurrencePatternBaseType;
class T__RecurrenceRangeBaseType;
class T__RecurrenceType;
class T__RecurringMasterItemIdType;
class T__ReferenceItemResponseType;
class T__RegeneratingPatternBaseType;
class T__RelativeMonthlyRecurrencePatternType;
class T__RelativeYearlyRecurrencePatternType;
class T__ReminderMinutesBeforeStartType;
class T__RemoveItemType;
class T__ReplyAllToItemType;
class T__ReplyBody;
class T__ReplyToItemType;
class T__RequestAttachmentIdType;
class T__ResolutionType;
class T__ResolveNamesSearchScopeType;
class T__ResponseClassType;
class T__ResponseObjectCoreType;
class T__ResponseObjectType;
class T__ResponseTypeType;
class T__RestrictionType;
class T__RootItemIdType;
class T__SearchExpressionType;
class T__SearchFolderTraversalType;
class T__SearchFolderType;
class T__SearchParametersType;
class T__SensitivityChoicesType;
class T__SerializableTimeZone;
class T__SerializableTimeZoneTime;
class T__SetFolderFieldType;
class T__SetItemFieldType;
class T__SidAndAttributesType;
class T__SingleRecipientType;
class T__SmartResponseBaseType;
class T__SmartResponseType;
class T__SortDirectionType;
class T__StandardGroupByType;
class T__SubscriptionIdType;
class T__SubscriptionStatusFrequencyType;
class T__SubscriptionTimeoutType;
class T__Suggestion;
class T__SuggestionDayResult;
class T__SuggestionQuality;
class T__SuggestionsViewOptionsType;
class T__SuppressReadReceiptType;
class T__SyncFolderHierarchyChangesType;
class T__SyncFolderHierarchyCreateOrUpdateType;
class T__SyncFolderHierarchyDeleteType;
class T__SyncFolderItemsChangesType;
class T__SyncFolderItemsCreateOrUpdateType;
class T__SyncFolderItemsDeleteType;
class T__SyncFolderItemsReadFlagType;
class T__TargetFolderIdType;
class T__TaskDelegateStateType;
class T__TaskRecurrenceType;
class T__TaskStatusType;
class T__TaskType;
class T__TasksFolderType;
class T__TentativelyAcceptItemType;
class T__TimeChangeType;
class T__TimeZoneDefinitionType;
class T__TimeZoneType;
class T__TooBigGroupAttendeeConflictData;
class T__TwoOperandExpressionType;
class T__UnindexedFieldURIType;
class T__UnknownAttendeeConflictData;
class T__UserIdType;
class T__UserOofSettings;
class T__WatermarkType;
class T__WeeklyRecurrencePatternType;
class T__WeeklyRegeneratingPatternType;
class T__WellKnownResponseObjectType;
class T__WorkingHours;
class T__WorkingPeriod;
class T__YearlyRegeneratingPatternType;

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__AvailabilityProxyRequestType
    you can also pass the enum directly.
    Example:
    someMethod(T__AvailabilityProxyRequestType::CrossSite).
 */
class T__AvailabilityProxyRequestType
{
public:
    enum Type { CrossSite, CrossForest };

public:
    T__AvailabilityProxyRequestType( const Type &type );
    void setType( Type type );
    T__AvailabilityProxyRequestType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__AvailabilityProxyRequestType();
    ~T__AvailabilityProxyRequestType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ExternalAudience you can
    also pass the enum directly.
    Example:
    someMethod(T__ExternalAudience::None).
 */
class T__ExternalAudience
{
public:
    enum Type { None, Known, All };

public:
    T__ExternalAudience( const Type &type );
    void setType( Type type );
    T__ExternalAudience::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ExternalAudience();
    ~T__ExternalAudience();

private:
    Type mType;
};

/**
    Type of conflict resolution to attempt during update
 */
class T__ConflictResolutionType
{
public:
    enum Type { NeverOverwrite, AutoResolve, AlwaysOverwrite };

public:
    T__ConflictResolutionType( const Type &type );
    void setType( Type type );
    T__ConflictResolutionType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ConflictResolutionType();
    ~T__ConflictResolutionType();

private:
    Type mType;
};

/**
    Surfaces the various id types that are supported for conversion
 */
class T__IdFormatType
{
public:
    enum Type { EwsLegacyId, EwsId, EntryId, HexEntryId, StoreId, OwaId };

public:
    T__IdFormatType( const Type &type );
    void setType( Type type );
    T__IdFormatType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__IdFormatType();
    ~T__IdFormatType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type
    T__CalendarItemUpdateOperationType you can also pass the enum directly.
    Example:
    someMethod(T__CalendarItemUpdateOperationType::SendToNone).
 */
class T__CalendarItemUpdateOperationType
{
public:
    enum Type { SendToNone, SendOnlyToAll, SendOnlyToChanged, SendToAllAndSaveCopy, SendToChangedAndSaveCopy };

public:
    T__CalendarItemUpdateOperationType( const Type &type );
    void setType( Type type );
    T__CalendarItemUpdateOperationType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__CalendarItemUpdateOperationType();
    ~T__CalendarItemUpdateOperationType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__AffectedTaskOccurrencesType
    you can also pass the enum directly.
    Example:
    someMethod(T__AffectedTaskOccurrencesType::AllOccurrences).
 */
class T__AffectedTaskOccurrencesType
{
public:
    enum Type { AllOccurrences, SpecifiedOccurrenceOnly };

public:
    T__AffectedTaskOccurrencesType( const Type &type );
    void setType( Type type );
    T__AffectedTaskOccurrencesType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__AffectedTaskOccurrencesType();
    ~T__AffectedTaskOccurrencesType();

private:
    Type mType;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type T__MaxSyncChangesReturnedType
    you can also pass the value directly as a int.
 */
class T__MaxSyncChangesReturnedType
{
public:
    void setValue( int value );
    int value() const;
    T__MaxSyncChangesReturnedType( int value );
    operator int() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__MaxSyncChangesReturnedType();
    ~T__MaxSyncChangesReturnedType();

private:
    int mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ExchangeVersionType you can
    also pass the enum directly.
    Example:
    someMethod(T__ExchangeVersionType::Exchange2007).
 */
class T__ExchangeVersionType
{
public:
    enum Type { Exchange2007, Exchange2007_SP1 };

public:
    T__ExchangeVersionType( const Type &type );
    void setType( Type type );
    T__ExchangeVersionType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ExchangeVersionType();
    ~T__ExchangeVersionType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__MessageDispositionType you
    can also pass the enum directly.
    Example:
    someMethod(T__MessageDispositionType::SaveOnly).
 */
class T__MessageDispositionType
{
public:
    enum Type { SaveOnly, SendOnly, SendAndSaveCopy };

public:
    T__MessageDispositionType( const Type &type );
    void setType( Type type );
    T__MessageDispositionType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__MessageDispositionType();
    ~T__MessageDispositionType();

private:
    Type mType;
};

/**
    Types of sub-tree traversal for deletion and enumeration
 */
class T__ItemQueryTraversalType
{
public:
    enum Type { Shallow, SoftDeleted };

public:
    T__ItemQueryTraversalType( const Type &type );
    void setType( Type type );
    T__ItemQueryTraversalType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ItemQueryTraversalType();
    ~T__ItemQueryTraversalType();

private:
    Type mType;
};

/**
    Types of sub-tree traversal for deletion and enumeration
 */
class T__FolderQueryTraversalType
{
public:
    enum Type { Shallow, Deep, SoftDeleted };

public:
    T__FolderQueryTraversalType( const Type &type );
    void setType( Type type );
    T__FolderQueryTraversalType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__FolderQueryTraversalType();
    ~T__FolderQueryTraversalType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ResolveNamesSearchScopeType
    you can also pass the enum directly.
    Example:
    someMethod(T__ResolveNamesSearchScopeType::ActiveDirectory).
 */
class T__ResolveNamesSearchScopeType
{
public:
    enum Type { ActiveDirectory, ActiveDirectoryContacts, Contacts, ContactsActiveDirectory };

public:
    T__ResolveNamesSearchScopeType( const Type &type );
    void setType( Type type );
    T__ResolveNamesSearchScopeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ResolveNamesSearchScopeType();
    ~T__ResolveNamesSearchScopeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__DeliverMeetingRequestsType
    you can also pass the enum directly.
    Example:
    someMethod(T__DeliverMeetingRequestsType::DelegatesOnly).
 */
class T__DeliverMeetingRequestsType
{
public:
    enum Type { DelegatesOnly, DelegatesAndMe, DelegatesAndSendInformationToMe };

public:
    T__DeliverMeetingRequestsType( const Type &type );
    void setType( Type type );
    T__DeliverMeetingRequestsType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DeliverMeetingRequestsType();
    ~T__DeliverMeetingRequestsType();

private:
    Type mType;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type T__NonEmptyStringType you can
    also pass the value directly as a QString.
 */
class T__NonEmptyStringType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__NonEmptyStringType( const QString& value );
    operator QString() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__NonEmptyStringType();
    ~T__NonEmptyStringType();

private:
    QString mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type
    T__CalendarItemCreateOrDeleteOperationType you can also pass the enum
    directly.
    Example:
    someMethod(T__CalendarItemCreateOrDeleteOperationType::SendToNone).
 */
class T__CalendarItemCreateOrDeleteOperationType
{
public:
    enum Type { SendToNone, SendOnlyToAll, SendToAllAndSaveCopy };

public:
    T__CalendarItemCreateOrDeleteOperationType( const Type &type );
    void setType( Type type );
    T__CalendarItemCreateOrDeleteOperationType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__CalendarItemCreateOrDeleteOperationType();
    ~T__CalendarItemCreateOrDeleteOperationType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__DisposalType you can also
    pass the enum directly. Example:
    someMethod(T__DisposalType::HardDelete).
 */
class T__DisposalType
{
public:
    enum Type { HardDelete, SoftDelete, MoveToDeletedItems };

public:
    T__DisposalType( const Type &type );
    void setType( Type type );
    T__DisposalType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DisposalType();
    ~T__DisposalType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ResponseClassType you can
    also pass the enum directly.
    Example:
    someMethod(T__ResponseClassType::Success).
 */
class T__ResponseClassType
{
public:
    enum Type { Success, Warning, Error };

public:
    T__ResponseClassType( const Type &type );
    void setType( Type type );
    T__ResponseClassType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ResponseClassType();
    ~T__ResponseClassType();

private:
    Type mType;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type
    T__SubscriptionStatusFrequencyType you can also pass the value directly as
    a int.
 */
class T__SubscriptionStatusFrequencyType
{
public:
    void setValue( int value );
    int value() const;
    T__SubscriptionStatusFrequencyType( int value );
    operator int() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__SubscriptionStatusFrequencyType();
    ~T__SubscriptionStatusFrequencyType();

private:
    int mValue;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type T__SubscriptionTimeoutType you
    can also pass the value directly as a int.
 */
class T__SubscriptionTimeoutType
{
public:
    void setValue( int value );
    int value() const;
    T__SubscriptionTimeoutType( int value );
    operator int() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__SubscriptionTimeoutType();
    ~T__SubscriptionTimeoutType();

private:
    int mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__IndexBasePointType you can
    also pass the enum directly.
    Example:
    someMethod(T__IndexBasePointType::Beginning).
 */
class T__IndexBasePointType
{
public:
    enum Type { Beginning, End };

public:
    T__IndexBasePointType( const Type &type );
    void setType( Type type );
    T__IndexBasePointType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__IndexBasePointType();
    ~T__IndexBasePointType();

private:
    Type mType;
};

/**
    This class encapsulates a list type.
 */
class T__FreeBusyViewType
{
public:
    void setEntries( const QList<T__FreeBusyViewTypeListItem>& entries );
    QList<T__FreeBusyViewTypeListItem> entries() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__FreeBusyViewType();
    ~T__FreeBusyViewType();

private:
    QList<T__FreeBusyViewTypeListItem> mEntries;
};

/**
    Represents standard groupings for GroupBy queries.
 */
class T__StandardGroupByType
{
public:
    enum Type { ConversationTopic };

public:
    T__StandardGroupByType( const Type &type );
    void setType( Type type );
    T__StandardGroupByType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__StandardGroupByType();
    ~T__StandardGroupByType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__DefaultShapeNamesType you
    can also pass the enum directly.
    Example:
    someMethod(T__DefaultShapeNamesType::IdOnly).
 */
class T__DefaultShapeNamesType
{
public:
    enum Type { IdOnly, Default, AllProperties };

public:
    T__DefaultShapeNamesType( const Type &type );
    void setType( Type type );
    T__DefaultShapeNamesType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DefaultShapeNamesType();
    ~T__DefaultShapeNamesType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__OofState you can also pass
    the enum directly. Example:
    someMethod(T__OofState::Disabled).
 */
class T__OofState
{
public:
    enum Type { Disabled, Enabled, Scheduled };

public:
    T__OofState( const Type &type );
    void setType( Type type );
    T__OofState::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__OofState();
    ~T__OofState();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__SuggestionQuality you can
    also pass the enum directly.
    Example:
    someMethod(T__SuggestionQuality::Excellent).
 */
class T__SuggestionQuality
{
public:
    enum Type { Excellent, Good, Fair, Poor };

public:
    T__SuggestionQuality( const Type &type );
    void setType( Type type );
    T__SuggestionQuality::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__SuggestionQuality();
    ~T__SuggestionQuality();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__BodyTypeResponseType you can
    also pass the enum directly.
    Example:
    someMethod(T__BodyTypeResponseType::Best).
 */
class T__BodyTypeResponseType
{
public:
    enum Type { Best, HTML, Text };

public:
    T__BodyTypeResponseType( const Type &type );
    void setType( Type type );
    T__BodyTypeResponseType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__BodyTypeResponseType();
    ~T__BodyTypeResponseType();

private:
    Type mType;
};

/**
    Represents the message keys that can be returned by response error messages
 */
class TNS__ResponseCodeType
{
public:
    enum Type { NoError, ErrorAccessDenied, ErrorAccountDisabled, ErrorAddDelegatesFailed, ErrorAddressSpaceNotFound, ErrorADOperation, ErrorADSessionFilter, ErrorADUnavailable, ErrorAutoDiscoverFailed, ErrorAffectedTaskOccurrencesRequired, ErrorAttachmentSizeLimitExceeded, ErrorAvailabilityConfigNotFound, ErrorBatchProcessingStopped, ErrorCalendarCannotMoveOrCopyOccurrence, ErrorCalendarCannotUpdateDeletedItem, ErrorCalendarCannotUseIdForOccurrenceId, ErrorCalendarCannotUseIdForRecurringMasterId, ErrorCalendarDurationIsTooLong, ErrorCalendarEndDateIsEarlierThanStartDate, ErrorCalendarFolderIsInvalidForCalendarView, ErrorCalendarInvalidAttributeValue, ErrorCalendarInvalidDayForTimeChangePattern, ErrorCalendarInvalidDayForWeeklyRecurrence, ErrorCalendarInvalidPropertyState, ErrorCalendarInvalidPropertyValue, ErrorCalendarInvalidRecurrence, ErrorCalendarInvalidTimeZone, ErrorCalendarIsDelegatedForAccept, ErrorCalendarIsDelegatedForDecline, ErrorCalendarIsDelegatedForRemove, ErrorCalendarIsDelegatedForTentative, ErrorCalendarIsNotOrganizer, ErrorCalendarIsOrganizerForAccept, ErrorCalendarIsOrganizerForDecline, ErrorCalendarIsOrganizerForRemove, ErrorCalendarIsOrganizerForTentative, ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange, ErrorCalendarOccurrenceIsDeletedFromRecurrence, ErrorCalendarOutOfRange, ErrorCalendarMeetingRequestIsOutOfDate, ErrorCalendarViewRangeTooBig, ErrorCannotCreateCalendarItemInNonCalendarFolder, ErrorCannotCreateContactInNonContactFolder, ErrorCannotCreatePostItemInNonMailFolder, ErrorCannotCreateTaskInNonTaskFolder, ErrorCannotDeleteObject, ErrorCannotOpenFileAttachment, ErrorCannotDeleteTaskOccurrence, ErrorCannotSetCalendarPermissionOnNonCalendarFolder, ErrorCannotSetNonCalendarPermissionOnCalendarFolder, ErrorCannotSetPermissionUnknownEntries, ErrorCannotUseFolderIdForItemId, ErrorCannotUseItemIdForFolderId, ErrorChangeKeyRequired, ErrorChangeKeyRequiredForWriteOperations, ErrorConnectionFailed, ErrorContentConversionFailed, ErrorCorruptData, ErrorCreateItemAccessDenied, ErrorCreateManagedFolderPartialCompletion, ErrorCreateSubfolderAccessDenied, ErrorCrossMailboxMoveCopy, ErrorDataSizeLimitExceeded, ErrorDataSourceOperation, ErrorDelegateAlreadyExists, ErrorDelegateCannotAddOwner, ErrorDelegateMissingConfiguration, ErrorDelegateNoUser, ErrorDelegateValidationFailed, ErrorDeleteDistinguishedFolder, ErrorDeleteItemsFailed, ErrorDistinguishedUserNotSupported, ErrorDuplicateInputFolderNames, ErrorDuplicateUserIdsSpecified, ErrorEmailAddressMismatch, ErrorEventNotFound, ErrorExpiredSubscription, ErrorFolderCorrupt, ErrorFolderNotFound, ErrorFolderPropertRequestFailed, ErrorFolderSave, ErrorFolderSaveFailed, ErrorFolderSavePropertyError, ErrorFolderExists, ErrorFreeBusyGenerationFailed, ErrorGetServerSecurityDescriptorFailed, ErrorImpersonateUserDenied, ErrorImpersonationDenied, ErrorImpersonationFailed, ErrorIncorrectSchemaVersion, ErrorIncorrectUpdatePropertyCount, ErrorIndividualMailboxLimitReached, ErrorInsufficientResources, ErrorInternalServerError, ErrorInternalServerTransientError, ErrorInvalidAccessLevel, ErrorInvalidAttachmentId, ErrorInvalidAttachmentSubfilter, ErrorInvalidAttachmentSubfilterTextFilter, ErrorInvalidAuthorizationContext, ErrorInvalidChangeKey, ErrorInvalidClientSecurityContext, ErrorInvalidCompleteDate, ErrorInvalidCrossForestCredentials, ErrorInvalidDelegatePermission, ErrorInvalidDelegateUserId, ErrorInvalidExcludesRestriction, ErrorInvalidExpressionTypeForSubFilter, ErrorInvalidExtendedProperty, ErrorInvalidExtendedPropertyValue, ErrorInvalidFolderId, ErrorInvalidFolderTypeForOperation, ErrorInvalidFractionalPagingParameters, ErrorInvalidFreeBusyViewType, ErrorInvalidId, ErrorInvalidIdEmpty, ErrorInvalidIdMalformed, ErrorInvalidIdMalformedEwsLegacyIdFormat, ErrorInvalidIdMonikerTooLong, ErrorInvalidIdNotAnItemAttachmentId, ErrorInvalidIdReturnedByResolveNames, ErrorInvalidIdStoreObjectIdTooLong, ErrorInvalidIdTooManyAttachmentLevels, ErrorInvalidIdXml, ErrorInvalidIndexedPagingParameters, ErrorInvalidInternetHeaderChildNodes, ErrorInvalidItemForOperationCreateItemAttachment, ErrorInvalidItemForOperationCreateItem, ErrorInvalidItemForOperationAcceptItem, ErrorInvalidItemForOperationDeclineItem, ErrorInvalidItemForOperationCancelItem, ErrorInvalidItemForOperationExpandDL, ErrorInvalidItemForOperationRemoveItem, ErrorInvalidItemForOperationSendItem, ErrorInvalidItemForOperationTentative, ErrorInvalidManagedFolderProperty, ErrorInvalidManagedFolderQuota, ErrorInvalidManagedFolderSize, ErrorInvalidMergedFreeBusyInterval, ErrorInvalidNameForNameResolution, ErrorInvalidOperation, ErrorInvalidNetworkServiceContext, ErrorInvalidOofParameter, ErrorInvalidPagingMaxRows, ErrorInvalidParentFolder, ErrorInvalidPercentCompleteValue, ErrorInvalidPermissionSettings, ErrorInvalidUserInfo, ErrorInvalidPropertyAppend, ErrorInvalidPropertyDelete, ErrorInvalidPropertyForExists, ErrorInvalidPropertyForOperation, ErrorInvalidPropertyRequest, ErrorInvalidPropertySet, ErrorInvalidPropertyUpdateSentMessage, ErrorInvalidProxySecurityContext, ErrorInvalidPullSubscriptionId, ErrorInvalidPushSubscriptionUrl, ErrorInvalidRecipients, ErrorInvalidRecipientSubfilter, ErrorInvalidRecipientSubfilterComparison, ErrorInvalidRecipientSubfilterOrder, ErrorInvalidRecipientSubfilterTextFilter, ErrorInvalidReferenceItem, ErrorInvalidRequest, ErrorInvalidRestriction, ErrorInvalidRoutingType, ErrorInvalidScheduledOofDuration, ErrorInvalidSecurityDescriptor, ErrorInvalidSendItemSaveSettings, ErrorInvalidSerializedAccessToken, ErrorInvalidServerVersion, ErrorInvalidSid, ErrorInvalidSmtpAddress, ErrorInvalidSubfilterType, ErrorInvalidSubfilterTypeNotAttendeeType, ErrorInvalidSubfilterTypeNotRecipientType, ErrorInvalidSubscription, ErrorInvalidSubscriptionRequest, ErrorInvalidSyncStateData, ErrorInvalidTimeInterval, ErrorInvalidUserOofSettings, ErrorInvalidUserPrincipalName, ErrorInvalidUserSid, ErrorInvalidUserSidMissingUPN, ErrorInvalidValueForProperty, ErrorInvalidWatermark, ErrorIrresolvableConflict, ErrorItemCorrupt, ErrorItemNotFound, ErrorItemPropertyRequestFailed, ErrorItemSave, ErrorItemSavePropertyError, ErrorLegacyMailboxFreeBusyViewTypeNotMerged, ErrorLocalServerObjectNotFound, ErrorLogonAsNetworkServiceFailed, ErrorMailboxConfiguration, ErrorMailboxDataArrayEmpty, ErrorMailboxDataArrayTooBig, ErrorMailboxLogonFailed, ErrorMailboxMoveInProgress, ErrorMailboxStoreUnavailable, ErrorMailRecipientNotFound, ErrorManagedFolderAlreadyExists, ErrorManagedFolderNotFound, ErrorManagedFoldersRootFailure, ErrorMeetingSuggestionGenerationFailed, ErrorMessageDispositionRequired, ErrorMessageSizeExceeded, ErrorMimeContentConversionFailed, ErrorMimeContentInvalid, ErrorMimeContentInvalidBase64String, ErrorMissingArgument, ErrorMissingEmailAddress, ErrorMissingEmailAddressForManagedFolder, ErrorMissingInformationEmailAddress, ErrorMissingInformationReferenceItemId, ErrorMissingItemForCreateItemAttachment, ErrorMissingManagedFolderId, ErrorMissingRecipients, ErrorMissingUserIdInformation, ErrorMoreThanOneAccessModeSpecified, ErrorMoveCopyFailed, ErrorMoveDistinguishedFolder, ErrorNameResolutionMultipleResults, ErrorNameResolutionNoMailbox, ErrorNameResolutionNoResults, ErrorNoApplicableProxyCASServersAvailable, ErrorNoCalendar, ErrorNoDestinationCASDueToKerberosRequirements, ErrorNoDestinationCASDueToSSLRequirements, ErrorNoDestinationCASDueToVersionMismatch, ErrorNoFolderClassOverride, ErrorNoFreeBusyAccess, ErrorNonExistentMailbox, ErrorNonPrimarySmtpAddress, ErrorNoPropertyTagForCustomProperties, ErrorNoPublicFolderReplicaAvailable, ErrorNoRespondingCASInDestinationSite, ErrorNotDelegate, ErrorNotEnoughMemory, ErrorObjectTypeChanged, ErrorOccurrenceCrossingBoundary, ErrorOccurrenceTimeSpanTooBig, ErrorOperationNotAllowedWithPublicFolderRoot, ErrorParentFolderIdRequired, ErrorParentFolderNotFound, ErrorPasswordChangeRequired, ErrorPasswordExpired, ErrorPropertyUpdate, ErrorPropertyValidationFailure, ErrorProxiedSubscriptionCallFailure, ErrorProxyCallFailed, ErrorProxyGroupSidLimitExceeded, ErrorProxyRequestNotAllowed, ErrorProxyRequestProcessingFailed, ErrorProxyServiceDiscoveryFailed, ErrorProxyTokenExpired, ErrorPublicFolderRequestProcessingFailed, ErrorPublicFolderServerNotFound, ErrorQueryFilterTooLong, ErrorQuotaExceeded, ErrorReadEventsFailed, ErrorReadReceiptNotPending, ErrorRecurrenceEndDateTooBig, ErrorRecurrenceHasNoOccurrence, ErrorRemoveDelegatesFailed, ErrorRequestAborted, ErrorRequestStreamTooBig, ErrorRequiredPropertyMissing, ErrorResolveNamesInvalidFolderType, ErrorResolveNamesOnlyOneContactsFolderAllowed, ErrorResponseSchemaValidation, ErrorRestrictionTooLong, ErrorRestrictionTooComplex, ErrorResultSetTooBig, ErrorInvalidExchangeImpersonationHeaderData, ErrorSavedItemFolderNotFound, ErrorSchemaValidation, ErrorSearchFolderNotInitialized, ErrorSendAsDenied, ErrorSendMeetingCancellationsRequired, ErrorSendMeetingInvitationsOrCancellationsRequired, ErrorSendMeetingInvitationsRequired, ErrorSentMeetingRequestUpdate, ErrorSentTaskRequestUpdate, ErrorServerBusy, ErrorServiceDiscoveryFailed, ErrorStaleObject, ErrorSubscriptionAccessDenied, ErrorSubscriptionDelegateAccessNotSupported, ErrorSubscriptionNotFound, ErrorSyncFolderNotFound, ErrorTimeIntervalTooBig, ErrorTimeoutExpired, ErrorTimeZone, ErrorToFolderNotFound, ErrorTokenSerializationDenied, ErrorUpdatePropertyMismatch, ErrorUnableToGetUserOofSettings, ErrorUnsupportedSubFilter, ErrorUnsupportedCulture, ErrorUnsupportedMapiPropertyType, ErrorUnsupportedMimeConversion, ErrorUnsupportedPathForQuery, ErrorUnsupportedPathForSortGroup, ErrorUnsupportedPropertyDefinition, ErrorUnsupportedQueryFilter, ErrorUnsupportedRecurrence, ErrorUnsupportedTypeForConversion, ErrorUpdateDelegatesFailed, ErrorVoiceMailNotImplemented, ErrorVirusDetected, ErrorVirusMessageDeleted, ErrorWebRequestInInvalidState, ErrorWin32InteropError, ErrorWorkingHoursSaveFailed, ErrorWorkingHoursXmlMalformed };

public:
    TNS__ResponseCodeType( const Type &type );
    void setType( Type type );
    TNS__ResponseCodeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    TNS__ResponseCodeType();
    ~TNS__ResponseCodeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__MailboxTypeType you can also
    pass the enum directly. Example:
    someMethod(T__MailboxTypeType::Mailbox).
 */
class T__MailboxTypeType
{
public:
    enum Type { Mailbox, PublicDL, PrivateDL, Contact, PublicFolder };

public:
    T__MailboxTypeType( const Type &type );
    void setType( Type type );
    T__MailboxTypeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__MailboxTypeType();
    ~T__MailboxTypeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ResponseTypeType you can
    also pass the enum directly.
    Example:
    someMethod(T__ResponseTypeType::Unknown).
 */
class T__ResponseTypeType
{
public:
    enum Type { Unknown, Organizer, Tentative, Accept, Decline, NoResponseReceived };

public:
    T__ResponseTypeType( const Type &type );
    void setType( Type type );
    T__ResponseTypeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ResponseTypeType();
    ~T__ResponseTypeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__UnindexedFieldURIType you
    can also pass the enum directly.
    Example:
    someMethod(T__UnindexedFieldURIType::Folder_FolderId).
 */
class T__UnindexedFieldURIType
{
public:
    enum Type { Folder_FolderId, Folder_ParentFolderId, Folder_DisplayName, Folder_UnreadCount, Folder_TotalCount, Folder_ChildFolderCount, Folder_FolderClass, Folder_SearchParameters, Folder_ManagedFolderInformation, Folder_PermissionSet, Folder_EffectiveRights, Item_ItemId, Item_ParentFolderId, Item_ItemClass, Item_MimeContent, Item_Attachments, Item_Subject, Item_DateTimeReceived, Item_Size, Item_Categories, Item_HasAttachments, Item_Importance, Item_InReplyTo, Item_InternetMessageHeaders, Item_IsDraft, Item_IsFromMe, Item_IsResend, Item_IsSubmitted, Item_IsUnmodified, Item_DateTimeSent, Item_DateTimeCreated, Item_Body, Item_ResponseObjects, Item_Sensitivity, Item_ReminderDueBy, Item_ReminderIsSet, Item_ReminderMinutesBeforeStart, Item_DisplayTo, Item_DisplayCc, Item_Culture, Item_EffectiveRights, Item_LastModifiedName, Item_LastModifiedTime, Message_ConversationIndex, Message_ConversationTopic, Message_InternetMessageId, Message_IsRead, Message_IsResponseRequested, Message_IsReadReceiptRequested, Message_IsDeliveryReceiptRequested, Message_ReceivedBy, Message_ReceivedRepresenting, Message_References, Message_ReplyTo, Message_From, Message_Sender, Message_ToRecipients, Message_CcRecipients, Message_BccRecipients, Meeting_AssociatedCalendarItemId, Meeting_IsDelegated, Meeting_IsOutOfDate, Meeting_HasBeenProcessed, Meeting_ResponseType, MeetingRequest_MeetingRequestType, MeetingRequest_IntendedFreeBusyStatus, Calendar_Start, Calendar_End, Calendar_OriginalStart, Calendar_IsAllDayEvent, Calendar_LegacyFreeBusyStatus, Calendar_Location, Calendar_When, Calendar_IsMeeting, Calendar_IsCancelled, Calendar_IsRecurring, Calendar_MeetingRequestWasSent, Calendar_IsResponseRequested, Calendar_CalendarItemType, Calendar_MyResponseType, Calendar_Organizer, Calendar_RequiredAttendees, Calendar_OptionalAttendees, Calendar_Resources, Calendar_ConflictingMeetingCount, Calendar_AdjacentMeetingCount, Calendar_ConflictingMeetings, Calendar_AdjacentMeetings, Calendar_Duration, Calendar_TimeZone, Calendar_AppointmentReplyTime, Calendar_AppointmentSequenceNumber, Calendar_AppointmentState, Calendar_Recurrence, Calendar_FirstOccurrence, Calendar_LastOccurrence, Calendar_ModifiedOccurrences, Calendar_DeletedOccurrences, Calendar_MeetingTimeZone, Calendar_ConferenceType, Calendar_AllowNewTimeProposal, Calendar_IsOnlineMeeting, Calendar_MeetingWorkspaceUrl, Calendar_NetShowUrl, Calendar_UID, Calendar_RecurrenceId, Calendar_DateTimeStamp, Task_ActualWork, Task_AssignedTime, Task_BillingInformation, Task_ChangeCount, Task_Companies, Task_CompleteDate, Task_Contacts, Task_DelegationState, Task_Delegator, Task_DueDate, Task_IsAssignmentEditable, Task_IsComplete, Task_IsRecurring, Task_IsTeamTask, Task_Mileage, Task_Owner, Task_PercentComplete, Task_Recurrence, Task_StartDate, Task_Status, Task_StatusDescription, Task_TotalWork, Contacts_AssistantName, Contacts_Birthday, Contacts_BusinessHomePage, Contacts_Children, Contacts_Companies, Contacts_CompanyName, Contacts_CompleteName, Contacts_ContactSource, Contacts_Culture, Contacts_Department, Contacts_DisplayName, Contacts_EmailAddresses, Contacts_FileAs, Contacts_FileAsMapping, Contacts_Generation, Contacts_GivenName, Contacts_ImAddresses, Contacts_Initials, Contacts_JobTitle, Contacts_Manager, Contacts_MiddleName, Contacts_Mileage, Contacts_Nickname, Contacts_OfficeLocation, Contacts_PhoneNumbers, Contacts_PhysicalAddresses, Contacts_PostalAddressIndex, Contacts_Profession, Contacts_SpouseName, Contacts_Surname, Contacts_WeddingAnniversary, Postitem_PostedTime };

public:
    T__UnindexedFieldURIType( const Type &type );
    void setType( Type type );
    T__UnindexedFieldURIType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__UnindexedFieldURIType();
    ~T__UnindexedFieldURIType();

private:
    Type mType;
};

/**
    This max/min evaluation is applied to the field specified within the group
    by instance for EACH item within that group. This determines which item
    from each group is to be selected as the representative for that group.
 */
class T__AggregateType
{
public:
    enum Type { Minimum, Maximum };

public:
    T__AggregateType( const Type &type );
    void setType( Type type );
    T__AggregateType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__AggregateType();
    ~T__AggregateType();

private:
    Type mType;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type T__DerivedItemIdType you can
    also pass the value directly as a QString.
 */
class T__DerivedItemIdType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__DerivedItemIdType( const QString& value );
    operator QString() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DerivedItemIdType();
    ~T__DerivedItemIdType();

private:
    QString mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__DayOfWeekType you can also
    pass the enum directly. Example:
    someMethod(T__DayOfWeekType::Sunday).
 */
class T__DayOfWeekType
{
public:
    enum Type { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Day, Weekday, WeekendDay };

public:
    T__DayOfWeekType( const Type &type );
    void setType( Type type );
    T__DayOfWeekType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DayOfWeekType();
    ~T__DayOfWeekType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__CalendarItemTypeType you can
    also pass the enum directly.
    Example:
    someMethod(T__CalendarItemTypeType::Single).
 */
class T__CalendarItemTypeType
{
public:
    enum Type { Single, Occurrence, Exception, RecurringMaster };

public:
    T__CalendarItemTypeType( const Type &type );
    void setType( Type type );
    T__CalendarItemTypeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__CalendarItemTypeType();
    ~T__CalendarItemTypeType();

private:
    Type mType;
};

/**
    This class encapsulates a union type.
 */
class T__ReminderMinutesBeforeStartType
{
public:
    void setValue( const QVariant& val );
    QVariant value() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ReminderMinutesBeforeStartType();
    ~T__ReminderMinutesBeforeStartType();

private:
    QVariant mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__PhysicalAddressIndexType you
    can also pass the enum directly.
    Example:
    someMethod(T__PhysicalAddressIndexType::None).
 */
class T__PhysicalAddressIndexType
{
public:
    enum Type { None, Business, Home, Other };

public:
    T__PhysicalAddressIndexType( const Type &type );
    void setType( Type type );
    T__PhysicalAddressIndexType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__PhysicalAddressIndexType();
    ~T__PhysicalAddressIndexType();

private:
    Type mType;
};

/**
    The regular expression captures the standard representation of a GUID
 */
class T__GuidType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__GuidType( const QString& value );
    operator QString() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__GuidType();
    ~T__GuidType();

private:
    QString mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__SortDirectionType you can
    also pass the enum directly.
    Example:
    someMethod(T__SortDirectionType::Ascending).
 */
class T__SortDirectionType
{
public:
    enum Type { Ascending, Descending };

public:
    T__SortDirectionType( const Type &type );
    void setType( Type type );
    T__SortDirectionType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__SortDirectionType();
    ~T__SortDirectionType();

private:
    Type mType;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type T__ItemClassType you can also
    pass the value directly as a QString.
 */
class T__ItemClassType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__ItemClassType( const QString& value );
    operator QString() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ItemClassType();
    ~T__ItemClassType();

private:
    QString mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__LegacyFreeBusyType you can
    also pass the enum directly.
    Example:
    someMethod(T__LegacyFreeBusyType::Free).
 */
class T__LegacyFreeBusyType
{
public:
    enum Type { Free, Tentative, Busy, OOF, NoData };

public:
    T__LegacyFreeBusyType( const Type &type );
    void setType( Type type );
    T__LegacyFreeBusyType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__LegacyFreeBusyType();
    ~T__LegacyFreeBusyType();

private:
    Type mType;
};

/**
    This type represents the property tag (MINUS the type part). There are two
    options for representation: 1. Hex ==> 0x3fa4 2. Decimal ==> 0-65535
 */
class T__PropertyTagType
{
public:
    void setValue( const QVariant& val );
    QVariant value() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__PropertyTagType();
    ~T__PropertyTagType();

private:
    QVariant mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ContactSourceType you can
    also pass the enum directly.
    Example:
    someMethod(T__ContactSourceType::ActiveDirectory).
 */
class T__ContactSourceType
{
public:
    enum Type { ActiveDirectory, Store };

public:
    T__ContactSourceType( const Type &type );
    void setType( Type type );
    T__ContactSourceType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ContactSourceType();
    ~T__ContactSourceType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__FreeBusyViewTypeListItem you
    can also pass the enum directly.
    Example:
    someMethod(T__FreeBusyViewTypeListItem::None).
 */
class T__FreeBusyViewTypeListItem
{
public:
    enum Type { None, MergedOnly, FreeBusy, FreeBusyMerged, Detailed, DetailedMerged };

public:
    T__FreeBusyViewTypeListItem( const Type &type );
    void setType( Type type );
    T__FreeBusyViewTypeListItem::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__FreeBusyViewTypeListItem();
    ~T__FreeBusyViewTypeListItem();

private:
    Type mType;
};

/**
    URIs for the distinguished folders accessible from a mailbox
 */
class T__DistinguishedFolderIdNameType
{
public:
    enum Type { Calendar, Contacts, Deleteditems, Drafts, Inbox, Journal, Notes, Outbox, Sentitems, Tasks, Msgfolderroot, Publicfoldersroot, Root, Junkemail, Searchfolders, Voicemail };

public:
    T__DistinguishedFolderIdNameType( const Type &type );
    void setType( Type type );
    T__DistinguishedFolderIdNameType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DistinguishedFolderIdNameType();
    ~T__DistinguishedFolderIdNameType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__DistinguishedUserType you
    can also pass the enum directly.
    Example:
    someMethod(T__DistinguishedUserType::Default).
 */
class T__DistinguishedUserType
{
public:
    enum Type { Default, Anonymous };

public:
    T__DistinguishedUserType( const Type &type );
    void setType( Type type );
    T__DistinguishedUserType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DistinguishedUserType();
    ~T__DistinguishedUserType();

private:
    Type mType;
};

/**
    Defines the well known property set ids for extended properties.
 */
class T__DistinguishedPropertySetType
{
public:
    enum Type { Meeting, Appointment, Common, PublicStrings, Address, InternetHeaders, CalendarAssistant, UnifiedMessaging, Task };

public:
    T__DistinguishedPropertySetType( const Type &type );
    void setType( Type type );
    T__DistinguishedPropertySetType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DistinguishedPropertySetType();
    ~T__DistinguishedPropertySetType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__MeetingRequestTypeType you
    can also pass the enum directly.
    Example:
    someMethod(T__MeetingRequestTypeType::None).
 */
class T__MeetingRequestTypeType
{
public:
    enum Type { None, FullUpdate, InformationalUpdate, NewMeetingRequest, Outdated, SilentUpdate, PrincipalWantsCopy };

public:
    T__MeetingRequestTypeType( const Type &type );
    void setType( Type type );
    T__MeetingRequestTypeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__MeetingRequestTypeType();
    ~T__MeetingRequestTypeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__SensitivityChoicesType you
    can also pass the enum directly.
    Example:
    someMethod(T__SensitivityChoicesType::Normal).
 */
class T__SensitivityChoicesType
{
public:
    enum Type { Normal, Personal, Private, Confidential };

public:
    T__SensitivityChoicesType( const Type &type );
    void setType( Type type );
    T__SensitivityChoicesType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__SensitivityChoicesType();
    ~T__SensitivityChoicesType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__DictionaryURIType you can
    also pass the enum directly.
    Example:
    someMethod(T__DictionaryURIType::Item_InternetMessageHeader).
 */
class T__DictionaryURIType
{
public:
    enum Type { Item_InternetMessageHeader, Contacts_ImAddress, Contacts_PhysicalAddress_Street, Contacts_PhysicalAddress_City, Contacts_PhysicalAddress_State, Contacts_PhysicalAddress_CountryOrRegion, Contacts_PhysicalAddress_PostalCode, Contacts_PhoneNumber, Contacts_EmailAddress };

public:
    T__DictionaryURIType( const Type &type );
    void setType( Type type );
    T__DictionaryURIType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DictionaryURIType();
    ~T__DictionaryURIType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ImportanceChoicesType you
    can also pass the enum directly.
    Example:
    someMethod(T__ImportanceChoicesType::Low).
 */
class T__ImportanceChoicesType
{
public:
    enum Type { Low, Normal, High };

public:
    T__ImportanceChoicesType( const Type &type );
    void setType( Type type );
    T__ImportanceChoicesType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ImportanceChoicesType();
    ~T__ImportanceChoicesType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__TaskStatusType you can also
    pass the enum directly. Example:
    someMethod(T__TaskStatusType::NotStarted).
 */
class T__TaskStatusType
{
public:
    enum Type { NotStarted, InProgress, Completed, WaitingOnOthers, Deferred };

public:
    T__TaskStatusType( const Type &type );
    void setType( Type type );
    T__TaskStatusType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__TaskStatusType();
    ~T__TaskStatusType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__MeetingAttendeeType you can
    also pass the enum directly.
    Example:
    someMethod(T__MeetingAttendeeType::Organizer).
 */
class T__MeetingAttendeeType
{
public:
    enum Type { Organizer, Required, Optional, Room, Resource };

public:
    T__MeetingAttendeeType( const Type &type );
    void setType( Type type );
    T__MeetingAttendeeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__MeetingAttendeeType();
    ~T__MeetingAttendeeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__TaskDelegateStateType you
    can also pass the enum directly.
    Example:
    someMethod(T__TaskDelegateStateType::NoMatch).
 */
class T__TaskDelegateStateType
{
public:
    enum Type { NoMatch, OwnNew, Owned, Accepted, Declined, Max };

public:
    T__TaskDelegateStateType( const Type &type );
    void setType( Type type );
    T__TaskDelegateStateType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__TaskDelegateStateType();
    ~T__TaskDelegateStateType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__FileAsMappingType you can
    also pass the enum directly.
    Example:
    someMethod(T__FileAsMappingType::None).
 */
class T__FileAsMappingType
{
public:
    enum Type { None, LastCommaFirst, FirstSpaceLast, Company, LastCommaFirstCompany, CompanyLastFirst, LastFirst, LastFirstCompany, CompanyLastCommaFirst, LastFirstSuffix, LastSpaceFirstCompany, CompanyLastSpaceFirst, LastSpaceFirst };

public:
    T__FileAsMappingType( const Type &type );
    void setType( Type type );
    T__FileAsMappingType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__FileAsMappingType();
    ~T__FileAsMappingType();

private:
    Type mType;
};

/**
    Includes all of the extended property types that we support. Note that
    Error, Null, Object and Object array can not be used in restrictions, or
    for setting/getting values. They are only there for error reporting
    purposes.
 */
class T__MapiPropertyTypeType
{
public:
    enum Type { ApplicationTime, ApplicationTimeArray, Binary, BinaryArray, Boolean, CLSID, CLSIDArray, Currency, CurrencyArray, Double, DoubleArray, Error, Float, FloatArray, Integer, IntegerArray, Long, LongArray, Null, Object, ObjectArray, Short, ShortArray, SystemTime, SystemTimeArray, String, StringArray };

public:
    T__MapiPropertyTypeType( const Type &type );
    void setType( Type type );
    T__MapiPropertyTypeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__MapiPropertyTypeType();
    ~T__MapiPropertyTypeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ContainmentModeType you can
    also pass the enum directly.
    Example:
    someMethod(T__ContainmentModeType::FullString).
 */
class T__ContainmentModeType
{
public:
    enum Type { FullString, Prefixed, Substring, PrefixOnWords, ExactPhrase };

public:
    T__ContainmentModeType( const Type &type );
    void setType( Type type );
    T__ContainmentModeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ContainmentModeType();
    ~T__ContainmentModeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__BodyTypeType you can also
    pass the enum directly. Example:
    someMethod(T__BodyTypeType::HTML).
 */
class T__BodyTypeType
{
public:
    enum Type { HTML, Text };

public:
    T__BodyTypeType( const Type &type );
    void setType( Type type );
    T__BodyTypeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__BodyTypeType();
    ~T__BodyTypeType();

private:
    Type mType;
};

/**
    Types of sub-tree traversal for deletion and enumeration
 */
class T__SearchFolderTraversalType
{
public:
    enum Type { Shallow, Deep };

public:
    T__SearchFolderTraversalType( const Type &type );
    void setType( Type type );
    T__SearchFolderTraversalType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__SearchFolderTraversalType();
    ~T__SearchFolderTraversalType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ContainmentComparisonType
    you can also pass the enum directly.
    Example:
    someMethod(T__ContainmentComparisonType::Exact).
 */
class T__ContainmentComparisonType
{
public:
    enum Type { Exact, IgnoreCase, IgnoreNonSpacingCharacters, Loose, IgnoreCaseAndNonSpacingCharacters, LooseAndIgnoreCase, LooseAndIgnoreNonSpace, LooseAndIgnoreCaseAndIgnoreNonSpace };

public:
    T__ContainmentComparisonType( const Type &type );
    void setType( Type type );
    T__ContainmentComparisonType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ContainmentComparisonType();
    ~T__ContainmentComparisonType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__NotificationEventTypeType
    you can also pass the enum directly.
    Example:
    someMethod(T__NotificationEventTypeType::CopiedEvent).
 */
class T__NotificationEventTypeType
{
public:
    enum Type { CopiedEvent, CreatedEvent, DeletedEvent, ModifiedEvent, MovedEvent, NewMailEvent };

public:
    T__NotificationEventTypeType( const Type &type );
    void setType( Type type );
    T__NotificationEventTypeType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__NotificationEventTypeType();
    ~T__NotificationEventTypeType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type
    T__DelegateFolderPermissionLevelType you can also pass the enum directly.
    Example:
    someMethod(T__DelegateFolderPermissionLevelType::None).
 */
class T__DelegateFolderPermissionLevelType
{
public:
    enum Type { None, Editor, Reviewer, Author, Custom };

public:
    T__DelegateFolderPermissionLevelType( const Type &type );
    void setType( Type type );
    T__DelegateFolderPermissionLevelType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DelegateFolderPermissionLevelType();
    ~T__DelegateFolderPermissionLevelType();

private:
    Type mType;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type T__ExcludesAttributeType you
    can also pass the value directly as a QString.
 */
class T__ExcludesAttributeType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__ExcludesAttributeType( const QString& value );
    operator QString() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ExcludesAttributeType();
    ~T__ExcludesAttributeType();

private:
    QString mValue;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__MonthNamesType you can also
    pass the enum directly. Example:
    someMethod(T__MonthNamesType::January).
 */
class T__MonthNamesType
{
public:
    enum Type { January, February, March, April, May, June, July, August, September, October, November, December };

public:
    T__MonthNamesType( const Type &type );
    void setType( Type type );
    T__MonthNamesType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__MonthNamesType();
    ~T__MonthNamesType();

private:
    Type mType;
};

/**
    This class encapsulates a list type.
 */
class T__DaysOfWeekType
{
public:
    void setEntries( const QList<T__DayOfWeekType>& entries );
    QList<T__DayOfWeekType> entries() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DaysOfWeekType();
    ~T__DaysOfWeekType();

private:
    QList<T__DayOfWeekType> mEntries;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ImAddressKeyType you can
    also pass the enum directly.
    Example:
    someMethod(T__ImAddressKeyType::ImAddress1).
 */
class T__ImAddressKeyType
{
public:
    enum Type { ImAddress1, ImAddress2, ImAddress3 };

public:
    T__ImAddressKeyType( const Type &type );
    void setType( Type type );
    T__ImAddressKeyType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ImAddressKeyType();
    ~T__ImAddressKeyType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__PhoneNumberKeyType you can
    also pass the enum directly.
    Example:
    someMethod(T__PhoneNumberKeyType::AssistantPhone).
 */
class T__PhoneNumberKeyType
{
public:
    enum Type { AssistantPhone, BusinessFax, BusinessPhone, BusinessPhone2, Callback, CarPhone, CompanyMainPhone, HomeFax, HomePhone, HomePhone2, Isdn, MobilePhone, OtherFax, OtherTelephone, Pager, PrimaryPhone, RadioPhone, Telex, TtyTddPhone };

public:
    T__PhoneNumberKeyType( const Type &type );
    void setType( Type type );
    T__PhoneNumberKeyType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__PhoneNumberKeyType();
    ~T__PhoneNumberKeyType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__EmailAddressKeyType you can
    also pass the enum directly.
    Example:
    someMethod(T__EmailAddressKeyType::EmailAddress1).
 */
class T__EmailAddressKeyType
{
public:
    enum Type { EmailAddress1, EmailAddress2, EmailAddress3 };

public:
    T__EmailAddressKeyType( const Type &type );
    void setType( Type type );
    T__EmailAddressKeyType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__EmailAddressKeyType();
    ~T__EmailAddressKeyType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__ExceptionPropertyURIType you
    can also pass the enum directly.
    Example:
    someMethod(T__ExceptionPropertyURIType::Attachment_Name).
 */
class T__ExceptionPropertyURIType
{
public:
    enum Type { Attachment_Name, Attachment_ContentType, Attachment_Content, Recurrence_Month, Recurrence_DayOfWeekIndex, Recurrence_DaysOfWeek, Recurrence_DayOfMonth, Recurrence_Interval, Recurrence_NumberOfOccurrences, Timezone_Offset };

public:
    T__ExceptionPropertyURIType( const Type &type );
    void setType( Type type );
    T__ExceptionPropertyURIType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__ExceptionPropertyURIType();
    ~T__ExceptionPropertyURIType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__PhysicalAddressKeyType you
    can also pass the enum directly.
    Example:
    someMethod(T__PhysicalAddressKeyType::Business).
 */
class T__PhysicalAddressKeyType
{
public:
    enum Type { Business, Home, Other };

public:
    T__PhysicalAddressKeyType( const Type &type );
    void setType( Type type );
    T__PhysicalAddressKeyType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__PhysicalAddressKeyType();
    ~T__PhysicalAddressKeyType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__DayOfWeekIndexType you can
    also pass the enum directly.
    Example:
    someMethod(T__DayOfWeekIndexType::First).
 */
class T__DayOfWeekIndexType
{
public:
    enum Type { First, Second, Third, Fourth, Last };

public:
    T__DayOfWeekIndexType( const Type &type );
    void setType( Type type );
    T__DayOfWeekIndexType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__DayOfWeekIndexType();
    ~T__DayOfWeekIndexType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__PermissionLevelType you can
    also pass the enum directly.
    Example:
    someMethod(T__PermissionLevelType::None).
 */
class T__PermissionLevelType
{
public:
    enum Type { None, Owner, PublishingEditor, Editor, PublishingAuthor, Author, NoneditingAuthor, Reviewer, Contributor, Custom };

public:
    T__PermissionLevelType( const Type &type );
    void setType( Type type );
    T__PermissionLevelType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__PermissionLevelType();
    ~T__PermissionLevelType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__CalendarPermissionLevelType
    you can also pass the enum directly.
    Example:
    someMethod(T__CalendarPermissionLevelType::None).
 */
class T__CalendarPermissionLevelType
{
public:
    enum Type { None, Owner, PublishingEditor, Editor, PublishingAuthor, Author, NoneditingAuthor, Reviewer, Contributor, FreeBusyTimeOnly, FreeBusyTimeAndSubjectAndLocation, Custom };

public:
    T__CalendarPermissionLevelType( const Type &type );
    void setType( Type type );
    T__CalendarPermissionLevelType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__CalendarPermissionLevelType();
    ~T__CalendarPermissionLevelType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type
    T__CalendarPermissionReadAccessType you can also pass the enum directly.
    Example:
    someMethod(T__CalendarPermissionReadAccessType::None).
 */
class T__CalendarPermissionReadAccessType
{
public:
    enum Type { None, TimeOnly, TimeAndSubjectAndLocation, FullDetails };

public:
    T__CalendarPermissionReadAccessType( const Type &type );
    void setType( Type type );
    T__CalendarPermissionReadAccessType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__CalendarPermissionReadAccessType();
    ~T__CalendarPermissionReadAccessType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__PermissionReadAccessType you
    can also pass the enum directly.
    Example:
    someMethod(T__PermissionReadAccessType::None).
 */
class T__PermissionReadAccessType
{
public:
    enum Type { None, FullDetails };

public:
    T__PermissionReadAccessType( const Type &type );
    void setType( Type type );
    T__PermissionReadAccessType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__PermissionReadAccessType();
    ~T__PermissionReadAccessType();

private:
    Type mType;
};

/**
    This class is a wrapper for an enumeration.
    Whenever you have to pass an object of type T__PermissionActionType you can
    also pass the enum directly.
    Example:
    someMethod(T__PermissionActionType::None).
 */
class T__PermissionActionType
{
public:
    enum Type { None, Owned, All };

public:
    T__PermissionActionType( const Type &type );
    void setType( Type type );
    T__PermissionActionType::Type type() const;
    operator Type() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__PermissionActionType();
    ~T__PermissionActionType();

private:
    Type mType;
};

class T__MimeContentType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__MimeContentType( const QString& value );
    operator QString() const;
    void setCharacterSet( const QString& characterSet );
    QString characterSet() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__MimeContentType();
    ~T__MimeContentType();

public:
    T__MimeContentType( const T__MimeContentType& );
    T__MimeContentType &operator=( const T__MimeContentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Utility type which should never appear in user documents
 */
class T__BaseFolderIdType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BaseFolderIdType();
    virtual ~T__BaseFolderIdType();

};

class T__ItemChangeType
{
public:
    void setItemId( const T__ItemIdType& itemId );
    T__ItemIdType itemId() const;
    void setOccurrenceItemId( const T__OccurrenceItemIdType& occurrenceItemId );
    T__OccurrenceItemIdType occurrenceItemId() const;
    void setRecurringMasterItemId( const T__RecurringMasterItemIdType& recurringMasterItemId );
    T__RecurringMasterItemIdType recurringMasterItemId() const;
    void setUpdates( const T__NonEmptyArrayOfItemChangeDescriptionsType& updates );
    T__NonEmptyArrayOfItemChangeDescriptionsType updates() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ItemChangeType();
    ~T__ItemChangeType();

public:
    T__ItemChangeType( const T__ItemChangeType& );
    T__ItemChangeType &operator=( const T__ItemChangeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ConnectingSIDType
{
public:
    void setPrincipalName( const QString& principalName );
    QString principalName() const;
    void setSID( const QString& sID );
    QString sID() const;
    void setPrimarySmtpAddress( const QString& primarySmtpAddress );
    QString primarySmtpAddress() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ConnectingSIDType();
    ~T__ConnectingSIDType();

public:
    T__ConnectingSIDType( const T__ConnectingSIDType& );
    T__ConnectingSIDType &operator=( const T__ConnectingSIDType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__EmailAddressDictionaryEntryType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__EmailAddressDictionaryEntryType( const QString& value );
    operator QString() const;
    void setKey( const T__EmailAddressKeyType& key );
    T__EmailAddressKeyType key() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__EmailAddressDictionaryEntryType();
    ~T__EmailAddressDictionaryEntryType();

public:
    T__EmailAddressDictionaryEntryType( const T__EmailAddressDictionaryEntryType& );
    T__EmailAddressDictionaryEntryType &operator=( const T__EmailAddressDictionaryEntryType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__EffectiveRightsType
{
public:
    void setCreateAssociated( bool createAssociated );
    bool createAssociated() const;
    void setCreateContents( bool createContents );
    bool createContents() const;
    void setCreateHierarchy( bool createHierarchy );
    bool createHierarchy() const;
    void setDelete( bool delete_ );
    bool delete_() const;
    void setModify( bool modify );
    bool modify() const;
    void setRead( bool read );
    bool read() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__EffectiveRightsType();
    ~T__EffectiveRightsType();

public:
    T__EffectiveRightsType( const T__EffectiveRightsType& );
    T__EffectiveRightsType &operator=( const T__EffectiveRightsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PhysicalAddressDictionaryType
{
public:
    void setEntry( const QList<T__PhysicalAddressDictionaryEntryType>& entry );
    QList<T__PhysicalAddressDictionaryEntryType> entry() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PhysicalAddressDictionaryType();
    ~T__PhysicalAddressDictionaryType();

public:
    T__PhysicalAddressDictionaryType( const T__PhysicalAddressDictionaryType& );
    T__PhysicalAddressDictionaryType &operator=( const T__PhysicalAddressDictionaryType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__BaseResponseMessageType
{
public:
    void setResponseMessages( const TNS__ArrayOfResponseMessagesType& responseMessages );
    TNS__ArrayOfResponseMessagesType responseMessages() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    TNS__BaseResponseMessageType();
    virtual ~TNS__BaseResponseMessageType();

public:
    TNS__BaseResponseMessageType( const TNS__BaseResponseMessageType& );
    TNS__BaseResponseMessageType &operator=( const TNS__BaseResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TaskRecurrenceType
{
public:
    void setRelativeYearlyRecurrence( const T__RelativeYearlyRecurrencePatternType& relativeYearlyRecurrence );
    T__RelativeYearlyRecurrencePatternType relativeYearlyRecurrence() const;
    void setAbsoluteYearlyRecurrence( const T__AbsoluteYearlyRecurrencePatternType& absoluteYearlyRecurrence );
    T__AbsoluteYearlyRecurrencePatternType absoluteYearlyRecurrence() const;
    void setRelativeMonthlyRecurrence( const T__RelativeMonthlyRecurrencePatternType& relativeMonthlyRecurrence );
    T__RelativeMonthlyRecurrencePatternType relativeMonthlyRecurrence() const;
    void setAbsoluteMonthlyRecurrence( const T__AbsoluteMonthlyRecurrencePatternType& absoluteMonthlyRecurrence );
    T__AbsoluteMonthlyRecurrencePatternType absoluteMonthlyRecurrence() const;
    void setWeeklyRecurrence( const T__WeeklyRecurrencePatternType& weeklyRecurrence );
    T__WeeklyRecurrencePatternType weeklyRecurrence() const;
    void setDailyRecurrence( const T__DailyRecurrencePatternType& dailyRecurrence );
    T__DailyRecurrencePatternType dailyRecurrence() const;
    void setDailyRegeneration( const T__DailyRegeneratingPatternType& dailyRegeneration );
    T__DailyRegeneratingPatternType dailyRegeneration() const;
    void setWeeklyRegeneration( const T__WeeklyRegeneratingPatternType& weeklyRegeneration );
    T__WeeklyRegeneratingPatternType weeklyRegeneration() const;
    void setMonthlyRegeneration( const T__MonthlyRegeneratingPatternType& monthlyRegeneration );
    T__MonthlyRegeneratingPatternType monthlyRegeneration() const;
    void setYearlyRegeneration( const T__YearlyRegeneratingPatternType& yearlyRegeneration );
    T__YearlyRegeneratingPatternType yearlyRegeneration() const;
    void setNoEndRecurrence( const T__NoEndRecurrenceRangeType& noEndRecurrence );
    T__NoEndRecurrenceRangeType noEndRecurrence() const;
    void setEndDateRecurrence( const T__EndDateRecurrenceRangeType& endDateRecurrence );
    T__EndDateRecurrenceRangeType endDateRecurrence() const;
    void setNumberedRecurrence( const T__NumberedRecurrenceRangeType& numberedRecurrence );
    T__NumberedRecurrenceRangeType numberedRecurrence() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TaskRecurrenceType();
    ~T__TaskRecurrenceType();

public:
    T__TaskRecurrenceType( const T__TaskRecurrenceType& );
    T__TaskRecurrenceType &operator=( const T__TaskRecurrenceType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SerializedSecurityContextType
{
public:
    void setUserSid( const QString& userSid );
    QString userSid() const;
    void setGroupSids( const T__NonEmptyArrayOfGroupIdentifiersType& groupSids );
    T__NonEmptyArrayOfGroupIdentifiersType groupSids() const;
    void setRestrictedGroupSids( const T__NonEmptyArrayOfRestrictedGroupIdentifiersType& restrictedGroupSids );
    T__NonEmptyArrayOfRestrictedGroupIdentifiersType restrictedGroupSids() const;
    void setPrimarySmtpAddress( const QString& primarySmtpAddress );
    QString primarySmtpAddress() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SerializedSecurityContextType();
    ~T__SerializedSecurityContextType();

public:
    T__SerializedSecurityContextType( const T__SerializedSecurityContextType& );
    T__SerializedSecurityContextType &operator=( const T__SerializedSecurityContextType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfCalendarPermissionsType
{
public:
    void setCalendarPermission( const QList<T__CalendarPermissionType>& calendarPermission );
    QList<T__CalendarPermissionType> calendarPermission() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfCalendarPermissionsType();
    ~T__ArrayOfCalendarPermissionsType();

public:
    T__ArrayOfCalendarPermissionsType( const T__ArrayOfCalendarPermissionsType& );
    T__ArrayOfCalendarPermissionsType &operator=( const T__ArrayOfCalendarPermissionsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfInternetHeadersType
{
public:
    void setInternetMessageHeader( const QList<T__InternetHeaderType>& internetMessageHeader );
    QList<T__InternetHeaderType> internetMessageHeader() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfInternetHeadersType();
    ~T__NonEmptyArrayOfInternetHeadersType();

public:
    T__NonEmptyArrayOfInternetHeadersType( const T__NonEmptyArrayOfInternetHeadersType& );
    T__NonEmptyArrayOfInternetHeadersType &operator=( const T__NonEmptyArrayOfInternetHeadersType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfAllItemsType
{
public:
    void setItem( const QList<T__ItemType>& item );
    QList<T__ItemType> item() const;
    void setMessage( const QList<T__MessageType>& message );
    QList<T__MessageType> message() const;
    void setCalendarItem( const QList<T__CalendarItemType>& calendarItem );
    QList<T__CalendarItemType> calendarItem() const;
    void setContact( const QList<T__ContactItemType>& contact );
    QList<T__ContactItemType> contact() const;
    void setDistributionList( const QList<T__DistributionListType>& distributionList );
    QList<T__DistributionListType> distributionList() const;
    void setMeetingMessage( const QList<T__MeetingMessageType>& meetingMessage );
    QList<T__MeetingMessageType> meetingMessage() const;
    void setMeetingRequest( const QList<T__MeetingRequestMessageType>& meetingRequest );
    QList<T__MeetingRequestMessageType> meetingRequest() const;
    void setMeetingResponse( const QList<T__MeetingResponseMessageType>& meetingResponse );
    QList<T__MeetingResponseMessageType> meetingResponse() const;
    void setMeetingCancellation( const QList<T__MeetingCancellationMessageType>& meetingCancellation );
    QList<T__MeetingCancellationMessageType> meetingCancellation() const;
    void setTask( const QList<T__TaskType>& task );
    QList<T__TaskType> task() const;
    void setPostItem( const QList<T__PostItemType>& postItem );
    QList<T__PostItemType> postItem() const;
    void setReplyToItem( const QList<T__ReplyToItemType>& replyToItem );
    QList<T__ReplyToItemType> replyToItem() const;
    void setForwardItem( const QList<T__ForwardItemType>& forwardItem );
    QList<T__ForwardItemType> forwardItem() const;
    void setReplyAllToItem( const QList<T__ReplyAllToItemType>& replyAllToItem );
    QList<T__ReplyAllToItemType> replyAllToItem() const;
    void setAcceptItem( const QList<T__AcceptItemType>& acceptItem );
    QList<T__AcceptItemType> acceptItem() const;
    void setTentativelyAcceptItem( const QList<T__TentativelyAcceptItemType>& tentativelyAcceptItem );
    QList<T__TentativelyAcceptItemType> tentativelyAcceptItem() const;
    void setDeclineItem( const QList<T__DeclineItemType>& declineItem );
    QList<T__DeclineItemType> declineItem() const;
    void setCancelCalendarItem( const QList<T__CancelCalendarItemType>& cancelCalendarItem );
    QList<T__CancelCalendarItemType> cancelCalendarItem() const;
    void setRemoveItem( const QList<T__RemoveItemType>& removeItem );
    QList<T__RemoveItemType> removeItem() const;
    void setSuppressReadReceipt( const QList<T__SuppressReadReceiptType>& suppressReadReceipt );
    QList<T__SuppressReadReceiptType> suppressReadReceipt() const;
    void setPostReplyItem( const QList<T__PostReplyItemType>& postReplyItem );
    QList<T__PostReplyItemType> postReplyItem() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfAllItemsType();
    ~T__NonEmptyArrayOfAllItemsType();

public:
    T__NonEmptyArrayOfAllItemsType( const T__NonEmptyArrayOfAllItemsType& );
    T__NonEmptyArrayOfAllItemsType &operator=( const T__NonEmptyArrayOfAllItemsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__BaseEmailAddressType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BaseEmailAddressType();
    virtual ~T__BaseEmailAddressType();

};

class T__NonEmptyArrayOfAttendeesType
{
public:
    void setAttendee( const QList<T__AttendeeType>& attendee );
    QList<T__AttendeeType> attendee() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfAttendeesType();
    ~T__NonEmptyArrayOfAttendeesType();

public:
    T__NonEmptyArrayOfAttendeesType( const T__NonEmptyArrayOfAttendeesType& );
    T__NonEmptyArrayOfAttendeesType &operator=( const T__NonEmptyArrayOfAttendeesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__OccurrenceInfoType
{
public:
    void setItemId( const T__ItemIdType& itemId );
    T__ItemIdType itemId() const;
    void setStart( const KDDateTime& start );
    KDDateTime start() const;
    void setEnd( const KDDateTime& end );
    KDDateTime end() const;
    void setOriginalStart( const KDDateTime& originalStart );
    KDDateTime originalStart() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__OccurrenceInfoType();
    ~T__OccurrenceInfoType();

public:
    T__OccurrenceInfoType( const T__OccurrenceInfoType& );
    T__OccurrenceInfoType &operator=( const T__OccurrenceInfoType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ConstantValueType
{
public:
    void setValue( const QString& value );
    QString value() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ConstantValueType();
    ~T__ConstantValueType();

public:
    T__ConstantValueType( const T__ConstantValueType& );
    T__ConstantValueType &operator=( const T__ConstantValueType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RecurrencePatternBaseType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__RecurrencePatternBaseType();
    virtual ~T__RecurrencePatternBaseType();

};

class T__NonEmptyArrayOfItemChangeDescriptionsType
{
public:
    void setAppendToItemField( const QList<T__AppendToItemFieldType>& appendToItemField );
    QList<T__AppendToItemFieldType> appendToItemField() const;
    void setSetItemField( const QList<T__SetItemFieldType>& setItemField );
    QList<T__SetItemFieldType> setItemField() const;
    void setDeleteItemField( const QList<T__DeleteItemFieldType>& deleteItemField );
    QList<T__DeleteItemFieldType> deleteItemField() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfItemChangeDescriptionsType();
    ~T__NonEmptyArrayOfItemChangeDescriptionsType();

public:
    T__NonEmptyArrayOfItemChangeDescriptionsType( const T__NonEmptyArrayOfItemChangeDescriptionsType& );
    T__NonEmptyArrayOfItemChangeDescriptionsType &operator=( const T__NonEmptyArrayOfItemChangeDescriptionsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__AttendeeConflictData
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__AttendeeConflictData();
    virtual ~T__AttendeeConflictData();

};

class T__SerializableTimeZoneTime
{
public:
    void setBias( int bias );
    int bias() const;
    void setTime( const QString& time );
    QString time() const;
    void setDayOrder( int dayOrder );
    int dayOrder() const;
    void setMonth( int month );
    int month() const;
    void setDayOfWeek( const T__DayOfWeekType& dayOfWeek );
    T__DayOfWeekType dayOfWeek() const;
    void setYear( const QString& year );
    QString year() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SerializableTimeZoneTime();
    ~T__SerializableTimeZoneTime();

public:
    T__SerializableTimeZoneTime( const T__SerializableTimeZoneTime& );
    T__SerializableTimeZoneTime &operator=( const T__SerializableTimeZoneTime& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ChangeDescriptionType
{
public:
    void setPath( const T__BasePathToElementType& path );
    T__BasePathToElementType path() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__ChangeDescriptionType();
    virtual ~T__ChangeDescriptionType();

public:
    T__ChangeDescriptionType( const T__ChangeDescriptionType& );
    T__ChangeDescriptionType &operator=( const T__ChangeDescriptionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Compound property for Managed Folder related information for Managed
    Folders.
 */
class T__ManagedFolderInformationType
{
public:
    void setCanDelete( bool canDelete );
    bool canDelete() const;
    void setCanRenameOrMove( bool canRenameOrMove );
    bool canRenameOrMove() const;
    void setMustDisplayComment( bool mustDisplayComment );
    bool mustDisplayComment() const;
    void setHasQuota( bool hasQuota );
    bool hasQuota() const;
    void setIsManagedFoldersRoot( bool isManagedFoldersRoot );
    bool isManagedFoldersRoot() const;
    void setManagedFolderId( const QString& managedFolderId );
    QString managedFolderId() const;
    void setComment( const QString& comment );
    QString comment() const;
    void setStorageQuota( int storageQuota );
    int storageQuota() const;
    void setFolderSize( int folderSize );
    int folderSize() const;
    void setHomePage( const QString& homePage );
    QString homePage() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ManagedFolderInformationType();
    ~T__ManagedFolderInformationType();

public:
    T__ManagedFolderInformationType( const T__ManagedFolderInformationType& );
    T__ManagedFolderInformationType &operator=( const T__ManagedFolderInformationType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__Duration
{
public:
    void setStartTime( const KDDateTime& startTime );
    KDDateTime startTime() const;
    void setEndTime( const KDDateTime& endTime );
    KDDateTime endTime() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__Duration();
    ~T__Duration();

public:
    T__Duration( const T__Duration& );
    T__Duration &operator=( const T__Duration& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__BaseNotificationEventType
{
public:
    void setWatermark( const T__WatermarkType& watermark );
    T__WatermarkType watermark() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BaseNotificationEventType();
    virtual ~T__BaseNotificationEventType();

public:
    T__BaseNotificationEventType( const T__BaseNotificationEventType& );
    T__BaseNotificationEventType &operator=( const T__BaseNotificationEventType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__BodyType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__BodyType( const QString& value );
    operator QString() const;
    void setBodyType( const T__BodyTypeType& bodyType );
    T__BodyTypeType bodyType() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__BodyType();
    ~T__BodyType();

public:
    T__BodyType( const T__BodyType& );
    T__BodyType &operator=( const T__BodyType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__WorkingPeriod
{
public:
    void setDayOfWeek( const T__DaysOfWeekType& dayOfWeek );
    T__DaysOfWeekType dayOfWeek() const;
    void setStartTimeInMinutes( int startTimeInMinutes );
    int startTimeInMinutes() const;
    void setEndTimeInMinutes( int endTimeInMinutes );
    int endTimeInMinutes() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__WorkingPeriod();
    ~T__WorkingPeriod();

public:
    T__WorkingPeriod( const T__WorkingPeriod& );
    T__WorkingPeriod &operator=( const T__WorkingPeriod& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__EmailAddressDictionaryType
{
public:
    void setEntry( const QList<T__EmailAddressDictionaryEntryType>& entry );
    QList<T__EmailAddressDictionaryEntryType> entry() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__EmailAddressDictionaryType();
    ~T__EmailAddressDictionaryType();

public:
    T__EmailAddressDictionaryType( const T__EmailAddressDictionaryType& );
    T__EmailAddressDictionaryType &operator=( const T__EmailAddressDictionaryType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ArrayOfResponseMessagesType
{
public:
    void setCreateItemResponseMessage( const QList<TNS__ItemInfoResponseMessageType>& createItemResponseMessage );
    QList<TNS__ItemInfoResponseMessageType> createItemResponseMessage() const;
    void setDeleteItemResponseMessage( const QList<TNS__ResponseMessageType>& deleteItemResponseMessage );
    QList<TNS__ResponseMessageType> deleteItemResponseMessage() const;
    void setGetItemResponseMessage( const QList<TNS__ItemInfoResponseMessageType>& getItemResponseMessage );
    QList<TNS__ItemInfoResponseMessageType> getItemResponseMessage() const;
    void setUpdateItemResponseMessage( const QList<TNS__UpdateItemResponseMessageType>& updateItemResponseMessage );
    QList<TNS__UpdateItemResponseMessageType> updateItemResponseMessage() const;
    void setSendItemResponseMessage( const QList<TNS__ResponseMessageType>& sendItemResponseMessage );
    QList<TNS__ResponseMessageType> sendItemResponseMessage() const;
    void setDeleteFolderResponseMessage( const QList<TNS__ResponseMessageType>& deleteFolderResponseMessage );
    QList<TNS__ResponseMessageType> deleteFolderResponseMessage() const;
    void setCreateFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& createFolderResponseMessage );
    QList<TNS__FolderInfoResponseMessageType> createFolderResponseMessage() const;
    void setGetFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& getFolderResponseMessage );
    QList<TNS__FolderInfoResponseMessageType> getFolderResponseMessage() const;
    void setFindFolderResponseMessage( const QList<TNS__FindFolderResponseMessageType>& findFolderResponseMessage );
    QList<TNS__FindFolderResponseMessageType> findFolderResponseMessage() const;
    void setUpdateFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& updateFolderResponseMessage );
    QList<TNS__FolderInfoResponseMessageType> updateFolderResponseMessage() const;
    void setMoveFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& moveFolderResponseMessage );
    QList<TNS__FolderInfoResponseMessageType> moveFolderResponseMessage() const;
    void setCopyFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& copyFolderResponseMessage );
    QList<TNS__FolderInfoResponseMessageType> copyFolderResponseMessage() const;
    void setCreateAttachmentResponseMessage( const QList<TNS__AttachmentInfoResponseMessageType>& createAttachmentResponseMessage );
    QList<TNS__AttachmentInfoResponseMessageType> createAttachmentResponseMessage() const;
    void setDeleteAttachmentResponseMessage( const QList<TNS__DeleteAttachmentResponseMessageType>& deleteAttachmentResponseMessage );
    QList<TNS__DeleteAttachmentResponseMessageType> deleteAttachmentResponseMessage() const;
    void setGetAttachmentResponseMessage( const QList<TNS__AttachmentInfoResponseMessageType>& getAttachmentResponseMessage );
    QList<TNS__AttachmentInfoResponseMessageType> getAttachmentResponseMessage() const;
    void setFindItemResponseMessage( const QList<TNS__FindItemResponseMessageType>& findItemResponseMessage );
    QList<TNS__FindItemResponseMessageType> findItemResponseMessage() const;
    void setMoveItemResponseMessage( const QList<TNS__ItemInfoResponseMessageType>& moveItemResponseMessage );
    QList<TNS__ItemInfoResponseMessageType> moveItemResponseMessage() const;
    void setCopyItemResponseMessage( const QList<TNS__ItemInfoResponseMessageType>& copyItemResponseMessage );
    QList<TNS__ItemInfoResponseMessageType> copyItemResponseMessage() const;
    void setResolveNamesResponseMessage( const QList<TNS__ResolveNamesResponseMessageType>& resolveNamesResponseMessage );
    QList<TNS__ResolveNamesResponseMessageType> resolveNamesResponseMessage() const;
    void setExpandDLResponseMessage( const QList<TNS__ExpandDLResponseMessageType>& expandDLResponseMessage );
    QList<TNS__ExpandDLResponseMessageType> expandDLResponseMessage() const;
    void setGetEventsResponseMessage( const QList<TNS__GetEventsResponseMessageType>& getEventsResponseMessage );
    QList<TNS__GetEventsResponseMessageType> getEventsResponseMessage() const;
    void setSubscribeResponseMessage( const QList<TNS__SubscribeResponseMessageType>& subscribeResponseMessage );
    QList<TNS__SubscribeResponseMessageType> subscribeResponseMessage() const;
    void setUnsubscribeResponseMessage( const QList<TNS__ResponseMessageType>& unsubscribeResponseMessage );
    QList<TNS__ResponseMessageType> unsubscribeResponseMessage() const;
    void setSendNotificationResponseMessage( const QList<TNS__SendNotificationResponseMessageType>& sendNotificationResponseMessage );
    QList<TNS__SendNotificationResponseMessageType> sendNotificationResponseMessage() const;
    void setSyncFolderHierarchyResponseMessage( const QList<TNS__SyncFolderHierarchyResponseMessageType>& syncFolderHierarchyResponseMessage );
    QList<TNS__SyncFolderHierarchyResponseMessageType> syncFolderHierarchyResponseMessage() const;
    void setSyncFolderItemsResponseMessage( const QList<TNS__SyncFolderItemsResponseMessageType>& syncFolderItemsResponseMessage );
    QList<TNS__SyncFolderItemsResponseMessageType> syncFolderItemsResponseMessage() const;
    void setCreateManagedFolderResponseMessage( const QList<TNS__FolderInfoResponseMessageType>& createManagedFolderResponseMessage );
    QList<TNS__FolderInfoResponseMessageType> createManagedFolderResponseMessage() const;
    void setConvertIdResponseMessage( const QList<TNS__ConvertIdResponseMessageType>& convertIdResponseMessage );
    QList<TNS__ConvertIdResponseMessageType> convertIdResponseMessage() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ArrayOfResponseMessagesType();
    ~TNS__ArrayOfResponseMessagesType();

public:
    TNS__ArrayOfResponseMessagesType( const TNS__ArrayOfResponseMessagesType& );
    TNS__ArrayOfResponseMessagesType &operator=( const TNS__ArrayOfResponseMessagesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SuggestionsResponseType
{
public:
    void setResponseMessage( const TNS__ResponseMessageType& responseMessage );
    TNS__ResponseMessageType responseMessage() const;
    void setSuggestionDayResultArray( const T__ArrayOfSuggestionDayResult& suggestionDayResultArray );
    T__ArrayOfSuggestionDayResult suggestionDayResultArray() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SuggestionsResponseType();
    ~TNS__SuggestionsResponseType();

public:
    TNS__SuggestionsResponseType( const TNS__SuggestionsResponseType& );
    TNS__SuggestionsResponseType &operator=( const TNS__SuggestionsResponseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PhysicalAddressDictionaryEntryType
{
public:
    void setStreet( const QString& street );
    QString street() const;
    void setCity( const QString& city );
    QString city() const;
    void setState( const QString& state );
    QString state() const;
    void setCountryOrRegion( const QString& countryOrRegion );
    QString countryOrRegion() const;
    void setPostalCode( const QString& postalCode );
    QString postalCode() const;
    void setKey( const T__PhysicalAddressKeyType& key );
    T__PhysicalAddressKeyType key() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PhysicalAddressDictionaryEntryType();
    ~T__PhysicalAddressDictionaryEntryType();

public:
    T__PhysicalAddressDictionaryEntryType( const T__PhysicalAddressDictionaryEntryType& );
    T__PhysicalAddressDictionaryEntryType &operator=( const T__PhysicalAddressDictionaryEntryType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__BaseRequestType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    TNS__BaseRequestType();
    virtual ~TNS__BaseRequestType();

};

class T__ArrayOfStringsType
{
public:
    void setString( const QStringList& string );
    QStringList string() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfStringsType();
    ~T__ArrayOfStringsType();

public:
    T__ArrayOfStringsType( const T__ArrayOfStringsType& );
    T__ArrayOfStringsType &operator=( const T__ArrayOfStringsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfFieldOrdersType
{
public:
    void setFieldOrder( const QList<T__FieldOrderType>& fieldOrder );
    QList<T__FieldOrderType> fieldOrder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfFieldOrdersType();
    ~T__NonEmptyArrayOfFieldOrdersType();

public:
    T__NonEmptyArrayOfFieldOrdersType( const T__NonEmptyArrayOfFieldOrdersType& );
    T__NonEmptyArrayOfFieldOrdersType &operator=( const T__NonEmptyArrayOfFieldOrdersType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__CalendarEventDetails
{
public:
    void setID( const QString& iD );
    QString iD() const;
    void setSubject( const QString& subject );
    QString subject() const;
    void setLocation( const QString& location );
    QString location() const;
    void setIsMeeting( bool isMeeting );
    bool isMeeting() const;
    void setIsRecurring( bool isRecurring );
    bool isRecurring() const;
    void setIsException( bool isException );
    bool isException() const;
    void setIsReminderSet( bool isReminderSet );
    bool isReminderSet() const;
    void setIsPrivate( bool isPrivate );
    bool isPrivate() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CalendarEventDetails();
    ~T__CalendarEventDetails();

public:
    T__CalendarEventDetails( const T__CalendarEventDetails& );
    T__CalendarEventDetails &operator=( const T__CalendarEventDetails& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SerializableTimeZone
{
public:
    void setBias( int bias );
    int bias() const;
    void setStandardTime( const T__SerializableTimeZoneTime& standardTime );
    T__SerializableTimeZoneTime standardTime() const;
    void setDaylightTime( const T__SerializableTimeZoneTime& daylightTime );
    T__SerializableTimeZoneTime daylightTime() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SerializableTimeZone();
    ~T__SerializableTimeZone();

public:
    T__SerializableTimeZone( const T__SerializableTimeZone& );
    T__SerializableTimeZone &operator=( const T__SerializableTimeZone& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfPermissionsType
{
public:
    void setPermission( const QList<T__PermissionType>& permission );
    QList<T__PermissionType> permission() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfPermissionsType();
    ~T__ArrayOfPermissionsType();

public:
    T__ArrayOfPermissionsType( const T__ArrayOfPermissionsType& );
    T__ArrayOfPermissionsType &operator=( const T__ArrayOfPermissionsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ServerVersionInfo
{
public:
    void setMajorVersion( int majorVersion );
    int majorVersion() const;
    void setMinorVersion( int minorVersion );
    int minorVersion() const;
    void setMajorBuildNumber( int majorBuildNumber );
    int majorBuildNumber() const;
    void setMinorBuildNumber( int minorBuildNumber );
    int minorBuildNumber() const;
    void setVersion( const QString& version );
    QString version() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ServerVersionInfo();
    ~T__ServerVersionInfo();

public:
    T__ServerVersionInfo( const T__ServerVersionInfo& );
    T__ServerVersionInfo &operator=( const T__ServerVersionInfo& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    A non-empty array of alternate Ids.
 */
class T__NonEmptyArrayOfAlternateIdsType
{
public:
    void setAlternateId( const QList<T__AlternateIdType>& alternateId );
    QList<T__AlternateIdType> alternateId() const;
    void setAlternatePublicFolderId( const QList<T__AlternatePublicFolderIdType>& alternatePublicFolderId );
    QList<T__AlternatePublicFolderIdType> alternatePublicFolderId() const;
    void setAlternatePublicFolderItemId( const QList<T__AlternatePublicFolderItemIdType>& alternatePublicFolderItemId );
    QList<T__AlternatePublicFolderItemIdType> alternatePublicFolderItemId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfAlternateIdsType();
    ~T__NonEmptyArrayOfAlternateIdsType();

public:
    T__NonEmptyArrayOfAlternateIdsType( const T__NonEmptyArrayOfAlternateIdsType& );
    T__NonEmptyArrayOfAlternateIdsType &operator=( const T__NonEmptyArrayOfAlternateIdsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__AttachmentType
{
public:
    void setAttachmentId( const T__AttachmentIdType& attachmentId );
    T__AttachmentIdType attachmentId() const;
    void setName( const QString& name );
    QString name() const;
    void setContentType( const QString& contentType );
    QString contentType() const;
    void setContentId( const QString& contentId );
    QString contentId() const;
    void setContentLocation( const QString& contentLocation );
    QString contentLocation() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__AttachmentType();
    virtual ~T__AttachmentType();

public:
    T__AttachmentType( const T__AttachmentType& );
    T__AttachmentType &operator=( const T__AttachmentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfSuggestion
{
public:
    void setSuggestion( const QList<T__Suggestion>& suggestion );
    QList<T__Suggestion> suggestion() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfSuggestion();
    ~T__ArrayOfSuggestion();

public:
    T__ArrayOfSuggestion( const T__ArrayOfSuggestion& );
    T__ArrayOfSuggestion &operator=( const T__ArrayOfSuggestion& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfResolutionType
{
public:
    void setResolution( const QList<T__ResolutionType>& resolution );
    QList<T__ResolutionType> resolution() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfResolutionType();
    ~T__ArrayOfResolutionType();

public:
    T__ArrayOfResolutionType( const T__ArrayOfResolutionType& );
    T__ArrayOfResolutionType &operator=( const T__ArrayOfResolutionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfGroupedItemsType
{
public:
    void setGroupedItems( const T__GroupedItemsType& groupedItems );
    T__GroupedItemsType groupedItems() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfGroupedItemsType();
    ~T__ArrayOfGroupedItemsType();

public:
    T__ArrayOfGroupedItemsType( const T__ArrayOfGroupedItemsType& );
    T__ArrayOfGroupedItemsType &operator=( const T__ArrayOfGroupedItemsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SyncFolderItemsCreateOrUpdateType
{
public:
    void setItem( const T__ItemType& item );
    T__ItemType item() const;
    void setMessage( const T__MessageType& message );
    T__MessageType message() const;
    void setCalendarItem( const T__CalendarItemType& calendarItem );
    T__CalendarItemType calendarItem() const;
    void setContact( const T__ContactItemType& contact );
    T__ContactItemType contact() const;
    void setDistributionList( const T__DistributionListType& distributionList );
    T__DistributionListType distributionList() const;
    void setMeetingMessage( const T__MeetingMessageType& meetingMessage );
    T__MeetingMessageType meetingMessage() const;
    void setMeetingRequest( const T__MeetingRequestMessageType& meetingRequest );
    T__MeetingRequestMessageType meetingRequest() const;
    void setMeetingResponse( const T__MeetingResponseMessageType& meetingResponse );
    T__MeetingResponseMessageType meetingResponse() const;
    void setMeetingCancellation( const T__MeetingCancellationMessageType& meetingCancellation );
    T__MeetingCancellationMessageType meetingCancellation() const;
    void setTask( const T__TaskType& task );
    T__TaskType task() const;
    void setPostItem( const T__PostItemType& postItem );
    T__PostItemType postItem() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SyncFolderItemsCreateOrUpdateType();
    ~T__SyncFolderItemsCreateOrUpdateType();

public:
    T__SyncFolderItemsCreateOrUpdateType( const T__SyncFolderItemsCreateOrUpdateType& );
    T__SyncFolderItemsCreateOrUpdateType &operator=( const T__SyncFolderItemsCreateOrUpdateType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Represents an extended property instance (both its path identifier along
    with its associated value).
 */
class T__ExtendedPropertyType
{
public:
    void setExtendedFieldURI( const T__PathToExtendedFieldType& extendedFieldURI );
    T__PathToExtendedFieldType extendedFieldURI() const;
    void setValue( const QString& value );
    QString value() const;
    void setValues( const T__NonEmptyArrayOfPropertyValuesType& values );
    T__NonEmptyArrayOfPropertyValuesType values() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ExtendedPropertyType();
    ~T__ExtendedPropertyType();

public:
    T__ExtendedPropertyType( const T__ExtendedPropertyType& );
    T__ExtendedPropertyType &operator=( const T__ExtendedPropertyType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfMailboxData
{
public:
    void setMailboxData( const QList<T__MailboxData>& mailboxData );
    QList<T__MailboxData> mailboxData() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfMailboxData();
    ~T__ArrayOfMailboxData();

public:
    T__ArrayOfMailboxData( const T__ArrayOfMailboxData& );
    T__ArrayOfMailboxData &operator=( const T__ArrayOfMailboxData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FreeBusyView
{
public:
    void setFreeBusyViewType( const T__FreeBusyViewType& freeBusyViewType );
    T__FreeBusyViewType freeBusyViewType() const;
    void setMergedFreeBusy( const QString& mergedFreeBusy );
    QString mergedFreeBusy() const;
    void setCalendarEventArray( const T__ArrayOfCalendarEvent& calendarEventArray );
    T__ArrayOfCalendarEvent calendarEventArray() const;
    void setWorkingHours( const T__WorkingHours& workingHours );
    T__WorkingHours workingHours() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FreeBusyView();
    ~T__FreeBusyView();

public:
    T__FreeBusyView( const T__FreeBusyView& );
    T__FreeBusyView &operator=( const T__FreeBusyView& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ResponseMessageType
{
public:
    void setMessageText( const QString& messageText );
    QString messageText() const;
    void setResponseCode( const TNS__ResponseCodeType& responseCode );
    TNS__ResponseCodeType responseCode() const;
    void setDescriptiveLinkKey( int descriptiveLinkKey );
    int descriptiveLinkKey() const;
    void setMessageXml( const TNS__MessageXml& messageXml );
    TNS__MessageXml messageXml() const;
    void setResponseClass( const T__ResponseClassType& responseClass );
    T__ResponseClassType responseClass() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    TNS__ResponseMessageType();
    virtual ~TNS__ResponseMessageType();

public:
    TNS__ResponseMessageType( const TNS__ResponseMessageType& );
    TNS__ResponseMessageType &operator=( const TNS__ResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfGroupIdentifiersType
{
public:
    void setGroupIdentifier( const QList<T__SidAndAttributesType>& groupIdentifier );
    QList<T__SidAndAttributesType> groupIdentifier() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfGroupIdentifiersType();
    ~T__NonEmptyArrayOfGroupIdentifiersType();

public:
    T__NonEmptyArrayOfGroupIdentifiersType( const T__NonEmptyArrayOfGroupIdentifiersType& );
    T__NonEmptyArrayOfGroupIdentifiersType &operator=( const T__NonEmptyArrayOfGroupIdentifiersType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfResponseObjectsType
{
public:
    void setAcceptItem( const QList<T__AcceptItemType>& acceptItem );
    QList<T__AcceptItemType> acceptItem() const;
    void setTentativelyAcceptItem( const QList<T__TentativelyAcceptItemType>& tentativelyAcceptItem );
    QList<T__TentativelyAcceptItemType> tentativelyAcceptItem() const;
    void setDeclineItem( const QList<T__DeclineItemType>& declineItem );
    QList<T__DeclineItemType> declineItem() const;
    void setReplyToItem( const QList<T__ReplyToItemType>& replyToItem );
    QList<T__ReplyToItemType> replyToItem() const;
    void setForwardItem( const QList<T__ForwardItemType>& forwardItem );
    QList<T__ForwardItemType> forwardItem() const;
    void setReplyAllToItem( const QList<T__ReplyAllToItemType>& replyAllToItem );
    QList<T__ReplyAllToItemType> replyAllToItem() const;
    void setCancelCalendarItem( const QList<T__CancelCalendarItemType>& cancelCalendarItem );
    QList<T__CancelCalendarItemType> cancelCalendarItem() const;
    void setRemoveItem( const QList<T__RemoveItemType>& removeItem );
    QList<T__RemoveItemType> removeItem() const;
    void setSuppressReadReceipt( const QList<T__SuppressReadReceiptType>& suppressReadReceipt );
    QList<T__SuppressReadReceiptType> suppressReadReceipt() const;
    void setPostReplyItem( const QList<T__PostReplyItemType>& postReplyItem );
    QList<T__PostReplyItemType> postReplyItem() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfResponseObjectsType();
    ~T__NonEmptyArrayOfResponseObjectsType();

public:
    T__NonEmptyArrayOfResponseObjectsType( const T__NonEmptyArrayOfResponseObjectsType& );
    T__NonEmptyArrayOfResponseObjectsType &operator=( const T__NonEmptyArrayOfResponseObjectsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FolderChangeType
{
public:
    void setFolderId( const T__FolderIdType& folderId );
    T__FolderIdType folderId() const;
    void setDistinguishedFolderId( const T__DistinguishedFolderIdType& distinguishedFolderId );
    T__DistinguishedFolderIdType distinguishedFolderId() const;
    void setUpdates( const T__NonEmptyArrayOfFolderChangeDescriptionsType& updates );
    T__NonEmptyArrayOfFolderChangeDescriptionsType updates() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FolderChangeType();
    ~T__FolderChangeType();

public:
    T__FolderChangeType( const T__FolderChangeType& );
    T__FolderChangeType &operator=( const T__FolderChangeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TimeChangeType
{
public:
    void setOffset( const QString& offset );
    QString offset() const;
    void setTime( const QTime& time );
    QTime time() const;
    void setRelativeYearlyRecurrence( const T__RelativeYearlyRecurrencePatternType& relativeYearlyRecurrence );
    T__RelativeYearlyRecurrencePatternType relativeYearlyRecurrence() const;
    void setAbsoluteDate( const QDate& absoluteDate );
    QDate absoluteDate() const;
    void setTimeZoneName( const QString& timeZoneName );
    QString timeZoneName() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TimeChangeType();
    ~T__TimeChangeType();

public:
    T__TimeChangeType( const T__TimeChangeType& );
    T__TimeChangeType &operator=( const T__TimeChangeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__AttendeeType
{
public:
    void setMailbox( const T__EmailAddressType& mailbox );
    T__EmailAddressType mailbox() const;
    void setResponseType( const T__ResponseTypeType& responseType );
    T__ResponseTypeType responseType() const;
    void setLastResponseTime( const KDDateTime& lastResponseTime );
    KDDateTime lastResponseTime() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AttendeeType();
    ~T__AttendeeType();

public:
    T__AttendeeType( const T__AttendeeType& );
    T__AttendeeType &operator=( const T__AttendeeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SuggestionDayResult
{
public:
    void setDate( const KDDateTime& date );
    KDDateTime date() const;
    void setDayQuality( const T__SuggestionQuality& dayQuality );
    T__SuggestionQuality dayQuality() const;
    void setSuggestionArray( const T__ArrayOfSuggestion& suggestionArray );
    T__ArrayOfSuggestion suggestionArray() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SuggestionDayResult();
    ~T__SuggestionDayResult();

public:
    T__SuggestionDayResult( const T__SuggestionDayResult& );
    T__SuggestionDayResult &operator=( const T__SuggestionDayResult& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfWorkingPeriod
{
public:
    void setWorkingPeriod( const QList<T__WorkingPeriod>& workingPeriod );
    QList<T__WorkingPeriod> workingPeriod() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfWorkingPeriod();
    ~T__ArrayOfWorkingPeriod();

public:
    T__ArrayOfWorkingPeriod( const T__ArrayOfWorkingPeriod& );
    T__ArrayOfWorkingPeriod &operator=( const T__ArrayOfWorkingPeriod& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfAttachmentsType
{
public:
    void setItemAttachment( const QList<T__ItemAttachmentType>& itemAttachment );
    QList<T__ItemAttachmentType> itemAttachment() const;
    void setFileAttachment( const QList<T__FileAttachmentType>& fileAttachment );
    QList<T__FileAttachmentType> fileAttachment() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfAttachmentsType();
    ~T__NonEmptyArrayOfAttachmentsType();

public:
    T__NonEmptyArrayOfAttachmentsType( const T__NonEmptyArrayOfAttachmentsType& );
    T__NonEmptyArrayOfAttachmentsType &operator=( const T__NonEmptyArrayOfAttachmentsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfRestrictedGroupIdentifiersType
{
public:
    void setRestrictedGroupIdentifier( const QList<T__SidAndAttributesType>& restrictedGroupIdentifier );
    QList<T__SidAndAttributesType> restrictedGroupIdentifier() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfRestrictedGroupIdentifiersType();
    ~T__NonEmptyArrayOfRestrictedGroupIdentifiersType();

public:
    T__NonEmptyArrayOfRestrictedGroupIdentifiersType( const T__NonEmptyArrayOfRestrictedGroupIdentifiersType& );
    T__NonEmptyArrayOfRestrictedGroupIdentifiersType &operator=( const T__NonEmptyArrayOfRestrictedGroupIdentifiersType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfFolderNamesType
{
public:
    void setFolderName( const QStringList& folderName );
    QStringList folderName() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfFolderNamesType();
    ~T__NonEmptyArrayOfFolderNamesType();

public:
    T__NonEmptyArrayOfFolderNamesType( const T__NonEmptyArrayOfFolderNamesType& );
    T__NonEmptyArrayOfFolderNamesType &operator=( const T__NonEmptyArrayOfFolderNamesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SyncFolderHierarchyDeleteType
{
public:
    void setFolderId( const T__FolderIdType& folderId );
    T__FolderIdType folderId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SyncFolderHierarchyDeleteType();
    ~T__SyncFolderHierarchyDeleteType();

public:
    T__SyncFolderHierarchyDeleteType( const T__SyncFolderHierarchyDeleteType& );
    T__SyncFolderHierarchyDeleteType &operator=( const T__SyncFolderHierarchyDeleteType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FolderResponseShapeType
{
public:
    void setBaseShape( const T__DefaultShapeNamesType& baseShape );
    T__DefaultShapeNamesType baseShape() const;
    void setAdditionalProperties( const T__NonEmptyArrayOfPathsToElementType& additionalProperties );
    T__NonEmptyArrayOfPathsToElementType additionalProperties() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FolderResponseShapeType();
    ~T__FolderResponseShapeType();

public:
    T__FolderResponseShapeType( const T__FolderResponseShapeType& );
    T__FolderResponseShapeType &operator=( const T__FolderResponseShapeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfSuggestionDayResult
{
public:
    void setSuggestionDayResult( const QList<T__SuggestionDayResult>& suggestionDayResult );
    QList<T__SuggestionDayResult> suggestionDayResult() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfSuggestionDayResult();
    ~T__ArrayOfSuggestionDayResult();

public:
    T__ArrayOfSuggestionDayResult( const T__ArrayOfSuggestionDayResult& );
    T__ArrayOfSuggestionDayResult &operator=( const T__ArrayOfSuggestionDayResult& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ItemResponseShapeType
{
public:
    void setBaseShape( const T__DefaultShapeNamesType& baseShape );
    T__DefaultShapeNamesType baseShape() const;
    void setIncludeMimeContent( bool includeMimeContent );
    bool includeMimeContent() const;
    void setBodyType( const T__BodyTypeResponseType& bodyType );
    T__BodyTypeResponseType bodyType() const;
    void setAdditionalProperties( const T__NonEmptyArrayOfPathsToElementType& additionalProperties );
    T__NonEmptyArrayOfPathsToElementType additionalProperties() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ItemResponseShapeType();
    ~T__ItemResponseShapeType();

public:
    T__ItemResponseShapeType( const T__ItemResponseShapeType& );
    T__ItemResponseShapeType &operator=( const T__ItemResponseShapeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Represents the field of each item to aggregate on and the qualifier to
    apply to that field in determining which item will represent the group.
 */
class T__AggregateOnType
{
public:
    void setFieldURI( const T__PathToUnindexedFieldType& fieldURI );
    T__PathToUnindexedFieldType fieldURI() const;
    void setIndexedFieldURI( const T__PathToIndexedFieldType& indexedFieldURI );
    T__PathToIndexedFieldType indexedFieldURI() const;
    void setExtendedFieldURI( const T__PathToExtendedFieldType& extendedFieldURI );
    T__PathToExtendedFieldType extendedFieldURI() const;
    void setAggregate( const T__AggregateType& aggregate );
    T__AggregateType aggregate() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AggregateOnType();
    ~T__AggregateOnType();

public:
    T__AggregateOnType( const T__AggregateOnType& );
    T__AggregateOnType &operator=( const T__AggregateOnType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    The set of permissions on a folder
 */
class T__PermissionSetType
{
public:
    void setPermissions( const T__ArrayOfPermissionsType& permissions );
    T__ArrayOfPermissionsType permissions() const;
    void setUnknownEntries( const T__ArrayOfUnknownEntriesType& unknownEntries );
    T__ArrayOfUnknownEntriesType unknownEntries() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PermissionSetType();
    ~T__PermissionSetType();

public:
    T__PermissionSetType( const T__PermissionSetType& );
    T__PermissionSetType &operator=( const T__PermissionSetType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RecurrenceRangeBaseType
{
public:
    void setStartDate( const QDate& startDate );
    QDate startDate() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__RecurrenceRangeBaseType();
    virtual ~T__RecurrenceRangeBaseType();

public:
    T__RecurrenceRangeBaseType( const T__RecurrenceRangeBaseType& );
    T__RecurrenceRangeBaseType &operator=( const T__RecurrenceRangeBaseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PhoneNumberDictionaryEntryType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__PhoneNumberDictionaryEntryType( const QString& value );
    operator QString() const;
    void setKey( const T__PhoneNumberKeyType& key );
    T__PhoneNumberKeyType key() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PhoneNumberDictionaryEntryType();
    ~T__PhoneNumberDictionaryEntryType();

public:
    T__PhoneNumberDictionaryEntryType( const T__PhoneNumberDictionaryEntryType& );
    T__PhoneNumberDictionaryEntryType &operator=( const T__PhoneNumberDictionaryEntryType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__BaseSubscriptionRequestType
{
public:
    void setFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& folderIds );
    T__NonEmptyArrayOfBaseFolderIdsType folderIds() const;
    void setEventTypes( const T__NonEmptyArrayOfNotificationEventTypesType& eventTypes );
    T__NonEmptyArrayOfNotificationEventTypesType eventTypes() const;
    void setWatermark( const T__WatermarkType& watermark );
    T__WatermarkType watermark() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BaseSubscriptionRequestType();
    virtual ~T__BaseSubscriptionRequestType();

public:
    T__BaseSubscriptionRequestType( const T__BaseSubscriptionRequestType& );
    T__BaseSubscriptionRequestType &operator=( const T__BaseSubscriptionRequestType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ExcludesValueType
{
public:
    void setValue( const T__ExcludesAttributeType& value );
    T__ExcludesAttributeType value() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ExcludesValueType();
    ~T__ExcludesValueType();

public:
    T__ExcludesValueType( const T__ExcludesValueType& );
    T__ExcludesValueType &operator=( const T__ExcludesValueType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfItemChangesType
{
public:
    void setItemChange( const QList<T__ItemChangeType>& itemChange );
    QList<T__ItemChangeType> itemChange() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfItemChangesType();
    ~T__NonEmptyArrayOfItemChangesType();

public:
    T__NonEmptyArrayOfItemChangesType( const T__NonEmptyArrayOfItemChangesType& );
    T__NonEmptyArrayOfItemChangesType &operator=( const T__NonEmptyArrayOfItemChangesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__DelegateUserType
{
public:
    void setUserId( const T__UserIdType& userId );
    T__UserIdType userId() const;
    void setDelegatePermissions( const T__DelegatePermissionsType& delegatePermissions );
    T__DelegatePermissionsType delegatePermissions() const;
    void setReceiveCopiesOfMeetingMessages( bool receiveCopiesOfMeetingMessages );
    bool receiveCopiesOfMeetingMessages() const;
    void setViewPrivateItems( bool viewPrivateItems );
    bool viewPrivateItems() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DelegateUserType();
    ~T__DelegateUserType();

public:
    T__DelegateUserType( const T__DelegateUserType& );
    T__DelegateUserType &operator=( const T__DelegateUserType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfFoldersType
{
public:
    void setFolder( const QList<T__FolderType>& folder );
    QList<T__FolderType> folder() const;
    void setCalendarFolder( const QList<T__CalendarFolderType>& calendarFolder );
    QList<T__CalendarFolderType> calendarFolder() const;
    void setContactsFolder( const QList<T__ContactsFolderType>& contactsFolder );
    QList<T__ContactsFolderType> contactsFolder() const;
    void setSearchFolder( const QList<T__SearchFolderType>& searchFolder );
    QList<T__SearchFolderType> searchFolder() const;
    void setTasksFolder( const QList<T__TasksFolderType>& tasksFolder );
    QList<T__TasksFolderType> tasksFolder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfFoldersType();
    ~T__NonEmptyArrayOfFoldersType();

public:
    T__NonEmptyArrayOfFoldersType( const T__NonEmptyArrayOfFoldersType& );
    T__NonEmptyArrayOfFoldersType &operator=( const T__NonEmptyArrayOfFoldersType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SyncFolderItemsChangesType
{
public:
    void setCreate( const QList<T__SyncFolderItemsCreateOrUpdateType>& create );
    QList<T__SyncFolderItemsCreateOrUpdateType> create() const;
    void setUpdate( const QList<T__SyncFolderItemsCreateOrUpdateType>& update );
    QList<T__SyncFolderItemsCreateOrUpdateType> update() const;
    void setDelete( const QList<T__SyncFolderItemsDeleteType>& delete_ );
    QList<T__SyncFolderItemsDeleteType> delete_() const;
    void setReadFlagChange( const QList<T__SyncFolderItemsReadFlagType>& readFlagChange );
    QList<T__SyncFolderItemsReadFlagType> readFlagChange() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SyncFolderItemsChangesType();
    ~T__SyncFolderItemsChangesType();

public:
    T__SyncFolderItemsChangesType( const T__SyncFolderItemsChangesType& );
    T__SyncFolderItemsChangesType &operator=( const T__SyncFolderItemsChangesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfRecipientsType
{
public:
    void setMailbox( const QList<T__EmailAddressType>& mailbox );
    QList<T__EmailAddressType> mailbox() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfRecipientsType();
    ~T__ArrayOfRecipientsType();

public:
    T__ArrayOfRecipientsType( const T__ArrayOfRecipientsType& );
    T__ArrayOfRecipientsType &operator=( const T__ArrayOfRecipientsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__UserOofSettings
{
public:
    void setOofState( const T__OofState& oofState );
    T__OofState oofState() const;
    void setExternalAudience( const T__ExternalAudience& externalAudience );
    T__ExternalAudience externalAudience() const;
    void setDuration( const T__Duration& duration );
    T__Duration duration() const;
    void setInternalReply( const T__ReplyBody& internalReply );
    T__ReplyBody internalReply() const;
    void setExternalReply( const T__ReplyBody& externalReply );
    T__ReplyBody externalReply() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__UserOofSettings();
    ~T__UserOofSettings();

public:
    T__UserOofSettings( const T__UserOofSettings& );
    T__UserOofSettings &operator=( const T__UserOofSettings& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__DeletedOccurrenceInfoType
{
public:
    void setStart( const KDDateTime& start );
    KDDateTime start() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DeletedOccurrenceInfoType();
    ~T__DeletedOccurrenceInfoType();

public:
    T__DeletedOccurrenceInfoType( const T__DeletedOccurrenceInfoType& );
    T__DeletedOccurrenceInfoType &operator=( const T__DeletedOccurrenceInfoType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Abstract base type for item identifiers. Should never be used in web
    service calls
 */
class T__BaseItemIdType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BaseItemIdType();
    virtual ~T__BaseItemIdType();

};

class T__InternetHeaderType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__InternetHeaderType( const QString& value );
    operator QString() const;
    void setHeaderName( const QString& headerName );
    QString headerName() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__InternetHeaderType();
    ~T__InternetHeaderType();

public:
    T__InternetHeaderType( const T__InternetHeaderType& );
    T__InternetHeaderType &operator=( const T__InternetHeaderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__MailboxData
{
public:
    void setEmail( const T__EmailAddress& email );
    T__EmailAddress email() const;
    void setAttendeeType( const T__MeetingAttendeeType& attendeeType );
    T__MeetingAttendeeType attendeeType() const;
    void setExcludeConflicts( bool excludeConflicts );
    bool excludeConflicts() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__MailboxData();
    ~T__MailboxData();

public:
    T__MailboxData( const T__MailboxData& );
    T__MailboxData &operator=( const T__MailboxData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RequestServerVersion
{
public:
    void setVersion( const T__ExchangeVersionType& version );
    T__ExchangeVersionType version() const;
    void setAnyAttribute( const KDSoapValue& anyAttribute );
    KDSoapValue anyAttribute() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__RequestServerVersion();
    ~T__RequestServerVersion();

public:
    T__RequestServerVersion( const T__RequestServerVersion& );
    T__RequestServerVersion &operator=( const T__RequestServerVersion& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SetUserOofSettingsResponse
{
public:
    void setResponseMessage( const TNS__ResponseMessageType& responseMessage );
    TNS__ResponseMessageType responseMessage() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SetUserOofSettingsResponse();
    ~TNS__SetUserOofSettingsResponse();

public:
    TNS__SetUserOofSettingsResponse( const TNS__SetUserOofSettingsResponse& );
    TNS__SetUserOofSettingsResponse &operator=( const TNS__SetUserOofSettingsResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PhoneNumberDictionaryType
{
public:
    void setEntry( const QList<T__PhoneNumberDictionaryEntryType>& entry );
    QList<T__PhoneNumberDictionaryEntryType> entry() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PhoneNumberDictionaryType();
    ~T__PhoneNumberDictionaryType();

public:
    T__PhoneNumberDictionaryType( const T__PhoneNumberDictionaryType& );
    T__PhoneNumberDictionaryType &operator=( const T__PhoneNumberDictionaryType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfCalendarEvent
{
public:
    void setCalendarEvent( const QList<T__CalendarEvent>& calendarEvent );
    QList<T__CalendarEvent> calendarEvent() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfCalendarEvent();
    ~T__ArrayOfCalendarEvent();

public:
    T__ArrayOfCalendarEvent( const T__ArrayOfCalendarEvent& );
    T__ArrayOfCalendarEvent &operator=( const T__ArrayOfCalendarEvent& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfBaseItemIdsType
{
public:
    void setItemId( const QList<T__ItemIdType>& itemId );
    QList<T__ItemIdType> itemId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfBaseItemIdsType();
    ~T__ArrayOfBaseItemIdsType();

public:
    T__ArrayOfBaseItemIdsType( const T__ArrayOfBaseItemIdsType& );
    T__ArrayOfBaseItemIdsType &operator=( const T__ArrayOfBaseItemIdsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__CompleteNameType
{
public:
    void setTitle( const QString& title );
    QString title() const;
    void setFirstName( const QString& firstName );
    QString firstName() const;
    void setMiddleName( const QString& middleName );
    QString middleName() const;
    void setLastName( const QString& lastName );
    QString lastName() const;
    void setSuffix( const QString& suffix );
    QString suffix() const;
    void setInitials( const QString& initials );
    QString initials() const;
    void setFullName( const QString& fullName );
    QString fullName() const;
    void setNickname( const QString& nickname );
    QString nickname() const;
    void setYomiFirstName( const QString& yomiFirstName );
    QString yomiFirstName() const;
    void setYomiLastName( const QString& yomiLastName );
    QString yomiLastName() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CompleteNameType();
    ~T__CompleteNameType();

public:
    T__CompleteNameType( const T__CompleteNameType& );
    T__CompleteNameType &operator=( const T__CompleteNameType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TimeZoneDefinitionType
{
public:
    void setId( const QString& id );
    QString id() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TimeZoneDefinitionType();
    ~T__TimeZoneDefinitionType();

public:
    T__TimeZoneDefinitionType( const T__TimeZoneDefinitionType& );
    T__TimeZoneDefinitionType &operator=( const T__TimeZoneDefinitionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SearchExpressionType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__SearchExpressionType();
    virtual ~T__SearchExpressionType();

};

class T__NonEmptyArrayOfFolderChangeDescriptionsType
{
public:
    void setAppendToFolderField( const QList<T__AppendToFolderFieldType>& appendToFolderField );
    QList<T__AppendToFolderFieldType> appendToFolderField() const;
    void setSetFolderField( const QList<T__SetFolderFieldType>& setFolderField );
    QList<T__SetFolderFieldType> setFolderField() const;
    void setDeleteFolderField( const QList<T__DeleteFolderFieldType>& deleteFolderField );
    QList<T__DeleteFolderFieldType> deleteFolderField() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfFolderChangeDescriptionsType();
    ~T__NonEmptyArrayOfFolderChangeDescriptionsType();

public:
    T__NonEmptyArrayOfFolderChangeDescriptionsType( const T__NonEmptyArrayOfFolderChangeDescriptionsType& );
    T__NonEmptyArrayOfFolderChangeDescriptionsType &operator=( const T__NonEmptyArrayOfFolderChangeDescriptionsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ImAddressDictionaryEntryType
{
public:
    void setValue( const QString& value );
    QString value() const;
    T__ImAddressDictionaryEntryType( const QString& value );
    operator QString() const;
    void setKey( const T__ImAddressKeyType& key );
    T__ImAddressKeyType key() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ImAddressDictionaryEntryType();
    ~T__ImAddressDictionaryEntryType();

public:
    T__ImAddressDictionaryEntryType( const T__ImAddressDictionaryEntryType& );
    T__ImAddressDictionaryEntryType &operator=( const T__ImAddressDictionaryEntryType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfUnknownEntriesType
{
public:
    void setUnknownEntry( const QStringList& unknownEntry );
    QStringList unknownEntry() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfUnknownEntriesType();
    ~T__ArrayOfUnknownEntriesType();

public:
    T__ArrayOfUnknownEntriesType( const T__ArrayOfUnknownEntriesType& );
    T__ArrayOfUnknownEntriesType &operator=( const T__ArrayOfUnknownEntriesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FindFolderParentType
{
public:
    void setFolders( const T__ArrayOfFoldersType& folders );
    T__ArrayOfFoldersType folders() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FindFolderParentType();
    ~T__FindFolderParentType();

public:
    T__FindFolderParentType( const T__FindFolderParentType& );
    T__FindFolderParentType &operator=( const T__FindFolderParentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ItemType
{
public:
    void setMimeContent( const T__MimeContentType& mimeContent );
    T__MimeContentType mimeContent() const;
    void setItemId( const T__ItemIdType& itemId );
    T__ItemIdType itemId() const;
    void setParentFolderId( const T__FolderIdType& parentFolderId );
    T__FolderIdType parentFolderId() const;
    void setItemClass( const T__ItemClassType& itemClass );
    T__ItemClassType itemClass() const;
    void setSubject( const QString& subject );
    QString subject() const;
    void setSensitivity( const T__SensitivityChoicesType& sensitivity );
    T__SensitivityChoicesType sensitivity() const;
    void setBody( const T__BodyType& body );
    T__BodyType body() const;
    void setAttachments( const T__NonEmptyArrayOfAttachmentsType& attachments );
    T__NonEmptyArrayOfAttachmentsType attachments() const;
    void setDateTimeReceived( const KDDateTime& dateTimeReceived );
    KDDateTime dateTimeReceived() const;
    void setSize( int size );
    int size() const;
    void setCategories( const T__ArrayOfStringsType& categories );
    T__ArrayOfStringsType categories() const;
    void setImportance( const T__ImportanceChoicesType& importance );
    T__ImportanceChoicesType importance() const;
    void setInReplyTo( const QString& inReplyTo );
    QString inReplyTo() const;
    void setIsSubmitted( bool isSubmitted );
    bool isSubmitted() const;
    void setIsDraft( bool isDraft );
    bool isDraft() const;
    void setIsFromMe( bool isFromMe );
    bool isFromMe() const;
    void setIsResend( bool isResend );
    bool isResend() const;
    void setIsUnmodified( bool isUnmodified );
    bool isUnmodified() const;
    void setInternetMessageHeaders( const T__NonEmptyArrayOfInternetHeadersType& internetMessageHeaders );
    T__NonEmptyArrayOfInternetHeadersType internetMessageHeaders() const;
    void setDateTimeSent( const KDDateTime& dateTimeSent );
    KDDateTime dateTimeSent() const;
    void setDateTimeCreated( const KDDateTime& dateTimeCreated );
    KDDateTime dateTimeCreated() const;
    void setResponseObjects( const T__NonEmptyArrayOfResponseObjectsType& responseObjects );
    T__NonEmptyArrayOfResponseObjectsType responseObjects() const;
    void setReminderDueBy( const KDDateTime& reminderDueBy );
    KDDateTime reminderDueBy() const;
    void setReminderIsSet( bool reminderIsSet );
    bool reminderIsSet() const;
    void setReminderMinutesBeforeStart( const T__ReminderMinutesBeforeStartType& reminderMinutesBeforeStart );
    T__ReminderMinutesBeforeStartType reminderMinutesBeforeStart() const;
    void setDisplayCc( const QString& displayCc );
    QString displayCc() const;
    void setDisplayTo( const QString& displayTo );
    QString displayTo() const;
    void setHasAttachments( bool hasAttachments );
    bool hasAttachments() const;
    void setExtendedProperty( const QList<T__ExtendedPropertyType>& extendedProperty );
    QList<T__ExtendedPropertyType> extendedProperty() const;
    void setCulture( const QString& culture );
    QString culture() const;
    void setEffectiveRights( const T__EffectiveRightsType& effectiveRights );
    T__EffectiveRightsType effectiveRights() const;
    void setLastModifiedName( const QString& lastModifiedName );
    QString lastModifiedName() const;
    void setLastModifiedTime( const KDDateTime& lastModifiedTime );
    KDDateTime lastModifiedTime() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__ItemType();
    virtual ~T__ItemType();

public:
    T__ItemType( const T__ItemType& );
    T__ItemType &operator=( const T__ItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    The set of permissions on a folder
 */
class T__CalendarPermissionSetType
{
public:
    void setCalendarPermissions( const T__ArrayOfCalendarPermissionsType& calendarPermissions );
    T__ArrayOfCalendarPermissionsType calendarPermissions() const;
    void setUnknownEntries( const T__ArrayOfUnknownEntriesType& unknownEntries );
    T__ArrayOfUnknownEntriesType unknownEntries() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CalendarPermissionSetType();
    ~T__CalendarPermissionSetType();

public:
    T__CalendarPermissionSetType( const T__CalendarPermissionSetType& );
    T__CalendarPermissionSetType &operator=( const T__CalendarPermissionSetType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RecurrenceType
{
public:
    void setRelativeYearlyRecurrence( const T__RelativeYearlyRecurrencePatternType& relativeYearlyRecurrence );
    T__RelativeYearlyRecurrencePatternType relativeYearlyRecurrence() const;
    void setAbsoluteYearlyRecurrence( const T__AbsoluteYearlyRecurrencePatternType& absoluteYearlyRecurrence );
    T__AbsoluteYearlyRecurrencePatternType absoluteYearlyRecurrence() const;
    void setRelativeMonthlyRecurrence( const T__RelativeMonthlyRecurrencePatternType& relativeMonthlyRecurrence );
    T__RelativeMonthlyRecurrencePatternType relativeMonthlyRecurrence() const;
    void setAbsoluteMonthlyRecurrence( const T__AbsoluteMonthlyRecurrencePatternType& absoluteMonthlyRecurrence );
    T__AbsoluteMonthlyRecurrencePatternType absoluteMonthlyRecurrence() const;
    void setWeeklyRecurrence( const T__WeeklyRecurrencePatternType& weeklyRecurrence );
    T__WeeklyRecurrencePatternType weeklyRecurrence() const;
    void setDailyRecurrence( const T__DailyRecurrencePatternType& dailyRecurrence );
    T__DailyRecurrencePatternType dailyRecurrence() const;
    void setNoEndRecurrence( const T__NoEndRecurrenceRangeType& noEndRecurrence );
    T__NoEndRecurrenceRangeType noEndRecurrence() const;
    void setEndDateRecurrence( const T__EndDateRecurrenceRangeType& endDateRecurrence );
    T__EndDateRecurrenceRangeType endDateRecurrence() const;
    void setNumberedRecurrence( const T__NumberedRecurrenceRangeType& numberedRecurrence );
    T__NumberedRecurrenceRangeType numberedRecurrence() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__RecurrenceType();
    ~T__RecurrenceType();

public:
    T__RecurrenceType( const T__RecurrenceType& );
    T__RecurrenceType &operator=( const T__RecurrenceType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__EmailAddress
{
public:
    void setName( const QString& name );
    QString name() const;
    void setAddress( const QString& address );
    QString address() const;
    void setRoutingType( const QString& routingType );
    QString routingType() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__EmailAddress();
    ~T__EmailAddress();

public:
    T__EmailAddress( const T__EmailAddress& );
    T__EmailAddress &operator=( const T__EmailAddress& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SidAndAttributesType
{
public:
    void setSecurityIdentifier( const QString& securityIdentifier );
    QString securityIdentifier() const;
    void setAttributes( unsigned int attributes );
    unsigned int attributes() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SidAndAttributesType();
    ~T__SidAndAttributesType();

public:
    T__SidAndAttributesType( const T__SidAndAttributesType& );
    T__SidAndAttributesType &operator=( const T__SidAndAttributesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfDelegateUserType
{
public:
    void setDelegateUser( const QList<T__DelegateUserType>& delegateUser );
    QList<T__DelegateUserType> delegateUser() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfDelegateUserType();
    ~T__ArrayOfDelegateUserType();

public:
    T__ArrayOfDelegateUserType( const T__ArrayOfDelegateUserType& );
    T__ArrayOfDelegateUserType &operator=( const T__ArrayOfDelegateUserType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__BasePagingType
{
public:
    void setMaxEntriesReturned( int maxEntriesReturned );
    int maxEntriesReturned() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BasePagingType();
    virtual ~T__BasePagingType();

public:
    T__BasePagingType( const T__BasePagingType& );
    T__BasePagingType &operator=( const T__BasePagingType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__GetUserAvailabilityResponseType
{
public:
    void setFreeBusyResponseArray( const TNS__ArrayOfFreeBusyResponse& freeBusyResponseArray );
    TNS__ArrayOfFreeBusyResponse freeBusyResponseArray() const;
    void setSuggestionsResponse( const TNS__SuggestionsResponseType& suggestionsResponse );
    TNS__SuggestionsResponseType suggestionsResponse() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetUserAvailabilityResponseType();
    ~TNS__GetUserAvailabilityResponseType();

public:
    TNS__GetUserAvailabilityResponseType( const TNS__GetUserAvailabilityResponseType& );
    TNS__GetUserAvailabilityResponseType &operator=( const TNS__GetUserAvailabilityResponseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__DelegatePermissionsType
{
public:
    void setCalendarFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& calendarFolderPermissionLevel );
    T__DelegateFolderPermissionLevelType calendarFolderPermissionLevel() const;
    void setTasksFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& tasksFolderPermissionLevel );
    T__DelegateFolderPermissionLevelType tasksFolderPermissionLevel() const;
    void setInboxFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& inboxFolderPermissionLevel );
    T__DelegateFolderPermissionLevelType inboxFolderPermissionLevel() const;
    void setContactsFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& contactsFolderPermissionLevel );
    T__DelegateFolderPermissionLevelType contactsFolderPermissionLevel() const;
    void setNotesFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& notesFolderPermissionLevel );
    T__DelegateFolderPermissionLevelType notesFolderPermissionLevel() const;
    void setJournalFolderPermissionLevel( const T__DelegateFolderPermissionLevelType& journalFolderPermissionLevel );
    T__DelegateFolderPermissionLevelType journalFolderPermissionLevel() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DelegatePermissionsType();
    ~T__DelegatePermissionsType();

public:
    T__DelegatePermissionsType( const T__DelegatePermissionsType& );
    T__DelegatePermissionsType &operator=( const T__DelegatePermissionsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfRealItemsType
{
public:
    void setItem( const QList<T__ItemType>& item );
    QList<T__ItemType> item() const;
    void setMessage( const QList<T__MessageType>& message );
    QList<T__MessageType> message() const;
    void setCalendarItem( const QList<T__CalendarItemType>& calendarItem );
    QList<T__CalendarItemType> calendarItem() const;
    void setContact( const QList<T__ContactItemType>& contact );
    QList<T__ContactItemType> contact() const;
    void setDistributionList( const QList<T__DistributionListType>& distributionList );
    QList<T__DistributionListType> distributionList() const;
    void setMeetingMessage( const QList<T__MeetingMessageType>& meetingMessage );
    QList<T__MeetingMessageType> meetingMessage() const;
    void setMeetingRequest( const QList<T__MeetingRequestMessageType>& meetingRequest );
    QList<T__MeetingRequestMessageType> meetingRequest() const;
    void setMeetingResponse( const QList<T__MeetingResponseMessageType>& meetingResponse );
    QList<T__MeetingResponseMessageType> meetingResponse() const;
    void setMeetingCancellation( const QList<T__MeetingCancellationMessageType>& meetingCancellation );
    QList<T__MeetingCancellationMessageType> meetingCancellation() const;
    void setTask( const QList<T__TaskType>& task );
    QList<T__TaskType> task() const;
    void setPostItem( const QList<T__PostItemType>& postItem );
    QList<T__PostItemType> postItem() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfRealItemsType();
    ~T__ArrayOfRealItemsType();

public:
    T__ArrayOfRealItemsType( const T__ArrayOfRealItemsType& );
    T__ArrayOfRealItemsType &operator=( const T__ArrayOfRealItemsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__UserIdType
{
public:
    void setSID( const QString& sID );
    QString sID() const;
    void setPrimarySmtpAddress( const QString& primarySmtpAddress );
    QString primarySmtpAddress() const;
    void setDisplayName( const QString& displayName );
    QString displayName() const;
    void setDistinguishedUser( const T__DistinguishedUserType& distinguishedUser );
    T__DistinguishedUserType distinguishedUser() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__UserIdType();
    ~T__UserIdType();

public:
    T__UserIdType( const T__UserIdType& );
    T__UserIdType &operator=( const T__UserIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfOccurrenceInfoType
{
public:
    void setOccurrence( const QList<T__OccurrenceInfoType>& occurrence );
    QList<T__OccurrenceInfoType> occurrence() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfOccurrenceInfoType();
    ~T__NonEmptyArrayOfOccurrenceInfoType();

public:
    T__NonEmptyArrayOfOccurrenceInfoType( const T__NonEmptyArrayOfOccurrenceInfoType& );
    T__NonEmptyArrayOfOccurrenceInfoType &operator=( const T__NonEmptyArrayOfOccurrenceInfoType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SyncFolderHierarchyChangesType
{
public:
    void setCreate( const QList<T__SyncFolderHierarchyCreateOrUpdateType>& create );
    QList<T__SyncFolderHierarchyCreateOrUpdateType> create() const;
    void setUpdate( const QList<T__SyncFolderHierarchyCreateOrUpdateType>& update );
    QList<T__SyncFolderHierarchyCreateOrUpdateType> update() const;
    void setDelete( const QList<T__SyncFolderHierarchyDeleteType>& delete_ );
    QList<T__SyncFolderHierarchyDeleteType> delete_() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SyncFolderHierarchyChangesType();
    ~T__SyncFolderHierarchyChangesType();

public:
    T__SyncFolderHierarchyChangesType( const T__SyncFolderHierarchyChangesType& );
    T__SyncFolderHierarchyChangesType &operator=( const T__SyncFolderHierarchyChangesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__GetUserOofSettingsResponse
{
public:
    void setResponseMessage( const TNS__ResponseMessageType& responseMessage );
    TNS__ResponseMessageType responseMessage() const;
    void setOofSettings( const T__UserOofSettings& oofSettings );
    T__UserOofSettings oofSettings() const;
    void setAllowExternalOof( const T__ExternalAudience& allowExternalOof );
    T__ExternalAudience allowExternalOof() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetUserOofSettingsResponse();
    ~TNS__GetUserOofSettingsResponse();

public:
    TNS__GetUserOofSettingsResponse( const TNS__GetUserOofSettingsResponse& );
    TNS__GetUserOofSettingsResponse &operator=( const TNS__GetUserOofSettingsResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfFolderChangesType
{
public:
    void setFolderChange( const QList<T__FolderChangeType>& folderChange );
    QList<T__FolderChangeType> folderChange() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfFolderChangesType();
    ~T__NonEmptyArrayOfFolderChangesType();

public:
    T__NonEmptyArrayOfFolderChangesType( const T__NonEmptyArrayOfFolderChangesType& );
    T__NonEmptyArrayOfFolderChangesType &operator=( const T__NonEmptyArrayOfFolderChangesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ResolutionType
{
public:
    void setMailbox( const T__EmailAddressType& mailbox );
    T__EmailAddressType mailbox() const;
    void setContact( const T__ContactItemType& contact );
    T__ContactItemType contact() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ResolutionType();
    ~T__ResolutionType();

public:
    T__ResolutionType( const T__ResolutionType& );
    T__ResolutionType &operator=( const T__ResolutionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfPathsToElementType
{
public:
    void setPath( const QList<T__BasePathToElementType>& path );
    QList<T__BasePathToElementType> path() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfPathsToElementType();
    ~T__NonEmptyArrayOfPathsToElementType();

public:
    T__NonEmptyArrayOfPathsToElementType( const T__NonEmptyArrayOfPathsToElementType& );
    T__NonEmptyArrayOfPathsToElementType &operator=( const T__NonEmptyArrayOfPathsToElementType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ExchangeImpersonationType
{
public:
    void setConnectingSID( const T__ConnectingSIDType& connectingSID );
    T__ConnectingSIDType connectingSID() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ExchangeImpersonationType();
    ~T__ExchangeImpersonationType();

public:
    T__ExchangeImpersonationType( const T__ExchangeImpersonationType& );
    T__ExchangeImpersonationType &operator=( const T__ExchangeImpersonationType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ArrayOfFreeBusyResponse
{
public:
    void setFreeBusyResponse( const QList<TNS__FreeBusyResponseType>& freeBusyResponse );
    QList<TNS__FreeBusyResponseType> freeBusyResponse() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ArrayOfFreeBusyResponse();
    ~TNS__ArrayOfFreeBusyResponse();

public:
    TNS__ArrayOfFreeBusyResponse( const TNS__ArrayOfFreeBusyResponse& );
    TNS__ArrayOfFreeBusyResponse &operator=( const TNS__ArrayOfFreeBusyResponse& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfAttendeeConflictData
{
public:
    void setUnknownAttendeeConflictData( const QList<T__UnknownAttendeeConflictData>& unknownAttendeeConflictData );
    QList<T__UnknownAttendeeConflictData> unknownAttendeeConflictData() const;
    void setIndividualAttendeeConflictData( const QList<T__IndividualAttendeeConflictData>& individualAttendeeConflictData );
    QList<T__IndividualAttendeeConflictData> individualAttendeeConflictData() const;
    void setTooBigGroupAttendeeConflictData( const QList<T__TooBigGroupAttendeeConflictData>& tooBigGroupAttendeeConflictData );
    QList<T__TooBigGroupAttendeeConflictData> tooBigGroupAttendeeConflictData() const;
    void setGroupAttendeeConflictData( const QList<T__GroupAttendeeConflictData>& groupAttendeeConflictData );
    QList<T__GroupAttendeeConflictData> groupAttendeeConflictData() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfAttendeeConflictData();
    ~T__ArrayOfAttendeeConflictData();

public:
    T__ArrayOfAttendeeConflictData( const T__ArrayOfAttendeeConflictData& );
    T__ArrayOfAttendeeConflictData &operator=( const T__ArrayOfAttendeeConflictData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfUserIdType
{
public:
    void setUserId( const QList<T__UserIdType>& userId );
    QList<T__UserIdType> userId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfUserIdType();
    ~T__ArrayOfUserIdType();

public:
    T__ArrayOfUserIdType( const T__ArrayOfUserIdType& );
    T__ArrayOfUserIdType &operator=( const T__ArrayOfUserIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfRequestAttachmentIdsType
{
public:
    void setAttachmentId( const QList<T__RequestAttachmentIdType>& attachmentId );
    QList<T__RequestAttachmentIdType> attachmentId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfRequestAttachmentIdsType();
    ~T__NonEmptyArrayOfRequestAttachmentIdsType();

public:
    T__NonEmptyArrayOfRequestAttachmentIdsType( const T__NonEmptyArrayOfRequestAttachmentIdsType& );
    T__NonEmptyArrayOfRequestAttachmentIdsType &operator=( const T__NonEmptyArrayOfRequestAttachmentIdsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__AttachmentResponseShapeType
{
public:
    void setIncludeMimeContent( bool includeMimeContent );
    bool includeMimeContent() const;
    void setBodyType( const T__BodyTypeResponseType& bodyType );
    T__BodyTypeResponseType bodyType() const;
    void setAdditionalProperties( const T__NonEmptyArrayOfPathsToElementType& additionalProperties );
    T__NonEmptyArrayOfPathsToElementType additionalProperties() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AttachmentResponseShapeType();
    ~T__AttachmentResponseShapeType();

public:
    T__AttachmentResponseShapeType( const T__AttachmentResponseShapeType& );
    T__AttachmentResponseShapeType &operator=( const T__AttachmentResponseShapeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SyncFolderItemsReadFlagType
{
public:
    void setItemId( const T__ItemIdType& itemId );
    T__ItemIdType itemId() const;
    void setIsRead( bool isRead );
    bool isRead() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SyncFolderItemsReadFlagType();
    ~T__SyncFolderItemsReadFlagType();

public:
    T__SyncFolderItemsReadFlagType( const T__SyncFolderItemsReadFlagType& );
    T__SyncFolderItemsReadFlagType &operator=( const T__SyncFolderItemsReadFlagType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ImAddressDictionaryType
{
public:
    void setEntry( const QList<T__ImAddressDictionaryEntryType>& entry );
    QList<T__ImAddressDictionaryEntryType> entry() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ImAddressDictionaryType();
    ~T__ImAddressDictionaryType();

public:
    T__ImAddressDictionaryType( const T__ImAddressDictionaryType& );
    T__ImAddressDictionaryType &operator=( const T__ImAddressDictionaryType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FindItemParentType
{
public:
    void setItems( const T__ArrayOfRealItemsType& items );
    T__ArrayOfRealItemsType items() const;
    void setGroups( const T__ArrayOfGroupedItemsType& groups );
    T__ArrayOfGroupedItemsType groups() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FindItemParentType();
    ~T__FindItemParentType();

public:
    T__FindItemParentType( const T__FindItemParentType& );
    T__FindItemParentType &operator=( const T__FindItemParentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfAttachmentsType
{
public:
    void setItemAttachment( const QList<T__ItemAttachmentType>& itemAttachment );
    QList<T__ItemAttachmentType> itemAttachment() const;
    void setFileAttachment( const QList<T__FileAttachmentType>& fileAttachment );
    QList<T__FileAttachmentType> fileAttachment() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfAttachmentsType();
    ~T__ArrayOfAttachmentsType();

public:
    T__ArrayOfAttachmentsType( const T__ArrayOfAttachmentsType& );
    T__ArrayOfAttachmentsType &operator=( const T__ArrayOfAttachmentsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FieldOrderType
{
public:
    void setPath( const T__BasePathToElementType& path );
    T__BasePathToElementType path() const;
    void setOrder( const T__SortDirectionType& order );
    T__SortDirectionType order() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FieldOrderType();
    ~T__FieldOrderType();

public:
    T__FieldOrderType( const T__FieldOrderType& );
    T__FieldOrderType &operator=( const T__FieldOrderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FreeBusyViewOptionsType
{
public:
    void setTimeWindow( const T__Duration& timeWindow );
    T__Duration timeWindow() const;
    void setMergedFreeBusyIntervalInMinutes( int mergedFreeBusyIntervalInMinutes );
    int mergedFreeBusyIntervalInMinutes() const;
    void setRequestedView( const T__FreeBusyViewType& requestedView );
    T__FreeBusyViewType requestedView() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FreeBusyViewOptionsType();
    ~T__FreeBusyViewOptionsType();

public:
    T__FreeBusyViewOptionsType( const T__FreeBusyViewOptionsType& );
    T__FreeBusyViewOptionsType &operator=( const T__FreeBusyViewOptionsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__BasePathToElementType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BasePathToElementType();
    virtual ~T__BasePathToElementType();

};

class T__ReplyBody
{
public:
    void setMessage( const QString& message );
    QString message() const;
    void setLang( const QString& lang );
    QString lang() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ReplyBody();
    ~T__ReplyBody();

public:
    T__ReplyBody( const T__ReplyBody& );
    T__ReplyBody &operator=( const T__ReplyBody& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfBaseItemIdsType
{
public:
    void setItemId( const QList<T__ItemIdType>& itemId );
    QList<T__ItemIdType> itemId() const;
    void setOccurrenceItemId( const QList<T__OccurrenceItemIdType>& occurrenceItemId );
    QList<T__OccurrenceItemIdType> occurrenceItemId() const;
    void setRecurringMasterItemId( const QList<T__RecurringMasterItemIdType>& recurringMasterItemId );
    QList<T__RecurringMasterItemIdType> recurringMasterItemId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfBaseItemIdsType();
    ~T__NonEmptyArrayOfBaseItemIdsType();

public:
    T__NonEmptyArrayOfBaseItemIdsType( const T__NonEmptyArrayOfBaseItemIdsType& );
    T__NonEmptyArrayOfBaseItemIdsType &operator=( const T__NonEmptyArrayOfBaseItemIdsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TargetFolderIdType
{
public:
    void setFolderId( const T__FolderIdType& folderId );
    T__FolderIdType folderId() const;
    void setDistinguishedFolderId( const T__DistinguishedFolderIdType& distinguishedFolderId );
    T__DistinguishedFolderIdType distinguishedFolderId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TargetFolderIdType();
    ~T__TargetFolderIdType();

public:
    T__TargetFolderIdType( const T__TargetFolderIdType& );
    T__TargetFolderIdType &operator=( const T__TargetFolderIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfNotificationEventTypesType
{
public:
    void setEventType( const QList<T__NotificationEventTypeType>& eventType );
    QList<T__NotificationEventTypeType> eventType() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfNotificationEventTypesType();
    ~T__NonEmptyArrayOfNotificationEventTypesType();

public:
    T__NonEmptyArrayOfNotificationEventTypesType( const T__NonEmptyArrayOfNotificationEventTypesType& );
    T__NonEmptyArrayOfNotificationEventTypesType &operator=( const T__NonEmptyArrayOfNotificationEventTypesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RestrictionType
{
public:
    void setSearchExpression( const T__SearchExpressionType& searchExpression );
    T__SearchExpressionType searchExpression() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__RestrictionType();
    ~T__RestrictionType();

public:
    T__RestrictionType( const T__RestrictionType& );
    T__RestrictionType &operator=( const T__RestrictionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SingleRecipientType
{
public:
    void setMailbox( const T__EmailAddressType& mailbox );
    T__EmailAddressType mailbox() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SingleRecipientType();
    ~T__SingleRecipientType();

public:
    T__SingleRecipientType( const T__SingleRecipientType& );
    T__SingleRecipientType &operator=( const T__SingleRecipientType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfBaseFolderIdsType
{
public:
    void setFolderId( const QList<T__FolderIdType>& folderId );
    QList<T__FolderIdType> folderId() const;
    void setDistinguishedFolderId( const QList<T__DistinguishedFolderIdType>& distinguishedFolderId );
    QList<T__DistinguishedFolderIdType> distinguishedFolderId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfBaseFolderIdsType();
    ~T__NonEmptyArrayOfBaseFolderIdsType();

public:
    T__NonEmptyArrayOfBaseFolderIdsType( const T__NonEmptyArrayOfBaseFolderIdsType& );
    T__NonEmptyArrayOfBaseFolderIdsType &operator=( const T__NonEmptyArrayOfBaseFolderIdsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__FreeBusyResponseType
{
public:
    void setResponseMessage( const TNS__ResponseMessageType& responseMessage );
    TNS__ResponseMessageType responseMessage() const;
    void setFreeBusyView( const T__FreeBusyView& freeBusyView );
    T__FreeBusyView freeBusyView() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FreeBusyResponseType();
    ~TNS__FreeBusyResponseType();

public:
    TNS__FreeBusyResponseType( const TNS__FreeBusyResponseType& );
    TNS__FreeBusyResponseType &operator=( const TNS__FreeBusyResponseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfDLExpansionType
{
public:
    void setMailbox( const QList<T__EmailAddressType>& mailbox );
    QList<T__EmailAddressType> mailbox() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfDLExpansionType();
    ~T__ArrayOfDLExpansionType();

public:
    T__ArrayOfDLExpansionType( const T__ArrayOfDLExpansionType& );
    T__ArrayOfDLExpansionType &operator=( const T__ArrayOfDLExpansionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__CalendarEvent
{
public:
    void setStartTime( const KDDateTime& startTime );
    KDDateTime startTime() const;
    void setEndTime( const KDDateTime& endTime );
    KDDateTime endTime() const;
    void setBusyType( const T__LegacyFreeBusyType& busyType );
    T__LegacyFreeBusyType busyType() const;
    void setCalendarEventDetails( const T__CalendarEventDetails& calendarEventDetails );
    T__CalendarEventDetails calendarEventDetails() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CalendarEvent();
    ~T__CalendarEvent();

public:
    T__CalendarEvent( const T__CalendarEvent& );
    T__CalendarEvent &operator=( const T__CalendarEvent& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SearchParametersType
{
public:
    void setRestriction( const T__RestrictionType& restriction );
    T__RestrictionType restriction() const;
    void setBaseFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& baseFolderIds );
    T__NonEmptyArrayOfBaseFolderIdsType baseFolderIds() const;
    void setTraversal( const T__SearchFolderTraversalType& traversal );
    T__SearchFolderTraversalType traversal() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SearchParametersType();
    ~T__SearchParametersType();

public:
    T__SearchParametersType( const T__SearchParametersType& );
    T__SearchParametersType &operator=( const T__SearchParametersType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfDeletedOccurrencesType
{
public:
    void setDeletedOccurrence( const QList<T__DeletedOccurrenceInfoType>& deletedOccurrence );
    QList<T__DeletedOccurrenceInfoType> deletedOccurrence() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfDeletedOccurrencesType();
    ~T__NonEmptyArrayOfDeletedOccurrencesType();

public:
    T__NonEmptyArrayOfDeletedOccurrencesType( const T__NonEmptyArrayOfDeletedOccurrencesType& );
    T__NonEmptyArrayOfDeletedOccurrencesType &operator=( const T__NonEmptyArrayOfDeletedOccurrencesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__Suggestion
{
public:
    void setMeetingTime( const KDDateTime& meetingTime );
    KDDateTime meetingTime() const;
    void setIsWorkTime( bool isWorkTime );
    bool isWorkTime() const;
    void setSuggestionQuality( const T__SuggestionQuality& suggestionQuality );
    T__SuggestionQuality suggestionQuality() const;
    void setAttendeeConflictDataArray( const T__ArrayOfAttendeeConflictData& attendeeConflictDataArray );
    T__ArrayOfAttendeeConflictData attendeeConflictDataArray() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__Suggestion();
    ~T__Suggestion();

public:
    T__Suggestion( const T__Suggestion& );
    T__Suggestion &operator=( const T__Suggestion& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NotificationType
{
public:
    void setSubscriptionId( const T__SubscriptionIdType& subscriptionId );
    T__SubscriptionIdType subscriptionId() const;
    void setPreviousWatermark( const T__WatermarkType& previousWatermark );
    T__WatermarkType previousWatermark() const;
    void setMoreEvents( bool moreEvents );
    bool moreEvents() const;
    void setCopiedEvent( const QList<T__MovedCopiedEventType>& copiedEvent );
    QList<T__MovedCopiedEventType> copiedEvent() const;
    void setCreatedEvent( const QList<T__BaseObjectChangedEventType>& createdEvent );
    QList<T__BaseObjectChangedEventType> createdEvent() const;
    void setDeletedEvent( const QList<T__BaseObjectChangedEventType>& deletedEvent );
    QList<T__BaseObjectChangedEventType> deletedEvent() const;
    void setModifiedEvent( const QList<T__ModifiedEventType>& modifiedEvent );
    QList<T__ModifiedEventType> modifiedEvent() const;
    void setMovedEvent( const QList<T__MovedCopiedEventType>& movedEvent );
    QList<T__MovedCopiedEventType> movedEvent() const;
    void setNewMailEvent( const QList<T__BaseObjectChangedEventType>& newMailEvent );
    QList<T__BaseObjectChangedEventType> newMailEvent() const;
    void setStatusEvent( const QList<T__BaseNotificationEventType>& statusEvent );
    QList<T__BaseNotificationEventType> statusEvent() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NotificationType();
    ~T__NotificationType();

public:
    T__NotificationType( const T__NotificationType& );
    T__NotificationType &operator=( const T__NotificationType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SyncFolderItemsDeleteType
{
public:
    void setItemId( const T__ItemIdType& itemId );
    T__ItemIdType itemId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SyncFolderItemsDeleteType();
    ~T__SyncFolderItemsDeleteType();

public:
    T__SyncFolderItemsDeleteType( const T__SyncFolderItemsDeleteType& );
    T__SyncFolderItemsDeleteType &operator=( const T__SyncFolderItemsDeleteType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FieldURIOrConstantType
{
public:
    void setPath( const T__BasePathToElementType& path );
    T__BasePathToElementType path() const;
    void setConstant( const T__ConstantValueType& constant );
    T__ConstantValueType constant() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FieldURIOrConstantType();
    ~T__FieldURIOrConstantType();

public:
    T__FieldURIOrConstantType( const T__FieldURIOrConstantType& );
    T__FieldURIOrConstantType &operator=( const T__FieldURIOrConstantType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    A permission on a folder
 */
class T__BasePermissionType
{
public:
    void setUserId( const T__UserIdType& userId );
    T__UserIdType userId() const;
    void setCanCreateItems( bool canCreateItems );
    bool canCreateItems() const;
    void setCanCreateSubFolders( bool canCreateSubFolders );
    bool canCreateSubFolders() const;
    void setIsFolderOwner( bool isFolderOwner );
    bool isFolderOwner() const;
    void setIsFolderVisible( bool isFolderVisible );
    bool isFolderVisible() const;
    void setIsFolderContact( bool isFolderContact );
    bool isFolderContact() const;
    void setEditItems( const T__PermissionActionType& editItems );
    T__PermissionActionType editItems() const;
    void setDeleteItems( const T__PermissionActionType& deleteItems );
    T__PermissionActionType deleteItems() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BasePermissionType();
    virtual ~T__BasePermissionType();

public:
    T__BasePermissionType( const T__BasePermissionType& );
    T__BasePermissionType &operator=( const T__BasePermissionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Surfaces alternate representations of an item or folder id. No change key
    is included.
 */
class T__AlternateIdBaseType
{
public:
    void setFormat( const T__IdFormatType& format );
    T__IdFormatType format() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__AlternateIdBaseType();
    virtual ~T__AlternateIdBaseType();

public:
    T__AlternateIdBaseType( const T__AlternateIdBaseType& );
    T__AlternateIdBaseType &operator=( const T__AlternateIdBaseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ConflictResultsType
{
public:
    void setCount( int count );
    int count() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ConflictResultsType();
    ~T__ConflictResultsType();

public:
    T__ConflictResultsType( const T__ConflictResultsType& );
    T__ConflictResultsType &operator=( const T__ConflictResultsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TimeZoneContextType
{
public:
    void setTimeZoneDefinition( const T__TimeZoneDefinitionType& timeZoneDefinition );
    T__TimeZoneDefinitionType timeZoneDefinition() const;
    void setAnyAttribute( const KDSoapValue& anyAttribute );
    KDSoapValue anyAttribute() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TimeZoneContextType();
    ~T__TimeZoneContextType();

public:
    T__TimeZoneContextType( const T__TimeZoneContextType& );
    T__TimeZoneContextType &operator=( const T__TimeZoneContextType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SyncFolderHierarchyCreateOrUpdateType
{
public:
    void setFolder( const T__FolderType& folder );
    T__FolderType folder() const;
    void setCalendarFolder( const T__CalendarFolderType& calendarFolder );
    T__CalendarFolderType calendarFolder() const;
    void setContactsFolder( const T__ContactsFolderType& contactsFolder );
    T__ContactsFolderType contactsFolder() const;
    void setSearchFolder( const T__SearchFolderType& searchFolder );
    T__SearchFolderType searchFolder() const;
    void setTasksFolder( const T__TasksFolderType& tasksFolder );
    T__TasksFolderType tasksFolder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SyncFolderHierarchyCreateOrUpdateType();
    ~T__SyncFolderHierarchyCreateOrUpdateType();

public:
    T__SyncFolderHierarchyCreateOrUpdateType( const T__SyncFolderHierarchyCreateOrUpdateType& );
    T__SyncFolderHierarchyCreateOrUpdateType &operator=( const T__SyncFolderHierarchyCreateOrUpdateType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NonEmptyArrayOfPropertyValuesType
{
public:
    void setValue( const QString& value );
    QString value() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NonEmptyArrayOfPropertyValuesType();
    ~T__NonEmptyArrayOfPropertyValuesType();

public:
    T__NonEmptyArrayOfPropertyValuesType( const T__NonEmptyArrayOfPropertyValuesType& );
    T__NonEmptyArrayOfPropertyValuesType &operator=( const T__NonEmptyArrayOfPropertyValuesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__BaseGroupByType
{
public:
    void setOrder( const T__SortDirectionType& order );
    T__SortDirectionType order() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BaseGroupByType();
    virtual ~T__BaseGroupByType();

public:
    T__BaseGroupByType( const T__BaseGroupByType& );
    T__BaseGroupByType &operator=( const T__BaseGroupByType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__WorkingHours
{
public:
    void setTimeZone( const T__SerializableTimeZone& timeZone );
    T__SerializableTimeZone timeZone() const;
    void setWorkingPeriodArray( const T__ArrayOfWorkingPeriod& workingPeriodArray );
    T__ArrayOfWorkingPeriod workingPeriodArray() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__WorkingHours();
    ~T__WorkingHours();

public:
    T__WorkingHours( const T__WorkingHours& );
    T__WorkingHours &operator=( const T__WorkingHours& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__BaseFolderType
{
public:
    void setFolderId( const T__FolderIdType& folderId );
    T__FolderIdType folderId() const;
    void setParentFolderId( const T__FolderIdType& parentFolderId );
    T__FolderIdType parentFolderId() const;
    void setFolderClass( const QString& folderClass );
    QString folderClass() const;
    void setDisplayName( const QString& displayName );
    QString displayName() const;
    void setTotalCount( int totalCount );
    int totalCount() const;
    void setChildFolderCount( int childFolderCount );
    int childFolderCount() const;
    void setExtendedProperty( const QList<T__ExtendedPropertyType>& extendedProperty );
    QList<T__ExtendedPropertyType> extendedProperty() const;
    void setManagedFolderInformation( const T__ManagedFolderInformationType& managedFolderInformation );
    T__ManagedFolderInformationType managedFolderInformation() const;
    void setEffectiveRights( const T__EffectiveRightsType& effectiveRights );
    T__EffectiveRightsType effectiveRights() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BaseFolderType();
    virtual ~T__BaseFolderType();

public:
    T__BaseFolderType( const T__BaseFolderType& );
    T__BaseFolderType &operator=( const T__BaseFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ArrayOfDelegateUserResponseMessageType
{
public:
    void setDelegateUserResponseMessageType( const QList<TNS__DelegateUserResponseMessageType>& delegateUserResponseMessageType );
    QList<TNS__DelegateUserResponseMessageType> delegateUserResponseMessageType() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ArrayOfDelegateUserResponseMessageType();
    ~TNS__ArrayOfDelegateUserResponseMessageType();

public:
    TNS__ArrayOfDelegateUserResponseMessageType( const TNS__ArrayOfDelegateUserResponseMessageType& );
    TNS__ArrayOfDelegateUserResponseMessageType &operator=( const TNS__ArrayOfDelegateUserResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TimeZoneType
{
public:
    void setBaseOffset( const QString& baseOffset );
    QString baseOffset() const;
    void setStandard( const T__TimeChangeType& standard );
    T__TimeChangeType standard() const;
    void setDaylight( const T__TimeChangeType& daylight );
    T__TimeChangeType daylight() const;
    void setTimeZoneName( const QString& timeZoneName );
    QString timeZoneName() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TimeZoneType();
    ~T__TimeZoneType();

public:
    T__TimeZoneType( const T__TimeZoneType& );
    T__TimeZoneType &operator=( const T__TimeZoneType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SuggestionsViewOptionsType
{
public:
    void setGoodThreshold( int goodThreshold );
    int goodThreshold() const;
    void setMaximumResultsByDay( int maximumResultsByDay );
    int maximumResultsByDay() const;
    void setMaximumNonWorkHourResultsByDay( int maximumNonWorkHourResultsByDay );
    int maximumNonWorkHourResultsByDay() const;
    void setMeetingDurationInMinutes( int meetingDurationInMinutes );
    int meetingDurationInMinutes() const;
    void setMinimumSuggestionQuality( const T__SuggestionQuality& minimumSuggestionQuality );
    T__SuggestionQuality minimumSuggestionQuality() const;
    void setDetailedSuggestionsWindow( const T__Duration& detailedSuggestionsWindow );
    T__Duration detailedSuggestionsWindow() const;
    void setCurrentMeetingTime( const KDDateTime& currentMeetingTime );
    KDDateTime currentMeetingTime() const;
    void setGlobalObjectId( const QString& globalObjectId );
    QString globalObjectId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SuggestionsViewOptionsType();
    ~T__SuggestionsViewOptionsType();

public:
    T__SuggestionsViewOptionsType( const T__SuggestionsViewOptionsType& );
    T__SuggestionsViewOptionsType &operator=( const T__SuggestionsViewOptionsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__MessageXml
{
public:
    void setAny( const QList<KDSoapValue>& any );
    QList<KDSoapValue> any() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__MessageXml();
    ~TNS__MessageXml();

public:
    TNS__MessageXml( const TNS__MessageXml& );
    TNS__MessageXml &operator=( const TNS__MessageXml& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ArrayOfFoldersType
{
public:
    void setFolder( const QList<T__FolderType>& folder );
    QList<T__FolderType> folder() const;
    void setCalendarFolder( const QList<T__CalendarFolderType>& calendarFolder );
    QList<T__CalendarFolderType> calendarFolder() const;
    void setContactsFolder( const QList<T__ContactsFolderType>& contactsFolder );
    QList<T__ContactsFolderType> contactsFolder() const;
    void setSearchFolder( const QList<T__SearchFolderType>& searchFolder );
    QList<T__SearchFolderType> searchFolder() const;
    void setTasksFolder( const QList<T__TasksFolderType>& tasksFolder );
    QList<T__TasksFolderType> tasksFolder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ArrayOfFoldersType();
    ~T__ArrayOfFoldersType();

public:
    T__ArrayOfFoldersType( const T__ArrayOfFoldersType& );
    T__ArrayOfFoldersType &operator=( const T__ArrayOfFoldersType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__GroupedItemsType
{
public:
    void setGroupIndex( const QString& groupIndex );
    QString groupIndex() const;
    void setItems( const T__ArrayOfRealItemsType& items );
    T__ArrayOfRealItemsType items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__GroupedItemsType();
    ~T__GroupedItemsType();

public:
    T__GroupedItemsType( const T__GroupedItemsType& );
    T__GroupedItemsType &operator=( const T__GroupedItemsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type T__SubscriptionIdType you can
    also pass the value directly as a QString.
 */
class T__SubscriptionIdType
{
public:
    void setValue( const T__NonEmptyStringType& value );
    T__NonEmptyStringType value() const;
    T__SubscriptionIdType( const T__NonEmptyStringType& value );
    T__SubscriptionIdType( const QString& value );
    operator T__NonEmptyStringType() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__SubscriptionIdType();
    ~T__SubscriptionIdType();

private:
    T__NonEmptyStringType mValue;
};

/**
    This class encapsulates a simple type.
    Whenever you have to pass an object of type T__WatermarkType you can also
    pass the value directly as a QString.
 */
class T__WatermarkType
{
public:
    void setValue( const T__NonEmptyStringType& value );
    T__NonEmptyStringType value() const;
    T__WatermarkType( const T__NonEmptyStringType& value );
    T__WatermarkType( const QString& value );
    operator T__NonEmptyStringType() const;
    QVariant serialize() const;
    void deserialize( const QVariant& value );
    T__WatermarkType();
    ~T__WatermarkType();

private:
    T__NonEmptyStringType mValue;
};

class TNS__SyncFolderItemsResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setSyncState( const QString& syncState );
    QString syncState() const;
    void setIncludesLastItemInRange( bool includesLastItemInRange );
    bool includesLastItemInRange() const;
    void setChanges( const T__SyncFolderItemsChangesType& changes );
    T__SyncFolderItemsChangesType changes() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SyncFolderItemsResponseMessageType();
    ~TNS__SyncFolderItemsResponseMessageType();

public:
    TNS__SyncFolderItemsResponseMessageType( const TNS__SyncFolderItemsResponseMessageType& );
    TNS__SyncFolderItemsResponseMessageType &operator=( const TNS__SyncFolderItemsResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SendNotificationResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setNotification( const T__NotificationType& notification );
    T__NotificationType notification() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SendNotificationResponseMessageType();
    ~TNS__SendNotificationResponseMessageType();

public:
    TNS__SendNotificationResponseMessageType( const TNS__SendNotificationResponseMessageType& );
    TNS__SendNotificationResponseMessageType &operator=( const TNS__SendNotificationResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__BaseMoveCopyItemType : public TNS__BaseRequestType
{
public:
    void setToFolderId( const T__TargetFolderIdType& toFolderId );
    T__TargetFolderIdType toFolderId() const;
    void setItemIds( const T__NonEmptyArrayOfBaseItemIdsType& itemIds );
    T__NonEmptyArrayOfBaseItemIdsType itemIds() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    TNS__BaseMoveCopyItemType();
    virtual ~TNS__BaseMoveCopyItemType();

public:
    TNS__BaseMoveCopyItemType( const TNS__BaseMoveCopyItemType& );
    TNS__BaseMoveCopyItemType &operator=( const TNS__BaseMoveCopyItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SyncFolderItemsResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SyncFolderItemsResponseType();
    ~TNS__SyncFolderItemsResponseType();

};

class T__TooBigGroupAttendeeConflictData : public T__AttendeeConflictData
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TooBigGroupAttendeeConflictData();
    ~T__TooBigGroupAttendeeConflictData();

};

/**
    Response Message for a single id conversion in the ConvertId web method.
    Note that the AlternateId element will be missing in the case of an error.
 */
class TNS__ConvertIdResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setAlternateId( const T__AlternateIdBaseType& alternateId );
    T__AlternateIdBaseType alternateId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ConvertIdResponseMessageType();
    ~TNS__ConvertIdResponseMessageType();

public:
    TNS__ConvertIdResponseMessageType( const TNS__ConvertIdResponseMessageType& );
    TNS__ConvertIdResponseMessageType &operator=( const TNS__ConvertIdResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CreateFolderResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CreateFolderResponseType();
    ~TNS__CreateFolderResponseType();

};

class T__DistributionListType : public T__ItemType
{
public:
    void setDisplayName( const QString& displayName );
    QString displayName() const;
    void setFileAs( const QString& fileAs );
    QString fileAs() const;
    void setContactSource( const T__ContactSourceType& contactSource );
    T__ContactSourceType contactSource() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DistributionListType();
    ~T__DistributionListType();

public:
    T__DistributionListType( const T__DistributionListType& );
    T__DistributionListType &operator=( const T__DistributionListType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ResolveNamesResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setResolutionSet( const T__ArrayOfResolutionType& resolutionSet );
    T__ArrayOfResolutionType resolutionSet() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ResolveNamesResponseMessageType();
    ~TNS__ResolveNamesResponseMessageType();

public:
    TNS__ResolveNamesResponseMessageType( const TNS__ResolveNamesResponseMessageType& );
    TNS__ResolveNamesResponseMessageType &operator=( const TNS__ResolveNamesResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__IndividualAttendeeConflictData : public T__AttendeeConflictData
{
public:
    void setBusyType( const T__LegacyFreeBusyType& busyType );
    T__LegacyFreeBusyType busyType() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__IndividualAttendeeConflictData();
    ~T__IndividualAttendeeConflictData();

public:
    T__IndividualAttendeeConflictData( const T__IndividualAttendeeConflictData& );
    T__IndividualAttendeeConflictData &operator=( const T__IndividualAttendeeConflictData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__GetFolderType : public TNS__BaseRequestType
{
public:
    void setFolderShape( const T__FolderResponseShapeType& folderShape );
    T__FolderResponseShapeType folderShape() const;
    void setFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& folderIds );
    T__NonEmptyArrayOfBaseFolderIdsType folderIds() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetFolderType();
    ~TNS__GetFolderType();

public:
    TNS__GetFolderType( const TNS__GetFolderType& );
    TNS__GetFolderType &operator=( const TNS__GetFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Identifier for a fully resolved item
 */
class T__ItemIdType : public T__BaseItemIdType
{
public:
    void setId( const QString& id );
    QString id() const;
    void setChangeKey( const QString& changeKey );
    QString changeKey() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ItemIdType();
    ~T__ItemIdType();

public:
    T__ItemIdType( const T__ItemIdType& );
    T__ItemIdType &operator=( const T__ItemIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CreateFolderType : public TNS__BaseRequestType
{
public:
    void setParentFolderId( const T__TargetFolderIdType& parentFolderId );
    T__TargetFolderIdType parentFolderId() const;
    void setFolders( const T__NonEmptyArrayOfFoldersType& folders );
    T__NonEmptyArrayOfFoldersType folders() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CreateFolderType();
    ~TNS__CreateFolderType();

public:
    TNS__CreateFolderType( const TNS__CreateFolderType& );
    TNS__CreateFolderType &operator=( const TNS__CreateFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__GetEventsResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetEventsResponseType();
    ~TNS__GetEventsResponseType();

};

class TNS__MoveItemResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__MoveItemResponseType();
    ~TNS__MoveItemResponseType();

};

class TNS__GetItemType : public TNS__BaseRequestType
{
public:
    void setItemShape( const T__ItemResponseShapeType& itemShape );
    T__ItemResponseShapeType itemShape() const;
    void setItemIds( const T__NonEmptyArrayOfBaseItemIdsType& itemIds );
    T__NonEmptyArrayOfBaseItemIdsType itemIds() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetItemType();
    ~TNS__GetItemType();

public:
    TNS__GetItemType( const TNS__GetItemType& );
    TNS__GetItemType &operator=( const TNS__GetItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Represents an extended property. Note that there are only a couple of valid
    attribute combinations. Note that all occurances require the PropertyType
    attribute. 1. (DistinguishedPropertySetId || PropertySetId) + (PropertyName
    || Property Id) 2. PropertyTag
 */
class T__PathToExtendedFieldType : public T__BasePathToElementType
{
public:
    void setDistinguishedPropertySetId( const T__DistinguishedPropertySetType& distinguishedPropertySetId );
    T__DistinguishedPropertySetType distinguishedPropertySetId() const;
    void setPropertySetId( const T__GuidType& propertySetId );
    T__GuidType propertySetId() const;
    void setPropertyTag( const T__PropertyTagType& propertyTag );
    T__PropertyTagType propertyTag() const;
    void setPropertyName( const QString& propertyName );
    QString propertyName() const;
    void setPropertyId( int propertyId );
    int propertyId() const;
    void setPropertyType( const T__MapiPropertyTypeType& propertyType );
    T__MapiPropertyTypeType propertyType() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PathToExtendedFieldType();
    ~T__PathToExtendedFieldType();

public:
    T__PathToExtendedFieldType( const T__PathToExtendedFieldType& );
    T__PathToExtendedFieldType &operator=( const T__PathToExtendedFieldType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SendItemType : public TNS__BaseRequestType
{
public:
    void setItemIds( const T__NonEmptyArrayOfBaseItemIdsType& itemIds );
    T__NonEmptyArrayOfBaseItemIdsType itemIds() const;
    void setSavedItemFolderId( const T__TargetFolderIdType& savedItemFolderId );
    T__TargetFolderIdType savedItemFolderId() const;
    void setSaveItemToFolder( bool saveItemToFolder );
    bool saveItemToFolder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SendItemType();
    ~TNS__SendItemType();

public:
    TNS__SendItemType( const TNS__SendItemType& );
    TNS__SendItemType &operator=( const TNS__SendItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ItemInfoResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setItems( const T__ArrayOfRealItemsType& items );
    T__ArrayOfRealItemsType items() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    TNS__ItemInfoResponseMessageType();
    virtual ~TNS__ItemInfoResponseMessageType();

public:
    TNS__ItemInfoResponseMessageType( const TNS__ItemInfoResponseMessageType& );
    TNS__ItemInfoResponseMessageType &operator=( const TNS__ItemInfoResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__FindItemResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setRootFolder( const T__FindItemParentType& rootFolder );
    T__FindItemParentType rootFolder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FindItemResponseMessageType();
    ~TNS__FindItemResponseMessageType();

public:
    TNS__FindItemResponseMessageType( const TNS__FindItemResponseMessageType& );
    TNS__FindItemResponseMessageType &operator=( const TNS__FindItemResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__DeleteFolderType : public TNS__BaseRequestType
{
public:
    void setFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& folderIds );
    T__NonEmptyArrayOfBaseFolderIdsType folderIds() const;
    void setDeleteType( const T__DisposalType& deleteType );
    T__DisposalType deleteType() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteFolderType();
    ~TNS__DeleteFolderType();

public:
    TNS__DeleteFolderType( const TNS__DeleteFolderType& );
    TNS__DeleteFolderType &operator=( const TNS__DeleteFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ExpandDLResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setDLExpansion( const T__ArrayOfDLExpansionType& dLExpansion );
    T__ArrayOfDLExpansionType dLExpansion() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ExpandDLResponseMessageType();
    ~TNS__ExpandDLResponseMessageType();

public:
    TNS__ExpandDLResponseMessageType( const TNS__ExpandDLResponseMessageType& );
    TNS__ExpandDLResponseMessageType &operator=( const TNS__ExpandDLResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PullSubscriptionRequestType : public T__BaseSubscriptionRequestType
{
public:
    void setTimeout( const T__SubscriptionTimeoutType& timeout );
    T__SubscriptionTimeoutType timeout() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PullSubscriptionRequestType();
    ~T__PullSubscriptionRequestType();

public:
    T__PullSubscriptionRequestType( const T__PullSubscriptionRequestType& );
    T__PullSubscriptionRequestType &operator=( const T__PullSubscriptionRequestType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__OccurrenceItemIdType : public T__BaseItemIdType
{
public:
    void setRecurringMasterId( const T__DerivedItemIdType& recurringMasterId );
    T__DerivedItemIdType recurringMasterId() const;
    void setChangeKey( const QString& changeKey );
    QString changeKey() const;
    void setInstanceIndex( int instanceIndex );
    int instanceIndex() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__OccurrenceItemIdType();
    ~T__OccurrenceItemIdType();

public:
    T__OccurrenceItemIdType( const T__OccurrenceItemIdType& );
    T__OccurrenceItemIdType &operator=( const T__OccurrenceItemIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FolderType : public T__BaseFolderType
{
public:
    void setPermissionSet( const T__PermissionSetType& permissionSet );
    T__PermissionSetType permissionSet() const;
    void setUnreadCount( int unreadCount );
    int unreadCount() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__FolderType();
    virtual ~T__FolderType();

public:
    T__FolderType( const T__FolderType& );
    T__FolderType &operator=( const T__FolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TaskType : public T__ItemType
{
public:
    void setActualWork( int actualWork );
    int actualWork() const;
    void setAssignedTime( const KDDateTime& assignedTime );
    KDDateTime assignedTime() const;
    void setBillingInformation( const QString& billingInformation );
    QString billingInformation() const;
    void setChangeCount( int changeCount );
    int changeCount() const;
    void setCompanies( const T__ArrayOfStringsType& companies );
    T__ArrayOfStringsType companies() const;
    void setCompleteDate( const KDDateTime& completeDate );
    KDDateTime completeDate() const;
    void setContacts( const T__ArrayOfStringsType& contacts );
    T__ArrayOfStringsType contacts() const;
    void setDelegationState( const T__TaskDelegateStateType& delegationState );
    T__TaskDelegateStateType delegationState() const;
    void setDelegator( const QString& delegator );
    QString delegator() const;
    void setDueDate( const KDDateTime& dueDate );
    KDDateTime dueDate() const;
    void setIsAssignmentEditable( int isAssignmentEditable );
    int isAssignmentEditable() const;
    void setIsComplete( bool isComplete );
    bool isComplete() const;
    void setIsRecurring( bool isRecurring );
    bool isRecurring() const;
    void setIsTeamTask( bool isTeamTask );
    bool isTeamTask() const;
    void setMileage( const QString& mileage );
    QString mileage() const;
    void setOwner( const QString& owner );
    QString owner() const;
    void setPercentComplete( double percentComplete );
    double percentComplete() const;
    void setRecurrence( const T__TaskRecurrenceType& recurrence );
    T__TaskRecurrenceType recurrence() const;
    void setStartDate( const KDDateTime& startDate );
    KDDateTime startDate() const;
    void setStatus( const T__TaskStatusType& status );
    T__TaskStatusType status() const;
    void setStatusDescription( const QString& statusDescription );
    QString statusDescription() const;
    void setTotalWork( int totalWork );
    int totalWork() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TaskType();
    ~T__TaskType();

public:
    T__TaskType( const T__TaskType& );
    T__TaskType &operator=( const T__TaskType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__AbsoluteYearlyRecurrencePatternType : public T__RecurrencePatternBaseType
{
public:
    void setDayOfMonth( int dayOfMonth );
    int dayOfMonth() const;
    void setMonth( const T__MonthNamesType& month );
    T__MonthNamesType month() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AbsoluteYearlyRecurrencePatternType();
    ~T__AbsoluteYearlyRecurrencePatternType();

public:
    T__AbsoluteYearlyRecurrencePatternType( const T__AbsoluteYearlyRecurrencePatternType& );
    T__AbsoluteYearlyRecurrencePatternType &operator=( const T__AbsoluteYearlyRecurrencePatternType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Identifier for a fully resolved folder
 */
class T__FolderIdType : public T__BaseFolderIdType
{
public:
    void setId( const QString& id );
    QString id() const;
    void setChangeKey( const QString& changeKey );
    QString changeKey() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FolderIdType();
    ~T__FolderIdType();

public:
    T__FolderIdType( const T__FolderIdType& );
    T__FolderIdType &operator=( const T__FolderIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PathToExceptionFieldType : public T__BasePathToElementType
{
public:
    void setFieldURI( const T__ExceptionPropertyURIType& fieldURI );
    T__ExceptionPropertyURIType fieldURI() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PathToExceptionFieldType();
    ~T__PathToExceptionFieldType();

public:
    T__PathToExceptionFieldType( const T__PathToExceptionFieldType& );
    T__PathToExceptionFieldType &operator=( const T__PathToExceptionFieldType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Allows consumers to specify arbitrary groupings for FindItem queries.
 */
class T__GroupByType : public T__BaseGroupByType
{
public:
    void setFieldURI( const T__PathToUnindexedFieldType& fieldURI );
    T__PathToUnindexedFieldType fieldURI() const;
    void setIndexedFieldURI( const T__PathToIndexedFieldType& indexedFieldURI );
    T__PathToIndexedFieldType indexedFieldURI() const;
    void setExtendedFieldURI( const T__PathToExtendedFieldType& extendedFieldURI );
    T__PathToExtendedFieldType extendedFieldURI() const;
    void setAggregateOn( const T__AggregateOnType& aggregateOn );
    T__AggregateOnType aggregateOn() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__GroupByType();
    ~T__GroupByType();

public:
    T__GroupByType( const T__GroupByType& );
    T__GroupByType &operator=( const T__GroupByType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NotType : public T__SearchExpressionType
{
public:
    void setSearchExpression( const T__SearchExpressionType& searchExpression );
    T__SearchExpressionType searchExpression() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NotType();
    ~T__NotType();

public:
    T__NotType( const T__NotType& );
    T__NotType &operator=( const T__NotType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PostItemType : public T__ItemType
{
public:
    void setConversationIndex( const QByteArray& conversationIndex );
    QByteArray conversationIndex() const;
    void setConversationTopic( const QString& conversationTopic );
    QString conversationTopic() const;
    void setFrom( const T__SingleRecipientType& from );
    T__SingleRecipientType from() const;
    void setInternetMessageId( const QString& internetMessageId );
    QString internetMessageId() const;
    void setIsRead( bool isRead );
    bool isRead() const;
    void setPostedTime( const KDDateTime& postedTime );
    KDDateTime postedTime() const;
    void setReferences( const QString& references );
    QString references() const;
    void setSender( const T__SingleRecipientType& sender );
    T__SingleRecipientType sender() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PostItemType();
    ~T__PostItemType();

public:
    T__PostItemType( const T__PostItemType& );
    T__PostItemType &operator=( const T__PostItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__UpdateItemResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UpdateItemResponseType();
    ~TNS__UpdateItemResponseType();

};

class TNS__AttachmentInfoResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setAttachments( const T__ArrayOfAttachmentsType& attachments );
    T__ArrayOfAttachmentsType attachments() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__AttachmentInfoResponseMessageType();
    ~TNS__AttachmentInfoResponseMessageType();

public:
    TNS__AttachmentInfoResponseMessageType( const TNS__AttachmentInfoResponseMessageType& );
    TNS__AttachmentInfoResponseMessageType &operator=( const TNS__AttachmentInfoResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SyncFolderItemsType : public TNS__BaseRequestType
{
public:
    void setItemShape( const T__ItemResponseShapeType& itemShape );
    T__ItemResponseShapeType itemShape() const;
    void setSyncFolderId( const T__TargetFolderIdType& syncFolderId );
    T__TargetFolderIdType syncFolderId() const;
    void setSyncState( const QString& syncState );
    QString syncState() const;
    void setIgnore( const T__ArrayOfBaseItemIdsType& ignore );
    T__ArrayOfBaseItemIdsType ignore() const;
    void setMaxChangesReturned( const T__MaxSyncChangesReturnedType& maxChangesReturned );
    T__MaxSyncChangesReturnedType maxChangesReturned() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SyncFolderItemsType();
    ~TNS__SyncFolderItemsType();

public:
    TNS__SyncFolderItemsType( const TNS__SyncFolderItemsType& );
    TNS__SyncFolderItemsType &operator=( const TNS__SyncFolderItemsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ContactItemType : public T__ItemType
{
public:
    void setFileAs( const QString& fileAs );
    QString fileAs() const;
    void setFileAsMapping( const T__FileAsMappingType& fileAsMapping );
    T__FileAsMappingType fileAsMapping() const;
    void setDisplayName( const QString& displayName );
    QString displayName() const;
    void setGivenName( const QString& givenName );
    QString givenName() const;
    void setInitials( const QString& initials );
    QString initials() const;
    void setMiddleName( const QString& middleName );
    QString middleName() const;
    void setNickname( const QString& nickname );
    QString nickname() const;
    void setCompleteName( const T__CompleteNameType& completeName );
    T__CompleteNameType completeName() const;
    void setCompanyName( const QString& companyName );
    QString companyName() const;
    void setEmailAddresses( const T__EmailAddressDictionaryType& emailAddresses );
    T__EmailAddressDictionaryType emailAddresses() const;
    void setPhysicalAddresses( const T__PhysicalAddressDictionaryType& physicalAddresses );
    T__PhysicalAddressDictionaryType physicalAddresses() const;
    void setPhoneNumbers( const T__PhoneNumberDictionaryType& phoneNumbers );
    T__PhoneNumberDictionaryType phoneNumbers() const;
    void setAssistantName( const QString& assistantName );
    QString assistantName() const;
    void setBirthday( const KDDateTime& birthday );
    KDDateTime birthday() const;
    void setBusinessHomePage( const QString& businessHomePage );
    QString businessHomePage() const;
    void setChildren( const T__ArrayOfStringsType& children );
    T__ArrayOfStringsType children() const;
    void setCompanies( const T__ArrayOfStringsType& companies );
    T__ArrayOfStringsType companies() const;
    void setContactSource( const T__ContactSourceType& contactSource );
    T__ContactSourceType contactSource() const;
    void setDepartment( const QString& department );
    QString department() const;
    void setGeneration( const QString& generation );
    QString generation() const;
    void setImAddresses( const T__ImAddressDictionaryType& imAddresses );
    T__ImAddressDictionaryType imAddresses() const;
    void setJobTitle( const QString& jobTitle );
    QString jobTitle() const;
    void setManager( const QString& manager );
    QString manager() const;
    void setMileage( const QString& mileage );
    QString mileage() const;
    void setOfficeLocation( const QString& officeLocation );
    QString officeLocation() const;
    void setPostalAddressIndex( const T__PhysicalAddressIndexType& postalAddressIndex );
    T__PhysicalAddressIndexType postalAddressIndex() const;
    void setProfession( const QString& profession );
    QString profession() const;
    void setSpouseName( const QString& spouseName );
    QString spouseName() const;
    void setSurname( const QString& surname );
    QString surname() const;
    void setWeddingAnniversary( const KDDateTime& weddingAnniversary );
    KDDateTime weddingAnniversary() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ContactItemType();
    ~T__ContactItemType();

public:
    T__ContactItemType( const T__ContactItemType& );
    T__ContactItemType &operator=( const T__ContactItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__GroupAttendeeConflictData : public T__AttendeeConflictData
{
public:
    void setNumberOfMembers( int numberOfMembers );
    int numberOfMembers() const;
    void setNumberOfMembersAvailable( int numberOfMembersAvailable );
    int numberOfMembersAvailable() const;
    void setNumberOfMembersWithConflict( int numberOfMembersWithConflict );
    int numberOfMembersWithConflict() const;
    void setNumberOfMembersWithNoData( int numberOfMembersWithNoData );
    int numberOfMembersWithNoData() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__GroupAttendeeConflictData();
    ~T__GroupAttendeeConflictData();

public:
    T__GroupAttendeeConflictData( const T__GroupAttendeeConflictData& );
    T__GroupAttendeeConflictData &operator=( const T__GroupAttendeeConflictData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__DeleteItemType : public TNS__BaseRequestType
{
public:
    void setItemIds( const T__NonEmptyArrayOfBaseItemIdsType& itemIds );
    T__NonEmptyArrayOfBaseItemIdsType itemIds() const;
    void setDeleteType( const T__DisposalType& deleteType );
    T__DisposalType deleteType() const;
    void setSendMeetingCancellations( const T__CalendarItemCreateOrDeleteOperationType& sendMeetingCancellations );
    T__CalendarItemCreateOrDeleteOperationType sendMeetingCancellations() const;
    void setAffectedTaskOccurrences( const T__AffectedTaskOccurrencesType& affectedTaskOccurrences );
    T__AffectedTaskOccurrencesType affectedTaskOccurrences() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteItemType();
    ~TNS__DeleteItemType();

public:
    TNS__DeleteItemType( const TNS__DeleteItemType& );
    TNS__DeleteItemType &operator=( const TNS__DeleteItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FolderChangeDescriptionType : public T__ChangeDescriptionType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__FolderChangeDescriptionType();
    virtual ~T__FolderChangeDescriptionType();

};

class TNS__FindFolderType : public TNS__BaseRequestType
{
public:
    void setFolderShape( const T__FolderResponseShapeType& folderShape );
    T__FolderResponseShapeType folderShape() const;
    void setIndexedPageFolderView( const T__IndexedPageViewType& indexedPageFolderView );
    T__IndexedPageViewType indexedPageFolderView() const;
    void setFractionalPageFolderView( const T__FractionalPageViewType& fractionalPageFolderView );
    T__FractionalPageViewType fractionalPageFolderView() const;
    void setRestriction( const T__RestrictionType& restriction );
    T__RestrictionType restriction() const;
    void setParentFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& parentFolderIds );
    T__NonEmptyArrayOfBaseFolderIdsType parentFolderIds() const;
    void setTraversal( const T__FolderQueryTraversalType& traversal );
    T__FolderQueryTraversalType traversal() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FindFolderType();
    ~TNS__FindFolderType();

public:
    TNS__FindFolderType( const TNS__FindFolderType& );
    TNS__FindFolderType &operator=( const TNS__FindFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__MultipleOperandBooleanExpressionType : public T__SearchExpressionType
{
public:
    void setSearchExpression( const QList<T__SearchExpressionType>& searchExpression );
    QList<T__SearchExpressionType> searchExpression() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__MultipleOperandBooleanExpressionType();
    virtual ~T__MultipleOperandBooleanExpressionType();

public:
    T__MultipleOperandBooleanExpressionType( const T__MultipleOperandBooleanExpressionType& );
    T__MultipleOperandBooleanExpressionType &operator=( const T__MultipleOperandBooleanExpressionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__FindFolderResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setRootFolder( const T__FindFolderParentType& rootFolder );
    T__FindFolderParentType rootFolder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FindFolderResponseMessageType();
    ~TNS__FindFolderResponseMessageType();

public:
    TNS__FindFolderResponseMessageType( const TNS__FindFolderResponseMessageType& );
    TNS__FindFolderResponseMessageType &operator=( const TNS__FindFolderResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__UpdateFolderResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UpdateFolderResponseType();
    ~TNS__UpdateFolderResponseType();

};

class T__ContactsViewType : public T__BasePagingType
{
public:
    void setInitialName( const QString& initialName );
    QString initialName() const;
    void setFinalName( const QString& finalName );
    QString finalName() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ContactsViewType();
    ~T__ContactsViewType();

public:
    T__ContactsViewType( const T__ContactsViewType& );
    T__ContactsViewType &operator=( const T__ContactsViewType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NumberedRecurrenceRangeType : public T__RecurrenceRangeBaseType
{
public:
    void setNumberOfOccurrences( int numberOfOccurrences );
    int numberOfOccurrences() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NumberedRecurrenceRangeType();
    ~T__NumberedRecurrenceRangeType();

public:
    T__NumberedRecurrenceRangeType( const T__NumberedRecurrenceRangeType& );
    T__NumberedRecurrenceRangeType &operator=( const T__NumberedRecurrenceRangeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    A permission on a folder
 */
class T__PermissionType : public T__BasePermissionType
{
public:
    void setReadItems( const T__PermissionReadAccessType& readItems );
    T__PermissionReadAccessType readItems() const;
    void setPermissionLevel( const T__PermissionLevelType& permissionLevel );
    T__PermissionLevelType permissionLevel() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PermissionType();
    ~T__PermissionType();

public:
    T__PermissionType( const T__PermissionType& );
    T__PermissionType &operator=( const T__PermissionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__MoveFolderResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__MoveFolderResponseType();
    ~TNS__MoveFolderResponseType();

};

class T__PushSubscriptionRequestType : public T__BaseSubscriptionRequestType
{
public:
    void setStatusFrequency( const T__SubscriptionStatusFrequencyType& statusFrequency );
    T__SubscriptionStatusFrequencyType statusFrequency() const;
    void setURL( const QString& uRL );
    QString uRL() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PushSubscriptionRequestType();
    ~T__PushSubscriptionRequestType();

public:
    T__PushSubscriptionRequestType( const T__PushSubscriptionRequestType& );
    T__PushSubscriptionRequestType &operator=( const T__PushSubscriptionRequestType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Identifier for a fully resolved email address
 */
class T__EmailAddressType : public T__BaseEmailAddressType
{
public:
    void setName( const QString& name );
    QString name() const;
    void setEmailAddress( const T__NonEmptyStringType& emailAddress );
    T__NonEmptyStringType emailAddress() const;
    void setRoutingType( const T__NonEmptyStringType& routingType );
    T__NonEmptyStringType routingType() const;
    void setMailboxType( const T__MailboxTypeType& mailboxType );
    T__MailboxTypeType mailboxType() const;
    void setItemId( const T__ItemIdType& itemId );
    T__ItemIdType itemId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__EmailAddressType();
    ~T__EmailAddressType();

public:
    T__EmailAddressType( const T__EmailAddressType& );
    T__EmailAddressType &operator=( const T__EmailAddressType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__BaseDelegateResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setResponseMessages( const TNS__ArrayOfDelegateUserResponseMessageType& responseMessages );
    TNS__ArrayOfDelegateUserResponseMessageType responseMessages() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    TNS__BaseDelegateResponseMessageType();
    virtual ~TNS__BaseDelegateResponseMessageType();

public:
    TNS__BaseDelegateResponseMessageType( const TNS__BaseDelegateResponseMessageType& );
    TNS__BaseDelegateResponseMessageType &operator=( const TNS__BaseDelegateResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SyncFolderHierarchyType : public TNS__BaseRequestType
{
public:
    void setFolderShape( const T__FolderResponseShapeType& folderShape );
    T__FolderResponseShapeType folderShape() const;
    void setSyncFolderId( const T__TargetFolderIdType& syncFolderId );
    T__TargetFolderIdType syncFolderId() const;
    void setSyncState( const QString& syncState );
    QString syncState() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SyncFolderHierarchyType();
    ~TNS__SyncFolderHierarchyType();

public:
    TNS__SyncFolderHierarchyType( const TNS__SyncFolderHierarchyType& );
    TNS__SyncFolderHierarchyType &operator=( const TNS__SyncFolderHierarchyType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__FractionalPageViewType : public T__BasePagingType
{
public:
    void setNumerator( int numerator );
    int numerator() const;
    void setDenominator( int denominator );
    int denominator() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FractionalPageViewType();
    ~T__FractionalPageViewType();

public:
    T__FractionalPageViewType( const T__FractionalPageViewType& );
    T__FractionalPageViewType &operator=( const T__FractionalPageViewType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Represents an alternate public folder Id.
 */
class T__AlternatePublicFolderIdType : public T__AlternateIdBaseType
{
public:
    void setFolderId( const QString& folderId );
    QString folderId() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__AlternatePublicFolderIdType();
    virtual ~T__AlternatePublicFolderIdType();

public:
    T__AlternatePublicFolderIdType( const T__AlternatePublicFolderIdType& );
    T__AlternatePublicFolderIdType &operator=( const T__AlternatePublicFolderIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__FindFolderResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FindFolderResponseType();
    ~TNS__FindFolderResponseType();

};

class TNS__DeleteAttachmentResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setRootItemId( const T__RootItemIdType& rootItemId );
    T__RootItemIdType rootItemId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteAttachmentResponseMessageType();
    ~TNS__DeleteAttachmentResponseMessageType();

public:
    TNS__DeleteAttachmentResponseMessageType( const TNS__DeleteAttachmentResponseMessageType& );
    TNS__DeleteAttachmentResponseMessageType &operator=( const TNS__DeleteAttachmentResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__DeleteItemResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteItemResponseType();
    ~TNS__DeleteItemResponseType();

};

class TNS__GetAttachmentResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetAttachmentResponseType();
    ~TNS__GetAttachmentResponseType();

};

class TNS__GetDelegateResponseMessageType : public TNS__BaseDelegateResponseMessageType
{
public:
    void setDeliverMeetingRequests( const T__DeliverMeetingRequestsType& deliverMeetingRequests );
    T__DeliverMeetingRequestsType deliverMeetingRequests() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetDelegateResponseMessageType();
    ~TNS__GetDelegateResponseMessageType();

public:
    TNS__GetDelegateResponseMessageType( const TNS__GetDelegateResponseMessageType& );
    TNS__GetDelegateResponseMessageType &operator=( const TNS__GetDelegateResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__DeleteAttachmentType : public TNS__BaseRequestType
{
public:
    void setAttachmentIds( const T__NonEmptyArrayOfRequestAttachmentIdsType& attachmentIds );
    T__NonEmptyArrayOfRequestAttachmentIdsType attachmentIds() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteAttachmentType();
    ~TNS__DeleteAttachmentType();

public:
    TNS__DeleteAttachmentType( const TNS__DeleteAttachmentType& );
    TNS__DeleteAttachmentType &operator=( const TNS__DeleteAttachmentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CopyItemType : public TNS__BaseMoveCopyItemType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CopyItemType();
    ~TNS__CopyItemType();

};

class TNS__DeleteFolderResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteFolderResponseType();
    ~TNS__DeleteFolderResponseType();

};

class TNS__FindItemResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FindItemResponseType();
    ~TNS__FindItemResponseType();

};

class T__ContactsFolderType : public T__BaseFolderType
{
public:
    void setPermissionSet( const T__PermissionSetType& permissionSet );
    T__PermissionSetType permissionSet() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ContactsFolderType();
    ~T__ContactsFolderType();

public:
    T__ContactsFolderType( const T__ContactsFolderType& );
    T__ContactsFolderType &operator=( const T__ContactsFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SubscribeResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SubscribeResponseType();
    ~TNS__SubscribeResponseType();

};

class TNS__SyncFolderHierarchyResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setSyncState( const QString& syncState );
    QString syncState() const;
    void setIncludesLastFolderInRange( bool includesLastFolderInRange );
    bool includesLastFolderInRange() const;
    void setChanges( const T__SyncFolderHierarchyChangesType& changes );
    T__SyncFolderHierarchyChangesType changes() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SyncFolderHierarchyResponseMessageType();
    ~TNS__SyncFolderHierarchyResponseMessageType();

public:
    TNS__SyncFolderHierarchyResponseMessageType( const TNS__SyncFolderHierarchyResponseMessageType& );
    TNS__SyncFolderHierarchyResponseMessageType &operator=( const TNS__SyncFolderHierarchyResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CopyFolderResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CopyFolderResponseType();
    ~TNS__CopyFolderResponseType();

};

class TNS__CreateManagedFolderRequestType : public TNS__BaseRequestType
{
public:
    void setFolderNames( const T__NonEmptyArrayOfFolderNamesType& folderNames );
    T__NonEmptyArrayOfFolderNamesType folderNames() const;
    void setMailbox( const T__EmailAddressType& mailbox );
    T__EmailAddressType mailbox() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CreateManagedFolderRequestType();
    ~TNS__CreateManagedFolderRequestType();

public:
    TNS__CreateManagedFolderRequestType( const TNS__CreateManagedFolderRequestType& );
    TNS__CreateManagedFolderRequestType &operator=( const TNS__CreateManagedFolderRequestType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__UnsubscribeResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UnsubscribeResponseType();
    ~TNS__UnsubscribeResponseType();

};

/**
    Converts the passed source ids into the destination format. Change keys are
    not returned.
 */
class TNS__ConvertIdType : public TNS__BaseRequestType
{
public:
    void setSourceIds( const T__NonEmptyArrayOfAlternateIdsType& sourceIds );
    T__NonEmptyArrayOfAlternateIdsType sourceIds() const;
    void setDestinationFormat( const T__IdFormatType& destinationFormat );
    T__IdFormatType destinationFormat() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ConvertIdType();
    ~TNS__ConvertIdType();

public:
    TNS__ConvertIdType( const TNS__ConvertIdType& );
    TNS__ConvertIdType &operator=( const TNS__ConvertIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ItemChangeDescriptionType : public T__ChangeDescriptionType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__ItemChangeDescriptionType();
    virtual ~T__ItemChangeDescriptionType();

};

class T__BaseObjectChangedEventType : public T__BaseNotificationEventType
{
public:
    void setTimeStamp( const KDDateTime& timeStamp );
    KDDateTime timeStamp() const;
    void setFolderId( const T__FolderIdType& folderId );
    T__FolderIdType folderId() const;
    void setItemId( const T__ItemIdType& itemId );
    T__ItemIdType itemId() const;
    void setParentFolderId( const T__FolderIdType& parentFolderId );
    T__FolderIdType parentFolderId() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__BaseObjectChangedEventType();
    virtual ~T__BaseObjectChangedEventType();

public:
    T__BaseObjectChangedEventType( const T__BaseObjectChangedEventType& );
    T__BaseObjectChangedEventType &operator=( const T__BaseObjectChangedEventType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CreateAttachmentResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CreateAttachmentResponseType();
    ~TNS__CreateAttachmentResponseType();

};

class T__ExistsType : public T__SearchExpressionType
{
public:
    void setPath( const T__BasePathToElementType& path );
    T__BasePathToElementType path() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ExistsType();
    ~T__ExistsType();

public:
    T__ExistsType( const T__ExistsType& );
    T__ExistsType &operator=( const T__ExistsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ExpandDLType : public TNS__BaseRequestType
{
public:
    void setMailbox( const T__EmailAddressType& mailbox );
    T__EmailAddressType mailbox() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ExpandDLType();
    ~TNS__ExpandDLType();

public:
    TNS__ExpandDLType( const TNS__ExpandDLType& );
    TNS__ExpandDLType &operator=( const TNS__ExpandDLType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__GetEventsType : public TNS__BaseRequestType
{
public:
    void setSubscriptionId( const T__SubscriptionIdType& subscriptionId );
    T__SubscriptionIdType subscriptionId() const;
    void setWatermark( const T__WatermarkType& watermark );
    T__WatermarkType watermark() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetEventsType();
    ~TNS__GetEventsType();

public:
    TNS__GetEventsType( const TNS__GetEventsType& );
    TNS__GetEventsType &operator=( const TNS__GetEventsType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SetUserOofSettingsRequest : public TNS__BaseRequestType
{
public:
    void setMailbox( const T__EmailAddress& mailbox );
    T__EmailAddress mailbox() const;
    void setUserOofSettings( const T__UserOofSettings& userOofSettings );
    T__UserOofSettings userOofSettings() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SetUserOofSettingsRequest();
    ~TNS__SetUserOofSettingsRequest();

public:
    TNS__SetUserOofSettingsRequest( const TNS__SetUserOofSettingsRequest& );
    TNS__SetUserOofSettingsRequest &operator=( const TNS__SetUserOofSettingsRequest& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__CalendarItemType : public T__ItemType
{
public:
    void setUID( const QString& uID );
    QString uID() const;
    void setRecurrenceId( const KDDateTime& recurrenceId );
    KDDateTime recurrenceId() const;
    void setDateTimeStamp( const KDDateTime& dateTimeStamp );
    KDDateTime dateTimeStamp() const;
    void setStart( const KDDateTime& start );
    KDDateTime start() const;
    void setEnd( const KDDateTime& end );
    KDDateTime end() const;
    void setOriginalStart( const KDDateTime& originalStart );
    KDDateTime originalStart() const;
    void setIsAllDayEvent( bool isAllDayEvent );
    bool isAllDayEvent() const;
    void setLegacyFreeBusyStatus( const T__LegacyFreeBusyType& legacyFreeBusyStatus );
    T__LegacyFreeBusyType legacyFreeBusyStatus() const;
    void setLocation( const QString& location );
    QString location() const;
    void setWhen( const QString& when );
    QString when() const;
    void setIsMeeting( bool isMeeting );
    bool isMeeting() const;
    void setIsCancelled( bool isCancelled );
    bool isCancelled() const;
    void setIsRecurring( bool isRecurring );
    bool isRecurring() const;
    void setMeetingRequestWasSent( bool meetingRequestWasSent );
    bool meetingRequestWasSent() const;
    void setIsResponseRequested( bool isResponseRequested );
    bool isResponseRequested() const;
    void setCalendarItemType( const T__CalendarItemTypeType& calendarItemType );
    T__CalendarItemTypeType calendarItemType() const;
    void setMyResponseType( const T__ResponseTypeType& myResponseType );
    T__ResponseTypeType myResponseType() const;
    void setOrganizer( const T__SingleRecipientType& organizer );
    T__SingleRecipientType organizer() const;
    void setRequiredAttendees( const T__NonEmptyArrayOfAttendeesType& requiredAttendees );
    T__NonEmptyArrayOfAttendeesType requiredAttendees() const;
    void setOptionalAttendees( const T__NonEmptyArrayOfAttendeesType& optionalAttendees );
    T__NonEmptyArrayOfAttendeesType optionalAttendees() const;
    void setResources( const T__NonEmptyArrayOfAttendeesType& resources );
    T__NonEmptyArrayOfAttendeesType resources() const;
    void setConflictingMeetingCount( int conflictingMeetingCount );
    int conflictingMeetingCount() const;
    void setAdjacentMeetingCount( int adjacentMeetingCount );
    int adjacentMeetingCount() const;
    void setConflictingMeetings( const T__NonEmptyArrayOfAllItemsType& conflictingMeetings );
    T__NonEmptyArrayOfAllItemsType conflictingMeetings() const;
    void setAdjacentMeetings( const T__NonEmptyArrayOfAllItemsType& adjacentMeetings );
    T__NonEmptyArrayOfAllItemsType adjacentMeetings() const;
    void setDuration( const QString& duration );
    QString duration() const;
    void setTimeZone( const QString& timeZone );
    QString timeZone() const;
    void setAppointmentReplyTime( const KDDateTime& appointmentReplyTime );
    KDDateTime appointmentReplyTime() const;
    void setAppointmentSequenceNumber( int appointmentSequenceNumber );
    int appointmentSequenceNumber() const;
    void setAppointmentState( int appointmentState );
    int appointmentState() const;
    void setRecurrence( const T__RecurrenceType& recurrence );
    T__RecurrenceType recurrence() const;
    void setFirstOccurrence( const T__OccurrenceInfoType& firstOccurrence );
    T__OccurrenceInfoType firstOccurrence() const;
    void setLastOccurrence( const T__OccurrenceInfoType& lastOccurrence );
    T__OccurrenceInfoType lastOccurrence() const;
    void setModifiedOccurrences( const T__NonEmptyArrayOfOccurrenceInfoType& modifiedOccurrences );
    T__NonEmptyArrayOfOccurrenceInfoType modifiedOccurrences() const;
    void setDeletedOccurrences( const T__NonEmptyArrayOfDeletedOccurrencesType& deletedOccurrences );
    T__NonEmptyArrayOfDeletedOccurrencesType deletedOccurrences() const;
    void setMeetingTimeZone( const T__TimeZoneType& meetingTimeZone );
    T__TimeZoneType meetingTimeZone() const;
    void setConferenceType( int conferenceType );
    int conferenceType() const;
    void setAllowNewTimeProposal( bool allowNewTimeProposal );
    bool allowNewTimeProposal() const;
    void setIsOnlineMeeting( bool isOnlineMeeting );
    bool isOnlineMeeting() const;
    void setMeetingWorkspaceUrl( const QString& meetingWorkspaceUrl );
    QString meetingWorkspaceUrl() const;
    void setNetShowUrl( const QString& netShowUrl );
    QString netShowUrl() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CalendarItemType();
    ~T__CalendarItemType();

public:
    T__CalendarItemType( const T__CalendarItemType& );
    T__CalendarItemType &operator=( const T__CalendarItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__DeleteFolderFieldType : public T__FolderChangeDescriptionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DeleteFolderFieldType();
    ~T__DeleteFolderFieldType();

};

class T__ExcludesType : public T__SearchExpressionType
{
public:
    void setPath( const T__BasePathToElementType& path );
    T__BasePathToElementType path() const;
    void setBitmask( const T__ExcludesValueType& bitmask );
    T__ExcludesValueType bitmask() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ExcludesType();
    ~T__ExcludesType();

public:
    T__ExcludesType( const T__ExcludesType& );
    T__ExcludesType &operator=( const T__ExcludesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RootItemIdType : public T__BaseItemIdType
{
public:
    void setRootItemId( const QString& rootItemId );
    QString rootItemId() const;
    void setRootItemChangeKey( const QString& rootItemChangeKey );
    QString rootItemChangeKey() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__RootItemIdType();
    ~T__RootItemIdType();

public:
    T__RootItemIdType( const T__RootItemIdType& );
    T__RootItemIdType &operator=( const T__RootItemIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__GetAttachmentType : public TNS__BaseRequestType
{
public:
    void setAttachmentShape( const T__AttachmentResponseShapeType& attachmentShape );
    T__AttachmentResponseShapeType attachmentShape() const;
    void setAttachmentIds( const T__NonEmptyArrayOfRequestAttachmentIdsType& attachmentIds );
    T__NonEmptyArrayOfRequestAttachmentIdsType attachmentIds() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetAttachmentType();
    ~TNS__GetAttachmentType();

public:
    TNS__GetAttachmentType( const TNS__GetAttachmentType& );
    TNS__GetAttachmentType &operator=( const TNS__GetAttachmentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Represents an alternate mailbox folder or item Id.
 */
class T__AlternateIdType : public T__AlternateIdBaseType
{
public:
    void setId( const QString& id );
    QString id() const;
    void setMailbox( const T__NonEmptyStringType& mailbox );
    T__NonEmptyStringType mailbox() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AlternateIdType();
    ~T__AlternateIdType();

public:
    T__AlternateIdType( const T__AlternateIdType& );
    T__AlternateIdType &operator=( const T__AlternateIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TwoOperandExpressionType : public T__SearchExpressionType
{
public:
    void setPath( const T__BasePathToElementType& path );
    T__BasePathToElementType path() const;
    void setFieldURIOrConstant( const T__FieldURIOrConstantType& fieldURIOrConstant );
    T__FieldURIOrConstantType fieldURIOrConstant() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__TwoOperandExpressionType();
    virtual ~T__TwoOperandExpressionType();

public:
    T__TwoOperandExpressionType( const T__TwoOperandExpressionType& );
    T__TwoOperandExpressionType &operator=( const T__TwoOperandExpressionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__UpdateItemResponseMessageType : public TNS__ItemInfoResponseMessageType
{
public:
    void setConflictResults( const T__ConflictResultsType& conflictResults );
    T__ConflictResultsType conflictResults() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UpdateItemResponseMessageType();
    ~TNS__UpdateItemResponseMessageType();

public:
    TNS__UpdateItemResponseMessageType( const TNS__UpdateItemResponseMessageType& );
    TNS__UpdateItemResponseMessageType &operator=( const TNS__UpdateItemResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Response type for the ConvertId web method
 */
class TNS__ConvertIdResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ConvertIdResponseType();
    ~TNS__ConvertIdResponseType();

};

class TNS__FindItemType : public TNS__BaseRequestType
{
public:
    void setItemShape( const T__ItemResponseShapeType& itemShape );
    T__ItemResponseShapeType itemShape() const;
    void setIndexedPageItemView( const T__IndexedPageViewType& indexedPageItemView );
    T__IndexedPageViewType indexedPageItemView() const;
    void setFractionalPageItemView( const T__FractionalPageViewType& fractionalPageItemView );
    T__FractionalPageViewType fractionalPageItemView() const;
    void setCalendarView( const T__CalendarViewType& calendarView );
    T__CalendarViewType calendarView() const;
    void setContactsView( const T__ContactsViewType& contactsView );
    T__ContactsViewType contactsView() const;
    void setGroupBy( const T__GroupByType& groupBy );
    T__GroupByType groupBy() const;
    void setDistinguishedGroupBy( const T__DistinguishedGroupByType& distinguishedGroupBy );
    T__DistinguishedGroupByType distinguishedGroupBy() const;
    void setRestriction( const T__RestrictionType& restriction );
    T__RestrictionType restriction() const;
    void setSortOrder( const T__NonEmptyArrayOfFieldOrdersType& sortOrder );
    T__NonEmptyArrayOfFieldOrdersType sortOrder() const;
    void setParentFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& parentFolderIds );
    T__NonEmptyArrayOfBaseFolderIdsType parentFolderIds() const;
    void setTraversal( const T__ItemQueryTraversalType& traversal );
    T__ItemQueryTraversalType traversal() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FindItemType();
    ~TNS__FindItemType();

public:
    TNS__FindItemType( const TNS__FindItemType& );
    TNS__FindItemType &operator=( const TNS__FindItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Allows consumers to access standard groupings for FindItem queries. This is
    in contrast to the arbitrary (custom) groupings available via the
    t:GroupByType
 */
class T__DistinguishedGroupByType : public T__BaseGroupByType
{
public:
    void setStandardGroupBy( const T__StandardGroupByType& standardGroupBy );
    T__StandardGroupByType standardGroupBy() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DistinguishedGroupByType();
    ~T__DistinguishedGroupByType();

public:
    T__DistinguishedGroupByType( const T__DistinguishedGroupByType& );
    T__DistinguishedGroupByType &operator=( const T__DistinguishedGroupByType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ResolveNamesType : public TNS__BaseRequestType
{
public:
    void setParentFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& parentFolderIds );
    T__NonEmptyArrayOfBaseFolderIdsType parentFolderIds() const;
    void setUnresolvedEntry( const T__NonEmptyStringType& unresolvedEntry );
    T__NonEmptyStringType unresolvedEntry() const;
    void setReturnFullContactData( bool returnFullContactData );
    bool returnFullContactData() const;
    void setSearchScope( const T__ResolveNamesSearchScopeType& searchScope );
    T__ResolveNamesSearchScopeType searchScope() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ResolveNamesType();
    ~TNS__ResolveNamesType();

public:
    TNS__ResolveNamesType( const TNS__ResolveNamesType& );
    TNS__ResolveNamesType &operator=( const TNS__ResolveNamesType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PathToUnindexedFieldType : public T__BasePathToElementType
{
public:
    void setFieldURI( const T__UnindexedFieldURIType& fieldURI );
    T__UnindexedFieldURIType fieldURI() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PathToUnindexedFieldType();
    ~T__PathToUnindexedFieldType();

public:
    T__PathToUnindexedFieldType( const T__PathToUnindexedFieldType& );
    T__PathToUnindexedFieldType &operator=( const T__PathToUnindexedFieldType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Identifier for a distinguished folder
 */
class T__DistinguishedFolderIdType : public T__BaseFolderIdType
{
public:
    void setMailbox( const T__EmailAddressType& mailbox );
    T__EmailAddressType mailbox() const;
    void setId( const T__DistinguishedFolderIdNameType& id );
    T__DistinguishedFolderIdNameType id() const;
    void setChangeKey( const QString& changeKey );
    QString changeKey() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DistinguishedFolderIdType();
    ~T__DistinguishedFolderIdType();

public:
    T__DistinguishedFolderIdType( const T__DistinguishedFolderIdType& );
    T__DistinguishedFolderIdType &operator=( const T__DistinguishedFolderIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ItemAttachmentType : public T__AttachmentType
{
public:
    void setItem( const T__ItemType& item );
    T__ItemType item() const;
    void setMessage( const T__MessageType& message );
    T__MessageType message() const;
    void setCalendarItem( const T__CalendarItemType& calendarItem );
    T__CalendarItemType calendarItem() const;
    void setContact( const T__ContactItemType& contact );
    T__ContactItemType contact() const;
    void setMeetingMessage( const T__MeetingMessageType& meetingMessage );
    T__MeetingMessageType meetingMessage() const;
    void setMeetingRequest( const T__MeetingRequestMessageType& meetingRequest );
    T__MeetingRequestMessageType meetingRequest() const;
    void setMeetingResponse( const T__MeetingResponseMessageType& meetingResponse );
    T__MeetingResponseMessageType meetingResponse() const;
    void setMeetingCancellation( const T__MeetingCancellationMessageType& meetingCancellation );
    T__MeetingCancellationMessageType meetingCancellation() const;
    void setTask( const T__TaskType& task );
    T__TaskType task() const;
    void setPostItem( const T__PostItemType& postItem );
    T__PostItemType postItem() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ItemAttachmentType();
    ~T__ItemAttachmentType();

public:
    T__ItemAttachmentType( const T__ItemAttachmentType& );
    T__ItemAttachmentType &operator=( const T__ItemAttachmentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SubscribeType : public TNS__BaseRequestType
{
public:
    void setPullSubscriptionRequest( const T__PullSubscriptionRequestType& pullSubscriptionRequest );
    T__PullSubscriptionRequestType pullSubscriptionRequest() const;
    void setPushSubscriptionRequest( const T__PushSubscriptionRequestType& pushSubscriptionRequest );
    T__PushSubscriptionRequestType pushSubscriptionRequest() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SubscribeType();
    ~TNS__SubscribeType();

public:
    TNS__SubscribeType( const TNS__SubscribeType& );
    TNS__SubscribeType &operator=( const TNS__SubscribeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__IndexedPageViewType : public T__BasePagingType
{
public:
    void setOffset( int offset );
    int offset() const;
    void setBasePoint( const T__IndexBasePointType& basePoint );
    T__IndexBasePointType basePoint() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__IndexedPageViewType();
    ~T__IndexedPageViewType();

public:
    T__IndexedPageViewType( const T__IndexedPageViewType& );
    T__IndexedPageViewType &operator=( const T__IndexedPageViewType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__UpdateItemType : public TNS__BaseRequestType
{
public:
    void setSavedItemFolderId( const T__TargetFolderIdType& savedItemFolderId );
    T__TargetFolderIdType savedItemFolderId() const;
    void setItemChanges( const T__NonEmptyArrayOfItemChangesType& itemChanges );
    T__NonEmptyArrayOfItemChangesType itemChanges() const;
    void setConflictResolution( const T__ConflictResolutionType& conflictResolution );
    T__ConflictResolutionType conflictResolution() const;
    void setMessageDisposition( const T__MessageDispositionType& messageDisposition );
    T__MessageDispositionType messageDisposition() const;
    void setSendMeetingInvitationsOrCancellations( const T__CalendarItemUpdateOperationType& sendMeetingInvitationsOrCancellations );
    T__CalendarItemUpdateOperationType sendMeetingInvitationsOrCancellations() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UpdateItemType();
    ~TNS__UpdateItemType();

public:
    TNS__UpdateItemType( const TNS__UpdateItemType& );
    TNS__UpdateItemType &operator=( const TNS__UpdateItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__FolderInfoResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setFolders( const T__ArrayOfFoldersType& folders );
    T__ArrayOfFoldersType folders() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FolderInfoResponseMessageType();
    ~TNS__FolderInfoResponseMessageType();

public:
    TNS__FolderInfoResponseMessageType( const TNS__FolderInfoResponseMessageType& );
    TNS__FolderInfoResponseMessageType &operator=( const TNS__FolderInfoResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__DeleteAttachmentResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DeleteAttachmentResponseType();
    ~TNS__DeleteAttachmentResponseType();

};

class T__IsEqualToType : public T__TwoOperandExpressionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__IsEqualToType();
    ~T__IsEqualToType();

};

class T__RequestAttachmentIdType : public T__BaseItemIdType
{
public:
    void setId( const QString& id );
    QString id() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__RequestAttachmentIdType();
    virtual ~T__RequestAttachmentIdType();

public:
    T__RequestAttachmentIdType( const T__RequestAttachmentIdType& );
    T__RequestAttachmentIdType &operator=( const T__RequestAttachmentIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__CalendarViewType : public T__BasePagingType
{
public:
    void setStartDate( const KDDateTime& startDate );
    KDDateTime startDate() const;
    void setEndDate( const KDDateTime& endDate );
    KDDateTime endDate() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CalendarViewType();
    ~T__CalendarViewType();

public:
    T__CalendarViewType( const T__CalendarViewType& );
    T__CalendarViewType &operator=( const T__CalendarViewType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__DeleteItemFieldType : public T__ItemChangeDescriptionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DeleteItemFieldType();
    ~T__DeleteItemFieldType();

};

class TNS__SubscribeResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setSubscriptionId( const T__SubscriptionIdType& subscriptionId );
    T__SubscriptionIdType subscriptionId() const;
    void setWatermark( const T__WatermarkType& watermark );
    T__WatermarkType watermark() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SubscribeResponseMessageType();
    ~TNS__SubscribeResponseMessageType();

public:
    TNS__SubscribeResponseMessageType( const TNS__SubscribeResponseMessageType& );
    TNS__SubscribeResponseMessageType &operator=( const TNS__SubscribeResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CreateItemType : public TNS__BaseRequestType
{
public:
    void setSavedItemFolderId( const T__TargetFolderIdType& savedItemFolderId );
    T__TargetFolderIdType savedItemFolderId() const;
    void setItems( const T__NonEmptyArrayOfAllItemsType& items );
    T__NonEmptyArrayOfAllItemsType items() const;
    void setMessageDisposition( const T__MessageDispositionType& messageDisposition );
    T__MessageDispositionType messageDisposition() const;
    void setSendMeetingInvitations( const T__CalendarItemCreateOrDeleteOperationType& sendMeetingInvitations );
    T__CalendarItemCreateOrDeleteOperationType sendMeetingInvitations() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CreateItemType();
    ~TNS__CreateItemType();

public:
    TNS__CreateItemType( const TNS__CreateItemType& );
    TNS__CreateItemType &operator=( const TNS__CreateItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__TasksFolderType : public T__FolderType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TasksFolderType();
    ~T__TasksFolderType();

};

class TNS__GetFolderResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetFolderResponseType();
    ~TNS__GetFolderResponseType();

};

class T__FileAttachmentType : public T__AttachmentType
{
public:
    void setContent( const QByteArray& content );
    QByteArray content() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__FileAttachmentType();
    ~T__FileAttachmentType();

public:
    T__FileAttachmentType( const T__FileAttachmentType& );
    T__FileAttachmentType &operator=( const T__FileAttachmentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__NoEndRecurrenceRangeType : public T__RecurrenceRangeBaseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__NoEndRecurrenceRangeType();
    ~T__NoEndRecurrenceRangeType();

};

class T__CalendarFolderType : public T__BaseFolderType
{
public:
    void setPermissionSet( const T__CalendarPermissionSetType& permissionSet );
    T__CalendarPermissionSetType permissionSet() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CalendarFolderType();
    ~T__CalendarFolderType();

public:
    T__CalendarFolderType( const T__CalendarFolderType& );
    T__CalendarFolderType &operator=( const T__CalendarFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SyncFolderHierarchyResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SyncFolderHierarchyResponseType();
    ~TNS__SyncFolderHierarchyResponseType();

};

class TNS__GetItemResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetItemResponseType();
    ~TNS__GetItemResponseType();

};

class TNS__GetEventsResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setNotification( const T__NotificationType& notification );
    T__NotificationType notification() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetEventsResponseMessageType();
    ~TNS__GetEventsResponseMessageType();

public:
    TNS__GetEventsResponseMessageType( const TNS__GetEventsResponseMessageType& );
    TNS__GetEventsResponseMessageType &operator=( const TNS__GetEventsResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__SendNotificationResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SendNotificationResponseType();
    ~TNS__SendNotificationResponseType();

};

class TNS__UnsubscribeType : public TNS__BaseRequestType
{
public:
    void setSubscriptionId( const T__SubscriptionIdType& subscriptionId );
    T__SubscriptionIdType subscriptionId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UnsubscribeType();
    ~TNS__UnsubscribeType();

public:
    TNS__UnsubscribeType( const TNS__UnsubscribeType& );
    TNS__UnsubscribeType &operator=( const TNS__UnsubscribeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__UpdateFolderType : public TNS__BaseRequestType
{
public:
    void setFolderChanges( const T__NonEmptyArrayOfFolderChangesType& folderChanges );
    T__NonEmptyArrayOfFolderChangesType folderChanges() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UpdateFolderType();
    ~TNS__UpdateFolderType();

public:
    TNS__UpdateFolderType( const TNS__UpdateFolderType& );
    TNS__UpdateFolderType &operator=( const TNS__UpdateFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PathToIndexedFieldType : public T__BasePathToElementType
{
public:
    void setFieldURI( const T__DictionaryURIType& fieldURI );
    T__DictionaryURIType fieldURI() const;
    void setFieldIndex( const QString& fieldIndex );
    QString fieldIndex() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PathToIndexedFieldType();
    ~T__PathToIndexedFieldType();

public:
    T__PathToIndexedFieldType( const T__PathToIndexedFieldType& );
    T__PathToIndexedFieldType &operator=( const T__PathToIndexedFieldType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CreateAttachmentType : public TNS__BaseRequestType
{
public:
    void setParentItemId( const T__ItemIdType& parentItemId );
    T__ItemIdType parentItemId() const;
    void setAttachments( const T__NonEmptyArrayOfAttachmentsType& attachments );
    T__NonEmptyArrayOfAttachmentsType attachments() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CreateAttachmentType();
    ~TNS__CreateAttachmentType();

public:
    TNS__CreateAttachmentType( const TNS__CreateAttachmentType& );
    TNS__CreateAttachmentType &operator=( const TNS__CreateAttachmentType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CreateManagedFolderResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CreateManagedFolderResponseType();
    ~TNS__CreateManagedFolderResponseType();

};

class TNS__BaseDelegateType : public TNS__BaseRequestType
{
public:
    void setMailbox( const T__EmailAddressType& mailbox );
    T__EmailAddressType mailbox() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    TNS__BaseDelegateType();
    virtual ~TNS__BaseDelegateType();

public:
    TNS__BaseDelegateType( const TNS__BaseDelegateType& );
    TNS__BaseDelegateType &operator=( const TNS__BaseDelegateType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__BaseMoveCopyFolderType : public TNS__BaseRequestType
{
public:
    void setToFolderId( const T__TargetFolderIdType& toFolderId );
    T__TargetFolderIdType toFolderId() const;
    void setFolderIds( const T__NonEmptyArrayOfBaseFolderIdsType& folderIds );
    T__NonEmptyArrayOfBaseFolderIdsType folderIds() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    TNS__BaseMoveCopyFolderType();
    virtual ~TNS__BaseMoveCopyFolderType();

public:
    TNS__BaseMoveCopyFolderType( const TNS__BaseMoveCopyFolderType& );
    TNS__BaseMoveCopyFolderType &operator=( const TNS__BaseMoveCopyFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__MessageType : public T__ItemType
{
public:
    void setSender( const T__SingleRecipientType& sender );
    T__SingleRecipientType sender() const;
    void setToRecipients( const T__ArrayOfRecipientsType& toRecipients );
    T__ArrayOfRecipientsType toRecipients() const;
    void setCcRecipients( const T__ArrayOfRecipientsType& ccRecipients );
    T__ArrayOfRecipientsType ccRecipients() const;
    void setBccRecipients( const T__ArrayOfRecipientsType& bccRecipients );
    T__ArrayOfRecipientsType bccRecipients() const;
    void setIsReadReceiptRequested( bool isReadReceiptRequested );
    bool isReadReceiptRequested() const;
    void setIsDeliveryReceiptRequested( bool isDeliveryReceiptRequested );
    bool isDeliveryReceiptRequested() const;
    void setConversationIndex( const QByteArray& conversationIndex );
    QByteArray conversationIndex() const;
    void setConversationTopic( const QString& conversationTopic );
    QString conversationTopic() const;
    void setFrom( const T__SingleRecipientType& from );
    T__SingleRecipientType from() const;
    void setInternetMessageId( const QString& internetMessageId );
    QString internetMessageId() const;
    void setIsRead( bool isRead );
    bool isRead() const;
    void setIsResponseRequested( bool isResponseRequested );
    bool isResponseRequested() const;
    void setReferences( const QString& references );
    QString references() const;
    void setReplyTo( const T__ArrayOfRecipientsType& replyTo );
    T__ArrayOfRecipientsType replyTo() const;
    void setReceivedBy( const T__SingleRecipientType& receivedBy );
    T__SingleRecipientType receivedBy() const;
    void setReceivedRepresenting( const T__SingleRecipientType& receivedRepresenting );
    T__SingleRecipientType receivedRepresenting() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__MessageType();
    virtual ~T__MessageType();

public:
    T__MessageType( const T__MessageType& );
    T__MessageType &operator=( const T__MessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ExpandDLResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ExpandDLResponseType();
    ~TNS__ExpandDLResponseType();

};

class T__IntervalRecurrencePatternBaseType : public T__RecurrencePatternBaseType
{
public:
    void setInterval( int interval );
    int interval() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__IntervalRecurrencePatternBaseType();
    virtual ~T__IntervalRecurrencePatternBaseType();

public:
    T__IntervalRecurrencePatternBaseType( const T__IntervalRecurrencePatternBaseType& );
    T__IntervalRecurrencePatternBaseType &operator=( const T__IntervalRecurrencePatternBaseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__MoveItemType : public TNS__BaseMoveCopyItemType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__MoveItemType();
    ~TNS__MoveItemType();

};

class T__RecurringMasterItemIdType : public T__BaseItemIdType
{
public:
    void setOccurrenceId( const T__DerivedItemIdType& occurrenceId );
    T__DerivedItemIdType occurrenceId() const;
    void setChangeKey( const QString& changeKey );
    QString changeKey() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__RecurringMasterItemIdType();
    ~T__RecurringMasterItemIdType();

public:
    T__RecurringMasterItemIdType( const T__RecurringMasterItemIdType& );
    T__RecurringMasterItemIdType &operator=( const T__RecurringMasterItemIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SearchFolderType : public T__FolderType
{
public:
    void setSearchParameters( const T__SearchParametersType& searchParameters );
    T__SearchParametersType searchParameters() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SearchFolderType();
    ~T__SearchFolderType();

public:
    T__SearchFolderType( const T__SearchFolderType& );
    T__SearchFolderType &operator=( const T__SearchFolderType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__UnknownAttendeeConflictData : public T__AttendeeConflictData
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__UnknownAttendeeConflictData();
    ~T__UnknownAttendeeConflictData();

};

class TNS__CopyItemResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CopyItemResponseType();
    ~TNS__CopyItemResponseType();

};

class TNS__AddDelegateResponseMessageType : public TNS__BaseDelegateResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__AddDelegateResponseMessageType();
    ~TNS__AddDelegateResponseMessageType();

};

class T__CalendarPermissionType : public T__BasePermissionType
{
public:
    void setReadItems( const T__CalendarPermissionReadAccessType& readItems );
    T__CalendarPermissionReadAccessType readItems() const;
    void setCalendarPermissionLevel( const T__CalendarPermissionLevelType& calendarPermissionLevel );
    T__CalendarPermissionLevelType calendarPermissionLevel() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CalendarPermissionType();
    ~T__CalendarPermissionType();

public:
    T__CalendarPermissionType( const T__CalendarPermissionType& );
    T__CalendarPermissionType &operator=( const T__CalendarPermissionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__OrType : public T__MultipleOperandBooleanExpressionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__OrType();
    ~T__OrType();

};

class TNS__CreateItemResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CreateItemResponseType();
    ~TNS__CreateItemResponseType();

};

class TNS__SendItemResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__SendItemResponseType();
    ~TNS__SendItemResponseType();

};

class TNS__GetUserAvailabilityRequestType : public TNS__BaseRequestType
{
public:
    void setTimeZone( const T__SerializableTimeZone& timeZone );
    T__SerializableTimeZone timeZone() const;
    void setMailboxDataArray( const T__ArrayOfMailboxData& mailboxDataArray );
    T__ArrayOfMailboxData mailboxDataArray() const;
    void setFreeBusyViewOptions( const T__FreeBusyViewOptionsType& freeBusyViewOptions );
    T__FreeBusyViewOptionsType freeBusyViewOptions() const;
    void setSuggestionsViewOptions( const T__SuggestionsViewOptionsType& suggestionsViewOptions );
    T__SuggestionsViewOptionsType suggestionsViewOptions() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetUserAvailabilityRequestType();
    ~TNS__GetUserAvailabilityRequestType();

public:
    TNS__GetUserAvailabilityRequestType( const TNS__GetUserAvailabilityRequestType& );
    TNS__GetUserAvailabilityRequestType &operator=( const TNS__GetUserAvailabilityRequestType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__ContainsExpressionType : public T__SearchExpressionType
{
public:
    void setPath( const T__BasePathToElementType& path );
    T__BasePathToElementType path() const;
    void setConstant( const T__ConstantValueType& constant );
    T__ConstantValueType constant() const;
    void setContainmentMode( const T__ContainmentModeType& containmentMode );
    T__ContainmentModeType containmentMode() const;
    void setContainmentComparison( const T__ContainmentComparisonType& containmentComparison );
    T__ContainmentComparisonType containmentComparison() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ContainsExpressionType();
    ~T__ContainsExpressionType();

public:
    T__ContainsExpressionType( const T__ContainsExpressionType& );
    T__ContainsExpressionType &operator=( const T__ContainsExpressionType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__IsGreaterThanOrEqualToType : public T__TwoOperandExpressionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__IsGreaterThanOrEqualToType();
    ~T__IsGreaterThanOrEqualToType();

};

class TNS__GetUserOofSettingsRequest : public TNS__BaseRequestType
{
public:
    void setMailbox( const T__EmailAddress& mailbox );
    T__EmailAddress mailbox() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetUserOofSettingsRequest();
    ~TNS__GetUserOofSettingsRequest();

public:
    TNS__GetUserOofSettingsRequest( const TNS__GetUserOofSettingsRequest& );
    TNS__GetUserOofSettingsRequest &operator=( const TNS__GetUserOofSettingsRequest& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RelativeYearlyRecurrencePatternType : public T__RecurrencePatternBaseType
{
public:
    void setDaysOfWeek( const T__DayOfWeekType& daysOfWeek );
    T__DayOfWeekType daysOfWeek() const;
    void setDayOfWeekIndex( const T__DayOfWeekIndexType& dayOfWeekIndex );
    T__DayOfWeekIndexType dayOfWeekIndex() const;
    void setMonth( const T__MonthNamesType& month );
    T__MonthNamesType month() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__RelativeYearlyRecurrencePatternType();
    ~T__RelativeYearlyRecurrencePatternType();

public:
    T__RelativeYearlyRecurrencePatternType( const T__RelativeYearlyRecurrencePatternType& );
    T__RelativeYearlyRecurrencePatternType &operator=( const T__RelativeYearlyRecurrencePatternType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ResolveNamesResponseType : public TNS__BaseResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ResolveNamesResponseType();
    ~TNS__ResolveNamesResponseType();

};

class TNS__DelegateUserResponseMessageType : public TNS__ResponseMessageType
{
public:
    void setDelegateUser( const T__DelegateUserType& delegateUser );
    T__DelegateUserType delegateUser() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__DelegateUserResponseMessageType();
    ~TNS__DelegateUserResponseMessageType();

public:
    TNS__DelegateUserResponseMessageType( const TNS__DelegateUserResponseMessageType& );
    TNS__DelegateUserResponseMessageType &operator=( const TNS__DelegateUserResponseMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__UpdateDelegateResponseMessageType : public TNS__BaseDelegateResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UpdateDelegateResponseMessageType();
    ~TNS__UpdateDelegateResponseMessageType();

};

class T__EndDateRecurrenceRangeType : public T__RecurrenceRangeBaseType
{
public:
    void setEndDate( const QDate& endDate );
    QDate endDate() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__EndDateRecurrenceRangeType();
    ~T__EndDateRecurrenceRangeType();

public:
    T__EndDateRecurrenceRangeType( const T__EndDateRecurrenceRangeType& );
    T__EndDateRecurrenceRangeType &operator=( const T__EndDateRecurrenceRangeType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__AppendToFolderFieldType : public T__FolderChangeDescriptionType
{
public:
    void setFolder( const T__FolderType& folder );
    T__FolderType folder() const;
    void setCalendarFolder( const T__CalendarFolderType& calendarFolder );
    T__CalendarFolderType calendarFolder() const;
    void setContactsFolder( const T__ContactsFolderType& contactsFolder );
    T__ContactsFolderType contactsFolder() const;
    void setSearchFolder( const T__SearchFolderType& searchFolder );
    T__SearchFolderType searchFolder() const;
    void setTasksFolder( const T__TasksFolderType& tasksFolder );
    T__TasksFolderType tasksFolder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AppendToFolderFieldType();
    ~T__AppendToFolderFieldType();

public:
    T__AppendToFolderFieldType( const T__AppendToFolderFieldType& );
    T__AppendToFolderFieldType &operator=( const T__AppendToFolderFieldType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class ResolveNamesJob : public KDSoapJob
{
    Q_OBJECT

public:
    ResolveNamesJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__ResolveNamesType& arg0 );
    TNS__ResolveNamesType request() const;
    TNS__ResolveNamesResponseType resolveNamesResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__ResolveNamesType mRequest;
    TNS__ResolveNamesResponseType mResultResolveNamesResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class ExpandDLJob : public KDSoapJob
{
    Q_OBJECT

public:
    ExpandDLJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__ExpandDLType& arg0 );
    TNS__ExpandDLType request() const;
    TNS__ExpandDLResponseType expandDLResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__ExpandDLType mRequest;
    TNS__ExpandDLResponseType mResultExpandDLResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class FindFolderJob : public KDSoapJob
{
    Q_OBJECT

public:
    FindFolderJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__FindFolderType& arg0 );
    TNS__FindFolderType request() const;
    TNS__FindFolderResponseType findFolderResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__FindFolderType mRequest;
    TNS__FindFolderResponseType mResultFindFolderResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class FindItemJob : public KDSoapJob
{
    Q_OBJECT

public:
    FindItemJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__FindItemType& arg0 );
    TNS__FindItemType request() const;
    TNS__FindItemResponseType findItemResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__FindItemType mRequest;
    TNS__FindItemResponseType mResultFindItemResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class GetFolderJob : public KDSoapJob
{
    Q_OBJECT

public:
    GetFolderJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__GetFolderType& arg0 );
    TNS__GetFolderType request() const;
    TNS__GetFolderResponseType getFolderResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__GetFolderType mRequest;
    TNS__GetFolderResponseType mResultGetFolderResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class ConvertIdJob : public KDSoapJob
{
    Q_OBJECT

public:
    ConvertIdJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__ConvertIdType& arg0 );
    TNS__ConvertIdType request() const;
    TNS__ConvertIdResponseType convertIdResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__ConvertIdType mRequest;
    TNS__ConvertIdResponseType mResultConvertIdResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class CreateFolderJob : public KDSoapJob
{
    Q_OBJECT

public:
    CreateFolderJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__CreateFolderType& arg0 );
    TNS__CreateFolderType request() const;
    TNS__CreateFolderResponseType createFolderResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__CreateFolderType mRequest;
    TNS__CreateFolderResponseType mResultCreateFolderResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class DeleteFolderJob : public KDSoapJob
{
    Q_OBJECT

public:
    DeleteFolderJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__DeleteFolderType& arg0 );
    TNS__DeleteFolderType request() const;
    TNS__DeleteFolderResponseType deleteFolderResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__DeleteFolderType mRequest;
    TNS__DeleteFolderResponseType mResultDeleteFolderResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class UpdateFolderJob : public KDSoapJob
{
    Q_OBJECT

public:
    UpdateFolderJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__UpdateFolderType& arg0 );
    TNS__UpdateFolderType request() const;
    TNS__UpdateFolderResponseType updateFolderResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__UpdateFolderType mRequest;
    TNS__UpdateFolderResponseType mResultUpdateFolderResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class SubscribeJob : public KDSoapJob
{
    Q_OBJECT

public:
    SubscribeJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__SubscribeType& arg0 );
    TNS__SubscribeType request() const;
    TNS__SubscribeResponseType subscribeResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__SubscribeType mRequest;
    TNS__SubscribeResponseType mResultSubscribeResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class UnsubscribeJob : public KDSoapJob
{
    Q_OBJECT

public:
    UnsubscribeJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__UnsubscribeType& arg0 );
    TNS__UnsubscribeType request() const;
    TNS__UnsubscribeResponseType unsubscribeResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__UnsubscribeType mRequest;
    TNS__UnsubscribeResponseType mResultUnsubscribeResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class GetEventsJob : public KDSoapJob
{
    Q_OBJECT

public:
    GetEventsJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__GetEventsType& arg0 );
    TNS__GetEventsType request() const;
    TNS__GetEventsResponseType getEventsResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__GetEventsType mRequest;
    TNS__GetEventsResponseType mResultGetEventsResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class SyncFolderHierarchyJob : public KDSoapJob
{
    Q_OBJECT

public:
    SyncFolderHierarchyJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__SyncFolderHierarchyType& arg0 );
    TNS__SyncFolderHierarchyType request() const;
    TNS__SyncFolderHierarchyResponseType syncFolderHierarchyResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__SyncFolderHierarchyType mRequest;
    TNS__SyncFolderHierarchyResponseType mResultSyncFolderHierarchyResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class SyncFolderItemsJob : public KDSoapJob
{
    Q_OBJECT

public:
    SyncFolderItemsJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__SyncFolderItemsType& arg0 );
    TNS__SyncFolderItemsType request() const;
    TNS__SyncFolderItemsResponseType syncFolderItemsResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__SyncFolderItemsType mRequest;
    TNS__SyncFolderItemsResponseType mResultSyncFolderItemsResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class CreateManagedFolderJob : public KDSoapJob
{
    Q_OBJECT

public:
    CreateManagedFolderJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__CreateManagedFolderRequestType& arg0 );
    TNS__CreateManagedFolderRequestType request() const;
    TNS__CreateManagedFolderResponseType createManagedFolderResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__CreateManagedFolderRequestType mRequest;
    TNS__CreateManagedFolderResponseType mResultCreateManagedFolderResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class GetItemJob : public KDSoapJob
{
    Q_OBJECT

public:
    GetItemJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__GetItemType& arg0 );
    TNS__GetItemType request() const;
    TNS__GetItemResponseType getItemResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__GetItemType mRequest;
    TNS__GetItemResponseType mResultGetItemResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class CreateItemJob : public KDSoapJob
{
    Q_OBJECT

public:
    CreateItemJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__CreateItemType& arg0 );
    TNS__CreateItemType request() const;
    TNS__CreateItemResponseType createItemResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__CreateItemType mRequest;
    TNS__CreateItemResponseType mResultCreateItemResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class DeleteItemJob : public KDSoapJob
{
    Q_OBJECT

public:
    DeleteItemJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__DeleteItemType& arg0 );
    TNS__DeleteItemType request() const;
    TNS__DeleteItemResponseType deleteItemResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__DeleteItemType mRequest;
    TNS__DeleteItemResponseType mResultDeleteItemResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class UpdateItemJob : public KDSoapJob
{
    Q_OBJECT

public:
    UpdateItemJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__UpdateItemType& arg0 );
    TNS__UpdateItemType request() const;
    TNS__UpdateItemResponseType updateItemResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__UpdateItemType mRequest;
    TNS__UpdateItemResponseType mResultUpdateItemResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class SendItemJob : public KDSoapJob
{
    Q_OBJECT

public:
    SendItemJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__SendItemType& arg0 );
    TNS__SendItemType request() const;
    TNS__SendItemResponseType sendItemResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__SendItemType mRequest;
    TNS__SendItemResponseType mResultSendItemResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class MoveItemJob : public KDSoapJob
{
    Q_OBJECT

public:
    MoveItemJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__MoveItemType& arg0 );
    TNS__MoveItemType request() const;
    TNS__MoveItemResponseType moveItemResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__MoveItemType mRequest;
    TNS__MoveItemResponseType mResultMoveItemResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class CopyItemJob : public KDSoapJob
{
    Q_OBJECT

public:
    CopyItemJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__CopyItemType& arg0 );
    TNS__CopyItemType request() const;
    TNS__CopyItemResponseType copyItemResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__CopyItemType mRequest;
    TNS__CopyItemResponseType mResultCopyItemResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class CreateAttachmentJob : public KDSoapJob
{
    Q_OBJECT

public:
    CreateAttachmentJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__CreateAttachmentType& arg0 );
    TNS__CreateAttachmentType request() const;
    TNS__CreateAttachmentResponseType createAttachmentResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__CreateAttachmentType mRequest;
    TNS__CreateAttachmentResponseType mResultCreateAttachmentResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class DeleteAttachmentJob : public KDSoapJob
{
    Q_OBJECT

public:
    DeleteAttachmentJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__DeleteAttachmentType& arg0 );
    TNS__DeleteAttachmentType request() const;
    TNS__DeleteAttachmentResponseType deleteAttachmentResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__DeleteAttachmentType mRequest;
    TNS__DeleteAttachmentResponseType mResultDeleteAttachmentResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class GetAttachmentJob : public KDSoapJob
{
    Q_OBJECT

public:
    GetAttachmentJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__GetAttachmentType& arg0 );
    TNS__GetAttachmentType request() const;
    TNS__GetAttachmentResponseType getAttachmentResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__GetAttachmentType mRequest;
    TNS__GetAttachmentResponseType mResultGetAttachmentResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class GetUserAvailabilityJob : public KDSoapJob
{
    Q_OBJECT

public:
    GetUserAvailabilityJob( ExchangeServices* service, QObject* parent = 0 );
    void setGetUserAvailabilityRequest( const TNS__GetUserAvailabilityRequestType& arg0 );
    TNS__GetUserAvailabilityRequestType getUserAvailabilityRequest() const;
    TNS__GetUserAvailabilityResponseType getUserAvailabilityResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__GetUserAvailabilityRequestType mGetUserAvailabilityRequest;
    TNS__GetUserAvailabilityResponseType mResultGetUserAvailabilityResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class GetUserOofSettingsJob : public KDSoapJob
{
    Q_OBJECT

public:
    GetUserOofSettingsJob( ExchangeServices* service, QObject* parent = 0 );
    void setGetUserOofSettingsRequest( const TNS__GetUserOofSettingsRequest& arg0 );
    TNS__GetUserOofSettingsRequest getUserOofSettingsRequest() const;
    TNS__GetUserOofSettingsResponse getUserOofSettingsResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__GetUserOofSettingsRequest mGetUserOofSettingsRequest;
    TNS__GetUserOofSettingsResponse mResultGetUserOofSettingsResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class SetUserOofSettingsJob : public KDSoapJob
{
    Q_OBJECT

public:
    SetUserOofSettingsJob( ExchangeServices* service, QObject* parent = 0 );
    void setSetUserOofSettingsRequest( const TNS__SetUserOofSettingsRequest& arg0 );
    TNS__SetUserOofSettingsRequest setUserOofSettingsRequest() const;
    TNS__SetUserOofSettingsResponse setUserOofSettingsResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__SetUserOofSettingsRequest mSetUserOofSettingsRequest;
    TNS__SetUserOofSettingsResponse mResultSetUserOofSettingsResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class T__ModifiedEventType : public T__BaseObjectChangedEventType
{
public:
    void setUnreadCount( int unreadCount );
    int unreadCount() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ModifiedEventType();
    ~T__ModifiedEventType();

public:
    T__ModifiedEventType( const T__ModifiedEventType& );
    T__ModifiedEventType &operator=( const T__ModifiedEventType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__RemoveDelegateResponseMessageType : public TNS__BaseDelegateResponseMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__RemoveDelegateResponseMessageType();
    ~TNS__RemoveDelegateResponseMessageType();

};

class T__RegeneratingPatternBaseType : public T__IntervalRecurrencePatternBaseType
{
public:
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__RegeneratingPatternBaseType();
    virtual ~T__RegeneratingPatternBaseType();

};

class T__DailyRegeneratingPatternType : public T__RegeneratingPatternBaseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DailyRegeneratingPatternType();
    ~T__DailyRegeneratingPatternType();

};

class T__WeeklyRecurrencePatternType : public T__IntervalRecurrencePatternBaseType
{
public:
    void setDaysOfWeek( const T__DaysOfWeekType& daysOfWeek );
    T__DaysOfWeekType daysOfWeek() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__WeeklyRecurrencePatternType();
    ~T__WeeklyRecurrencePatternType();

public:
    T__WeeklyRecurrencePatternType( const T__WeeklyRecurrencePatternType& );
    T__WeeklyRecurrencePatternType &operator=( const T__WeeklyRecurrencePatternType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__AppendToItemFieldType : public T__ItemChangeDescriptionType
{
public:
    void setItem( const T__ItemType& item );
    T__ItemType item() const;
    void setMessage( const T__MessageType& message );
    T__MessageType message() const;
    void setCalendarItem( const T__CalendarItemType& calendarItem );
    T__CalendarItemType calendarItem() const;
    void setContact( const T__ContactItemType& contact );
    T__ContactItemType contact() const;
    void setDistributionList( const T__DistributionListType& distributionList );
    T__DistributionListType distributionList() const;
    void setMeetingMessage( const T__MeetingMessageType& meetingMessage );
    T__MeetingMessageType meetingMessage() const;
    void setMeetingRequest( const T__MeetingRequestMessageType& meetingRequest );
    T__MeetingRequestMessageType meetingRequest() const;
    void setMeetingResponse( const T__MeetingResponseMessageType& meetingResponse );
    T__MeetingResponseMessageType meetingResponse() const;
    void setMeetingCancellation( const T__MeetingCancellationMessageType& meetingCancellation );
    T__MeetingCancellationMessageType meetingCancellation() const;
    void setTask( const T__TaskType& task );
    T__TaskType task() const;
    void setPostItem( const T__PostItemType& postItem );
    T__PostItemType postItem() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AppendToItemFieldType();
    ~T__AppendToItemFieldType();

public:
    T__AppendToItemFieldType( const T__AppendToItemFieldType& );
    T__AppendToItemFieldType &operator=( const T__AppendToItemFieldType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__IsGreaterThanType : public T__TwoOperandExpressionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__IsGreaterThanType();
    ~T__IsGreaterThanType();

};

class T__MeetingMessageType : public T__MessageType
{
public:
    void setAssociatedCalendarItemId( const T__ItemIdType& associatedCalendarItemId );
    T__ItemIdType associatedCalendarItemId() const;
    void setIsDelegated( bool isDelegated );
    bool isDelegated() const;
    void setIsOutOfDate( bool isOutOfDate );
    bool isOutOfDate() const;
    void setHasBeenProcessed( bool hasBeenProcessed );
    bool hasBeenProcessed() const;
    void setResponseType( const T__ResponseTypeType& responseType );
    T__ResponseTypeType responseType() const;
    void setUID( const QString& uID );
    QString uID() const;
    void setRecurrenceId( const KDDateTime& recurrenceId );
    KDDateTime recurrenceId() const;
    void setDateTimeStamp( const KDDateTime& dateTimeStamp );
    KDDateTime dateTimeStamp() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__MeetingMessageType();
    virtual ~T__MeetingMessageType();

public:
    T__MeetingMessageType( const T__MeetingMessageType& );
    T__MeetingMessageType &operator=( const T__MeetingMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__GetDelegateType : public TNS__BaseDelegateType
{
public:
    void setUserIds( const T__ArrayOfUserIdType& userIds );
    T__ArrayOfUserIdType userIds() const;
    void setIncludePermissions( bool includePermissions );
    bool includePermissions() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__GetDelegateType();
    ~TNS__GetDelegateType();

public:
    TNS__GetDelegateType( const TNS__GetDelegateType& );
    TNS__GetDelegateType &operator=( const TNS__GetDelegateType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SetFolderFieldType : public T__FolderChangeDescriptionType
{
public:
    void setFolder( const T__FolderType& folder );
    T__FolderType folder() const;
    void setCalendarFolder( const T__CalendarFolderType& calendarFolder );
    T__CalendarFolderType calendarFolder() const;
    void setContactsFolder( const T__ContactsFolderType& contactsFolder );
    T__ContactsFolderType contactsFolder() const;
    void setSearchFolder( const T__SearchFolderType& searchFolder );
    T__SearchFolderType searchFolder() const;
    void setTasksFolder( const T__TasksFolderType& tasksFolder );
    T__TasksFolderType tasksFolder() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SetFolderFieldType();
    ~T__SetFolderFieldType();

public:
    T__SetFolderFieldType( const T__SetFolderFieldType& );
    T__SetFolderFieldType &operator=( const T__SetFolderFieldType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__DailyRecurrencePatternType : public T__IntervalRecurrencePatternBaseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DailyRecurrencePatternType();
    ~T__DailyRecurrencePatternType();

};

class T__MeetingResponseMessageType : public T__MeetingMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__MeetingResponseMessageType();
    ~T__MeetingResponseMessageType();

};

/**
    Represents an alternate public folder item Id.
 */
class T__AlternatePublicFolderItemIdType : public T__AlternatePublicFolderIdType
{
public:
    void setItemId( const QString& itemId );
    QString itemId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AlternatePublicFolderItemIdType();
    ~T__AlternatePublicFolderItemIdType();

public:
    T__AlternatePublicFolderItemIdType( const T__AlternatePublicFolderItemIdType& );
    T__AlternatePublicFolderItemIdType &operator=( const T__AlternatePublicFolderItemIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__AndType : public T__MultipleOperandBooleanExpressionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AndType();
    ~T__AndType();

};

/**
    Internal abstract base type for reply objects. Should not appear in client
    code
 */
class T__ResponseObjectCoreType : public T__MessageType
{
public:
    void setReferenceItemId( const T__ItemIdType& referenceItemId );
    T__ItemIdType referenceItemId() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__ResponseObjectCoreType();
    virtual ~T__ResponseObjectCoreType();

public:
    T__ResponseObjectCoreType( const T__ResponseObjectCoreType& );
    T__ResponseObjectCoreType &operator=( const T__ResponseObjectCoreType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__IsLessThanOrEqualToType : public T__TwoOperandExpressionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__IsLessThanOrEqualToType();
    ~T__IsLessThanOrEqualToType();

};

class T__AttachmentIdType : public T__RequestAttachmentIdType
{
public:
    void setRootItemId( const QString& rootItemId );
    QString rootItemId() const;
    void setRootItemChangeKey( const QString& rootItemChangeKey );
    QString rootItemChangeKey() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AttachmentIdType();
    ~T__AttachmentIdType();

public:
    T__AttachmentIdType( const T__AttachmentIdType& );
    T__AttachmentIdType &operator=( const T__AttachmentIdType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__WeeklyRegeneratingPatternType : public T__RegeneratingPatternBaseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__WeeklyRegeneratingPatternType();
    ~T__WeeklyRegeneratingPatternType();

};

class T__SetItemFieldType : public T__ItemChangeDescriptionType
{
public:
    void setItem( const T__ItemType& item );
    T__ItemType item() const;
    void setMessage( const T__MessageType& message );
    T__MessageType message() const;
    void setCalendarItem( const T__CalendarItemType& calendarItem );
    T__CalendarItemType calendarItem() const;
    void setContact( const T__ContactItemType& contact );
    T__ContactItemType contact() const;
    void setDistributionList( const T__DistributionListType& distributionList );
    T__DistributionListType distributionList() const;
    void setMeetingMessage( const T__MeetingMessageType& meetingMessage );
    T__MeetingMessageType meetingMessage() const;
    void setMeetingRequest( const T__MeetingRequestMessageType& meetingRequest );
    T__MeetingRequestMessageType meetingRequest() const;
    void setMeetingResponse( const T__MeetingResponseMessageType& meetingResponse );
    T__MeetingResponseMessageType meetingResponse() const;
    void setMeetingCancellation( const T__MeetingCancellationMessageType& meetingCancellation );
    T__MeetingCancellationMessageType meetingCancellation() const;
    void setTask( const T__TaskType& task );
    T__TaskType task() const;
    void setPostItem( const T__PostItemType& postItem );
    T__PostItemType postItem() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SetItemFieldType();
    ~T__SetItemFieldType();

public:
    T__SetItemFieldType( const T__SetItemFieldType& );
    T__SetItemFieldType &operator=( const T__SetItemFieldType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__MovedCopiedEventType : public T__BaseObjectChangedEventType
{
public:
    void setOldFolderId( const T__FolderIdType& oldFolderId );
    T__FolderIdType oldFolderId() const;
    void setOldItemId( const T__ItemIdType& oldItemId );
    T__ItemIdType oldItemId() const;
    void setOldParentFolderId( const T__FolderIdType& oldParentFolderId );
    T__FolderIdType oldParentFolderId() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__MovedCopiedEventType();
    ~T__MovedCopiedEventType();

public:
    T__MovedCopiedEventType( const T__MovedCopiedEventType& );
    T__MovedCopiedEventType &operator=( const T__MovedCopiedEventType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__IsLessThanType : public T__TwoOperandExpressionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__IsLessThanType();
    ~T__IsLessThanType();

};

class T__IsNotEqualToType : public T__TwoOperandExpressionType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__IsNotEqualToType();
    ~T__IsNotEqualToType();

};

class T__MonthlyRegeneratingPatternType : public T__RegeneratingPatternBaseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__MonthlyRegeneratingPatternType();
    ~T__MonthlyRegeneratingPatternType();

};

class TNS__AddDelegateType : public TNS__BaseDelegateType
{
public:
    void setDelegateUsers( const T__ArrayOfDelegateUserType& delegateUsers );
    T__ArrayOfDelegateUserType delegateUsers() const;
    void setDeliverMeetingRequests( const T__DeliverMeetingRequestsType& deliverMeetingRequests );
    T__DeliverMeetingRequestsType deliverMeetingRequests() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__AddDelegateType();
    ~TNS__AddDelegateType();

public:
    TNS__AddDelegateType( const TNS__AddDelegateType& );
    TNS__AddDelegateType &operator=( const TNS__AddDelegateType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CopyFolderType : public TNS__BaseMoveCopyFolderType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CopyFolderType();
    ~TNS__CopyFolderType();

};

class TNS__MoveFolderType : public TNS__BaseMoveCopyFolderType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__MoveFolderType();
    ~TNS__MoveFolderType();

};

class T__YearlyRegeneratingPatternType : public T__RegeneratingPatternBaseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__YearlyRegeneratingPatternType();
    ~T__YearlyRegeneratingPatternType();

};

class T__AbsoluteMonthlyRecurrencePatternType : public T__IntervalRecurrencePatternBaseType
{
public:
    void setDayOfMonth( int dayOfMonth );
    int dayOfMonth() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AbsoluteMonthlyRecurrencePatternType();
    ~T__AbsoluteMonthlyRecurrencePatternType();

public:
    T__AbsoluteMonthlyRecurrencePatternType( const T__AbsoluteMonthlyRecurrencePatternType& );
    T__AbsoluteMonthlyRecurrencePatternType &operator=( const T__AbsoluteMonthlyRecurrencePatternType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__RemoveDelegateType : public TNS__BaseDelegateType
{
public:
    void setUserIds( const T__ArrayOfUserIdType& userIds );
    T__ArrayOfUserIdType userIds() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__RemoveDelegateType();
    ~TNS__RemoveDelegateType();

public:
    TNS__RemoveDelegateType( const TNS__RemoveDelegateType& );
    TNS__RemoveDelegateType &operator=( const TNS__RemoveDelegateType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__UpdateDelegateType : public TNS__BaseDelegateType
{
public:
    void setDelegateUsers( const T__ArrayOfDelegateUserType& delegateUsers );
    T__ArrayOfDelegateUserType delegateUsers() const;
    void setDeliverMeetingRequests( const T__DeliverMeetingRequestsType& deliverMeetingRequests );
    T__DeliverMeetingRequestsType deliverMeetingRequests() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__UpdateDelegateType();
    ~TNS__UpdateDelegateType();

public:
    TNS__UpdateDelegateType( const TNS__UpdateDelegateType& );
    TNS__UpdateDelegateType &operator=( const TNS__UpdateDelegateType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RelativeMonthlyRecurrencePatternType : public T__IntervalRecurrencePatternBaseType
{
public:
    void setDaysOfWeek( const T__DayOfWeekType& daysOfWeek );
    T__DayOfWeekType daysOfWeek() const;
    void setDayOfWeekIndex( const T__DayOfWeekIndexType& dayOfWeekIndex );
    T__DayOfWeekIndexType dayOfWeekIndex() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__RelativeMonthlyRecurrencePatternType();
    ~T__RelativeMonthlyRecurrencePatternType();

public:
    T__RelativeMonthlyRecurrencePatternType( const T__RelativeMonthlyRecurrencePatternType& );
    T__RelativeMonthlyRecurrencePatternType &operator=( const T__RelativeMonthlyRecurrencePatternType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__MeetingRequestMessageType : public T__MeetingMessageType
{
public:
    void setMeetingRequestType( const T__MeetingRequestTypeType& meetingRequestType );
    T__MeetingRequestTypeType meetingRequestType() const;
    void setIntendedFreeBusyStatus( const T__LegacyFreeBusyType& intendedFreeBusyStatus );
    T__LegacyFreeBusyType intendedFreeBusyStatus() const;
    void setStart( const KDDateTime& start );
    KDDateTime start() const;
    void setEnd( const KDDateTime& end );
    KDDateTime end() const;
    void setOriginalStart( const KDDateTime& originalStart );
    KDDateTime originalStart() const;
    void setIsAllDayEvent( bool isAllDayEvent );
    bool isAllDayEvent() const;
    void setLegacyFreeBusyStatus( const T__LegacyFreeBusyType& legacyFreeBusyStatus );
    T__LegacyFreeBusyType legacyFreeBusyStatus() const;
    void setLocation( const QString& location );
    QString location() const;
    void setWhen( const QString& when );
    QString when() const;
    void setIsMeeting( bool isMeeting );
    bool isMeeting() const;
    void setIsCancelled( bool isCancelled );
    bool isCancelled() const;
    void setIsRecurring( bool isRecurring );
    bool isRecurring() const;
    void setMeetingRequestWasSent( bool meetingRequestWasSent );
    bool meetingRequestWasSent() const;
    void setCalendarItemType( const T__CalendarItemTypeType& calendarItemType );
    T__CalendarItemTypeType calendarItemType() const;
    void setMyResponseType( const T__ResponseTypeType& myResponseType );
    T__ResponseTypeType myResponseType() const;
    void setOrganizer( const T__SingleRecipientType& organizer );
    T__SingleRecipientType organizer() const;
    void setRequiredAttendees( const T__NonEmptyArrayOfAttendeesType& requiredAttendees );
    T__NonEmptyArrayOfAttendeesType requiredAttendees() const;
    void setOptionalAttendees( const T__NonEmptyArrayOfAttendeesType& optionalAttendees );
    T__NonEmptyArrayOfAttendeesType optionalAttendees() const;
    void setResources( const T__NonEmptyArrayOfAttendeesType& resources );
    T__NonEmptyArrayOfAttendeesType resources() const;
    void setConflictingMeetingCount( int conflictingMeetingCount );
    int conflictingMeetingCount() const;
    void setAdjacentMeetingCount( int adjacentMeetingCount );
    int adjacentMeetingCount() const;
    void setConflictingMeetings( const T__NonEmptyArrayOfAllItemsType& conflictingMeetings );
    T__NonEmptyArrayOfAllItemsType conflictingMeetings() const;
    void setAdjacentMeetings( const T__NonEmptyArrayOfAllItemsType& adjacentMeetings );
    T__NonEmptyArrayOfAllItemsType adjacentMeetings() const;
    void setDuration( const QString& duration );
    QString duration() const;
    void setTimeZone( const QString& timeZone );
    QString timeZone() const;
    void setAppointmentReplyTime( const KDDateTime& appointmentReplyTime );
    KDDateTime appointmentReplyTime() const;
    void setAppointmentSequenceNumber( int appointmentSequenceNumber );
    int appointmentSequenceNumber() const;
    void setAppointmentState( int appointmentState );
    int appointmentState() const;
    void setRecurrence( const T__RecurrenceType& recurrence );
    T__RecurrenceType recurrence() const;
    void setFirstOccurrence( const T__OccurrenceInfoType& firstOccurrence );
    T__OccurrenceInfoType firstOccurrence() const;
    void setLastOccurrence( const T__OccurrenceInfoType& lastOccurrence );
    T__OccurrenceInfoType lastOccurrence() const;
    void setModifiedOccurrences( const T__NonEmptyArrayOfOccurrenceInfoType& modifiedOccurrences );
    T__NonEmptyArrayOfOccurrenceInfoType modifiedOccurrences() const;
    void setDeletedOccurrences( const T__NonEmptyArrayOfDeletedOccurrencesType& deletedOccurrences );
    T__NonEmptyArrayOfDeletedOccurrencesType deletedOccurrences() const;
    void setMeetingTimeZone( const T__TimeZoneType& meetingTimeZone );
    T__TimeZoneType meetingTimeZone() const;
    void setConferenceType( int conferenceType );
    int conferenceType() const;
    void setAllowNewTimeProposal( bool allowNewTimeProposal );
    bool allowNewTimeProposal() const;
    void setIsOnlineMeeting( bool isOnlineMeeting );
    bool isOnlineMeeting() const;
    void setMeetingWorkspaceUrl( const QString& meetingWorkspaceUrl );
    QString meetingWorkspaceUrl() const;
    void setNetShowUrl( const QString& netShowUrl );
    QString netShowUrl() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__MeetingRequestMessageType();
    ~T__MeetingRequestMessageType();

public:
    T__MeetingRequestMessageType( const T__MeetingRequestMessageType& );
    T__MeetingRequestMessageType &operator=( const T__MeetingRequestMessageType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

/**
    Abstract base type for reply objects
 */
class T__ResponseObjectType : public T__ResponseObjectCoreType
{
public:
    void setObjectName( const QString& objectName );
    QString objectName() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__ResponseObjectType();
    virtual ~T__ResponseObjectType();

public:
    T__ResponseObjectType( const T__ResponseObjectType& );
    T__ResponseObjectType &operator=( const T__ResponseObjectType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class MoveFolderJob : public KDSoapJob
{
    Q_OBJECT

public:
    MoveFolderJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__MoveFolderType& arg0 );
    TNS__MoveFolderType request() const;
    TNS__MoveFolderResponseType moveFolderResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__MoveFolderType mRequest;
    TNS__MoveFolderResponseType mResultMoveFolderResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class CopyFolderJob : public KDSoapJob
{
    Q_OBJECT

public:
    CopyFolderJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__CopyFolderType& arg0 );
    TNS__CopyFolderType request() const;
    TNS__CopyFolderResponseType copyFolderResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__CopyFolderType mRequest;
    TNS__CopyFolderResponseType mResultCopyFolderResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class GetDelegateJob : public KDSoapJob
{
    Q_OBJECT

public:
    GetDelegateJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__GetDelegateType& arg0 );
    TNS__GetDelegateType request() const;
    TNS__GetDelegateResponseMessageType getDelegateResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__GetDelegateType mRequest;
    TNS__GetDelegateResponseMessageType mResultGetDelegateResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class AddDelegateJob : public KDSoapJob
{
    Q_OBJECT

public:
    AddDelegateJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__AddDelegateType& arg0 );
    TNS__AddDelegateType request() const;
    TNS__AddDelegateResponseMessageType addDelegateResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__AddDelegateType mRequest;
    TNS__AddDelegateResponseMessageType mResultAddDelegateResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class RemoveDelegateJob : public KDSoapJob
{
    Q_OBJECT

public:
    RemoveDelegateJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__RemoveDelegateType& arg0 );
    TNS__RemoveDelegateType request() const;
    TNS__RemoveDelegateResponseMessageType removeDelegateResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__RemoveDelegateType mRequest;
    TNS__RemoveDelegateResponseMessageType mResultRemoveDelegateResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class UpdateDelegateJob : public KDSoapJob
{
    Q_OBJECT

public:
    UpdateDelegateJob( ExchangeServices* service, QObject* parent = 0 );
    void setRequest( const TNS__UpdateDelegateType& arg0 );
    TNS__UpdateDelegateType request() const;
    TNS__UpdateDelegateResponseMessageType updateDelegateResult() const;
    T__ServerVersionInfo serverVersion() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    ExchangeServices *mService;
    TNS__UpdateDelegateType mRequest;
    TNS__UpdateDelegateResponseMessageType mResultUpdateDelegateResult;
    T__ServerVersionInfo mResultHeaderServerVersion;
};

class T__MeetingCancellationMessageType : public T__MeetingMessageType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__MeetingCancellationMessageType();
    ~T__MeetingCancellationMessageType();

};

class T__ReferenceItemResponseType : public T__ResponseObjectType
{
public:
    void setReferenceItemId( const T__ItemIdType& referenceItemId );
    T__ItemIdType referenceItemId() const;
    void setObjectName( const QString& objectName );
    QString objectName() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__ReferenceItemResponseType();
    virtual ~T__ReferenceItemResponseType();

public:
    T__ReferenceItemResponseType( const T__ReferenceItemResponseType& );
    T__ReferenceItemResponseType &operator=( const T__ReferenceItemResponseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SmartResponseBaseType : public T__ResponseObjectType
{
public:
    void setSubject( const QString& subject );
    QString subject() const;
    void setBody( const T__BodyType& body );
    T__BodyType body() const;
    void setToRecipients( const T__ArrayOfRecipientsType& toRecipients );
    T__ArrayOfRecipientsType toRecipients() const;
    void setCcRecipients( const T__ArrayOfRecipientsType& ccRecipients );
    T__ArrayOfRecipientsType ccRecipients() const;
    void setBccRecipients( const T__ArrayOfRecipientsType& bccRecipients );
    T__ArrayOfRecipientsType bccRecipients() const;
    void setIsReadReceiptRequested( bool isReadReceiptRequested );
    bool isReadReceiptRequested() const;
    void setIsDeliveryReceiptRequested( bool isDeliveryReceiptRequested );
    bool isDeliveryReceiptRequested() const;
    void setFrom( const T__SingleRecipientType& from );
    T__SingleRecipientType from() const;
    void setReferenceItemId( const T__ItemIdType& referenceItemId );
    T__ItemIdType referenceItemId() const;
    void setObjectName( const QString& objectName );
    QString objectName() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__SmartResponseBaseType();
    virtual ~T__SmartResponseBaseType();

public:
    T__SmartResponseBaseType( const T__SmartResponseBaseType& );
    T__SmartResponseBaseType &operator=( const T__SmartResponseBaseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__PostReplyItemBaseType : public T__ResponseObjectType
{
public:
    void setSubject( const QString& subject );
    QString subject() const;
    void setBody( const T__BodyType& body );
    T__BodyType body() const;
    void setReferenceItemId( const T__ItemIdType& referenceItemId );
    T__ItemIdType referenceItemId() const;
    void setObjectName( const QString& objectName );
    QString objectName() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__PostReplyItemBaseType();
    virtual ~T__PostReplyItemBaseType();

public:
    T__PostReplyItemBaseType( const T__PostReplyItemBaseType& );
    T__PostReplyItemBaseType &operator=( const T__PostReplyItemBaseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SuppressReadReceiptType : public T__ReferenceItemResponseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__SuppressReadReceiptType();
    ~T__SuppressReadReceiptType();

};

class T__WellKnownResponseObjectType : public T__ResponseObjectType
{
public:
    void setItemClass( const T__ItemClassType& itemClass );
    T__ItemClassType itemClass() const;
    void setSensitivity( const T__SensitivityChoicesType& sensitivity );
    T__SensitivityChoicesType sensitivity() const;
    void setBody( const T__BodyType& body );
    T__BodyType body() const;
    void setAttachments( const T__NonEmptyArrayOfAttachmentsType& attachments );
    T__NonEmptyArrayOfAttachmentsType attachments() const;
    void setInternetMessageHeaders( const T__NonEmptyArrayOfInternetHeadersType& internetMessageHeaders );
    T__NonEmptyArrayOfInternetHeadersType internetMessageHeaders() const;
    void setSender( const T__SingleRecipientType& sender );
    T__SingleRecipientType sender() const;
    void setToRecipients( const T__ArrayOfRecipientsType& toRecipients );
    T__ArrayOfRecipientsType toRecipients() const;
    void setCcRecipients( const T__ArrayOfRecipientsType& ccRecipients );
    T__ArrayOfRecipientsType ccRecipients() const;
    void setBccRecipients( const T__ArrayOfRecipientsType& bccRecipients );
    T__ArrayOfRecipientsType bccRecipients() const;
    void setIsReadReceiptRequested( bool isReadReceiptRequested );
    bool isReadReceiptRequested() const;
    void setIsDeliveryReceiptRequested( bool isDeliveryReceiptRequested );
    bool isDeliveryReceiptRequested() const;
    void setFrom( const T__SingleRecipientType& from );
    T__SingleRecipientType from() const;
    void setReferenceItemId( const T__ItemIdType& referenceItemId );
    T__ItemIdType referenceItemId() const;
    void setObjectName( const QString& objectName );
    QString objectName() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__WellKnownResponseObjectType();
    virtual ~T__WellKnownResponseObjectType();

public:
    T__WellKnownResponseObjectType( const T__WellKnownResponseObjectType& );
    T__WellKnownResponseObjectType &operator=( const T__WellKnownResponseObjectType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__SmartResponseType : public T__SmartResponseBaseType
{
public:
    void setNewBodyContent( const T__BodyType& newBodyContent );
    T__BodyType newBodyContent() const;
    virtual KDSoapValue serialize( const QString& valueName ) const;
    virtual void deserialize( const KDSoapValue& mainValue );
    T__SmartResponseType();
    virtual ~T__SmartResponseType();

public:
    T__SmartResponseType( const T__SmartResponseType& );
    T__SmartResponseType &operator=( const T__SmartResponseType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__RemoveItemType : public T__ResponseObjectType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__RemoveItemType();
    ~T__RemoveItemType();

};

class T__PostReplyItemType : public T__PostReplyItemBaseType
{
public:
    void setNewBodyContent( const T__BodyType& newBodyContent );
    T__BodyType newBodyContent() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__PostReplyItemType();
    ~T__PostReplyItemType();

public:
    T__PostReplyItemType( const T__PostReplyItemType& );
    T__PostReplyItemType &operator=( const T__PostReplyItemType& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class T__DeclineItemType : public T__WellKnownResponseObjectType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__DeclineItemType();
    ~T__DeclineItemType();

};

class T__ReplyToItemType : public T__SmartResponseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ReplyToItemType();
    ~T__ReplyToItemType();

};

class T__TentativelyAcceptItemType : public T__WellKnownResponseObjectType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__TentativelyAcceptItemType();
    ~T__TentativelyAcceptItemType();

};

class T__CancelCalendarItemType : public T__SmartResponseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__CancelCalendarItemType();
    ~T__CancelCalendarItemType();

};

class T__ForwardItemType : public T__SmartResponseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ForwardItemType();
    ~T__ForwardItemType();

};

class T__ReplyAllToItemType : public T__SmartResponseType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__ReplyAllToItemType();
    ~T__ReplyAllToItemType();

};

class T__AcceptItemType : public T__WellKnownResponseObjectType
{
public:
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    T__AcceptItemType();
    ~T__AcceptItemType();

};

class ExchangeServices : public QObject
{
    Q_OBJECT

public:
    ExchangeServices( QObject* parent = 0 );
    ~ExchangeServices();
    /**
        Asks Qt to ignore ssl errors in https requests. Use this for testing
        only!
     */
    void ignoreSslErrors();
    /**
        Overwrite the end point defined in the .wsdl file, with another
        http/https URL.
     */
    void setEndPoint( const QString& endPoint );
    /**
        Overwrite the soap version defined in the .wsdl file, with another
        version.
        version can be KDSoapClientInterface::SOAP1_1 or
        KDSoapClientInterface::SOAP1_2
     */
    void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
    /**
        Return the error from the last blocking call.
        Empty if no error.
     */
    QString lastError() const;
    /**
        Returns the underlying KDSoapClientInterface instance, which allows to
        access setCookieJar, lastResponseHeaders, etc.
     */
    const KDSoapClientInterface *clientInterface() const;
    KDSoapClientInterface *clientInterface();
    /**
        Blocking call to ResolveNames.
        Not recommended in a GUI thread.
     */
    TNS__ResolveNamesResponseType resolveNames( const TNS__ResolveNamesType& request );
    /**
        Asynchronous call to ResolveNames.
        Remember to connect to resolveNamesDone and resolveNamesError.
     */
    void asyncResolveNames( const TNS__ResolveNamesType& request );
    /**
        Blocking call to ExpandDL.
        Not recommended in a GUI thread.
     */
    TNS__ExpandDLResponseType expandDL( const TNS__ExpandDLType& request );
    /**
        Asynchronous call to ExpandDL.
        Remember to connect to expandDLDone and expandDLError.
     */
    void asyncExpandDL( const TNS__ExpandDLType& request );
    /**
        Blocking call to FindFolder.
        Not recommended in a GUI thread.
     */
    TNS__FindFolderResponseType findFolder( const TNS__FindFolderType& request );
    /**
        Asynchronous call to FindFolder.
        Remember to connect to findFolderDone and findFolderError.
     */
    void asyncFindFolder( const TNS__FindFolderType& request );
    /**
        Blocking call to FindItem.
        Not recommended in a GUI thread.
     */
    TNS__FindItemResponseType findItem( const TNS__FindItemType& request );
    /**
        Asynchronous call to FindItem.
        Remember to connect to findItemDone and findItemError.
     */
    void asyncFindItem( const TNS__FindItemType& request );
    /**
        Blocking call to GetFolder.
        Not recommended in a GUI thread.
     */
    TNS__GetFolderResponseType getFolder( const TNS__GetFolderType& request );
    /**
        Asynchronous call to GetFolder.
        Remember to connect to getFolderDone and getFolderError.
     */
    void asyncGetFolder( const TNS__GetFolderType& request );
    /**
        Blocking call to ConvertId.
        Not recommended in a GUI thread.
     */
    TNS__ConvertIdResponseType convertId( const TNS__ConvertIdType& request );
    /**
        Asynchronous call to ConvertId.
        Remember to connect to convertIdDone and convertIdError.
     */
    void asyncConvertId( const TNS__ConvertIdType& request );
    /**
        Blocking call to CreateFolder.
        Not recommended in a GUI thread.
     */
    TNS__CreateFolderResponseType createFolder( const TNS__CreateFolderType& request );
    /**
        Asynchronous call to CreateFolder.
        Remember to connect to createFolderDone and createFolderError.
     */
    void asyncCreateFolder( const TNS__CreateFolderType& request );
    /**
        Blocking call to DeleteFolder.
        Not recommended in a GUI thread.
     */
    TNS__DeleteFolderResponseType deleteFolder( const TNS__DeleteFolderType& request );
    /**
        Asynchronous call to DeleteFolder.
        Remember to connect to deleteFolderDone and deleteFolderError.
     */
    void asyncDeleteFolder( const TNS__DeleteFolderType& request );
    /**
        Blocking call to UpdateFolder.
        Not recommended in a GUI thread.
     */
    TNS__UpdateFolderResponseType updateFolder( const TNS__UpdateFolderType& request );
    /**
        Asynchronous call to UpdateFolder.
        Remember to connect to updateFolderDone and updateFolderError.
     */
    void asyncUpdateFolder( const TNS__UpdateFolderType& request );
    /**
        Blocking call to MoveFolder.
        Not recommended in a GUI thread.
     */
    TNS__MoveFolderResponseType moveFolder( const TNS__MoveFolderType& request );
    /**
        Asynchronous call to MoveFolder.
        Remember to connect to moveFolderDone and moveFolderError.
     */
    void asyncMoveFolder( const TNS__MoveFolderType& request );
    /**
        Blocking call to CopyFolder.
        Not recommended in a GUI thread.
     */
    TNS__CopyFolderResponseType copyFolder( const TNS__CopyFolderType& request );
    /**
        Asynchronous call to CopyFolder.
        Remember to connect to copyFolderDone and copyFolderError.
     */
    void asyncCopyFolder( const TNS__CopyFolderType& request );
    /**
        Blocking call to Subscribe.
        Not recommended in a GUI thread.
     */
    TNS__SubscribeResponseType subscribe( const TNS__SubscribeType& request );
    /**
        Asynchronous call to Subscribe.
        Remember to connect to subscribeDone and subscribeError.
     */
    void asyncSubscribe( const TNS__SubscribeType& request );
    /**
        Blocking call to Unsubscribe.
        Not recommended in a GUI thread.
     */
    TNS__UnsubscribeResponseType unsubscribe( const TNS__UnsubscribeType& request );
    /**
        Asynchronous call to Unsubscribe.
        Remember to connect to unsubscribeDone and unsubscribeError.
     */
    void asyncUnsubscribe( const TNS__UnsubscribeType& request );
    /**
        Blocking call to GetEvents.
        Not recommended in a GUI thread.
     */
    TNS__GetEventsResponseType getEvents( const TNS__GetEventsType& request );
    /**
        Asynchronous call to GetEvents.
        Remember to connect to getEventsDone and getEventsError.
     */
    void asyncGetEvents( const TNS__GetEventsType& request );
    /**
        Blocking call to SyncFolderHierarchy.
        Not recommended in a GUI thread.
     */
    TNS__SyncFolderHierarchyResponseType syncFolderHierarchy( const TNS__SyncFolderHierarchyType& request );
    /**
        Asynchronous call to SyncFolderHierarchy.
        Remember to connect to syncFolderHierarchyDone and
        syncFolderHierarchyError.
     */
    void asyncSyncFolderHierarchy( const TNS__SyncFolderHierarchyType& request );
    /**
        Blocking call to SyncFolderItems.
        Not recommended in a GUI thread.
     */
    TNS__SyncFolderItemsResponseType syncFolderItems( const TNS__SyncFolderItemsType& request );
    /**
        Asynchronous call to SyncFolderItems.
        Remember to connect to syncFolderItemsDone and syncFolderItemsError.
     */
    void asyncSyncFolderItems( const TNS__SyncFolderItemsType& request );
    /**
        Blocking call to CreateManagedFolder.
        Not recommended in a GUI thread.
     */
    TNS__CreateManagedFolderResponseType createManagedFolder( const TNS__CreateManagedFolderRequestType& request );
    /**
        Asynchronous call to CreateManagedFolder.
        Remember to connect to createManagedFolderDone and
        createManagedFolderError.
     */
    void asyncCreateManagedFolder( const TNS__CreateManagedFolderRequestType& request );
    /**
        Blocking call to GetItem.
        Not recommended in a GUI thread.
     */
    TNS__GetItemResponseType getItem( const TNS__GetItemType& request );
    /**
        Asynchronous call to GetItem.
        Remember to connect to getItemDone and getItemError.
     */
    void asyncGetItem( const TNS__GetItemType& request );
    /**
        Blocking call to CreateItem.
        Not recommended in a GUI thread.
     */
    TNS__CreateItemResponseType createItem( const TNS__CreateItemType& request );
    /**
        Asynchronous call to CreateItem.
        Remember to connect to createItemDone and createItemError.
     */
    void asyncCreateItem( const TNS__CreateItemType& request );
    /**
        Blocking call to DeleteItem.
        Not recommended in a GUI thread.
     */
    TNS__DeleteItemResponseType deleteItem( const TNS__DeleteItemType& request );
    /**
        Asynchronous call to DeleteItem.
        Remember to connect to deleteItemDone and deleteItemError.
     */
    void asyncDeleteItem( const TNS__DeleteItemType& request );
    /**
        Blocking call to UpdateItem.
        Not recommended in a GUI thread.
     */
    TNS__UpdateItemResponseType updateItem( const TNS__UpdateItemType& request );
    /**
        Asynchronous call to UpdateItem.
        Remember to connect to updateItemDone and updateItemError.
     */
    void asyncUpdateItem( const TNS__UpdateItemType& request );
    /**
        Blocking call to SendItem.
        Not recommended in a GUI thread.
     */
    TNS__SendItemResponseType sendItem( const TNS__SendItemType& request );
    /**
        Asynchronous call to SendItem.
        Remember to connect to sendItemDone and sendItemError.
     */
    void asyncSendItem( const TNS__SendItemType& request );
    /**
        Blocking call to MoveItem.
        Not recommended in a GUI thread.
     */
    TNS__MoveItemResponseType moveItem( const TNS__MoveItemType& request );
    /**
        Asynchronous call to MoveItem.
        Remember to connect to moveItemDone and moveItemError.
     */
    void asyncMoveItem( const TNS__MoveItemType& request );
    /**
        Blocking call to CopyItem.
        Not recommended in a GUI thread.
     */
    TNS__CopyItemResponseType copyItem( const TNS__CopyItemType& request );
    /**
        Asynchronous call to CopyItem.
        Remember to connect to copyItemDone and copyItemError.
     */
    void asyncCopyItem( const TNS__CopyItemType& request );
    /**
        Blocking call to CreateAttachment.
        Not recommended in a GUI thread.
     */
    TNS__CreateAttachmentResponseType createAttachment( const TNS__CreateAttachmentType& request );
    /**
        Asynchronous call to CreateAttachment.
        Remember to connect to createAttachmentDone and createAttachmentError.
     */
    void asyncCreateAttachment( const TNS__CreateAttachmentType& request );
    /**
        Blocking call to DeleteAttachment.
        Not recommended in a GUI thread.
     */
    TNS__DeleteAttachmentResponseType deleteAttachment( const TNS__DeleteAttachmentType& request );
    /**
        Asynchronous call to DeleteAttachment.
        Remember to connect to deleteAttachmentDone and deleteAttachmentError.
     */
    void asyncDeleteAttachment( const TNS__DeleteAttachmentType& request );
    /**
        Blocking call to GetAttachment.
        Not recommended in a GUI thread.
     */
    TNS__GetAttachmentResponseType getAttachment( const TNS__GetAttachmentType& request );
    /**
        Asynchronous call to GetAttachment.
        Remember to connect to getAttachmentDone and getAttachmentError.
     */
    void asyncGetAttachment( const TNS__GetAttachmentType& request );
    /**
        Blocking call to GetDelegate.
        Not recommended in a GUI thread.
     */
    TNS__GetDelegateResponseMessageType getDelegate( const TNS__GetDelegateType& request );
    /**
        Asynchronous call to GetDelegate.
        Remember to connect to getDelegateDone and getDelegateError.
     */
    void asyncGetDelegate( const TNS__GetDelegateType& request );
    /**
        Blocking call to AddDelegate.
        Not recommended in a GUI thread.
     */
    TNS__AddDelegateResponseMessageType addDelegate( const TNS__AddDelegateType& request );
    /**
        Asynchronous call to AddDelegate.
        Remember to connect to addDelegateDone and addDelegateError.
     */
    void asyncAddDelegate( const TNS__AddDelegateType& request );
    /**
        Blocking call to RemoveDelegate.
        Not recommended in a GUI thread.
     */
    TNS__RemoveDelegateResponseMessageType removeDelegate( const TNS__RemoveDelegateType& request );
    /**
        Asynchronous call to RemoveDelegate.
        Remember to connect to removeDelegateDone and removeDelegateError.
     */
    void asyncRemoveDelegate( const TNS__RemoveDelegateType& request );
    /**
        Blocking call to UpdateDelegate.
        Not recommended in a GUI thread.
     */
    TNS__UpdateDelegateResponseMessageType updateDelegate( const TNS__UpdateDelegateType& request );
    /**
        Asynchronous call to UpdateDelegate.
        Remember to connect to updateDelegateDone and updateDelegateError.
     */
    void asyncUpdateDelegate( const TNS__UpdateDelegateType& request );
    /**
        Blocking call to GetUserAvailability.
        Not recommended in a GUI thread.
     */
    TNS__GetUserAvailabilityResponseType getUserAvailability( const TNS__GetUserAvailabilityRequestType& getUserAvailabilityRequest );
    /**
        Asynchronous call to GetUserAvailability.
        Remember to connect to getUserAvailabilityDone and
        getUserAvailabilityError.
     */
    void asyncGetUserAvailability( const TNS__GetUserAvailabilityRequestType& getUserAvailabilityRequest );
    /**
        Blocking call to GetUserOofSettings.
        Not recommended in a GUI thread.
     */
    TNS__GetUserOofSettingsResponse getUserOofSettings( const TNS__GetUserOofSettingsRequest& getUserOofSettingsRequest );
    /**
        Asynchronous call to GetUserOofSettings.
        Remember to connect to getUserOofSettingsDone and
        getUserOofSettingsError.
     */
    void asyncGetUserOofSettings( const TNS__GetUserOofSettingsRequest& getUserOofSettingsRequest );
    /**
        Blocking call to SetUserOofSettings.
        Not recommended in a GUI thread.
     */
    TNS__SetUserOofSettingsResponse setUserOofSettings( const TNS__SetUserOofSettingsRequest& setUserOofSettingsRequest );
    /**
        Asynchronous call to SetUserOofSettings.
        Remember to connect to setUserOofSettingsDone and
        setUserOofSettingsError.
     */
    void asyncSetUserOofSettings( const TNS__SetUserOofSettingsRequest& setUserOofSettingsRequest );
    /**
        Sets the header 'Impersonation', for all subsequent method calls.
     */
    void setImpersonationHeader( const T__ExchangeImpersonationType& impersonation );
    /**
        Removes the header 'Impersonation', for all subsequent method calls.
     */
    void clearImpersonationHeader();
    /**
        Sets the header 'S2SAuth', for all subsequent method calls.
     */
    void setS2SAuthHeader( const T__SerializedSecurityContextType& s2SAuth );
    /**
        Removes the header 'S2SAuth', for all subsequent method calls.
     */
    void clearS2SAuthHeader();
    /**
        Sets the header 'MailboxCulture', for all subsequent method calls.
     */
    void setMailboxCultureHeader( const QString& mailboxCulture );
    /**
        Removes the header 'MailboxCulture', for all subsequent method calls.
     */
    void clearMailboxCultureHeader();
    /**
        Sets the header 'RequestVersion', for all subsequent method calls.
     */
    void setRequestVersionHeader( const T__RequestServerVersion& requestVersion );
    /**
        Removes the header 'RequestVersion', for all subsequent method calls.
     */
    void clearRequestVersionHeader();
    /**
        Sets the header 'TimeZoneContext', for all subsequent method calls.
     */
    void setTimeZoneContextHeader( const T__TimeZoneContextType& timeZoneContext );
    /**
        Removes the header 'TimeZoneContext', for all subsequent method calls.
     */
    void clearTimeZoneContextHeader();
    /**
        Sets the header 'SerializedSecurityContext', for all subsequent method
        calls.
     */
    void setSerializedSecurityContextHeader( const T__SerializedSecurityContextType& serializedSecurityContext );
    /**
        Removes the header 'SerializedSecurityContext', for all subsequent
        method calls.
     */
    void clearSerializedSecurityContextHeader();
    /**
        Sets the header 'ProxyRequestTypeHeader', for all subsequent method
        calls.
     */
    void setProxyRequestTypeHeader( const T__AvailabilityProxyRequestType& proxyRequestTypeHeader );
    /**
        Removes the header 'ProxyRequestTypeHeader', for all subsequent method
        calls.
     */
    void clearProxyRequestTypeHeader();

Q_SIGNALS:
    /**
        This signal is emitted whenever a SOAP call failed, for a central
        processing of all SOAP errors.
        method is the name of the method (or operation) that returned the
        fault, for instance "addContact".
     */
    void soapError( const QString& method, const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to resolveNames() succeeded.
     */
    void resolveNamesDone( const TNS__ResolveNamesResponseType& resolveNamesResult );
    /**
        This signal is emitted whenever the call to resolveNames() failed.
     */
    void resolveNamesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to expandDL() succeeded.
     */
    void expandDLDone( const TNS__ExpandDLResponseType& expandDLResult );
    /**
        This signal is emitted whenever the call to expandDL() failed.
     */
    void expandDLError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to findFolder() succeeded.
     */
    void findFolderDone( const TNS__FindFolderResponseType& findFolderResult );
    /**
        This signal is emitted whenever the call to findFolder() failed.
     */
    void findFolderError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to findItem() succeeded.
     */
    void findItemDone( const TNS__FindItemResponseType& findItemResult );
    /**
        This signal is emitted whenever the call to findItem() failed.
     */
    void findItemError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to getFolder() succeeded.
     */
    void getFolderDone( const TNS__GetFolderResponseType& getFolderResult );
    /**
        This signal is emitted whenever the call to getFolder() failed.
     */
    void getFolderError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to convertId() succeeded.
     */
    void convertIdDone( const TNS__ConvertIdResponseType& convertIdResult );
    /**
        This signal is emitted whenever the call to convertId() failed.
     */
    void convertIdError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to createFolder() succeeded.
     */
    void createFolderDone( const TNS__CreateFolderResponseType& createFolderResult );
    /**
        This signal is emitted whenever the call to createFolder() failed.
     */
    void createFolderError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to deleteFolder() succeeded.
     */
    void deleteFolderDone( const TNS__DeleteFolderResponseType& deleteFolderResult );
    /**
        This signal is emitted whenever the call to deleteFolder() failed.
     */
    void deleteFolderError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to updateFolder() succeeded.
     */
    void updateFolderDone( const TNS__UpdateFolderResponseType& updateFolderResult );
    /**
        This signal is emitted whenever the call to updateFolder() failed.
     */
    void updateFolderError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to moveFolder() succeeded.
     */
    void moveFolderDone( const TNS__MoveFolderResponseType& moveFolderResult );
    /**
        This signal is emitted whenever the call to moveFolder() failed.
     */
    void moveFolderError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to copyFolder() succeeded.
     */
    void copyFolderDone( const TNS__CopyFolderResponseType& copyFolderResult );
    /**
        This signal is emitted whenever the call to copyFolder() failed.
     */
    void copyFolderError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to subscribe() succeeded.
     */
    void subscribeDone( const TNS__SubscribeResponseType& subscribeResult );
    /**
        This signal is emitted whenever the call to subscribe() failed.
     */
    void subscribeError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to unsubscribe() succeeded.
     */
    void unsubscribeDone( const TNS__UnsubscribeResponseType& unsubscribeResult );
    /**
        This signal is emitted whenever the call to unsubscribe() failed.
     */
    void unsubscribeError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to getEvents() succeeded.
     */
    void getEventsDone( const TNS__GetEventsResponseType& getEventsResult );
    /**
        This signal is emitted whenever the call to getEvents() failed.
     */
    void getEventsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to syncFolderHierarchy()
        succeeded.
     */
    void syncFolderHierarchyDone( const TNS__SyncFolderHierarchyResponseType& syncFolderHierarchyResult );
    /**
        This signal is emitted whenever the call to syncFolderHierarchy()
        failed.
     */
    void syncFolderHierarchyError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to syncFolderItems()
        succeeded.
     */
    void syncFolderItemsDone( const TNS__SyncFolderItemsResponseType& syncFolderItemsResult );
    /**
        This signal is emitted whenever the call to syncFolderItems() failed.
     */
    void syncFolderItemsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to createManagedFolder()
        succeeded.
     */
    void createManagedFolderDone( const TNS__CreateManagedFolderResponseType& createManagedFolderResult );
    /**
        This signal is emitted whenever the call to createManagedFolder()
        failed.
     */
    void createManagedFolderError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to getItem() succeeded.
     */
    void getItemDone( const TNS__GetItemResponseType& getItemResult );
    /**
        This signal is emitted whenever the call to getItem() failed.
     */
    void getItemError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to createItem() succeeded.
     */
    void createItemDone( const TNS__CreateItemResponseType& createItemResult );
    /**
        This signal is emitted whenever the call to createItem() failed.
     */
    void createItemError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to deleteItem() succeeded.
     */
    void deleteItemDone( const TNS__DeleteItemResponseType& deleteItemResult );
    /**
        This signal is emitted whenever the call to deleteItem() failed.
     */
    void deleteItemError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to updateItem() succeeded.
     */
    void updateItemDone( const TNS__UpdateItemResponseType& updateItemResult );
    /**
        This signal is emitted whenever the call to updateItem() failed.
     */
    void updateItemError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to sendItem() succeeded.
     */
    void sendItemDone( const TNS__SendItemResponseType& sendItemResult );
    /**
        This signal is emitted whenever the call to sendItem() failed.
     */
    void sendItemError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to moveItem() succeeded.
     */
    void moveItemDone( const TNS__MoveItemResponseType& moveItemResult );
    /**
        This signal is emitted whenever the call to moveItem() failed.
     */
    void moveItemError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to copyItem() succeeded.
     */
    void copyItemDone( const TNS__CopyItemResponseType& copyItemResult );
    /**
        This signal is emitted whenever the call to copyItem() failed.
     */
    void copyItemError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to createAttachment()
        succeeded.
     */
    void createAttachmentDone( const TNS__CreateAttachmentResponseType& createAttachmentResult );
    /**
        This signal is emitted whenever the call to createAttachment() failed.
     */
    void createAttachmentError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to deleteAttachment()
        succeeded.
     */
    void deleteAttachmentDone( const TNS__DeleteAttachmentResponseType& deleteAttachmentResult );
    /**
        This signal is emitted whenever the call to deleteAttachment() failed.
     */
    void deleteAttachmentError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to getAttachment() succeeded.
     */
    void getAttachmentDone( const TNS__GetAttachmentResponseType& getAttachmentResult );
    /**
        This signal is emitted whenever the call to getAttachment() failed.
     */
    void getAttachmentError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to getDelegate() succeeded.
     */
    void getDelegateDone( const TNS__GetDelegateResponseMessageType& getDelegateResult );
    /**
        This signal is emitted whenever the call to getDelegate() failed.
     */
    void getDelegateError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to addDelegate() succeeded.
     */
    void addDelegateDone( const TNS__AddDelegateResponseMessageType& addDelegateResult );
    /**
        This signal is emitted whenever the call to addDelegate() failed.
     */
    void addDelegateError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to removeDelegate() succeeded.
     */
    void removeDelegateDone( const TNS__RemoveDelegateResponseMessageType& removeDelegateResult );
    /**
        This signal is emitted whenever the call to removeDelegate() failed.
     */
    void removeDelegateError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to updateDelegate() succeeded.
     */
    void updateDelegateDone( const TNS__UpdateDelegateResponseMessageType& updateDelegateResult );
    /**
        This signal is emitted whenever the call to updateDelegate() failed.
     */
    void updateDelegateError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to getUserAvailability()
        succeeded.
     */
    void getUserAvailabilityDone( const TNS__GetUserAvailabilityResponseType& getUserAvailabilityResult );
    /**
        This signal is emitted whenever the call to getUserAvailability()
        failed.
     */
    void getUserAvailabilityError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to getUserOofSettings()
        succeeded.
     */
    void getUserOofSettingsDone( const TNS__GetUserOofSettingsResponse& getUserOofSettingsResult );
    /**
        This signal is emitted whenever the call to getUserOofSettings()
        failed.
     */
    void getUserOofSettingsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to setUserOofSettings()
        succeeded.
     */
    void setUserOofSettingsDone( const TNS__SetUserOofSettingsResponse& setUserOofSettingsResult );
    /**
        This signal is emitted whenever the call to setUserOofSettings()
        failed.
     */
    void setUserOofSettingsError( const KDSoapMessage& fault );

private Q_SLOTS:
    void _kd_slotResolveNamesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotExpandDLFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotFindFolderFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotFindItemFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotGetFolderFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotConvertIdFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCreateFolderFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotDeleteFolderFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotUpdateFolderFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMoveFolderFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCopyFolderFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotSubscribeFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotUnsubscribeFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotGetEventsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotSyncFolderHierarchyFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotSyncFolderItemsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCreateManagedFolderFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotGetItemFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCreateItemFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotDeleteItemFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotUpdateItemFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotSendItemFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMoveItemFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCopyItemFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotCreateAttachmentFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotDeleteAttachmentFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotGetAttachmentFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotGetDelegateFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotAddDelegateFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotRemoveDelegateFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotUpdateDelegateFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotGetUserAvailabilityFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotGetUserOofSettingsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotSetUserOofSettingsFinished( KDSoapPendingCallWatcher* watcher );

private:
    class PrivateDPtr;
    PrivateDPtr *d_ptr;
};

#endif
